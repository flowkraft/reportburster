package com.sourcekraft.documentburster.common.db.schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Represents metadata about a database table or view.
 * This information forms the primary structure that LLMs use to understand the database.
 */
public class TableSchema {
    /**
     * The name of the table or view.
     * Essential for targeting the correct object in SQL queries.
     */
    public String tableName;

    /**
     * The type of the object, typically "TABLE" or "VIEW".
     * Helps LLMs distinguish between base data tables and potentially pre-joined or filtered views.
     * Knowing view definitions (if fetched) allows LLMs to use these abstractions.
     */
    public String tableType;

    /**
     * A description or comment associated with the table/view, fetched directly
     * from the database metadata (REMARKS column in DatabaseMetaData.getTables).
     * Provides database-native context. Can be null or empty.
     */
    public String remarks;

    /**
     * Supplementary textual notes about the table's or view's purpose,
     * potentially generated by an LLM or manually added. Provides semantic
     * context beyond just the name, columns, and database remarks.
     */
    public String notes; // Renamed from description

    /**
     * A list of columns belonging to this table or view.
     * See {@link ColumnSchema} for details on column metadata importance.
     */
    public List<ColumnSchema> columns = new ArrayList<>();

    /**
     * A list of column names that constitute the primary key for this table.
     * Crucial for LLMs to identify unique records and formulate correct JOIN conditions.
     * Usually empty for views.
     */
    public List<String> primaryKeyColumns = new ArrayList<>();

    /**
     * A list of foreign key constraints defined on this table, referencing primary keys in other tables.
     * **Critically important for LLMs:** This defines the relationships between tables,
     * enabling the LLM to generate correct JOIN clauses based on plain English requests
     * (e.g., "show customer orders" requires joining Customers and Orders tables via the FK).
     * Usually empty for views.
     */
    public List<ForeignKeySchema> foreignKeys = new ArrayList<>();

    /**
     * A list of indexes defined on this table.
     * See {@link IndexSchema} for details on index metadata importance.
     * Usually empty for views.
     */
    public List<IndexSchema> indexes = new ArrayList<>();

     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         TableSchema that = (TableSchema) o;
         // Only compare by name for simplicity in lists/sets
         return Objects.equals(tableName, that.tableName);
     }

     @Override
     public int hashCode() {
         return Objects.hash(tableName);
     }

     /**
      * Provides a string representation for debugging, summarizing list sizes.
      */
     @Override
     public String toString() {
        return "TableSchema{" +
               "tableName='" + tableName + '\'' +
               ", tableType='" + tableType + '\'' +
               ", remarks='" + remarks + '\'' + // Added remarks
               ", notes='" + notes + '\'' + // Renamed from description
               // Avoid printing large lists directly in default toString
               ", columns=" + (columns != null ? columns.size() : 0) + " items" +
               ", primaryKeyColumns=" + primaryKeyColumns +
               ", foreignKeys=" + (foreignKeys != null ? foreignKeys.size() : 0) + " items" +
               ", indexes=" + (indexes != null ? indexes.size() : 0) + " items" +
               '}';
     }
}