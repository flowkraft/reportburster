package com.sourcekraft.documentburster.common.db.schema;

import java.util.Objects;

/**
 * Represents metadata about a specific column within a database table or view.
 * Detailed column information is crucial for LLMs to generate accurate SQL queries.
 */
public class ColumnSchema {
    /**
     * The name of the column.
     * Essential for referencing the correct field in SQL.
     */
    public String columnName;

    /**
     * The SQL type code from {@link java.sql.Types}.
     * Helps LLMs understand the general category of data (numeric, string, date, etc.)
     * and use appropriate SQL functions and comparisons.
     */
    public int dataType;

    /**
     * The database-specific type name (e.g., "VARCHAR2", "INT", "DATETIME").
     * Provides more precise type information than {@code dataType},
     * useful for vendor-specific SQL syntax or functions.
     */
    public String typeName;

    /**
     * The size of the column.
     * For character types, it's the maximum length.
     * For numeric types, it can be the precision.
     * Helps LLMs understand potential data truncation or size limits.
     */
    public int columnSize;

    /**
     * The number of fractional digits (scale) for DECIMAL or NUMERIC types.
     * Null for non-numeric types.
     * Important for LLMs dealing with precise calculations or formatting.
     */
    public Integer decimalDigits;

    /**
     * The precision (total number of digits) for numeric types, or radix for approximate numeric types.
     * Null for non-numeric types.
     * Complements {@code columnSize} and {@code decimalDigits} for numeric accuracy.
     */
    public Integer numPrecRadix;

    /**
     * Indicates whether the column can accept NULL values.
     * Crucial for LLMs to generate correct INSERT statements and handle NULL checks (IS NULL / IS NOT NULL) in WHERE clauses.
     */
    public boolean isNullable;

    /**
     * A description or comment associated with the column, often provided by the database administrator.
     * **Highly valuable for LLMs:** Helps map plain English terms (e.g., "customer's first name") to the actual column name (e.g., "CUST_FNAME") by providing semantic meaning.
     * Can be null or empty if no remarks are defined.
     */
    public String remarks;

    /**
     * Supplementary textual notes, potentially generated by an LLM or
     * manually added, providing further context, business meaning, or usage
     * guidance beyond the standard database remarks.
     */
    public String notes; // Renamed from description

    /**
     * The default value for the column, represented as a String.
     * Useful for LLMs generating INSERT statements where default values might be omitted,
     * or for understanding expected values if not explicitly provided.
     * Can be null or empty if no default value is defined.
     */
    public String defaultValue;

     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         ColumnSchema that = (ColumnSchema) o;
         // Only compare by name for simplicity in lists/sets
         return Objects.equals(columnName, that.columnName);
     }

     @Override
     public int hashCode() {
         return Objects.hash(columnName);
     }

     /**
      * Provides a string representation for debugging.
      */
     @Override
     public String toString() {
        return "ColumnSchema{" +
               "columnName='" + columnName + '\'' +
               ", typeName='" + typeName + '\'' +
               ", dataType=" + dataType +
               ", columnSize=" + columnSize +
               ", decimalDigits=" + decimalDigits +
               ", numPrecRadix=" + numPrecRadix +
               ", isNullable=" + isNullable +
               ", remarks='" + remarks + '\'' +
               ", notes='" + notes + '\'' + // Renamed from description
               ", defaultValue='" + defaultValue + '\'' +
               '}';
     }
}