{
  "pipes": [],
  "interfaces": [
    {
      "name": "CfgTmplFileInfo",
      "id": "interface-CfgTmplFileInfo-b1c5d3297d08cbcdc8e9ca0cbca8929021cf374a58ff9d939b4ecb3754699b1851c901ca4cbaea5999a740f2bf28054fd23a7c86c107c3db6d6cb8f3ec84f8b3",
      "file": "src/app/providers/settings.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as semver from 'semver';\r\nimport { ApiService } from './api.service';\r\nimport Utilities from '../helpers/utilities';\r\nimport { APP_CONFIG } from '../../environments/environment';\r\nimport { SocketOptions } from '../helpers/websocket-endpoint';\r\nimport { FsService } from './fs.service';\r\nimport { UnixCliService } from './unix-cli.service';\r\n\r\nexport interface ExtConnection {\r\n  fileName: string;\r\n  filePath: string;\r\n  connectionCode: string;\r\n  connectionName: string;\r\n  connectionType: string;\r\n  activeClicked: boolean;\r\n  defaultConnection: boolean;\r\n  usedBy?: string;\r\n  emailserver: {\r\n    host: string;\r\n    port: string;\r\n    userid: string;\r\n    userpassword: string;\r\n    usessl: boolean;\r\n    usetls: boolean;\r\n    fromaddress: string;\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport const newEmailServer = {\r\n  host: 'Email Server Host',\r\n  port: '25',\r\n  userid: 'From Email User ID',\r\n  userpassword: 'From Email Password',\r\n  usessl: false,\r\n  usetls: false,\r\n  fromaddress: 'from@emailaddress.com',\r\n  name: 'From Name',\r\n};\r\n\r\nexport interface TmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  type: string;\r\n  content?: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n}\r\n\r\nexport interface CfgTmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  templateName: string;\r\n  capReportGenerationMailMerge: boolean;\r\n  capReportDistribution: boolean;\r\n  dsInputType: string;\r\n  notes: string;\r\n  visibility: string;\r\n  type: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n  isFallback: boolean;\r\n  activeClicked?: boolean;\r\n  useEmlConn?: boolean;\r\n  emlConnCode?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SettingsService {\r\n  xmlInternalSettings = {\r\n    documentburster: {\r\n      settings: {\r\n        skin: 'skin-blue',\r\n        backendurl: 'http://localhost:9090',\r\n      },\r\n    },\r\n  };\r\n\r\n  PORTABLE_EXECUTABLE_DIR: string;\r\n  RUNNING_IN_E2E: boolean;\r\n  SHOULD_SEND_STATS: boolean;\r\n\r\n  LOGS_FOLDER_PATH: string;\r\n  QUARANTINE_FOLDER_PATH: string;\r\n\r\n  JOBS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_BURST_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_REPORTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_CONNECTIONS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_DEFAULTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_SAMPLES_FOLDER_PATH: string;\r\n  CONFIGURATION_TEMPLATES_FOLDER_PATH: string;\r\n\r\n  INTERNAL_SETTINGS_FILE_PATH: string;\r\n\r\n  UPDATE_JAR_FILE_PATH: string;\r\n\r\n  currentConfigurationTemplatePath: string;\r\n  currentConfigurationTemplateName: string;\r\n\r\n  currentConfigurationTemplate: TmplFileInfo;\r\n\r\n  configurationFiles: Array<CfgTmplFileInfo> = [];\r\n  templateFiles: Array<TmplFileInfo> = [];\r\n\r\n  defaultEmailConnectionFile: ExtConnection;\r\n  connectionFiles: Array<ExtConnection> = [];\r\n\r\n  numberOfUserVariables: number;\r\n\r\n  isWindows: boolean = false;\r\n  isServerVersion: boolean = false;\r\n\r\n  isJServerStarted: boolean = false;\r\n\r\n  product: string = 'DocumentBurster';\r\n\r\n  version: semver.SemVer;\r\n\r\n  connectionsLoading: number = 0;\r\n\r\n  activeWebSocketSubcriptions: SocketOptions[] = [];\r\n\r\n  constructor(\r\n    public apiService: ApiService,\r\n    protected fsService: FsService,\r\n    protected unixCliService: UnixCliService,\r\n  ) {\r\n    let process = undefined;\r\n\r\n    if (typeof window.require === 'function') {\r\n      process = window.require('process');\r\n    }\r\n    if (process) {\r\n      this.PORTABLE_EXECUTABLE_DIR = process.env.PORTABLE_EXECUTABLE_DIR;\r\n\r\n      this.RUNNING_IN_E2E = new Boolean(process.env.RUNNING_IN_E2E).valueOf();\r\n      this.SHOULD_SEND_STATS = new Boolean(\r\n        process.env.SHOULD_SEND_STATS,\r\n      ).valueOf();\r\n    } else {\r\n      console.log(\r\n        `window.require('process') NOT AVAILABLE ==> PORTABLE_EXECUTABLE_DIR could not be read (why Virgil, in a Web App, are you using window.require('process')?! instead of using the Java Server for this stuff!!!!)`,\r\n      );\r\n    }\r\n\r\n    this.LOGS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.logs}`;\r\n    this.QUARANTINE_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.quarantine}`;\r\n\r\n    //console.log(`PORTABLE_EXECUTABLE_DIR = ${this.PORTABLE_EXECUTABLE_DIR}`);\r\n\r\n    //console.log(`LOGS_FOLDER_PATH = ${this.LOGS_FOLDER_PATH}`);\r\n\r\n    this.JOBS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.temp}`;\r\n\r\n    this.CONFIGURATION_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}`;\r\n    this.INTERNAL_SETTINGS_FILE_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_internal/settings.xml`;\r\n\r\n    this.CONFIGURATION_DEFAULTS_FOLDER_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_defaults`;\r\n\r\n    this.CONFIGURATION_BURST_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/burst`;\r\n\r\n    this.CONFIGURATION_REPORTS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/reports`;\r\n\r\n    this.CONFIGURATION_SAMPLES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/samples`;\r\n\r\n    this.CONFIGURATION_CONNECTIONS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/connections`;\r\n\r\n    this.CONFIGURATION_TEMPLATES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/templates`;\r\n  }\r\n\r\n  getDefaultsConfigurationValuesFilePath(): string {\r\n    return `${this.CONFIGURATION_DEFAULTS_FOLDER_PATH}/settings.xml`;\r\n  }\r\n\r\n  async loadDefaultSettingsFileAsync(): Promise<any> {\r\n    const systemInfo = await this.apiService.get('/jobman/system/info');\r\n    this.isWindows = systemInfo.osName.startsWith('Windows');\r\n\r\n    const startServerScripts = await this.unixCliService.findAsync(\r\n      this.PORTABLE_EXECUTABLE_DIR,\r\n      {\r\n        matching: ['startServer.*'],\r\n      },\r\n    );\r\n\r\n    if (startServerScripts && startServerScripts.length > 0) {\r\n      this.isServerVersion = true;\r\n      this.product = 'DocumentBurster Server';\r\n    }\r\n\r\n    let xmlSettings = {\r\n      documentburster: {\r\n        settings: null,\r\n      },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: this.getDefaultsConfigurationValuesFilePath(),\r\n    });\r\n\r\n    this.version = xmlSettings.documentburster.settings.version;\r\n\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveSettingsFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadSettingsFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      settings: any;\r\n    };\r\n  }> {\r\n    let xmlSettings = {\r\n      documentburster: { settings: {} },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: filePath,\r\n    });\r\n\r\n    //console.log(\r\n    //  `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n    //    xmlSettings\r\n    //  )}`\r\n    //);\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveConnectionFileAsync(\r\n    filePath: string,\r\n    xmlConnectionSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-connection?path=${path}`,\r\n      xmlConnectionSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadConnectionFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      connection: any;\r\n    };\r\n  }> {\r\n    let xmlConnectionSettings = {\r\n      documentburster: { connection: {} },\r\n    };\r\n\r\n    xmlConnectionSettings.documentburster = await this.apiService.get(\r\n      '/cfgman/rb/load-connection',\r\n      {\r\n        path: filePath,\r\n      },\r\n    );\r\n\r\n    console.log(\r\n      `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n        xmlConnectionSettings,\r\n      )}`,\r\n    );\r\n    return xmlConnectionSettings;\r\n  }\r\n\r\n  async loadPreferencesFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-internal', {\r\n      path: filePath,\r\n    });\r\n  }\r\n  async savePreferencesFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ): Promise<any> {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-internal?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadAllSettingsFilesAsync({\r\n    forceReload = false,\r\n  }: { forceReload?: boolean } = {}): Promise<Array<CfgTmplFileInfo>> {\r\n    if (\r\n      !forceReload &&\r\n      this.configurationFiles &&\r\n      this.configurationFiles.length > 0\r\n    )\r\n      return this.configurationFiles;\r\n\r\n    //console.log(\r\n    //  `this.CONFIGURATION_BURST_FOLDER_PATH = ${this.CONFIGURATION_BURST_FOLDER_PATH}`\r\n    //);\r\n\r\n    const burstConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_BURST_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `burstConfigFilePaths1 = ${JSON.stringify(burstConfigFilePaths)}`\r\n    //);\r\n\r\n    const reportsConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_REPORTS_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsConfigFilePaths2 = ${JSON.stringify(reportsConfigFilePaths)}`\r\n    //);\r\n\r\n    const samplesConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_SAMPLES_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    // console.log(\r\n    //   `samplesConfigFilePaths3 = ${JSON.stringify(samplesConfigFilePaths)}`\r\n    // );\r\n\r\n    const configFilePaths = burstConfigFilePaths\r\n      .concat(reportsConfigFilePaths)\r\n      .concat(samplesConfigFilePaths);\r\n\r\n    const configurationFiles: Array<CfgTmplFileInfo> = [];\r\n\r\n    for (let filePath of configFilePaths) {\r\n      const configurationFilePath = filePath;\r\n      const configurationFileName = Utilities.basename(configurationFilePath);\r\n\r\n      const isFallbackSettings =\r\n        configurationFilePath.endsWith('burst/settings.xml');\r\n\r\n      const isNotSettings =\r\n        configurationFilePath.endsWith('_defaults/settings.xml') ||\r\n        configurationFilePath.endsWith('preferences/settings.xml');\r\n\r\n      if (isNotSettings) continue;\r\n\r\n      //console.log(\r\n      //  `configurationFilePath4 = ${JSON.stringify(configurationFilePath)}`\r\n      // );\r\n\r\n      const settingsFileContent = await this.unixCliService.catAsync(filePath);\r\n\r\n      let startPos =\r\n        settingsFileContent.indexOf('<template>') + '<template>'.length;\r\n      let endPos = settingsFileContent.indexOf('</template>');\r\n      const settingsTemplateName = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportdistribution>') +\r\n        '<reportdistribution>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportdistribution>');\r\n      const boolReportDistribution = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportgenerationmailmerge>') +\r\n        '<reportgenerationmailmerge>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportgenerationmailmerge>');\r\n      const boolReportGenerationMailMerge = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<visibility>') + '<visibility>'.length;\r\n      endPos = settingsFileContent.indexOf('</visibility>');\r\n      const strVisibility = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos = settingsFileContent.indexOf('<useconn>') + '<useconn>'.length;\r\n      endPos = settingsFileContent.indexOf('</useconn>');\r\n      const boolUseEmailConnection = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<conncode>') + '<conncode>'.length;\r\n      endPos = settingsFileContent.indexOf('</conncode>');\r\n      const strEmailConnectionCode = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      let templateRelativeFilePath = `./config/burst/${configurationFileName}`;\r\n      let typeOfConfiguration = 'config-burst-legacy';\r\n\r\n      const folderName = Utilities.basename(\r\n        Utilities.dirname(configurationFilePath),\r\n      );\r\n\r\n      let dsInputType = '';\r\n\r\n      if (configurationFilePath.includes(`config/reports/${folderName}`)) {\r\n        typeOfConfiguration = 'config-reports';\r\n        templateRelativeFilePath = `./config/reports/${folderName}/settings.xml`;\r\n\r\n        if (boolReportGenerationMailMerge) {\r\n          const reportingXmlFilePath = `${Utilities.dirname(\r\n            configurationFilePath,\r\n          )}/reporting.xml`;\r\n\r\n          const reportingXmlFileContent =\r\n            await this.unixCliService.catAsync(reportingXmlFilePath);\r\n          startPos =\r\n            reportingXmlFileContent.indexOf('<type>') + '<type>'.length;\r\n          endPos = reportingXmlFileContent.indexOf('</type>');\r\n          dsInputType = reportingXmlFileContent\r\n            .substring(startPos, endPos)\r\n            .trim();\r\n        }\r\n      } else if (\r\n        configurationFilePath.includes(`config/samples/${folderName}`)\r\n      ) {\r\n        typeOfConfiguration = 'config-samples';\r\n        templateRelativeFilePath = `./config/samples/${folderName}/settings.xml`;\r\n      }\r\n\r\n      configurationFiles.push({\r\n        fileName: configurationFileName,\r\n        filePath: Utilities.slash(configurationFilePath),\r\n        relativeFilePath: templateRelativeFilePath,\r\n        templateName: settingsTemplateName,\r\n        isFallback: isFallbackSettings,\r\n        capReportDistribution: boolReportDistribution,\r\n        capReportGenerationMailMerge: boolReportGenerationMailMerge,\r\n        dsInputType: dsInputType,\r\n        visibility: strVisibility,\r\n        notes: '',\r\n        folderName: folderName,\r\n        type: typeOfConfiguration,\r\n        activeClicked: false,\r\n        useEmlConn: boolUseEmailConnection,\r\n        emlConnCode: strEmailConnectionCode,\r\n      });\r\n    }\r\n\r\n    this.configurationFiles = configurationFiles;\r\n\r\n    // console.log(\r\n    //   `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n    // );\r\n    return configurationFiles;\r\n  }\r\n\r\n  async loadAllConnectionFilesAsync() {\r\n    if (this.connectionsLoading == 1) return;\r\n\r\n    this.connectionsLoading = 1;\r\n\r\n    this.defaultEmailConnectionFile = undefined;\r\n\r\n    const connectionFiles: Array<ExtConnection> = [];\r\n\r\n    const connectionFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_CONNECTIONS_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    for (let connectionFilePath of connectionFilePaths) {\r\n      let connectionSettings = {\r\n        documentburster: {\r\n          connection: null,\r\n        },\r\n      };\r\n\r\n      // console.log(`connectionFilePath = ${JSON.stringify(connectionFilePath)}`);\r\n\r\n      connectionSettings.documentburster = await this.apiService.get(\r\n        '/cfgman/rb/load-connection',\r\n        {\r\n          path: connectionFilePath,\r\n        },\r\n      );\r\n      const connXml = connectionSettings.documentburster.connection;\r\n\r\n      //console.log(`connXml = ${JSON.stringify(connXml)}`);\r\n\r\n      const connectionFileName = Utilities.basename(connectionFilePath);\r\n      //console.log(\r\n      //  `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n      //);\r\n      connectionFiles.push({\r\n        fileName: connectionFileName,\r\n        filePath: connectionFilePath,\r\n        connectionCode: connXml.code,\r\n        connectionName: connXml.name,\r\n        connectionType: connectionFileName.startsWith('eml-')\r\n          ? 'email-connection'\r\n          : 'database-connection',\r\n        activeClicked: false,\r\n        defaultConnection: connXml.defaultConnection,\r\n        usedBy: this.configurationFiles\r\n          .filter((conf) => conf.useEmlConn && conf.emlConnCode == connXml.code)\r\n          .map((conf) => conf.templateName)\r\n          .join(', '),\r\n        emailserver: {\r\n          host: connXml.emailserver.host,\r\n          port: connXml.emailserver.port,\r\n          userid: connXml.emailserver.userid,\r\n          userpassword: connXml.emailserver.userpassword,\r\n          usessl: connXml.emailserver.usessl,\r\n          usetls: connXml.emailserver.usetls,\r\n          fromaddress: connXml.emailserver.fromaddress,\r\n          name: connXml.emailserver.name,\r\n        },\r\n      });\r\n    }\r\n\r\n    this.connectionFiles = connectionFiles;\r\n\r\n    this.defaultEmailConnectionFile = this.getConnectionDetails({\r\n      connectionType: 'email-connection',\r\n      defaultConnection: true,\r\n      connectionCode: '',\r\n    });\r\n\r\n    //console.log(\r\n    //  `this.defaultEmailConnectionFile = ${JSON.stringify(\r\n    //    this.defaultEmailConnectionFile\r\n    //  )}`\r\n    //);\r\n\r\n    this.connectionsLoading = 0;\r\n  }\r\n\r\n  isDefaultEmailConnectionConfigured(): boolean {\r\n    return (\r\n      this.defaultEmailConnectionFile &&\r\n      this.defaultEmailConnectionFile.emailserver &&\r\n      this.defaultEmailConnectionFile.emailserver.host != 'Email Server Host' &&\r\n      this.defaultEmailConnectionFile.emailserver.name != 'From Name' &&\r\n      this.defaultEmailConnectionFile.emailserver.fromaddress !=\r\n        'from@emailaddress.com' &&\r\n      this.defaultEmailConnectionFile.emailserver.userid !=\r\n        'From Email User ID' &&\r\n      this.defaultEmailConnectionFile.emailserver.userpassword !=\r\n        'From Email Password'\r\n    );\r\n  }\r\n\r\n  async loadAllReportTemplatesFilesAsync() {\r\n    let relativeFilePath: string, tplType: string;\r\n    const emailsTemplateFiles: Array<TmplFileInfo> = [];\r\n    const reportsTemplateFiles: Array<TmplFileInfo> = [];\r\n\r\n    let reportsTemplateFilePaths = await this.unixCliService.findAsync(\r\n      `${this.CONFIGURATION_TEMPLATES_FOLDER_PATH}/reports`,\r\n      {\r\n        matching: ['*.docx', '*.html'],\r\n        files: true,\r\n        directories: false,\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsTemplateFilePaths = ${JSON.stringify(reportsTemplateFilePaths)}`\r\n    //);\r\n\r\n    //const samplesReportsTemplateFilePaths = [];\r\n\r\n    //reportsTemplateFilePaths = reportsTemplateFilePaths.concat(\r\n    //  samplesReportsTemplateFilePaths\r\n    //);\r\n\r\n    for (let filePath of reportsTemplateFilePaths) {\r\n      console.log(`filePath = ${filePath}`);\r\n\r\n      const reportTemplateFileName = Utilities.basename(filePath);\r\n\r\n      const folderName = Utilities.basename(Utilities.dirname(filePath));\r\n\r\n      if (filePath.includes('samples/reports')) {\r\n        tplType = 'template-report-sample';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/samples/reports/`,\r\n          '',\r\n        );\r\n      } else {\r\n        tplType = 'template-report';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/reports/`,\r\n          '',\r\n        );\r\n      }\r\n\r\n      reportsTemplateFiles.push({\r\n        fileName: reportTemplateFileName,\r\n        filePath: filePath,\r\n        type: tplType,\r\n        folderName: folderName,\r\n        relativeFilePath: relativeFilePath,\r\n      });\r\n    }\r\n\r\n    const templateFiles = emailsTemplateFiles.concat(reportsTemplateFiles);\r\n\r\n    this.templateFiles = templateFiles;\r\n    return templateFiles;\r\n  }\r\n\r\n  async saveReportingFileAsync(\r\n    filePath: string,\r\n    xmlReporting: { documentburster: {} },\r\n  ) {\r\n    console.log(\r\n      `saveReportingFileAsynce xmlReporting = ${JSON.stringify(xmlReporting)}`,\r\n    );\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-reporting?path=${filePath}`,\r\n      xmlReporting.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadReportingFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-reporting', {\r\n      path: filePath,\r\n    });\r\n  }\r\n\r\n  getConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type != 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getMailMergeConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.capReportGenerationMailMerge;\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getReportTemplates(outputType: string, filter: { samples: boolean }) {\r\n    return this.templateFiles.filter((template) => {\r\n      let filterConditionDocx = false;\r\n      let filterConditionHtml = false;\r\n\r\n      if (outputType == 'output.docx') {\r\n        if (filter.samples)\r\n          filterConditionDocx = template.fileName.endsWith('.docx');\r\n        else\r\n          filterConditionDocx =\r\n            template.fileName.endsWith('.docx') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      if (outputType == 'output.html') {\r\n        if (filter.samples)\r\n          filterConditionHtml = template.fileName.endsWith('.html');\r\n        else\r\n          filterConditionHtml =\r\n            template.fileName.endsWith('.html') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      return filterConditionDocx || filterConditionHtml;\r\n    });\r\n  }\r\n\r\n  getSampleConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type == 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getConnectionDetails({\r\n    connectionType,\r\n    defaultConnection,\r\n    connectionCode,\r\n  }: {\r\n    connectionType: string;\r\n    defaultConnection: boolean;\r\n    connectionCode: string;\r\n  }) {\r\n    //console.log(\r\n    //  `this.connectionFiles = ${JSON.stringify(this.connectionFiles)}`\r\n    //);\r\n    let connFiles = [];\r\n\r\n    if (this.connectionFiles.length > 0) {\r\n      connFiles = this.connectionFiles.filter((connection: ExtConnection) => {\r\n        return connection.connectionType == connectionType;\r\n      });\r\n\r\n      if (defaultConnection) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.defaultConnection;\r\n        });\r\n      }\r\n\r\n      if (connectionCode && connectionCode.length > 0) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.connectionCode == connectionCode;\r\n        });\r\n      }\r\n\r\n      if (connFiles && connFiles.length == 1) {\r\n        return connFiles[0];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "activeClicked",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 64
        },
        {
          "name": "capReportDistribution",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "capReportGenerationMailMerge",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "dsInputType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "emlConnCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 66
        },
        {
          "name": "fileName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 52
        },
        {
          "name": "filePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "folderName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "isFallback",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "notes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "relativeFilePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "templateName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "useEmlConn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 65
        },
        {
          "name": "visibility",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 59
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "ExtConnection",
      "id": "interface-ExtConnection-b1c5d3297d08cbcdc8e9ca0cbca8929021cf374a58ff9d939b4ecb3754699b1851c901ca4cbaea5999a740f2bf28054fd23a7c86c107c3db6d6cb8f3ec84f8b3",
      "file": "src/app/providers/settings.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as semver from 'semver';\r\nimport { ApiService } from './api.service';\r\nimport Utilities from '../helpers/utilities';\r\nimport { APP_CONFIG } from '../../environments/environment';\r\nimport { SocketOptions } from '../helpers/websocket-endpoint';\r\nimport { FsService } from './fs.service';\r\nimport { UnixCliService } from './unix-cli.service';\r\n\r\nexport interface ExtConnection {\r\n  fileName: string;\r\n  filePath: string;\r\n  connectionCode: string;\r\n  connectionName: string;\r\n  connectionType: string;\r\n  activeClicked: boolean;\r\n  defaultConnection: boolean;\r\n  usedBy?: string;\r\n  emailserver: {\r\n    host: string;\r\n    port: string;\r\n    userid: string;\r\n    userpassword: string;\r\n    usessl: boolean;\r\n    usetls: boolean;\r\n    fromaddress: string;\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport const newEmailServer = {\r\n  host: 'Email Server Host',\r\n  port: '25',\r\n  userid: 'From Email User ID',\r\n  userpassword: 'From Email Password',\r\n  usessl: false,\r\n  usetls: false,\r\n  fromaddress: 'from@emailaddress.com',\r\n  name: 'From Name',\r\n};\r\n\r\nexport interface TmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  type: string;\r\n  content?: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n}\r\n\r\nexport interface CfgTmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  templateName: string;\r\n  capReportGenerationMailMerge: boolean;\r\n  capReportDistribution: boolean;\r\n  dsInputType: string;\r\n  notes: string;\r\n  visibility: string;\r\n  type: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n  isFallback: boolean;\r\n  activeClicked?: boolean;\r\n  useEmlConn?: boolean;\r\n  emlConnCode?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SettingsService {\r\n  xmlInternalSettings = {\r\n    documentburster: {\r\n      settings: {\r\n        skin: 'skin-blue',\r\n        backendurl: 'http://localhost:9090',\r\n      },\r\n    },\r\n  };\r\n\r\n  PORTABLE_EXECUTABLE_DIR: string;\r\n  RUNNING_IN_E2E: boolean;\r\n  SHOULD_SEND_STATS: boolean;\r\n\r\n  LOGS_FOLDER_PATH: string;\r\n  QUARANTINE_FOLDER_PATH: string;\r\n\r\n  JOBS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_BURST_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_REPORTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_CONNECTIONS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_DEFAULTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_SAMPLES_FOLDER_PATH: string;\r\n  CONFIGURATION_TEMPLATES_FOLDER_PATH: string;\r\n\r\n  INTERNAL_SETTINGS_FILE_PATH: string;\r\n\r\n  UPDATE_JAR_FILE_PATH: string;\r\n\r\n  currentConfigurationTemplatePath: string;\r\n  currentConfigurationTemplateName: string;\r\n\r\n  currentConfigurationTemplate: TmplFileInfo;\r\n\r\n  configurationFiles: Array<CfgTmplFileInfo> = [];\r\n  templateFiles: Array<TmplFileInfo> = [];\r\n\r\n  defaultEmailConnectionFile: ExtConnection;\r\n  connectionFiles: Array<ExtConnection> = [];\r\n\r\n  numberOfUserVariables: number;\r\n\r\n  isWindows: boolean = false;\r\n  isServerVersion: boolean = false;\r\n\r\n  isJServerStarted: boolean = false;\r\n\r\n  product: string = 'DocumentBurster';\r\n\r\n  version: semver.SemVer;\r\n\r\n  connectionsLoading: number = 0;\r\n\r\n  activeWebSocketSubcriptions: SocketOptions[] = [];\r\n\r\n  constructor(\r\n    public apiService: ApiService,\r\n    protected fsService: FsService,\r\n    protected unixCliService: UnixCliService,\r\n  ) {\r\n    let process = undefined;\r\n\r\n    if (typeof window.require === 'function') {\r\n      process = window.require('process');\r\n    }\r\n    if (process) {\r\n      this.PORTABLE_EXECUTABLE_DIR = process.env.PORTABLE_EXECUTABLE_DIR;\r\n\r\n      this.RUNNING_IN_E2E = new Boolean(process.env.RUNNING_IN_E2E).valueOf();\r\n      this.SHOULD_SEND_STATS = new Boolean(\r\n        process.env.SHOULD_SEND_STATS,\r\n      ).valueOf();\r\n    } else {\r\n      console.log(\r\n        `window.require('process') NOT AVAILABLE ==> PORTABLE_EXECUTABLE_DIR could not be read (why Virgil, in a Web App, are you using window.require('process')?! instead of using the Java Server for this stuff!!!!)`,\r\n      );\r\n    }\r\n\r\n    this.LOGS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.logs}`;\r\n    this.QUARANTINE_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.quarantine}`;\r\n\r\n    //console.log(`PORTABLE_EXECUTABLE_DIR = ${this.PORTABLE_EXECUTABLE_DIR}`);\r\n\r\n    //console.log(`LOGS_FOLDER_PATH = ${this.LOGS_FOLDER_PATH}`);\r\n\r\n    this.JOBS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.temp}`;\r\n\r\n    this.CONFIGURATION_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}`;\r\n    this.INTERNAL_SETTINGS_FILE_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_internal/settings.xml`;\r\n\r\n    this.CONFIGURATION_DEFAULTS_FOLDER_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_defaults`;\r\n\r\n    this.CONFIGURATION_BURST_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/burst`;\r\n\r\n    this.CONFIGURATION_REPORTS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/reports`;\r\n\r\n    this.CONFIGURATION_SAMPLES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/samples`;\r\n\r\n    this.CONFIGURATION_CONNECTIONS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/connections`;\r\n\r\n    this.CONFIGURATION_TEMPLATES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/templates`;\r\n  }\r\n\r\n  getDefaultsConfigurationValuesFilePath(): string {\r\n    return `${this.CONFIGURATION_DEFAULTS_FOLDER_PATH}/settings.xml`;\r\n  }\r\n\r\n  async loadDefaultSettingsFileAsync(): Promise<any> {\r\n    const systemInfo = await this.apiService.get('/jobman/system/info');\r\n    this.isWindows = systemInfo.osName.startsWith('Windows');\r\n\r\n    const startServerScripts = await this.unixCliService.findAsync(\r\n      this.PORTABLE_EXECUTABLE_DIR,\r\n      {\r\n        matching: ['startServer.*'],\r\n      },\r\n    );\r\n\r\n    if (startServerScripts && startServerScripts.length > 0) {\r\n      this.isServerVersion = true;\r\n      this.product = 'DocumentBurster Server';\r\n    }\r\n\r\n    let xmlSettings = {\r\n      documentburster: {\r\n        settings: null,\r\n      },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: this.getDefaultsConfigurationValuesFilePath(),\r\n    });\r\n\r\n    this.version = xmlSettings.documentburster.settings.version;\r\n\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveSettingsFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadSettingsFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      settings: any;\r\n    };\r\n  }> {\r\n    let xmlSettings = {\r\n      documentburster: { settings: {} },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: filePath,\r\n    });\r\n\r\n    //console.log(\r\n    //  `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n    //    xmlSettings\r\n    //  )}`\r\n    //);\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveConnectionFileAsync(\r\n    filePath: string,\r\n    xmlConnectionSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-connection?path=${path}`,\r\n      xmlConnectionSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadConnectionFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      connection: any;\r\n    };\r\n  }> {\r\n    let xmlConnectionSettings = {\r\n      documentburster: { connection: {} },\r\n    };\r\n\r\n    xmlConnectionSettings.documentburster = await this.apiService.get(\r\n      '/cfgman/rb/load-connection',\r\n      {\r\n        path: filePath,\r\n      },\r\n    );\r\n\r\n    console.log(\r\n      `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n        xmlConnectionSettings,\r\n      )}`,\r\n    );\r\n    return xmlConnectionSettings;\r\n  }\r\n\r\n  async loadPreferencesFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-internal', {\r\n      path: filePath,\r\n    });\r\n  }\r\n  async savePreferencesFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ): Promise<any> {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-internal?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadAllSettingsFilesAsync({\r\n    forceReload = false,\r\n  }: { forceReload?: boolean } = {}): Promise<Array<CfgTmplFileInfo>> {\r\n    if (\r\n      !forceReload &&\r\n      this.configurationFiles &&\r\n      this.configurationFiles.length > 0\r\n    )\r\n      return this.configurationFiles;\r\n\r\n    //console.log(\r\n    //  `this.CONFIGURATION_BURST_FOLDER_PATH = ${this.CONFIGURATION_BURST_FOLDER_PATH}`\r\n    //);\r\n\r\n    const burstConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_BURST_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `burstConfigFilePaths1 = ${JSON.stringify(burstConfigFilePaths)}`\r\n    //);\r\n\r\n    const reportsConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_REPORTS_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsConfigFilePaths2 = ${JSON.stringify(reportsConfigFilePaths)}`\r\n    //);\r\n\r\n    const samplesConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_SAMPLES_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    // console.log(\r\n    //   `samplesConfigFilePaths3 = ${JSON.stringify(samplesConfigFilePaths)}`\r\n    // );\r\n\r\n    const configFilePaths = burstConfigFilePaths\r\n      .concat(reportsConfigFilePaths)\r\n      .concat(samplesConfigFilePaths);\r\n\r\n    const configurationFiles: Array<CfgTmplFileInfo> = [];\r\n\r\n    for (let filePath of configFilePaths) {\r\n      const configurationFilePath = filePath;\r\n      const configurationFileName = Utilities.basename(configurationFilePath);\r\n\r\n      const isFallbackSettings =\r\n        configurationFilePath.endsWith('burst/settings.xml');\r\n\r\n      const isNotSettings =\r\n        configurationFilePath.endsWith('_defaults/settings.xml') ||\r\n        configurationFilePath.endsWith('preferences/settings.xml');\r\n\r\n      if (isNotSettings) continue;\r\n\r\n      //console.log(\r\n      //  `configurationFilePath4 = ${JSON.stringify(configurationFilePath)}`\r\n      // );\r\n\r\n      const settingsFileContent = await this.unixCliService.catAsync(filePath);\r\n\r\n      let startPos =\r\n        settingsFileContent.indexOf('<template>') + '<template>'.length;\r\n      let endPos = settingsFileContent.indexOf('</template>');\r\n      const settingsTemplateName = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportdistribution>') +\r\n        '<reportdistribution>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportdistribution>');\r\n      const boolReportDistribution = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportgenerationmailmerge>') +\r\n        '<reportgenerationmailmerge>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportgenerationmailmerge>');\r\n      const boolReportGenerationMailMerge = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<visibility>') + '<visibility>'.length;\r\n      endPos = settingsFileContent.indexOf('</visibility>');\r\n      const strVisibility = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos = settingsFileContent.indexOf('<useconn>') + '<useconn>'.length;\r\n      endPos = settingsFileContent.indexOf('</useconn>');\r\n      const boolUseEmailConnection = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<conncode>') + '<conncode>'.length;\r\n      endPos = settingsFileContent.indexOf('</conncode>');\r\n      const strEmailConnectionCode = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      let templateRelativeFilePath = `./config/burst/${configurationFileName}`;\r\n      let typeOfConfiguration = 'config-burst-legacy';\r\n\r\n      const folderName = Utilities.basename(\r\n        Utilities.dirname(configurationFilePath),\r\n      );\r\n\r\n      let dsInputType = '';\r\n\r\n      if (configurationFilePath.includes(`config/reports/${folderName}`)) {\r\n        typeOfConfiguration = 'config-reports';\r\n        templateRelativeFilePath = `./config/reports/${folderName}/settings.xml`;\r\n\r\n        if (boolReportGenerationMailMerge) {\r\n          const reportingXmlFilePath = `${Utilities.dirname(\r\n            configurationFilePath,\r\n          )}/reporting.xml`;\r\n\r\n          const reportingXmlFileContent =\r\n            await this.unixCliService.catAsync(reportingXmlFilePath);\r\n          startPos =\r\n            reportingXmlFileContent.indexOf('<type>') + '<type>'.length;\r\n          endPos = reportingXmlFileContent.indexOf('</type>');\r\n          dsInputType = reportingXmlFileContent\r\n            .substring(startPos, endPos)\r\n            .trim();\r\n        }\r\n      } else if (\r\n        configurationFilePath.includes(`config/samples/${folderName}`)\r\n      ) {\r\n        typeOfConfiguration = 'config-samples';\r\n        templateRelativeFilePath = `./config/samples/${folderName}/settings.xml`;\r\n      }\r\n\r\n      configurationFiles.push({\r\n        fileName: configurationFileName,\r\n        filePath: Utilities.slash(configurationFilePath),\r\n        relativeFilePath: templateRelativeFilePath,\r\n        templateName: settingsTemplateName,\r\n        isFallback: isFallbackSettings,\r\n        capReportDistribution: boolReportDistribution,\r\n        capReportGenerationMailMerge: boolReportGenerationMailMerge,\r\n        dsInputType: dsInputType,\r\n        visibility: strVisibility,\r\n        notes: '',\r\n        folderName: folderName,\r\n        type: typeOfConfiguration,\r\n        activeClicked: false,\r\n        useEmlConn: boolUseEmailConnection,\r\n        emlConnCode: strEmailConnectionCode,\r\n      });\r\n    }\r\n\r\n    this.configurationFiles = configurationFiles;\r\n\r\n    // console.log(\r\n    //   `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n    // );\r\n    return configurationFiles;\r\n  }\r\n\r\n  async loadAllConnectionFilesAsync() {\r\n    if (this.connectionsLoading == 1) return;\r\n\r\n    this.connectionsLoading = 1;\r\n\r\n    this.defaultEmailConnectionFile = undefined;\r\n\r\n    const connectionFiles: Array<ExtConnection> = [];\r\n\r\n    const connectionFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_CONNECTIONS_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    for (let connectionFilePath of connectionFilePaths) {\r\n      let connectionSettings = {\r\n        documentburster: {\r\n          connection: null,\r\n        },\r\n      };\r\n\r\n      // console.log(`connectionFilePath = ${JSON.stringify(connectionFilePath)}`);\r\n\r\n      connectionSettings.documentburster = await this.apiService.get(\r\n        '/cfgman/rb/load-connection',\r\n        {\r\n          path: connectionFilePath,\r\n        },\r\n      );\r\n      const connXml = connectionSettings.documentburster.connection;\r\n\r\n      //console.log(`connXml = ${JSON.stringify(connXml)}`);\r\n\r\n      const connectionFileName = Utilities.basename(connectionFilePath);\r\n      //console.log(\r\n      //  `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n      //);\r\n      connectionFiles.push({\r\n        fileName: connectionFileName,\r\n        filePath: connectionFilePath,\r\n        connectionCode: connXml.code,\r\n        connectionName: connXml.name,\r\n        connectionType: connectionFileName.startsWith('eml-')\r\n          ? 'email-connection'\r\n          : 'database-connection',\r\n        activeClicked: false,\r\n        defaultConnection: connXml.defaultConnection,\r\n        usedBy: this.configurationFiles\r\n          .filter((conf) => conf.useEmlConn && conf.emlConnCode == connXml.code)\r\n          .map((conf) => conf.templateName)\r\n          .join(', '),\r\n        emailserver: {\r\n          host: connXml.emailserver.host,\r\n          port: connXml.emailserver.port,\r\n          userid: connXml.emailserver.userid,\r\n          userpassword: connXml.emailserver.userpassword,\r\n          usessl: connXml.emailserver.usessl,\r\n          usetls: connXml.emailserver.usetls,\r\n          fromaddress: connXml.emailserver.fromaddress,\r\n          name: connXml.emailserver.name,\r\n        },\r\n      });\r\n    }\r\n\r\n    this.connectionFiles = connectionFiles;\r\n\r\n    this.defaultEmailConnectionFile = this.getConnectionDetails({\r\n      connectionType: 'email-connection',\r\n      defaultConnection: true,\r\n      connectionCode: '',\r\n    });\r\n\r\n    //console.log(\r\n    //  `this.defaultEmailConnectionFile = ${JSON.stringify(\r\n    //    this.defaultEmailConnectionFile\r\n    //  )}`\r\n    //);\r\n\r\n    this.connectionsLoading = 0;\r\n  }\r\n\r\n  isDefaultEmailConnectionConfigured(): boolean {\r\n    return (\r\n      this.defaultEmailConnectionFile &&\r\n      this.defaultEmailConnectionFile.emailserver &&\r\n      this.defaultEmailConnectionFile.emailserver.host != 'Email Server Host' &&\r\n      this.defaultEmailConnectionFile.emailserver.name != 'From Name' &&\r\n      this.defaultEmailConnectionFile.emailserver.fromaddress !=\r\n        'from@emailaddress.com' &&\r\n      this.defaultEmailConnectionFile.emailserver.userid !=\r\n        'From Email User ID' &&\r\n      this.defaultEmailConnectionFile.emailserver.userpassword !=\r\n        'From Email Password'\r\n    );\r\n  }\r\n\r\n  async loadAllReportTemplatesFilesAsync() {\r\n    let relativeFilePath: string, tplType: string;\r\n    const emailsTemplateFiles: Array<TmplFileInfo> = [];\r\n    const reportsTemplateFiles: Array<TmplFileInfo> = [];\r\n\r\n    let reportsTemplateFilePaths = await this.unixCliService.findAsync(\r\n      `${this.CONFIGURATION_TEMPLATES_FOLDER_PATH}/reports`,\r\n      {\r\n        matching: ['*.docx', '*.html'],\r\n        files: true,\r\n        directories: false,\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsTemplateFilePaths = ${JSON.stringify(reportsTemplateFilePaths)}`\r\n    //);\r\n\r\n    //const samplesReportsTemplateFilePaths = [];\r\n\r\n    //reportsTemplateFilePaths = reportsTemplateFilePaths.concat(\r\n    //  samplesReportsTemplateFilePaths\r\n    //);\r\n\r\n    for (let filePath of reportsTemplateFilePaths) {\r\n      console.log(`filePath = ${filePath}`);\r\n\r\n      const reportTemplateFileName = Utilities.basename(filePath);\r\n\r\n      const folderName = Utilities.basename(Utilities.dirname(filePath));\r\n\r\n      if (filePath.includes('samples/reports')) {\r\n        tplType = 'template-report-sample';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/samples/reports/`,\r\n          '',\r\n        );\r\n      } else {\r\n        tplType = 'template-report';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/reports/`,\r\n          '',\r\n        );\r\n      }\r\n\r\n      reportsTemplateFiles.push({\r\n        fileName: reportTemplateFileName,\r\n        filePath: filePath,\r\n        type: tplType,\r\n        folderName: folderName,\r\n        relativeFilePath: relativeFilePath,\r\n      });\r\n    }\r\n\r\n    const templateFiles = emailsTemplateFiles.concat(reportsTemplateFiles);\r\n\r\n    this.templateFiles = templateFiles;\r\n    return templateFiles;\r\n  }\r\n\r\n  async saveReportingFileAsync(\r\n    filePath: string,\r\n    xmlReporting: { documentburster: {} },\r\n  ) {\r\n    console.log(\r\n      `saveReportingFileAsynce xmlReporting = ${JSON.stringify(xmlReporting)}`,\r\n    );\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-reporting?path=${filePath}`,\r\n      xmlReporting.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadReportingFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-reporting', {\r\n      path: filePath,\r\n    });\r\n  }\r\n\r\n  getConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type != 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getMailMergeConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.capReportGenerationMailMerge;\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getReportTemplates(outputType: string, filter: { samples: boolean }) {\r\n    return this.templateFiles.filter((template) => {\r\n      let filterConditionDocx = false;\r\n      let filterConditionHtml = false;\r\n\r\n      if (outputType == 'output.docx') {\r\n        if (filter.samples)\r\n          filterConditionDocx = template.fileName.endsWith('.docx');\r\n        else\r\n          filterConditionDocx =\r\n            template.fileName.endsWith('.docx') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      if (outputType == 'output.html') {\r\n        if (filter.samples)\r\n          filterConditionHtml = template.fileName.endsWith('.html');\r\n        else\r\n          filterConditionHtml =\r\n            template.fileName.endsWith('.html') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      return filterConditionDocx || filterConditionHtml;\r\n    });\r\n  }\r\n\r\n  getSampleConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type == 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getConnectionDetails({\r\n    connectionType,\r\n    defaultConnection,\r\n    connectionCode,\r\n  }: {\r\n    connectionType: string;\r\n    defaultConnection: boolean;\r\n    connectionCode: string;\r\n  }) {\r\n    //console.log(\r\n    //  `this.connectionFiles = ${JSON.stringify(this.connectionFiles)}`\r\n    //);\r\n    let connFiles = [];\r\n\r\n    if (this.connectionFiles.length > 0) {\r\n      connFiles = this.connectionFiles.filter((connection: ExtConnection) => {\r\n        return connection.connectionType == connectionType;\r\n      });\r\n\r\n      if (defaultConnection) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.defaultConnection;\r\n        });\r\n      }\r\n\r\n      if (connectionCode && connectionCode.length > 0) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.connectionCode == connectionCode;\r\n        });\r\n      }\r\n\r\n      if (connFiles && connFiles.length == 1) {\r\n        return connFiles[0];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "activeClicked",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "connectionCode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "connectionName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "connectionType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "defaultConnection",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "emailserver",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "fileName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "filePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "usedBy",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 18
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "ExtPackage",
      "id": "interface-ExtPackage-5233476e8a58b9d7aa1d1c767363f134b15896a684e1c55f77d2e070f86958826320bf629a0b32faca1cc0ae6eda47be1fa397c534f8bc1826c040c1ec2f38cc",
      "file": "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.component.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\nimport { extraPackagesTemplate } from './extra-packages.template';\r\n\r\nimport { BashService } from '../bash.service';\r\nimport { ConfirmService } from '../../../components/dialog-confirm/confirm.service';\r\nimport { ExecutionStatsService } from '../../../providers/execution-stats.service';\r\nimport Utilities from '../../../helpers/utilities';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport UtilitiesElectron from '../../../helpers/utilities-electron';\r\nimport { ElectronService } from '../../../core/services';\r\n\r\ninterface ExtPackage {\r\n  id: string;\r\n  name: string;\r\n  icon: string;\r\n  website: string;\r\n  description: string;\r\n  status: string;\r\n  packageManager: string;\r\n  cmdInstall: string;\r\n  cmdUnInstall: string;\r\n  cmdGetInfo: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'dburst-extra-packages',\r\n  template: ` ${extraPackagesTemplate} `,\r\n})\r\nexport class ExtraPackagesComponent implements OnInit {\r\n  protected extraPackages = [\r\n    {\r\n      id: 'notepadplusplus',\r\n      name: 'Notepad++',\r\n      icon: 'notepad++.svg',\r\n      website: 'https://notepad-plus-plus.org',\r\n      description: ` is a free (as in “free speech” and also as in “free beer”) source code editor and Notepad replacement. Notepad++ is useful when editing ReportBurster configuration files and scripts.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install notepadplusplus --yes',\r\n      cmdUnInstall: 'choco uninstall notepadplusplus',\r\n      cmdGetInfo: 'choco info notepadplusplus -lo',\r\n    },\r\n    {\r\n      id: 'vscode',\r\n      name: 'Visual Studio Code',\r\n      icon: 'vscode-logo.svg',\r\n      website: 'https://code.visualstudio.com',\r\n      description: ` Code editing. Redefined.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install vscode --yes',\r\n      cmdUnInstall: 'choco uninstall vscode',\r\n      cmdGetInfo: 'choco info vscode -lo',\r\n    },\r\n    {\r\n      id: 'winmerge',\r\n      name: 'WinMerge',\r\n      icon: 'winmerge.png',\r\n      website: 'https://winmerge.org',\r\n      description: ` is an Open Source differencing and merging tool for Windows. WinMerge can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle. WinMerge can be used for comparing ReportBurster configuration files and scripts.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install winmerge --yes',\r\n      cmdUnInstall: 'choco uninstall winmerge',\r\n      cmdGetInfo: 'choco info winmerge -lo',\r\n    },\r\n    {\r\n      id: 'docker-desktop',\r\n      name: 'Docker Desktop',\r\n      icon: 'docker.svg',\r\n      website: 'https://www.docker.com/products/docker-desktop/',\r\n      description: ` a very good containerization software. Docker is required for running other ReportBurster extra packages.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install docker-desktop --yes',\r\n      cmdUnInstall: 'choco uninstall docker-desktop',\r\n      cmdGetInfo: 'choco info docker-desktop -lo',\r\n    },\r\n  ];\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected bashService: BashService,\r\n    protected electronService: ElectronService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected confirmService: ConfirmService,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.fetchExtraPackagesDetails();\r\n  }\r\n\r\n  async fetchExtraPackagesDetails() {\r\n    for (const extraPackage of this.extraPackages) {\r\n      const packageId = extraPackage.id;\r\n\r\n      extraPackage.description = await this.translateService.instant(\r\n        `AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INNER-HTML.${packageId.toUpperCase()}`,\r\n      );\r\n\r\n      //console.log(packageId);\r\n\r\n      extraPackage.status = 'not-installed';\r\n\r\n      const chocoInfoCommand = `choco info ${packageId} -lo`;\r\n      //const chocoInfoCommand = `choco --version`;\r\n\r\n      try {\r\n        const { stdout, stderr } =\r\n          await UtilitiesElectron.execNativeCommand(chocoInfoCommand);\r\n\r\n        //console.log(`chocoInfo = ${chocoInfo}`);\r\n\r\n        if (stdout && stdout.includes('1 packages installed.')) {\r\n          extraPackage.status = 'installed';\r\n        }\r\n      } catch (error) {\r\n        extraPackage.status = 'not-installed';\r\n      }\r\n    }\r\n    // Sort the extraPackages array so that installed packages come first\r\n    this.extraPackages.sort((a, b) => {\r\n      if (a.status === 'installed' && b.status !== 'installed') {\r\n        return -1;\r\n      } else if (a.status !== 'installed' && b.status === 'installed') {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  doInstallUninstallAction(pckage: ExtPackage, action: string) {\r\n    const dialogQuestion = `${Utilities.titleCase(action)} ${pckage.name}?`;\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: () => {\r\n        this.bashService.typeCommandOnTerminalAndThenPressEnter(\r\n          `choco ${action} ${pckage.id} --yes`,\r\n        );\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "cmdGetInfo",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "cmdInstall",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "cmdUnInstall",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "packageManager",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "website",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "InspectResult",
      "id": "interface-InspectResult-41de3895bdd3297a2501fdc5c1b24c309ea759b32923a14b7d058f1fb67d89bc635ee2330c592f1e8d267a676777682c68911bd889e6fef1bb9aeaa851ff5e73",
      "file": "src/app/providers/fs.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiService } from './api.service';\r\nimport Utilities from '../helpers/utilities';\r\n\r\nexport interface InspectResult {\r\n  name: string;\r\n  type: 'file' | 'dir' | 'symlink';\r\n  size: number;\r\n  absolutePath?: string;\r\n  md5?: string;\r\n  sha1?: string;\r\n  sha256?: string;\r\n  sha512?: string;\r\n  mode?: number;\r\n  accessTime?: Date;\r\n  modifyTime?: Date;\r\n  changeTime?: Date;\r\n  birthTime?: Date;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FsService {\r\n  constructor(protected apiService: ApiService) {}\r\n\r\n  async removeAsync(path: string) {\r\n    console.log('removeAsync', path);\r\n    return this.apiService.delete(\r\n      `/jobman/system/fs/delete-quietly?path=${encodeURIComponent(\r\n        Utilities.slash(path),\r\n      )}`,\r\n    );\r\n  }\r\n\r\n  async copyAsync(\r\n    sourcePath: string,\r\n    destinationPath: string,\r\n    criteria: {\r\n      overwrite?:\r\n        | boolean\r\n        | ((src: any, dest: any) => boolean | Promise<boolean>);\r\n      matching?: string[];\r\n      ignoreCase?: boolean;\r\n    } = {},\r\n  ): Promise<void> {\r\n    const overwrite =\r\n      typeof criteria.overwrite === 'function'\r\n        ? criteria.overwrite(sourcePath, destinationPath)\r\n        : criteria.overwrite;\r\n\r\n    console.log(`overwrite = ${overwrite}`);\r\n\r\n    let postUrl = `/jobman/system/fs/copy?fromPath=${encodeURIComponent(\r\n      Utilities.slash(sourcePath),\r\n    )}&toPath=${encodeURIComponent(Utilities.slash(destinationPath))}`;\r\n\r\n    if (overwrite) postUrl = `${postUrl}&overwrite=${overwrite}`;\r\n    if (criteria.matching) postUrl = `${postUrl}&matching=${criteria.matching}`;\r\n    if (criteria.matching)\r\n      postUrl = `${postUrl}&ignoreCase=${criteria.ignoreCase}`;\r\n\r\n    return this.apiService.post(postUrl);\r\n  }\r\n\r\n  async existsAsync(path: string): Promise<'dir' | 'file' | 'other' | false> {\r\n    return this.apiService.get(\r\n      '/jobman/system/fs/exists',\r\n      {\r\n        path: encodeURIComponent(Utilities.slash(path)),\r\n      },\r\n      new Headers({\r\n        Accept: 'text/plain',\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    );\r\n  }\r\n\r\n  async dirAsync(\r\n    path: string,\r\n    criteria: {\r\n      empty?: true;\r\n      mode?: string;\r\n    } = {},\r\n  ): Promise<void> {\r\n    return this.apiService.post(\r\n      `/jobman/system/fs/dir?path=${encodeURIComponent(Utilities.slash(path))}`,\r\n      criteria,\r\n    );\r\n  }\r\n\r\n  async readAsync(path: string): Promise<string> {\r\n    return this.apiService.get(\r\n      '/jobman/system/fs/read-file-to-string',\r\n      { path: encodeURIComponent(path) },\r\n      new Headers({\r\n        Accept: 'text/plain',\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    );\r\n  }\r\n\r\n  async writeAsync(path: string, content: string) {\r\n    const encodedPath = encodeURIComponent(Utilities.slash(path));\r\n    return this.apiService.post(\r\n      `/jobman/system/fs/write-string-to-file?path=${encodedPath}`,\r\n      content,\r\n      new Headers({\r\n        'Content-Type': 'text/plain',\r\n      }),\r\n    );\r\n  }\r\n\r\n  async fileAsync(\r\n    path: string,\r\n    criteria: {\r\n      content?: string | Buffer | Object | Array<any>;\r\n      jsonIndent?: number;\r\n      mode?: number | string;\r\n    } = {},\r\n  ): Promise<void> {\r\n    const encodedPath = encodeURIComponent(Utilities.slash(path));\r\n\r\n    return this.apiService.post(\r\n      `/jobman/system/fs/file?path=${encodedPath}`,\r\n      criteria,\r\n    );\r\n  }\r\n\r\n  inspectAsync(\r\n    path: string,\r\n    criteria: {\r\n      checksum?: 'md5' | 'sha1' | 'sha256' | 'sha512';\r\n      mode?: boolean;\r\n      times?: boolean;\r\n      absolutePath?: boolean;\r\n      symlinks?: 'report' | 'follow';\r\n    } = {},\r\n  ): Promise<InspectResult | undefined> {\r\n    return this.apiService.get(\r\n      `/jobman/system/fs/inspect/${encodeURIComponent(Utilities.slash(path))}`,\r\n      {\r\n        checksum: criteria.checksum,\r\n        mode: criteria.mode,\r\n        times: criteria.times,\r\n        absolutePath: criteria.absolutePath,\r\n        symlinks: criteria.symlinks,\r\n      },\r\n    );\r\n  }\r\n\r\n  async resolveAsync(path: string): Promise<string> {\r\n    console.log(`path = ${path}`);\r\n    return this.apiService.get(\r\n      '/jobman/system/fs/resolve',\r\n      {\r\n        path: encodeURIComponent(Utilities.slash(path)),\r\n      },\r\n      new Headers({\r\n        Accept: 'text/plain',\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "absolutePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "accessTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "birthTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "changeTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 17
        },
        {
          "name": "md5",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "mode",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "modifyTime",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date",
          "optional": true,
          "description": "",
          "line": 16
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "sha1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "sha256",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "sha512",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 13
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"file\" | \"dir\" | \"symlink\"",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "ProcessOutputResult",
      "id": "interface-ProcessOutputResult-ad6c99f73e108e767ed4f804c414e515dba3874b116c4e0d94f628c562855eb9795cd4d92586e11042e740efdbbddc81b8c4ce8fd09c8fd4b0c15d8d7d42deaa",
      "file": "src/app/providers/shell.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Utilities from '../helpers/utilities';\r\nimport { ApiService } from './api.service';\r\nimport { ToastrMessagesService } from './toastr-messages.service';\r\nimport { SettingsService } from './settings.service';\r\nimport { FsService } from './fs.service';\r\n\r\ninterface ProcessOutputResult {\r\n  success: boolean;\r\n  outputLines: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ShellService {\r\n  logFilePath: string;\r\n  isJavaOk = true;\r\n\r\n  constructor(\r\n    protected settingsService: SettingsService,\r\n    protected messagesService: ToastrMessagesService,\r\n    protected fsService: FsService,\r\n    protected apiService: ApiService,\r\n  ) {}\r\n\r\n  async checkJavaVersion() {\r\n    this.isJavaOk = this.settingsService.isJServerStarted;\r\n  }\r\n\r\n  async doKillOldExeThenCopyAndStartNewExe(\r\n    jobFilePath: string,\r\n    newExeFilePath: string,\r\n    upgDbTempFolderPath: string,\r\n  ) {\r\n    const jblFilePath = Utilities.slash(\r\n      await this.apiService.get('/jobman/system/fs/resolve', {\r\n        paths: jobFilePath,\r\n      }),\r\n    );\r\n\r\n    const script = await this.apiService.post(\r\n      '/jobman/system/child-process/spawn',\r\n      {\r\n        command: 'rb_rust_updater',\r\n        args: ['--job_file_path', jblFilePath, '2>&1', '>>', this.logFilePath],\r\n        options: {\r\n          cwd: this.settingsService.PORTABLE_EXECUTABLE_DIR,\r\n          shell: true,\r\n        },\r\n      },\r\n    );\r\n\r\n    script.data.stderr.on('data', (data) => {\r\n      this.messagesService.showError(data);\r\n    });\r\n  }\r\n\r\n  async runBatFile(\r\n    arrguments: string[],\r\n    workItemName?: string,\r\n    exitCallback?: Function,\r\n  ) {\r\n    let message = 'Working ... Please wait.';\r\n    if (workItemName) {\r\n      message = 'Working on ' + workItemName + '. Please wait.';\r\n    }\r\n    this.messagesService.showInfo(message, '', {\r\n      messageClass: 'java-started',\r\n    });\r\n\r\n    const commands = ['documentburster.bat'].concat(arrguments);\r\n    const batScript = await this.apiService.post(\r\n      '/jobman/system/child-process/spawn',\r\n      commands,\r\n    );\r\n\r\n    console.log(`batScript = ${JSON.stringify(batScript)}`);\r\n    this.handleScriptEvents(batScript, workItemName, exitCallback);\r\n  }\r\n\r\n  async generateMergeFileInTempFolder(filePaths: string[]): Promise<string> {\r\n    console.log(`generateMergeFileInTempFolder filePaths = ${filePaths}`);\r\n    const dir = `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/temp/`;\r\n    const uniqueId =\r\n      Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n    const mergeFilePath = `${dir}merge-files-${uniqueId}`;\r\n\r\n    const content = filePaths.join('\\n');\r\n\r\n    await this.fsService.writeAsync(mergeFilePath, content);\r\n    return mergeFilePath;\r\n  }\r\n\r\n  async startStopTestEmailServer(command: string) {\r\n    const message = 'Working ... Please wait.';\r\n\r\n    this.messagesService.showInfo(message, '', {\r\n      messageClass: 'java-started',\r\n    });\r\n\r\n    const currentWorkingDirPath = `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/tools/test-email-server`;\r\n\r\n    const batFile = command + 'TestEmailServer.bat';\r\n\r\n    const batScript = await this.apiService.post(\r\n      `/jobman/system/child-process/spawn?cwdPath=${encodeURIComponent(\r\n        Utilities.slash(currentWorkingDirPath),\r\n      )}`,\r\n      [batFile],\r\n    );\r\n\r\n    this.handleScriptEvents(batScript, null, null);\r\n  }\r\n\r\n  async clearResumeJob(jobFilePath: string) {\r\n    await this.fsService.removeAsync(jobFilePath);\r\n    this.messagesService.showInfo('Job was cleared.');\r\n  }\r\n\r\n  handleScriptEvents(\r\n    result: ProcessOutputResult,\r\n    workItemName?: string,\r\n    exitCallback?: Function,\r\n  ) {\r\n    // Handle the result here. This will be called when the process has finished executing.\r\n    let message = 'Done';\r\n    if (workItemName) {\r\n      message = 'Done ' + workItemName;\r\n    }\r\n    if (result.success) {\r\n      this.messagesService.showInfo(message, '', {\r\n        messageClass: 'java-exited',\r\n      });\r\n    } else {\r\n      this.messagesService.showError('Error', '', {\r\n        messageClass: 'java-exited',\r\n      });\r\n    }\r\n    if (exitCallback) {\r\n      exitCallback();\r\n    }\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "outputLines",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "success",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "SampleInfo",
      "id": "interface-SampleInfo-42ac4fb99e4a766ae67f21b4bcba7c2080616dbc4ac029e01ad79fa02aec86e38a160953e8a9a520e6ba115659569efd16142412c2b147b5ce3d3fae3af177a7",
      "file": "src/app/providers/samples.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SettingsService } from './settings.service';\r\nimport Utilities from '../helpers/utilities';\r\n\r\nexport interface SampleInfo {\r\n  id: string;\r\n  name: string;\r\n  visibility: string;\r\n  jobType: string;\r\n  input: {\r\n    data: string[];\r\n    dataUrl?: string[];\r\n    numberOfPages: number;\r\n    tokens: string[];\r\n  };\r\n  step1: string;\r\n  step2: string;\r\n  step3: string;\r\n  output: {\r\n    data: string[];\r\n    folder: string;\r\n  };\r\n  outputHtmlHardcoded: string;\r\n  configurationFilePath: string;\r\n  configurationFileName: string;\r\n  notes: string;\r\n  recipientType: string;\r\n  documentType: string;\r\n  activeClicked: boolean;\r\n  capReportDistribution: boolean;\r\n  capReportGenerationMailMerge: boolean;\r\n  documentation?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SamplesService {\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected settingsService: SettingsService,\r\n  ) {}\r\n\r\n  countVisibleSamples = -1;\r\n\r\n  samples: Array<SampleInfo> = [\r\n    {\r\n      id: 'MONTHLY-PAYSLIPS-SPLIT-ONLY',\r\n      name: '1. Monthly Payslips PDF (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/burst/Payslips.pdf'],\r\n        dataUrl: ['file:https://www.pdfburst.com/samples/Payslips.pdf'],\r\n        numberOfPages: 3,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'file:clyde.grew@northridgehealth.org.pdf',\r\n          'file:kyle.butford@northridgehealth.org.pdf',\r\n          'file:alfreda.waldback@northridgehealth.org.pdf',\r\n        ],\r\n        folder:\r\n          \"output/Payslips.pdf/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.pdf.html#chapter.pdf.bursting',\r\n    },\r\n    {\r\n      id: 'EXCEL-DISTINCT-SHEETS-SPLIT-ONLY',\r\n      name: '2. Monthly Payslips Excel - split Excel file by distinct sheets (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Payslips-Distinct-Sheets.xls'],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Payslips-Distinct-Sheets.xls',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      output: {\r\n        data: [\r\n          'file:clyde.grew@northridgehealth.org.xls',\r\n          'file:kyle.butford@northridgehealth.org.xls',\r\n          'file:alfreda.waldback@northridgehealth.org.xls',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-file-excel-o\"></i> clyde.grew@northridgehealth.org.xls employee payslip<br><i class=\"fa fa-file-excel-o\"></i> kyle.butford@northridgehealth.org.xls employee payslip<br><i class=\"fa fa-file-excel-o\"></i> alfreda.waldback@northridgehealth.org.xls employee payslip',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.excel.html#chapter.excel.bursting.by.distinct.sheets',\r\n    },\r\n    {\r\n      id: 'EXCEL-DISTINCT-COLUMN-VALUES-SPLIT-ONLY',\r\n      name: '3. Customer List/Country Excel - split Excel file by distinct column values (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Customers-Distinct-Column-Values.xls'],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Customers-Distinct-Column-Values.xls',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      output: {\r\n        data: [],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-file-excel-o\"></i> United States of America.xls<br><i class=\"fa fa-file-excel-o\"></i> Australia.xls<br><i class=\"fa fa-file-excel-o\"></i> Canada.xls<br><i class=\"fa fa-file-excel-o\"></i> United Kingdom.xls<br><i class=\"fa fa-file-excel-o\"></i> Germany.xls<br>etc... (separate file containing customer list for each country)',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoices',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.excel.html#chapter.excel.bursting.by.distinct.column.values',\r\n    },\r\n    {\r\n      id: 'INVOICES-SPLIT-ONCE-MORE-SPLIT-ONLY',\r\n      name: '4. Customers with Multiple Invoices PDF (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Split2Times.pdf'],\r\n        dataUrl: ['file:https://www.pdfburst.com/samples/Split2Times.pdf'],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      output: {\r\n        data: [\r\n          'file:10.pdf (for accounting@alphainsurance.biz)',\r\n          'file:9.pdf (for accounting@alphainsurance.biz)',\r\n          'file:8.pdf (for accounting@alphainsurance.biz)',\r\n          'file:7.pdf (for accounting@alphainsurance.biz)',\r\n          'file:6.pdf (for accounting@betainsurance.biz)',\r\n          'file:5.pdf (for accounting@betainsurance.biz)',\r\n          'file:4.pdf (for accounting@betainsurance.biz)',\r\n          'file:3.pdf (for accounting@gammahealth.biz)',\r\n          'file:2.pdf (for accounting@gammahealth.biz)',\r\n        ],\r\n        folder:\r\n          \"output/Payslips.pdf/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-two-times-split-only/settings.xml`,\r\n      configurationFileName: 'split-two-times-split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoice',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'http://www.pdfburst.com/docs/html/userguide/chapter.pdf.html#chapter.config.advanced',\r\n    },\r\n    {\r\n      id: 'INVOICES-MERGE-THEN-SPLIT',\r\n      name: '5. Customer Invoices PDF - Merge and then Process Multiple Files Together',\r\n      visibility: 'visible',\r\n      jobType: 'merge-burst',\r\n      input: {\r\n        data: [\r\n          'file:samples/burst/Invoices-Oct.pdf',\r\n          'file:samples/burst/Invoices-Nov.pdf',\r\n          'file:samples/burst/Invoices-Dec.pdf',\r\n        ],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Invoices-Oct.pdf',\r\n          'file:https://www.pdfburst.com/samples/Invoices-Nov.pdf',\r\n          'file:https://www.pdfburst.com/samples/Invoices-Dec.pdf',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      step1: 'merge',\r\n      step2: 'split',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'file:0011.pdf',\r\n          'file:0012.pdf',\r\n          'file:0013.pdf',\r\n          'file:0014.pdf',\r\n          'file:0015.pdf',\r\n          'file:0016.pdf',\r\n          'file:0017.pdf',\r\n          'file:0018.pdf',\r\n          'file:0019.pdf',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoice',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n  ];\r\n\r\n  samplesNotYetImplemented: Array<SampleInfo> = [\r\n    {\r\n      id: 'GENERATE-EMAIL-PAYSLIPS',\r\n      name: '6. Monthly Payslips (again)',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'generate',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email-file-attached:clyde.grew@northridgehealth.org.docx',\r\n          'email-file-attached:kyle.butford@northridgehealth.org.docx',\r\n          'email-file-attached:alfreda.waldback@northridgehealth.org.docx',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/monthly-payslips-generate-docx/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n    {\r\n      id: 'MAIL-MERGE-EMAIL-LETTERS-TO-STUDENTS',\r\n      name: '7. Mail Merge Email Letters to All Students',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'mail-merge-emails',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email:clyde.grew@northridgeschool.edu',\r\n          'email:kyle.butford@northridgeschool.edu',\r\n          'email:alfreda.waldback@northridgeschool.edu',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-envelope-o\"></i> letter to student clyde.grew@northridgeschool.edu<br><i class=\"fa fa-envelope-o\"></i> letter to student kyle.butford@northridgeschool.edu<br><i class=\"fa fa-envelope-o\"></i> letter to student alfreda.waldback@northridgeschool.edu',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/mail-merge-emails/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'student',\r\n      documentType: 'letter',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n    {\r\n      id: 'NEWSLETTER1',\r\n      name: '9. Newsletter 1',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'mail-merge-documents',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email-file-attached:clyde.grew@northridgeschool.edu.docx',\r\n          'email-file-attached:kyle.butford@northridgeschool.edu.docx',\r\n          'email-file-attached:alfreda.waldback@northridgeschool.edu.docx',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/newsletter-1/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'student',\r\n      documentType: 'letter',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n  ];\r\n\r\n  getInputHtml(id: string, fullDetails?: boolean) {\r\n    const sample = this.samples.find((sample) => sample.id == id);\r\n    const inputs: string[] = sample.input.data;\r\n    const inputsUrl: string[] = sample.input.dataUrl;\r\n\r\n    let inputLabel = inputs[0].replace('file:', '');\r\n    let inputUrl: string;\r\n\r\n    if (inputsUrl && inputsUrl.length) {\r\n      inputUrl = inputsUrl[0].replace('file:', '');\r\n    }\r\n\r\n    //let inputLabel = inputs[0];\r\n\r\n    let inputFileIcon = 'fa-file-pdf-o';\r\n    if (inputLabel.endsWith('.xls')) {\r\n      inputFileIcon = 'fa-file-excel-o';\r\n    } else if (inputLabel.endsWith('.csv')) {\r\n      inputFileIcon = 'fa-file-text-o';\r\n    }\r\n\r\n    let inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${inputLabel}`;\r\n    if (fullDetails)\r\n      inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}`;\r\n\r\n    if (inputUrl) {\r\n      inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank\">${inputLabel}</a>`;\r\n      if (fullDetails)\r\n        inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank\">${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}</a>`;\r\n    }\r\n\r\n    for (let index = 1; index < inputs.length; index++) {\r\n      inputLabel = inputs[index].replace('file:', '');\r\n      //inputLabel = inputs[index];\r\n      let currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${inputLabel}`;\r\n      if (fullDetails)\r\n        currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}`;\r\n\r\n      //console.log(`inputsUrl = ${JSON.stringify(inputsUrl)}`);\r\n\r\n      if (inputUrl) {\r\n        inputUrl = inputsUrl[index].replace('file:', '');\r\n        currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank\">${inputLabel}</a>`;\r\n        if (fullDetails)\r\n          currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank>${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}</a>`;\r\n      }\r\n\r\n      inputHtml = `${inputHtml}<br>${currentHtml}`;\r\n    }\r\n\r\n    return inputHtml;\r\n  }\r\n\r\n  getOutputHtml(id: string, fullDetails?: boolean) {\r\n    const sample = this.samples.find((sample) => sample.id == id);\r\n\r\n    //console.log(`sample = ${JSON.stringify(sample)}`);\r\n\r\n    if (sample.outputHtmlHardcoded) return sample.outputHtmlHardcoded;\r\n\r\n    const outputs: string[] = sample.output.data;\r\n    let outputLabel = outputs[0].replace('file:', '');\r\n\r\n    let attachmentFileIcon = 'fa-file-pdf-o';\r\n    if (outputLabel.endsWith('.docx')) attachmentFileIcon = 'fa-file-word-o';\r\n    let outputHtml = '';\r\n    if (fullDetails) {\r\n      const inputs: string[] = sample.input.data;\r\n      if (inputs.length == 1) {\r\n        const inputFileName = Utilities.basename(inputs[0]);\r\n\r\n        outputHtml = `<strong>Folder</strong><br>${this.settingsService.PORTABLE_EXECUTABLE_DIR}/output/${inputFileName}/\\${now?format[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}<br>${outputHtml}`;\r\n      }\r\n    } else {\r\n      if (sample.capReportDistribution)\r\n        outputHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n      else\r\n        outputHtml = `<i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel} ${sample.recipientType} ${sample.documentType}`;\r\n    }\r\n\r\n    //console.log(`outputHtml = ${outputHtml}`);\r\n\r\n    if (!fullDetails) {\r\n      for (let index = 1; index < outputs.length; index++) {\r\n        outputLabel = outputs[index].replace('file:', '');\r\n        let currentHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n        if (!sample.capReportDistribution)\r\n          currentHtml = `<i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel} ${sample.recipientType} ${sample.documentType}`;\r\n\r\n        outputHtml = `${outputHtml}<br>${currentHtml}`;\r\n      }\r\n    } else {\r\n      outputHtml = `${outputHtml}<strong>Files</strong>`;\r\n\r\n      for (let index = 0; index < outputs.length; index++) {\r\n        outputLabel = outputs[index].replace('file:', '');\r\n        //console.log(`outputLabel = ${outputLabel}`);\r\n\r\n        let currentHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n        if (!sample.capReportDistribution)\r\n          currentHtml = `<i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel} ${sample.recipientType} ${sample.documentType}`;\r\n\r\n        outputHtml = `${outputHtml}<br>${currentHtml}`;\r\n      }\r\n\r\n      if (sample.capReportDistribution) {\r\n        outputHtml = `${outputHtml}<br><strong>Emails</strong>`;\r\n\r\n        for (let index = 0; index < outputs.length; index++) {\r\n          outputLabel = outputs[index].replace('file:', '');\r\n          let currentHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n          outputHtml = `${outputHtml}<br>${currentHtml}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return outputHtml;\r\n  }\r\n\r\n  async fillSamplesNotes() {\r\n    //if not yet loaded\r\n    if (this.samples[0].notes.length == 0) {\r\n      const sampleConfigurations =\r\n        this.settingsService.getSampleConfigurations();\r\n\r\n      for (let sample of this.samples) {\r\n        //console.log(JSON.stringify(sampleConfigurations));\r\n        const sampleConfigurationValues = sampleConfigurations.find(\r\n          (configuration) => {\r\n            return sample.configurationFilePath.endsWith(\r\n              configuration.filePath,\r\n            );\r\n          },\r\n        );\r\n\r\n        if (sampleConfigurationValues) {\r\n          sample.capReportDistribution =\r\n            sampleConfigurationValues.capReportDistribution;\r\n          sample.capReportGenerationMailMerge =\r\n            sampleConfigurationValues.capReportGenerationMailMerge;\r\n          sample.visibility = sampleConfigurationValues.visibility;\r\n        }\r\n\r\n        const notes = await this.translateService.instant(\r\n          `SAMPLES.${sample.id}.NOTES.INNER-HTML`,\r\n        );\r\n        sample.notes = notes;\r\n      }\r\n\r\n      this.countVisibleSamples = this.samples.filter(\r\n        (sample) => sample.visibility == 'visible',\r\n      ).length;\r\n    }\r\n  }\r\n\r\n  async toggleSampleVisibility(sample: SampleInfo, visibility: string) {\r\n    const settingsXmlConfigurationValues =\r\n      await this.settingsService.loadSettingsFileAsync(\r\n        sample.configurationFilePath,\r\n      );\r\n\r\n    settingsXmlConfigurationValues.documentburster.settings.visibility =\r\n      visibility;\r\n\r\n    await this.settingsService.saveSettingsFileAsync(\r\n      sample.configurationFilePath,\r\n      settingsXmlConfigurationValues,\r\n    );\r\n\r\n    sample.visibility = visibility;\r\n\r\n    const sampleConfiguration = this.settingsService\r\n      .getSampleConfigurations()\r\n      .find((configuration) =>\r\n        sample.configurationFilePath.endsWith(configuration.filePath),\r\n      );\r\n    sampleConfiguration.visibility = visibility;\r\n    this.countVisibleSamples = this.samples.filter(\r\n      (sample) => sample.visibility == 'visible',\r\n    ).length;\r\n  }\r\n\r\n  async hideAllSamples() {\r\n    for (let sample of this.samples) {\r\n      this.toggleSampleVisibility(sample, 'hidden');\r\n    }\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "activeClicked",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "capReportDistribution",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "capReportGenerationMailMerge",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "configurationFileName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "configurationFilePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "documentation",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 33
        },
        {
          "name": "documentType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "jobType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "notes",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "output",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "outputHtmlHardcoded",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "recipientType",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "step1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "step2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "step3",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "visibility",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "TmplFileInfo",
      "id": "interface-TmplFileInfo-b1c5d3297d08cbcdc8e9ca0cbca8929021cf374a58ff9d939b4ecb3754699b1851c901ca4cbaea5999a740f2bf28054fd23a7c86c107c3db6d6cb8f3ec84f8b3",
      "file": "src/app/providers/settings.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as semver from 'semver';\r\nimport { ApiService } from './api.service';\r\nimport Utilities from '../helpers/utilities';\r\nimport { APP_CONFIG } from '../../environments/environment';\r\nimport { SocketOptions } from '../helpers/websocket-endpoint';\r\nimport { FsService } from './fs.service';\r\nimport { UnixCliService } from './unix-cli.service';\r\n\r\nexport interface ExtConnection {\r\n  fileName: string;\r\n  filePath: string;\r\n  connectionCode: string;\r\n  connectionName: string;\r\n  connectionType: string;\r\n  activeClicked: boolean;\r\n  defaultConnection: boolean;\r\n  usedBy?: string;\r\n  emailserver: {\r\n    host: string;\r\n    port: string;\r\n    userid: string;\r\n    userpassword: string;\r\n    usessl: boolean;\r\n    usetls: boolean;\r\n    fromaddress: string;\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport const newEmailServer = {\r\n  host: 'Email Server Host',\r\n  port: '25',\r\n  userid: 'From Email User ID',\r\n  userpassword: 'From Email Password',\r\n  usessl: false,\r\n  usetls: false,\r\n  fromaddress: 'from@emailaddress.com',\r\n  name: 'From Name',\r\n};\r\n\r\nexport interface TmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  type: string;\r\n  content?: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n}\r\n\r\nexport interface CfgTmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  templateName: string;\r\n  capReportGenerationMailMerge: boolean;\r\n  capReportDistribution: boolean;\r\n  dsInputType: string;\r\n  notes: string;\r\n  visibility: string;\r\n  type: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n  isFallback: boolean;\r\n  activeClicked?: boolean;\r\n  useEmlConn?: boolean;\r\n  emlConnCode?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SettingsService {\r\n  xmlInternalSettings = {\r\n    documentburster: {\r\n      settings: {\r\n        skin: 'skin-blue',\r\n        backendurl: 'http://localhost:9090',\r\n      },\r\n    },\r\n  };\r\n\r\n  PORTABLE_EXECUTABLE_DIR: string;\r\n  RUNNING_IN_E2E: boolean;\r\n  SHOULD_SEND_STATS: boolean;\r\n\r\n  LOGS_FOLDER_PATH: string;\r\n  QUARANTINE_FOLDER_PATH: string;\r\n\r\n  JOBS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_BURST_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_REPORTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_CONNECTIONS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_DEFAULTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_SAMPLES_FOLDER_PATH: string;\r\n  CONFIGURATION_TEMPLATES_FOLDER_PATH: string;\r\n\r\n  INTERNAL_SETTINGS_FILE_PATH: string;\r\n\r\n  UPDATE_JAR_FILE_PATH: string;\r\n\r\n  currentConfigurationTemplatePath: string;\r\n  currentConfigurationTemplateName: string;\r\n\r\n  currentConfigurationTemplate: TmplFileInfo;\r\n\r\n  configurationFiles: Array<CfgTmplFileInfo> = [];\r\n  templateFiles: Array<TmplFileInfo> = [];\r\n\r\n  defaultEmailConnectionFile: ExtConnection;\r\n  connectionFiles: Array<ExtConnection> = [];\r\n\r\n  numberOfUserVariables: number;\r\n\r\n  isWindows: boolean = false;\r\n  isServerVersion: boolean = false;\r\n\r\n  isJServerStarted: boolean = false;\r\n\r\n  product: string = 'DocumentBurster';\r\n\r\n  version: semver.SemVer;\r\n\r\n  connectionsLoading: number = 0;\r\n\r\n  activeWebSocketSubcriptions: SocketOptions[] = [];\r\n\r\n  constructor(\r\n    public apiService: ApiService,\r\n    protected fsService: FsService,\r\n    protected unixCliService: UnixCliService,\r\n  ) {\r\n    let process = undefined;\r\n\r\n    if (typeof window.require === 'function') {\r\n      process = window.require('process');\r\n    }\r\n    if (process) {\r\n      this.PORTABLE_EXECUTABLE_DIR = process.env.PORTABLE_EXECUTABLE_DIR;\r\n\r\n      this.RUNNING_IN_E2E = new Boolean(process.env.RUNNING_IN_E2E).valueOf();\r\n      this.SHOULD_SEND_STATS = new Boolean(\r\n        process.env.SHOULD_SEND_STATS,\r\n      ).valueOf();\r\n    } else {\r\n      console.log(\r\n        `window.require('process') NOT AVAILABLE ==> PORTABLE_EXECUTABLE_DIR could not be read (why Virgil, in a Web App, are you using window.require('process')?! instead of using the Java Server for this stuff!!!!)`,\r\n      );\r\n    }\r\n\r\n    this.LOGS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.logs}`;\r\n    this.QUARANTINE_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.quarantine}`;\r\n\r\n    //console.log(`PORTABLE_EXECUTABLE_DIR = ${this.PORTABLE_EXECUTABLE_DIR}`);\r\n\r\n    //console.log(`LOGS_FOLDER_PATH = ${this.LOGS_FOLDER_PATH}`);\r\n\r\n    this.JOBS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.temp}`;\r\n\r\n    this.CONFIGURATION_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}`;\r\n    this.INTERNAL_SETTINGS_FILE_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_internal/settings.xml`;\r\n\r\n    this.CONFIGURATION_DEFAULTS_FOLDER_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_defaults`;\r\n\r\n    this.CONFIGURATION_BURST_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/burst`;\r\n\r\n    this.CONFIGURATION_REPORTS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/reports`;\r\n\r\n    this.CONFIGURATION_SAMPLES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/samples`;\r\n\r\n    this.CONFIGURATION_CONNECTIONS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/connections`;\r\n\r\n    this.CONFIGURATION_TEMPLATES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/templates`;\r\n  }\r\n\r\n  getDefaultsConfigurationValuesFilePath(): string {\r\n    return `${this.CONFIGURATION_DEFAULTS_FOLDER_PATH}/settings.xml`;\r\n  }\r\n\r\n  async loadDefaultSettingsFileAsync(): Promise<any> {\r\n    const systemInfo = await this.apiService.get('/jobman/system/info');\r\n    this.isWindows = systemInfo.osName.startsWith('Windows');\r\n\r\n    const startServerScripts = await this.unixCliService.findAsync(\r\n      this.PORTABLE_EXECUTABLE_DIR,\r\n      {\r\n        matching: ['startServer.*'],\r\n      },\r\n    );\r\n\r\n    if (startServerScripts && startServerScripts.length > 0) {\r\n      this.isServerVersion = true;\r\n      this.product = 'DocumentBurster Server';\r\n    }\r\n\r\n    let xmlSettings = {\r\n      documentburster: {\r\n        settings: null,\r\n      },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: this.getDefaultsConfigurationValuesFilePath(),\r\n    });\r\n\r\n    this.version = xmlSettings.documentburster.settings.version;\r\n\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveSettingsFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadSettingsFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      settings: any;\r\n    };\r\n  }> {\r\n    let xmlSettings = {\r\n      documentburster: { settings: {} },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: filePath,\r\n    });\r\n\r\n    //console.log(\r\n    //  `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n    //    xmlSettings\r\n    //  )}`\r\n    //);\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveConnectionFileAsync(\r\n    filePath: string,\r\n    xmlConnectionSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-connection?path=${path}`,\r\n      xmlConnectionSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadConnectionFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      connection: any;\r\n    };\r\n  }> {\r\n    let xmlConnectionSettings = {\r\n      documentburster: { connection: {} },\r\n    };\r\n\r\n    xmlConnectionSettings.documentburster = await this.apiService.get(\r\n      '/cfgman/rb/load-connection',\r\n      {\r\n        path: filePath,\r\n      },\r\n    );\r\n\r\n    console.log(\r\n      `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n        xmlConnectionSettings,\r\n      )}`,\r\n    );\r\n    return xmlConnectionSettings;\r\n  }\r\n\r\n  async loadPreferencesFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-internal', {\r\n      path: filePath,\r\n    });\r\n  }\r\n  async savePreferencesFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ): Promise<any> {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-internal?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadAllSettingsFilesAsync({\r\n    forceReload = false,\r\n  }: { forceReload?: boolean } = {}): Promise<Array<CfgTmplFileInfo>> {\r\n    if (\r\n      !forceReload &&\r\n      this.configurationFiles &&\r\n      this.configurationFiles.length > 0\r\n    )\r\n      return this.configurationFiles;\r\n\r\n    //console.log(\r\n    //  `this.CONFIGURATION_BURST_FOLDER_PATH = ${this.CONFIGURATION_BURST_FOLDER_PATH}`\r\n    //);\r\n\r\n    const burstConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_BURST_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `burstConfigFilePaths1 = ${JSON.stringify(burstConfigFilePaths)}`\r\n    //);\r\n\r\n    const reportsConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_REPORTS_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsConfigFilePaths2 = ${JSON.stringify(reportsConfigFilePaths)}`\r\n    //);\r\n\r\n    const samplesConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_SAMPLES_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    // console.log(\r\n    //   `samplesConfigFilePaths3 = ${JSON.stringify(samplesConfigFilePaths)}`\r\n    // );\r\n\r\n    const configFilePaths = burstConfigFilePaths\r\n      .concat(reportsConfigFilePaths)\r\n      .concat(samplesConfigFilePaths);\r\n\r\n    const configurationFiles: Array<CfgTmplFileInfo> = [];\r\n\r\n    for (let filePath of configFilePaths) {\r\n      const configurationFilePath = filePath;\r\n      const configurationFileName = Utilities.basename(configurationFilePath);\r\n\r\n      const isFallbackSettings =\r\n        configurationFilePath.endsWith('burst/settings.xml');\r\n\r\n      const isNotSettings =\r\n        configurationFilePath.endsWith('_defaults/settings.xml') ||\r\n        configurationFilePath.endsWith('preferences/settings.xml');\r\n\r\n      if (isNotSettings) continue;\r\n\r\n      //console.log(\r\n      //  `configurationFilePath4 = ${JSON.stringify(configurationFilePath)}`\r\n      // );\r\n\r\n      const settingsFileContent = await this.unixCliService.catAsync(filePath);\r\n\r\n      let startPos =\r\n        settingsFileContent.indexOf('<template>') + '<template>'.length;\r\n      let endPos = settingsFileContent.indexOf('</template>');\r\n      const settingsTemplateName = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportdistribution>') +\r\n        '<reportdistribution>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportdistribution>');\r\n      const boolReportDistribution = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportgenerationmailmerge>') +\r\n        '<reportgenerationmailmerge>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportgenerationmailmerge>');\r\n      const boolReportGenerationMailMerge = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<visibility>') + '<visibility>'.length;\r\n      endPos = settingsFileContent.indexOf('</visibility>');\r\n      const strVisibility = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos = settingsFileContent.indexOf('<useconn>') + '<useconn>'.length;\r\n      endPos = settingsFileContent.indexOf('</useconn>');\r\n      const boolUseEmailConnection = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<conncode>') + '<conncode>'.length;\r\n      endPos = settingsFileContent.indexOf('</conncode>');\r\n      const strEmailConnectionCode = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      let templateRelativeFilePath = `./config/burst/${configurationFileName}`;\r\n      let typeOfConfiguration = 'config-burst-legacy';\r\n\r\n      const folderName = Utilities.basename(\r\n        Utilities.dirname(configurationFilePath),\r\n      );\r\n\r\n      let dsInputType = '';\r\n\r\n      if (configurationFilePath.includes(`config/reports/${folderName}`)) {\r\n        typeOfConfiguration = 'config-reports';\r\n        templateRelativeFilePath = `./config/reports/${folderName}/settings.xml`;\r\n\r\n        if (boolReportGenerationMailMerge) {\r\n          const reportingXmlFilePath = `${Utilities.dirname(\r\n            configurationFilePath,\r\n          )}/reporting.xml`;\r\n\r\n          const reportingXmlFileContent =\r\n            await this.unixCliService.catAsync(reportingXmlFilePath);\r\n          startPos =\r\n            reportingXmlFileContent.indexOf('<type>') + '<type>'.length;\r\n          endPos = reportingXmlFileContent.indexOf('</type>');\r\n          dsInputType = reportingXmlFileContent\r\n            .substring(startPos, endPos)\r\n            .trim();\r\n        }\r\n      } else if (\r\n        configurationFilePath.includes(`config/samples/${folderName}`)\r\n      ) {\r\n        typeOfConfiguration = 'config-samples';\r\n        templateRelativeFilePath = `./config/samples/${folderName}/settings.xml`;\r\n      }\r\n\r\n      configurationFiles.push({\r\n        fileName: configurationFileName,\r\n        filePath: Utilities.slash(configurationFilePath),\r\n        relativeFilePath: templateRelativeFilePath,\r\n        templateName: settingsTemplateName,\r\n        isFallback: isFallbackSettings,\r\n        capReportDistribution: boolReportDistribution,\r\n        capReportGenerationMailMerge: boolReportGenerationMailMerge,\r\n        dsInputType: dsInputType,\r\n        visibility: strVisibility,\r\n        notes: '',\r\n        folderName: folderName,\r\n        type: typeOfConfiguration,\r\n        activeClicked: false,\r\n        useEmlConn: boolUseEmailConnection,\r\n        emlConnCode: strEmailConnectionCode,\r\n      });\r\n    }\r\n\r\n    this.configurationFiles = configurationFiles;\r\n\r\n    // console.log(\r\n    //   `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n    // );\r\n    return configurationFiles;\r\n  }\r\n\r\n  async loadAllConnectionFilesAsync() {\r\n    if (this.connectionsLoading == 1) return;\r\n\r\n    this.connectionsLoading = 1;\r\n\r\n    this.defaultEmailConnectionFile = undefined;\r\n\r\n    const connectionFiles: Array<ExtConnection> = [];\r\n\r\n    const connectionFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_CONNECTIONS_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    for (let connectionFilePath of connectionFilePaths) {\r\n      let connectionSettings = {\r\n        documentburster: {\r\n          connection: null,\r\n        },\r\n      };\r\n\r\n      // console.log(`connectionFilePath = ${JSON.stringify(connectionFilePath)}`);\r\n\r\n      connectionSettings.documentburster = await this.apiService.get(\r\n        '/cfgman/rb/load-connection',\r\n        {\r\n          path: connectionFilePath,\r\n        },\r\n      );\r\n      const connXml = connectionSettings.documentburster.connection;\r\n\r\n      //console.log(`connXml = ${JSON.stringify(connXml)}`);\r\n\r\n      const connectionFileName = Utilities.basename(connectionFilePath);\r\n      //console.log(\r\n      //  `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n      //);\r\n      connectionFiles.push({\r\n        fileName: connectionFileName,\r\n        filePath: connectionFilePath,\r\n        connectionCode: connXml.code,\r\n        connectionName: connXml.name,\r\n        connectionType: connectionFileName.startsWith('eml-')\r\n          ? 'email-connection'\r\n          : 'database-connection',\r\n        activeClicked: false,\r\n        defaultConnection: connXml.defaultConnection,\r\n        usedBy: this.configurationFiles\r\n          .filter((conf) => conf.useEmlConn && conf.emlConnCode == connXml.code)\r\n          .map((conf) => conf.templateName)\r\n          .join(', '),\r\n        emailserver: {\r\n          host: connXml.emailserver.host,\r\n          port: connXml.emailserver.port,\r\n          userid: connXml.emailserver.userid,\r\n          userpassword: connXml.emailserver.userpassword,\r\n          usessl: connXml.emailserver.usessl,\r\n          usetls: connXml.emailserver.usetls,\r\n          fromaddress: connXml.emailserver.fromaddress,\r\n          name: connXml.emailserver.name,\r\n        },\r\n      });\r\n    }\r\n\r\n    this.connectionFiles = connectionFiles;\r\n\r\n    this.defaultEmailConnectionFile = this.getConnectionDetails({\r\n      connectionType: 'email-connection',\r\n      defaultConnection: true,\r\n      connectionCode: '',\r\n    });\r\n\r\n    //console.log(\r\n    //  `this.defaultEmailConnectionFile = ${JSON.stringify(\r\n    //    this.defaultEmailConnectionFile\r\n    //  )}`\r\n    //);\r\n\r\n    this.connectionsLoading = 0;\r\n  }\r\n\r\n  isDefaultEmailConnectionConfigured(): boolean {\r\n    return (\r\n      this.defaultEmailConnectionFile &&\r\n      this.defaultEmailConnectionFile.emailserver &&\r\n      this.defaultEmailConnectionFile.emailserver.host != 'Email Server Host' &&\r\n      this.defaultEmailConnectionFile.emailserver.name != 'From Name' &&\r\n      this.defaultEmailConnectionFile.emailserver.fromaddress !=\r\n        'from@emailaddress.com' &&\r\n      this.defaultEmailConnectionFile.emailserver.userid !=\r\n        'From Email User ID' &&\r\n      this.defaultEmailConnectionFile.emailserver.userpassword !=\r\n        'From Email Password'\r\n    );\r\n  }\r\n\r\n  async loadAllReportTemplatesFilesAsync() {\r\n    let relativeFilePath: string, tplType: string;\r\n    const emailsTemplateFiles: Array<TmplFileInfo> = [];\r\n    const reportsTemplateFiles: Array<TmplFileInfo> = [];\r\n\r\n    let reportsTemplateFilePaths = await this.unixCliService.findAsync(\r\n      `${this.CONFIGURATION_TEMPLATES_FOLDER_PATH}/reports`,\r\n      {\r\n        matching: ['*.docx', '*.html'],\r\n        files: true,\r\n        directories: false,\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsTemplateFilePaths = ${JSON.stringify(reportsTemplateFilePaths)}`\r\n    //);\r\n\r\n    //const samplesReportsTemplateFilePaths = [];\r\n\r\n    //reportsTemplateFilePaths = reportsTemplateFilePaths.concat(\r\n    //  samplesReportsTemplateFilePaths\r\n    //);\r\n\r\n    for (let filePath of reportsTemplateFilePaths) {\r\n      console.log(`filePath = ${filePath}`);\r\n\r\n      const reportTemplateFileName = Utilities.basename(filePath);\r\n\r\n      const folderName = Utilities.basename(Utilities.dirname(filePath));\r\n\r\n      if (filePath.includes('samples/reports')) {\r\n        tplType = 'template-report-sample';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/samples/reports/`,\r\n          '',\r\n        );\r\n      } else {\r\n        tplType = 'template-report';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/reports/`,\r\n          '',\r\n        );\r\n      }\r\n\r\n      reportsTemplateFiles.push({\r\n        fileName: reportTemplateFileName,\r\n        filePath: filePath,\r\n        type: tplType,\r\n        folderName: folderName,\r\n        relativeFilePath: relativeFilePath,\r\n      });\r\n    }\r\n\r\n    const templateFiles = emailsTemplateFiles.concat(reportsTemplateFiles);\r\n\r\n    this.templateFiles = templateFiles;\r\n    return templateFiles;\r\n  }\r\n\r\n  async saveReportingFileAsync(\r\n    filePath: string,\r\n    xmlReporting: { documentburster: {} },\r\n  ) {\r\n    console.log(\r\n      `saveReportingFileAsynce xmlReporting = ${JSON.stringify(xmlReporting)}`,\r\n    );\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-reporting?path=${filePath}`,\r\n      xmlReporting.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadReportingFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-reporting', {\r\n      path: filePath,\r\n    });\r\n  }\r\n\r\n  getConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type != 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getMailMergeConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.capReportGenerationMailMerge;\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getReportTemplates(outputType: string, filter: { samples: boolean }) {\r\n    return this.templateFiles.filter((template) => {\r\n      let filterConditionDocx = false;\r\n      let filterConditionHtml = false;\r\n\r\n      if (outputType == 'output.docx') {\r\n        if (filter.samples)\r\n          filterConditionDocx = template.fileName.endsWith('.docx');\r\n        else\r\n          filterConditionDocx =\r\n            template.fileName.endsWith('.docx') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      if (outputType == 'output.html') {\r\n        if (filter.samples)\r\n          filterConditionHtml = template.fileName.endsWith('.html');\r\n        else\r\n          filterConditionHtml =\r\n            template.fileName.endsWith('.html') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      return filterConditionDocx || filterConditionHtml;\r\n    });\r\n  }\r\n\r\n  getSampleConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type == 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getConnectionDetails({\r\n    connectionType,\r\n    defaultConnection,\r\n    connectionCode,\r\n  }: {\r\n    connectionType: string;\r\n    defaultConnection: boolean;\r\n    connectionCode: string;\r\n  }) {\r\n    //console.log(\r\n    //  `this.connectionFiles = ${JSON.stringify(this.connectionFiles)}`\r\n    //);\r\n    let connFiles = [];\r\n\r\n    if (this.connectionFiles.length > 0) {\r\n      connFiles = this.connectionFiles.filter((connection: ExtConnection) => {\r\n        return connection.connectionType == connectionType;\r\n      });\r\n\r\n      if (defaultConnection) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.defaultConnection;\r\n        });\r\n      }\r\n\r\n      if (connectionCode && connectionCode.length > 0) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.connectionCode == connectionCode;\r\n        });\r\n      }\r\n\r\n      if (connFiles && connFiles.length == 1) {\r\n        return connFiles[0];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "content",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 46
        },
        {
          "name": "fileName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "filePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "folderName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "relativeFilePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 45
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "User",
      "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
      "file": "src/stories/user.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface User {\n  name: string;\n}\n",
      "properties": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    }
  ],
  "injectables": [
    {
      "name": "ApiService",
      "id": "injectable-ApiService-6d6a3c86515e24d96591c4ce1df8dc57662f001dcaae2237d49807aa9621cb9dda5759d3d17891c443fc339ba6fcee05674cd0a2a2751c9a577246d9522565cc",
      "file": "src/app/providers/api.service.ts",
      "properties": [
        {
          "name": "BACKEND_URL",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [125]
        },
        {
          "name": "headers",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Headers",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [123]
        },
        {
          "name": "jwtToken",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [123]
        }
      ],
      "methods": [
        {
          "name": "checkError",
          "args": [
            {
              "name": "error",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 183,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "error",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "delete",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 178,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "extractTokenFromHttpResponse",
          "args": [
            {
              "name": "headers",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | null",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "headers",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "get",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "args",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "customHeaders",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 152,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "args",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customHeaders",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getBackendUrl",
          "args": [],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125, 134]
        },
        {
          "name": "getToken",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "isJavaOk",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "post",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "customHeaders",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 170,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customHeaders",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "put",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 174,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "request",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "method",
              "type": "RequestMethod",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''"
            },
            {
              "name": "customHeaders",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123, 134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "method",
              "type": "RequestMethod",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "body",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "customHeaders",
              "type": "Headers",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "serialize",
          "args": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "HttpParams",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setToken",
          "args": [
            {
              "name": "token",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "token",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { APP_CONFIG } from '../../environments/environment';\nimport Utilities from '../helpers/utilities';\nimport { HttpParams } from '@angular/common/http';\nimport { SettingsService } from './settings.service';\nimport { Inject } from '@angular/core';\nimport UtilitiesElectron from '../helpers/utilities-electron';\nimport { StateStoreService } from './state-store.service';\n\nexport enum RequestMethod {\n  get = 'GET',\n  head = 'HEAD',\n  post = 'POST',\n  put = 'PUT',\n  delete = 'DELETE',\n  options = 'OPTIONS',\n  patch = 'PATCH',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  public BACKEND_URL = '';\n\n  private headers: Headers;\n  private jwtToken: string;\n\n  constructor(protected stateStore: StateStoreService) {\n    this.getBackendUrl();\n\n    this.headers = new Headers({\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    });\n\n    this.jwtToken = '';\n  }\n\n  public isJavaOk(): boolean {\n    const isJavaOk = !this.BACKEND_URL.includes(\"'java' is not\");\n    const isChocoOk = !this.BACKEND_URL.includes(\"'choco' is not\");\n\n    this.stateStore.setup.java.isJavaOk = isJavaOk;\n    this.stateStore.setup.chocolatey.isChocoOk = isChocoOk;\n\n    return this.stateStore.setup.java.isJavaOk;\n  }\n\n  public async getBackendUrl(): Promise<string> {\n    if (this.BACKEND_URL && this.isJavaOk()) return this.BACKEND_URL;\n\n    this.BACKEND_URL = await UtilitiesElectron.getBackendUrl();\n    console.log(`api.server this.BACKEND_URL = ${this.BACKEND_URL}`);\n    return this.BACKEND_URL;\n  }\n\n  private serialize(obj: any): HttpParams {\n    let params = new HttpParams();\n\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key) && !Utilities.looseInvalid(obj[key])) {\n        params = params.set(key, obj[key]);\n      }\n    }\n\n    return params;\n  }\n\n  private extractTokenFromHttpResponse(headers: Headers): string | null {\n    const authorization = headers.get('Authorization');\n    if (authorization && authorization.startsWith('Bearer ')) {\n      return authorization.substring(7);\n    }\n    return null;\n  }\n\n  private setToken(token: string) {\n    this.jwtToken = token;\n  }\n\n  public getToken(): string {\n    return this.jwtToken;\n  }\n\n  private async request(\n    path: string,\n    method: RequestMethod,\n    body: any = '',\n    customHeaders?: Headers,\n  ): Promise<any> {\n    //console.log(`apiService.request.path: ${JSON.stringify(path)}`);\n\n    const url = `${await this.getBackendUrl()}${path}`;\n    const headers = new Headers(customHeaders || this.headers);\n    const options: RequestInit = {\n      method,\n      headers: customHeaders || this.headers,\n      credentials: 'include',\n    };\n\n    if (\n      method === RequestMethod.post ||\n      method === RequestMethod.put ||\n      method === RequestMethod.patch\n    ) {\n      if (body instanceof FormData) {\n        options.body = body;\n        // Remove the Content-Type header so the browser can set it\n        headers.delete('Content-Type');\n      } else if (customHeaders?.get('Content-Type') === 'text/plain') {\n        options.body = body;\n      } else {\n        options.body = JSON.stringify(body);\n        headers.set('Content-Type', 'application/json');\n      }\n    }\n    //console.log(`options.body = ${JSON.stringify(options.body)}`);\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n      this.checkError(response.status);\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n\n    const jwtToken = this.extractTokenFromHttpResponse(response.headers);\n    if (jwtToken) {\n      this.setToken(jwtToken);\n    }\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    } else {\n      let data = {};\n      if (response.headers.get('Content-Length') === '0') {\n        console.log('No data returned from API');\n      } else {\n        //console.log(`apiService.request.response: ${JSON.stringify(response)}`);\n\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          data = await response.json();\n        } else if (contentType && contentType.includes('text/plain')) {\n          data = await response.text();\n        }\n      }\n      return data;\n    }\n  }\n\n  public get(path: string, args?: any, customHeaders?: Headers): Promise<any> {\n    //console.log(`GET path: ${path}`);\n    //if (args) console.log(`GET args: ${JSON.stringify(args)}`);\n\n    const params = args ? this.serialize(args).toString() : '';\n    //if (args) console.log(`GET this.serialize(args).toString(): ${params}`);\n\n    //if (customHeaders)\n    //  console.log(`GET customHeaders: ${JSON.stringify(customHeaders)}`);\n\n    return this.request(\n      `${path}?${params}`,\n      RequestMethod.get,\n      undefined,\n      customHeaders,\n    );\n  }\n\n  public post(path: string, body?: any, customHeaders?: Headers): Promise<any> {\n    return this.request(path, RequestMethod.post, body, customHeaders);\n  }\n\n  public put(path: string, body: any): Promise<any> {\n    return this.request(path, RequestMethod.put, body);\n  }\n\n  public delete(path: string, body?: any): Promise<any> {\n    return this.request(path, RequestMethod.delete, body);\n  }\n\n  // Display error if logged in, otherwise redirect to IDP\n  private checkError(error: any): any {\n    // this.displayError(error);\n    throw error;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "stateStore",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "stateStore",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "AskForFeatureService",
      "id": "injectable-AskForFeatureService-14e71af7d953f0fe502f81b324b558e3221a7cf999135d9e494dee7a3678dd2a05d6b7c451ab6dc9a3d748d781046cd3d6c8d5de47ee6d75a839e7e12359d9c5",
      "file": "src/app/components/ask-for-feature/ask-for-feature.service.ts",
      "properties": [
        {
          "name": "alreadyImplementedFeatures",
          "defaultValue": "[\r\n    'ds.csvfile',\r\n    'output.none',\r\n    'output.docx',\r\n    'output.html',\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "messageTemplate",
          "defaultValue": "{\r\n    to: 'support@reportburster.com',\r\n    subject: \"New Feature Request - '{{nameYourFeatureHere}}'\",\r\n    message: `Hello,\r\n    \r\nMy name is {{YourNameHere}} and I work for {{YourCompanyNameHere}} where I am {{YourTitleHere}}.\r\n    \r\nWe would be interested to get the new feature '{{nameYourFeatureHere}}' implemented faster in DocumentBurster.\r\n\r\nFunctional Requirements \r\n\r\n{{describeYourFunctionalRequirementsAsClearyAsPossibleHere}}\r\n\r\nNon-Functional and Performance Related Requirements \r\n\r\n{{describeYourExpectedVolumeHere}}\r\n\r\n{{describeYourOtherNonFunctionalRequirementsHere}}\r\n    \r\nTimeline\r\n\r\nIdeally, we would need this new feature to be delivered no later than \r\n\r\n{{YourTimelineHere}}\r\n\r\nPlease let us know if it would be possible to get this feature implemented in DocumentBurster.\r\n\r\nSincerely,\r\n{{YourNameHere}}\r\n{{YourTitleHere}},{{YourCompanyNameHere}}\r\n`,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "modalRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BsModalRef",
          "optional": true,
          "description": "",
          "line": 50
        }
      ],
      "methods": [
        {
          "name": "showAskForFeature",
          "args": [
            {
              "name": "options",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "options",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { ToastrMessagesService } from '../../providers/toastr-messages.service';\r\nimport { AskForFeatureDialogComponent } from './ask-for-feature-dialog.component';\r\nimport { ShellService } from '../../providers/shell.service';\r\n@Injectable()\r\nexport class AskForFeatureService {\r\n  alreadyImplementedFeatures = [\r\n    'ds.csvfile',\r\n    'output.none',\r\n    'output.docx',\r\n    'output.html',\r\n  ];\r\n\r\n  messageTemplate = {\r\n    to: 'support@reportburster.com',\r\n    subject: \"New Feature Request - '{{nameYourFeatureHere}}'\",\r\n    message: `Hello,\r\n    \r\nMy name is {{YourNameHere}} and I work for {{YourCompanyNameHere}} where I am {{YourTitleHere}}.\r\n    \r\nWe would be interested to get the new feature '{{nameYourFeatureHere}}' implemented faster in DocumentBurster.\r\n\r\nFunctional Requirements \r\n\r\n{{describeYourFunctionalRequirementsAsClearyAsPossibleHere}}\r\n\r\nNon-Functional and Performance Related Requirements \r\n\r\n{{describeYourExpectedVolumeHere}}\r\n\r\n{{describeYourOtherNonFunctionalRequirementsHere}}\r\n    \r\nTimeline\r\n\r\nIdeally, we would need this new feature to be delivered no later than \r\n\r\n{{YourTimelineHere}}\r\n\r\nPlease let us know if it would be possible to get this feature implemented in DocumentBurster.\r\n\r\nSincerely,\r\n{{YourNameHere}}\r\n{{YourTitleHere}},{{YourCompanyNameHere}}\r\n`,\r\n  };\r\n\r\n  modalRef?: BsModalRef;\r\n  constructor(\r\n    protected modalService: BsModalService,\r\n    protected translateService: TranslateService,\r\n    protected messagesService: ToastrMessagesService,\r\n    protected settingsService: SettingsService,\r\n    protected shellService: ShellService,\r\n  ) {}\r\n\r\n  showAskForFeature(options: any): Promise<any> {\r\n    const titleLabel = this.translateService.instant(\r\n      'COMPONENTS.ASK-FOR-FEATURE-DIALOG.TITLE',\r\n    );\r\n\r\n    const confirmLabel = this.translateService.instant(\r\n      'COMPONENTS.ASK-FOR-FEATURE-DIALOG.CONFIRM',\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.modalRef = this.modalService.show(AskForFeatureDialogComponent, {\r\n        class: 'modal-lg',\r\n      });\r\n\r\n      this.modalRef.content.msgTo = this.messageTemplate.to;\r\n\r\n      let requestedFeatureFriendly = '';\r\n\r\n      const requestedFeature = options.requestedFeature;\r\n      switch (requestedFeature) {\r\n        case 'ds.tsvfile':\r\n          requestedFeatureFriendly = 'TSV File (DataSource)';\r\n          break;\r\n        case 'ds.fixedwidthfile':\r\n          requestedFeatureFriendly = 'Fixed-Width File (DataSource)';\r\n          break;\r\n        case 'ds.excelfile':\r\n          requestedFeatureFriendly = 'Excel File (DataSource)';\r\n          break;\r\n        case 'ds.gsheet':\r\n          requestedFeatureFriendly =\r\n            'Google Sheets (cloud/saas service) (DataSource)';\r\n          break;\r\n        case 'ds.o365sheet':\r\n          requestedFeatureFriendly =\r\n            'Microsoft Office365 Excel (cloud/saas service) (DataSource)';\r\n          break;\r\n        case 'ds.database':\r\n          requestedFeatureFriendly = 'Database (remote server) (DataSource)';\r\n          break;\r\n        case 'output.pdf':\r\n          requestedFeatureFriendly = 'PDF Files (Output Type)';\r\n          break;\r\n        case 'output.xlsx':\r\n          requestedFeatureFriendly = 'Excel (xlsx) Files (Output Type)';\r\n          break;\r\n        case 'output.html':\r\n          requestedFeatureFriendly = 'HTML Files (Output Type)';\r\n          break;\r\n        default:\r\n          requestedFeatureFriendly = '';\r\n      }\r\n\r\n      if (requestedFeatureFriendly) {\r\n        this.modalRef.content.msgSubject = this.messageTemplate.subject.replace(\r\n          '{{nameYourFeatureHere}}',\r\n          requestedFeatureFriendly,\r\n        );\r\n        this.modalRef.content.msgMessage = this.messageTemplate.message.replace(\r\n          '{{nameYourFeatureHere}}',\r\n          requestedFeatureFriendly,\r\n        );\r\n      } else {\r\n        this.modalRef.content.msgSubject = this.messageTemplate.subject;\r\n        this.modalRef.content.msgMessage = this.messageTemplate.message;\r\n      }\r\n\r\n      this.modalRef.content.title = options.title ? options.title : titleLabel;\r\n      this.modalRef.content.confirmLabel = options.confirmLabel\r\n        ? options.confirmLabel\r\n        : confirmLabel;\r\n\r\n      this.modalRef.content.onClose.subscribe((result: boolean) => {\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalService",
            "type": "BsModalService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 50,
        "jsdoctags": [
          {
            "name": "modalService",
            "type": "BsModalService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "BashService",
      "id": "injectable-BashService-4f82de51843fb45bbfc832ebf8dce869783c932dc891f403fdcc773b5316de237c57db104f730ad203ca49c93f4e5978f58dcd7901d7f7ceb685d03e41c74e66",
      "file": "src/app/areas/install-setup-upgrade/bash.service.ts",
      "properties": [
        {
          "name": "logFilePath",
          "defaultValue": "`${this.settingService.PORTABLE_EXECUTABLE_DIR}/logs/bash.service.log`",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "pTerminalInput",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLInputElement",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "terminalService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TerminalService",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [125]
        }
      ],
      "methods": [
        {
          "name": "createJobFile",
          "args": [
            {
              "name": "jobType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "jobType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteJobFile",
          "args": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emptyLogFile",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "installChocolatey",
          "args": [],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "log",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "restartElectronApp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 72,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "typeCommandOnTerminalAndThenPressEnter",
          "args": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "unInstallChocolatey",
          "args": [],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TerminalService } from 'primeng/terminal';\r\n\r\nimport { ApiService } from '../../providers/api.service';\r\nimport Utilities from '../../helpers/utilities';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { FsService } from '../../providers/fs.service';\r\nimport UtilitiesElectron from '../../helpers/utilities-electron';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BashService {\r\n  logFilePath = `${this.settingService.PORTABLE_EXECUTABLE_DIR}/logs/bash.service.log`;\r\n\r\n  pTerminalInput: HTMLInputElement;\r\n\r\n  constructor(\r\n    protected apiService: ApiService,\r\n    protected fsService: FsService,\r\n    protected settingService: SettingsService,\r\n    public terminalService: TerminalService,\r\n  ) {}\r\n\r\n  typeCommandOnTerminalAndThenPressEnter(command: string) {\r\n    this.pTerminalInput.value = command;\r\n    this.pTerminalInput.dispatchEvent(new Event('input'));\r\n    this.pTerminalInput.dispatchEvent(\r\n      new KeyboardEvent('keydown', {\r\n        keyCode: 13,\r\n      } as KeyboardEventInit),\r\n    );\r\n    this.pTerminalInput.focus();\r\n  }\r\n\r\n  async createJobFile(jobType: string): Promise<string> {\r\n    let filePath = '';\r\n    if (jobType === 'update')\r\n      filePath = `${this.settingService.PORTABLE_EXECUTABLE_DIR}/updating DocumentBurster, please wait`;\r\n\r\n    const jobFileName = Utilities.getRandomJobFileName();\r\n\r\n    const jobFilePath = `${this.settingService.PORTABLE_EXECUTABLE_DIR}/temp/${jobFileName}`;\r\n    const jobFileContent = Utilities.getJobFileContent(\r\n      filePath,\r\n      jobType,\r\n      '14234234324324',\r\n    );\r\n\r\n    await UtilitiesElectron.writeAsync(jobFilePath, jobFileContent);\r\n    return jobFilePath;\r\n  }\r\n\r\n  async emptyLogFile() {\r\n    return this.fsService.writeAsync(this.logFilePath, '');\r\n  }\r\n\r\n  async installChocolatey(): Promise<void> {\r\n    return this.apiService.post('/jobman/system/install/chocolatey');\r\n  }\r\n\r\n  async unInstallChocolatey(): Promise<void> {\r\n    return this.apiService.post('/jobman/system/uninstall/chocolatey');\r\n  }\r\n\r\n  async log(message: string) {}\r\n\r\n  async deleteJobFile(jobFilePath: string) {\r\n    return this.fsService.removeAsync(jobFilePath);\r\n  }\r\n\r\n  restartElectronApp() {\r\n    //this should call the RUST writen program rb_rust_updater\r\n    //with the Electron APIs the restartElectronApp() never worked properly\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "terminalService",
            "type": "TerminalService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "terminalService",
            "type": "TerminalService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ConfirmService",
      "id": "injectable-ConfirmService-44afb37b84803d8602bd381eb6596ce8b2c4cc563c2ce8f541a66dfda65c471fea894edded30831446c6a0382c9fbe6129129d3face85f96432939e27c6b34b0",
      "file": "src/app/components/dialog-confirm/confirm.service.ts",
      "properties": [
        {
          "name": "modalRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BsModalRef",
          "optional": true,
          "description": "",
          "line": 7
        }
      ],
      "methods": [
        {
          "name": "askConfirmation",
          "args": [
            {
              "name": "options",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "options",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\r\n\r\n@Injectable()\r\nexport class ConfirmService {\r\n  modalRef?: BsModalRef;\r\n  constructor(protected modalService: BsModalService) {}\r\n\r\n  askConfirmation(options: any): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.modalRef = this.modalService.show(ConfirmDialogComponent);\r\n      this.modalRef.content.title = options.title\r\n        ? options.title\r\n        : 'Confirmation';\r\n      this.modalRef.content.message = options.message;\r\n      this.modalRef.content.confirmLabel = options.confirmLabel\r\n        ? options.confirmLabel\r\n        : 'Yes';\r\n      this.modalRef.content.declineLabel = options.declineLabel\r\n        ? options.declineLabel\r\n        : 'No';\r\n\r\n      this.modalRef.content.confirmAction = options.confirmAction;\r\n\r\n      this.modalRef.content.onClose.subscribe((result: boolean) => {\r\n        this.modalService.hide();\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalService",
            "type": "BsModalService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "modalService",
            "type": "BsModalService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ElectronService",
      "id": "injectable-ElectronService-78cba890f00c0bb80b4c83526a2c2d35aa989b951d8fdf42cecbf208d2159058eadf32053539ebd1962ba939edcc9328324e53935d98738de94d80a8c0af112c",
      "file": "src/app/core/services/electron/electron.service.ts",
      "properties": [
        {
          "name": "cet",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 65
        },
        {
          "name": "checkJavaSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 81
        },
        {
          "name": "childProcess",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "chocoVersion",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "dialog",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Dialog",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "exec",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "isChocoOk",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90
        },
        {
          "name": "isJavaOk",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "JAVA_HOME",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 74
        },
        {
          "name": "javaDiagnostics",
          "defaultValue": "{\r\n    javaHomeFolderExists: false,\r\n    pathIncludesJavaHomeBin: false,\r\n    javaExeExists: false,\r\n    jreHomeFolderExists: false,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "javaVersion",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 80
        },
        {
          "name": "JRE_HOME",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "log",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "logFilePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 93
        },
        {
          "name": "PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 77
        },
        {
          "name": "PORTABLE_EXECUTABLE_DIR",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 67
        },
        {
          "name": "process",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 59
        },
        {
          "name": "pTerminalInput",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLInputElement",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "RUNNING_IN_E2E",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "SHOULD_SEND_STATS",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "spawn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 62
        }
      ],
      "methods": [
        {
          "name": "_getEnvironmentVariableValue",
          "args": [
            {
              "name": "envKey",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "throwError",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 268,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "envKey",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "throwError",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "checkChocoVersion",
          "args": [
            {
              "name": "throwError",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 206,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "throwError",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "checkJava",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 224,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "checkJavaVersion",
          "args": [
            {
              "name": "throwError",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "throwError",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "clock",
          "args": [
            {
              "name": "start",
              "type": "[number, number]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "start",
              "type": "[number, number]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createJobFile",
          "args": [
            {
              "name": "jobType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 493,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "jobType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteJobFile",
          "args": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 521,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emptyLogFile",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 489,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "generateScriptForRunningCommandAsAdministratorUsingBatchCmd",
          "args": [
            {
              "name": "commandToElevate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 406,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "commandToElevate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateScriptForRunningCommandAsAdministratorUsingPowerShell",
          "args": [
            {
              "name": "commandToElevate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "testCommand",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''"
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 349,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "commandToElevate",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "testCommand",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCommandReadyToBeRunAsAdministratorUsingBatchCmd",
          "args": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<ChildProcess>",
          "typeParameters": [],
          "line": 317,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCommandReadyToBeRunAsAdministratorUsingPowerShell",
          "args": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "testCommand",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''"
            }
          ],
          "optional": false,
          "returnType": "Promise<ChildProcess>",
          "typeParameters": [],
          "line": 332,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "testCommand",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "''",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "installChocolatey",
          "args": [],
          "optional": false,
          "returnType": "Promise<ChildProcess>",
          "typeParameters": [],
          "line": 286,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "logMessage",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 512,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "restartElectronApp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 536,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "typeCommandOnTerminalAndThenPressEnter",
          "args": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 525,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport * as process from 'process';\r\nimport { ChildProcess, spawn } from 'child_process';\r\nimport * as childProcess from 'child_process';\r\n\r\nimport * as jetpack from 'fs-jetpack';\r\nimport * as uniqueFilename from 'unique-filename';\r\n\r\nimport * as ElectronLog from 'electron-log';\r\n\r\nimport * as semver from 'semver';\r\nimport { SemVer } from 'semver';\r\nimport * as dayjs from 'dayjs';\r\n\r\nimport { Subscription, interval } from 'rxjs';\r\nimport * as CustomElectronTitlebar from 'custom-electron-titlebar/dist';\r\n\r\nimport { ApiService } from '../../../providers/api.service';\r\nimport Utilities from '../../../helpers/utilities';\r\nimport UtilitiesElectron from '../../../helpers/utilities-electron';\r\n\r\nclass Dialog {\r\n  showSaveDialog(options: {\r\n    defaultPath: string;\r\n  }): Promise<{ canceled: boolean; filePath?: string; bookmark?: string }> {\r\n    return new Promise((resolve, reject) => {\r\n      // Simulate a successful operation for demonstration purposes\r\n      resolve({\r\n        canceled: false, // change this to true to simulate a canceled operation\r\n        filePath: `${\r\n          window.require('process').env.PORTABLE_EXECUTABLE_DIR\r\n        }/temp/file`, // this will be undefined if the operation was canceled\r\n        bookmark: 'base64-encoded-bookmark', // this is optional and specific to macOS MAS\r\n      });\r\n    });\r\n  }\r\n\r\n  showOpenDialog(options: { defaultPath: string }): Promise<{\r\n    canceled: boolean;\r\n    filePaths: string[];\r\n    bookmarks?: string[];\r\n  }> {\r\n    return new Promise((resolve, reject) => {\r\n      // Simulate a successful operation for demonstration purposes\r\n      resolve({\r\n        canceled: false, // change this to true to simulate a canceled operation\r\n        filePaths: window.require('process').env.PORTABLE_EXECUTABLE_DIR, // this will be an empty array if the operation was canceled\r\n        bookmarks: ['base64-encoded-bookmark1', 'base64-encoded-bookmark2'], // this is optional and specific to macOS MAS\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ElectronService {\r\n  process: typeof process;\r\n  childProcess: typeof childProcess;\r\n  exec: typeof childProcess.exec;\r\n  spawn: typeof childProcess.spawn;\r\n\r\n  log: typeof ElectronLog;\r\n  cet: typeof CustomElectronTitlebar;\r\n\r\n  PORTABLE_EXECUTABLE_DIR: string;\r\n\r\n  SHOULD_SEND_STATS: boolean = false;\r\n  RUNNING_IN_E2E: boolean = false;\r\n\r\n  dialog: Dialog;\r\n\r\n  JAVA_HOME: string;\r\n  JRE_HOME: string;\r\n\r\n  PATH: string;\r\n\r\n  isJavaOk = false;\r\n  javaVersion: string;\r\n  checkJavaSubscription: Subscription;\r\n\r\n  javaDiagnostics = {\r\n    javaHomeFolderExists: false,\r\n    pathIncludesJavaHomeBin: false,\r\n    javaExeExists: false,\r\n    jreHomeFolderExists: false,\r\n  };\r\n\r\n  isChocoOk = false;\r\n  chocoVersion: string;\r\n\r\n  logFilePath: string;\r\n\r\n  pTerminalInput: HTMLInputElement;\r\n\r\n  constructor(protected apiService: ApiService) {\r\n    this.process = window.require('process');\r\n\r\n    this.PORTABLE_EXECUTABLE_DIR = this.process.env.PORTABLE_EXECUTABLE_DIR;\r\n\r\n    this.RUNNING_IN_E2E = new Boolean(\r\n      this.process.env.RUNNING_IN_E2E,\r\n    ).valueOf();\r\n\r\n    this.dialog = new Dialog();\r\n\r\n    //if (this.isElectron) {\r\n    this.childProcess = window.require('child_process');\r\n    this.exec = this.childProcess.exec;\r\n    this.spawn = this.childProcess.spawn;\r\n\r\n    this.log = window.require('electron-log');\r\n    this.cet = window.require('custom-electron-titlebar');\r\n\r\n    this.logFilePath = Utilities.slash(\r\n      `${this.PORTABLE_EXECUTABLE_DIR}/logs/bash.service.log`,\r\n    );\r\n\r\n    this.checkJavaSubscription = interval(1000).subscribe(async (x) => {\r\n      await this.checkJava();\r\n    });\r\n    //}\r\n  }\r\n\r\n  get isElectron(): boolean {\r\n    return !!(window && window.process && window.process.type);\r\n  }\r\n\r\n  clock(start?: [number, number]): [number, number] {\r\n    return [0, 0];\r\n  }\r\n\r\n  async checkJavaVersion(throwError = false) {\r\n    if (process.env.JAVA_HOME)\r\n      this.JAVA_HOME = Utilities.slash(process.env.JAVA_HOME);\r\n\r\n    if (process.env.JRE_HOME)\r\n      this.JRE_HOME = Utilities.slash(process.env.JRE_HOME);\r\n\r\n    this.PATH = process.env.PATH;\r\n\r\n    try {\r\n      //on Windows 7 java 8 java --version is not working, the command is simply java -version\r\n      //console.log(`java -version`);\r\n\r\n      //console.log(\r\n      //  `await this.execCommand('java -version') = ${await this.execCommand(\r\n      //    'java -version'\r\n      //  )}`\r\n      //);\r\n\r\n      const { stdout, stderr } =\r\n        await UtilitiesElectron.execNativeCommand('java -version');\r\n\r\n      //console.log(stdout, stderr);\r\n\r\n      let javaV = stdout;\r\n\r\n      if (!javaV) javaV = stderr;\r\n\r\n      //No errors => we have Java installed\r\n      //https://stackoverflow.com/questions/19734477/verify-if-java-is-installed-from-node-js/19734810\r\n\r\n      //console.log(`java javaV: ${javaV}`);\r\n\r\n      let firstLine: string = javaV;\r\n\r\n      // if (javaV) firstLine = javaV.split('\\n')[0];\r\n      //else firstLine = stderr.toString().split('\\n')[0];\r\n\r\n      // console.log(`firstLine: ${firstLine}`);\r\n\r\n      //sometimes it is coming as 'openjdk version \"14.0.2\" 2020-07-14'\r\n\r\n      let javaVersion = new RegExp('(java|openjdk) version').test(firstLine)\r\n        ? firstLine.split(' ')[2].replace(/\"/g, '')\r\n        : '';\r\n\r\n      //and sometimes it is coming as 'openjdk 14.0.2 2020-07-14'\r\n      if (!javaVersion)\r\n        javaVersion = new RegExp('(java|openjdk)').test(firstLine)\r\n          ? firstLine.split(' ')[1].replace(/\"/g, '')\r\n          : '';\r\n\r\n      //console.log(`java javaVersion: ${javaVersion}`);\r\n\r\n      //console.log(`javaVersion = ${javaV}`);\r\n      let semVersion = new SemVer(javaVersion);\r\n      const semVersion1_8 = semver.coerce('1.8');\r\n\r\n      if (!semver.valid(javaVersion)) semVersion = semver.coerce(javaVersion);\r\n\r\n      if (semver.gte(semVersion, semVersion1_8)) {\r\n        this.isJavaOk = true;\r\n        this.javaVersion = javaVersion.toString();\r\n      }\r\n\r\n      return javaV;\r\n    } catch (error) {\r\n      this.isJavaOk = false;\r\n      this.javaVersion = undefined;\r\n    }\r\n  }\r\n\r\n  async checkChocoVersion(throwError = false) {\r\n    try {\r\n      const { stdout, stderr } =\r\n        await UtilitiesElectron.execNativeCommand('choco --version');\r\n\r\n      if (!this.isChocoOk) this.isChocoOk = true;\r\n      this.chocoVersion = stdout;\r\n      //console.log(`this.chocoVersion  = ${this.chocoVersion}`);\r\n\r\n      return stdout;\r\n    } catch (error) {\r\n      if (this.isChocoOk) this.isChocoOk = false;\r\n      this.chocoVersion = undefined;\r\n\r\n      if (throwError) throw error;\r\n    }\r\n  }\r\n\r\n  async checkJava() {\r\n    await this.checkChocoVersion(true);\r\n    await this.checkJavaVersion(true);\r\n\r\n    if (this.JAVA_HOME) {\r\n      const javaHomeFolderPathExists = await jetpack.existsAsync(\r\n        this.JAVA_HOME,\r\n      );\r\n\r\n      if (javaHomeFolderPathExists === 'dir')\r\n        this.javaDiagnostics.javaHomeFolderExists = true;\r\n      else this.javaDiagnostics.javaHomeFolderExists = false;\r\n\r\n      const javaHomeBin = this.JAVA_HOME + '/bin';\r\n\r\n      if (\r\n        this.PATH.includes(javaHomeBin) ||\r\n        this.PATH.includes(this.JAVA_HOME + '\\\\bin')\r\n      )\r\n        this.javaDiagnostics.pathIncludesJavaHomeBin = true;\r\n      else this.javaDiagnostics.pathIncludesJavaHomeBin = false;\r\n\r\n      const javaExeFilePathExists = await jetpack.existsAsync(\r\n        javaHomeBin + '/java.exe',\r\n      );\r\n\r\n      if (javaExeFilePathExists === 'file')\r\n        this.javaDiagnostics.javaExeExists = true;\r\n      else this.javaDiagnostics.javaExeExists = false;\r\n    } else {\r\n      this.javaDiagnostics.javaHomeFolderExists = false;\r\n      this.javaDiagnostics.pathIncludesJavaHomeBin = false;\r\n      this.javaDiagnostics.javaExeExists = false;\r\n    }\r\n\r\n    if (this.JRE_HOME) {\r\n      const jreHomeFolderPathExists = await jetpack.existsAsync(this.JRE_HOME);\r\n\r\n      if (jreHomeFolderPathExists === 'dir')\r\n        this.javaDiagnostics.jreHomeFolderExists = true;\r\n      else this.javaDiagnostics.jreHomeFolderExists = false;\r\n    }\r\n  }\r\n\r\n  async _getEnvironmentVariableValue(envKey: string, throwError = false) {\r\n    // https://stackoverflow.com/questions/445167/how-can-i-get-the-value-of-a-registry-key-from-within-a-batch-script\r\n    // How can I get the value of a registry key from within a batch script?\r\n    let value = '';\r\n    const queryCommand = `for /F \"tokens=3*\" %A in ('reg query \"HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment\" /v \"${envKey}\"') DO @Echo %A %B`;\r\n\r\n    try {\r\n      const { stdout, stderr } =\r\n        await UtilitiesElectron.execNativeCommand(queryCommand);\r\n      if (stdout) value = stdout;\r\n    } catch (error) {\r\n      //console.log(`error = ${error}, throwError = ${throwError}`);\r\n\r\n      if (throwError) throw error;\r\n    } finally {\r\n      return value;\r\n    }\r\n  }\r\n  async installChocolatey(): Promise<ChildProcess> {\r\n    //https://chocolatey.org/docs/installation#install-using-powershell-from-cmdexe\r\n\r\n    //Step 1 generate /temp/installChocolatey.cmd\r\n    const scriptContent = `@echo off\r\n\r\nSET DIR=%~dp0%\r\n    \r\n::download install.ps1\r\n%systemroot%/System32/WindowsPowerShell/v1.0/powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"((new-object net.webclient).DownloadFile('https://chocolatey.org/install.ps1','%DIR%install.ps1'))\"\r\n::run installer\r\n%systemroot%/System32/WindowsPowerShell/v1.0/powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"& '%DIR%install.ps1' %*\"\r\ndel /f /s install.ps1\r\n`;\r\n\r\n    const scriptFilePath = Utilities.slash(\r\n      this.PORTABLE_EXECUTABLE_DIR + '/temp/installChocolatey.cmd',\r\n    );\r\n\r\n    await jetpack.writeAsync(scriptFilePath, scriptContent);\r\n\r\n    //Step 2 Run installChocolatey.cmd\r\n\r\n    // Run installChocolatey.cmd from an elevated cmd.exe command prompt and it will install the latest version of Chocolatey.\r\n    return Promise.resolve(\r\n      this.getCommandReadyToBeRunAsAdministratorUsingBatchCmd(\r\n        'CALL installChocolatey.cmd',\r\n      ),\r\n    );\r\n  }\r\n\r\n  async getCommandReadyToBeRunAsAdministratorUsingBatchCmd(\r\n    command: string,\r\n  ): Promise<ChildProcess> {\r\n    const elevatedScriptFilePath =\r\n      await this.generateScriptForRunningCommandAsAdministratorUsingBatchCmd(\r\n        command,\r\n      );\r\n\r\n    return Promise.resolve(\r\n      spawn('cmd.exe', ['/c', elevatedScriptFilePath], {\r\n        cwd: Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n      }),\r\n    );\r\n  }\r\n\r\n  async getCommandReadyToBeRunAsAdministratorUsingPowerShell(\r\n    command: string,\r\n    testCommand = '',\r\n  ): Promise<ChildProcess> {\r\n    const elevatedScriptFilePath =\r\n      await this.generateScriptForRunningCommandAsAdministratorUsingPowerShell(\r\n        command,\r\n        testCommand,\r\n      );\r\n\r\n    return Promise.resolve(\r\n      spawn('powershell.exe', [elevatedScriptFilePath], {\r\n        cwd: Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n      }),\r\n    );\r\n  }\r\n\r\n  async generateScriptForRunningCommandAsAdministratorUsingPowerShell(\r\n    commandToElevate: string,\r\n    testCommand = '',\r\n  ) {\r\n    //https://stackoverflow.com/questions/7690994/running-a-command-as-administrator-using-powershell\r\n    //Here's a self-elevating snippet for Powershell scripts which preserves the working directory:\r\n\r\n    const elevatedScriptFilePath =\r\n      uniqueFilename(\r\n        Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n        'elevated-powershell-script',\r\n      ) + '.ps1';\r\n    const now = dayjs().format('DD/MM/YYYY HH:mm:ss');\r\n\r\n    const scriptContent = `if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {\r\n      \r\n      # If not already admin\r\n      \r\n      Write-Host \"${now} - Executing '${commandToElevate}' as Administrator\";\r\n      Start-Process PowerShell -Verb RunAs \"-NoProfile -ExecutionPolicy Bypass -Command \\`\"cd '$pwd'; & '$PSCommandPath';\\`\"\";\r\n      \r\n      # Exit the non-elevated script\r\n      exit 0;\r\n    \r\n    }\r\n  \r\n    # Your script here\r\n    # Below code is executed RunAs admin\r\n\r\n    function timestamp {\r\n      \r\n      # append timestamp to each line of the input (output of the previous command in the pipeline)\r\n      foreach ($i in $input){\r\n          \"${now} - $i\"\r\n      }\r\n    }  \r\n\r\n    ${testCommand}\r\n    \r\n    # if ${testCommand} was succesfull\r\n    if($?)\r\n    {\r\n      Write-Host \"Please wait while executing '${commandToElevate}' as Administrator...\";\r\n      ${commandToElevate} 2>&1 | timestamp | Out-File -Append -Encoding ascii ${this.logFilePath};\r\n    }\r\n    else {\r\n      Add-Content ${this.logFilePath} \"${now} ERRROR - Could not execute '${commandToElevate}' because '${testCommand}' failed!\"\r\n    }\r\n    \r\n    Remove-Item $PSCommandPath;\r\n    `;\r\n\r\n    await jetpack.writeAsync(elevatedScriptFilePath, scriptContent);\r\n\r\n    return Promise.resolve(elevatedScriptFilePath);\r\n  }\r\n\r\n  async generateScriptForRunningCommandAsAdministratorUsingBatchCmd(\r\n    commandToElevate: string,\r\n  ) {\r\n    //https://stackoverflow.com/questions/7044985/how-can-i-auto-elevate-my-batch-file-so-that-it-requests-from-uac-administrator\r\n    //There is an easy way without the need to use an external tool - it runs fine with Windows 7, 8, 8.1 and 10\r\n\r\n    const elevatedScriptFilePath =\r\n      uniqueFilename(\r\n        Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n        'elevated-batch-cmd-script',\r\n      ) + '.cmd';\r\n\r\n    const now = dayjs().format('DD/MM/YYYY HH:mm:ss');\r\n\r\n    const scriptContent = `::::::::::::::::::::::::::::::::::::::::::::\r\n    :: Elevate.cmd - Version 4\r\n    :: Automatically check & get admin rights\r\n    :: see \"https://stackoverflow.com/a/12264592/1016343\" for description\r\n    ::::::::::::::::::::::::::::::::::::::::::::\r\n     @echo off\r\n     CLS\r\n     ECHO.\r\n     ECHO =============================\r\n     ECHO Please wait... Running '${commandToElevate}' as Admin...\r\n     ECHO =============================\r\n    \r\n    :init\r\n     setlocal DisableDelayedExpansion\r\n     set cmdInvoke=0\r\n     set winSysFolder=System32\r\n     set \"batchPath=%~0\"\r\n     for %%k in (%0) do set batchName=%%~nk\r\n     set \"vbsGetPrivileges=%temp%/OEgetPriv_%batchName%.vbs\"\r\n     setlocal EnableDelayedExpansion\r\n    \r\n    :checkPrivileges\r\n      NET FILE 1>NUL 2>NUL\r\n      if '%errorlevel%' == '0' ( goto gotPrivileges ) else ( goto getPrivileges )\r\n    \r\n    :getPrivileges\r\n      if '%1'=='ELEV' (echo ELEV & shift /1 & goto gotPrivileges)\r\n      ECHO.\r\n      ECHO **************************************\r\n      ECHO Invoking UAC for Privilege Escalation\r\n      ECHO **************************************\r\n    \r\n      ECHO Set UAC = CreateObject^(\"Shell.Application\"^) > \"%vbsGetPrivileges%\"\r\n      ECHO args = \"ELEV \" >> \"%vbsGetPrivileges%\"\r\n      ECHO For Each strArg in WScript.Arguments >> \"%vbsGetPrivileges%\"\r\n      ECHO args = args ^& strArg ^& \" \"  >> \"%vbsGetPrivileges%\"\r\n      ECHO Next >> \"%vbsGetPrivileges%\"\r\n    \r\n      if '%cmdInvoke%'=='1' goto InvokeCmd \r\n    \r\n      ECHO UAC.ShellExecute \"!batchPath!\", args, \"\", \"runas\", 1 >> \"%vbsGetPrivileges%\"\r\n      goto ExecElevation\r\n    \r\n    :InvokeCmd\r\n      ECHO args = \"/c \"\"\" + \"!batchPath!\" + \"\"\" \" + args >> \"%vbsGetPrivileges%\"\r\n      ECHO UAC.ShellExecute \"%SystemRoot%/%winSysFolder%/cmd.exe\", args, \"\", \"runas\", 1 >> \"%vbsGetPrivileges%\"\r\n    \r\n    :ExecElevation\r\n     \"%SystemRoot%/%winSysFolder%/WScript.exe\" \"%vbsGetPrivileges%\" %*\r\n     exit /B\r\n    \r\n    :gotPrivileges\r\n     setlocal & cd /d %~dp0\r\n     if '%1'=='ELEV' (del \"%vbsGetPrivileges%\" 1>nul 2>nul  &  shift /1)\r\n    \r\n     ::::::::::::::::::::::::::::\r\n     ::START\r\n     ::::::::::::::::::::::::::::\r\n     REM Run shell as admin (example) - put here code as you like\r\n     ${commandToElevate} 2>&1 >> ${this.logFilePath}\r\n     del /f /s *.cmd 2>&1 >> ${this.logFilePath}\r\n     cmd /k\r\n     `;\r\n\r\n    await jetpack.writeAsync(elevatedScriptFilePath, scriptContent);\r\n\r\n    return Promise.resolve(elevatedScriptFilePath);\r\n  }\r\n\r\n  async emptyLogFile() {\r\n    return jetpack.writeAsync(this.logFilePath, '');\r\n  }\r\n\r\n  async createJobFile(jobType: string): Promise<string> {\r\n    let filePath = '';\r\n    if (jobType === 'update')\r\n      filePath = `${this.PORTABLE_EXECUTABLE_DIR}/updating DocumentBurster, please wait`;\r\n\r\n    const jobFileName = Utilities.getRandomJobFileName();\r\n\r\n    const jobFilePath = `${this.PORTABLE_EXECUTABLE_DIR}/temp/${jobFileName}`;\r\n    const jobFileContent = Utilities.getJobFileContent(\r\n      filePath,\r\n      jobType,\r\n      '14234234324324',\r\n    );\r\n\r\n    await jetpack.writeAsync(jobFilePath, jobFileContent);\r\n\r\n    return Promise.resolve(Utilities.slash(jobFilePath));\r\n  }\r\n\r\n  async logMessage(message: string) {\r\n    if (message) {\r\n      return jetpack.appendAsync(\r\n        this.logFilePath,\r\n        '\\n' + dayjs().format('DD/MM/YYYY HH:mm:ss') + ' - ' + message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async deleteJobFile(jobFilePath: string) {\r\n    return jetpack.removeAsync(jobFilePath);\r\n  }\r\n\r\n  typeCommandOnTerminalAndThenPressEnter(command: string) {\r\n    this.pTerminalInput.value = command;\r\n    this.pTerminalInput.dispatchEvent(new Event('input'));\r\n    this.pTerminalInput.dispatchEvent(\r\n      new KeyboardEvent('keydown', {\r\n        keyCode: 13,\r\n      } as KeyboardEventInit),\r\n    );\r\n    this.pTerminalInput.focus();\r\n  }\r\n\r\n  restartElectronApp() {\r\n    //this should call the RUST writen program rb_rust_updater\r\n    //with the Electron APIs the restartElectronApp() never worked properly\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 95,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "isElectron": {
          "name": "isElectron",
          "getSignature": {
            "name": "isElectron",
            "type": "boolean",
            "returnType": "boolean",
            "line": 126
          }
        }
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ExecutionStatsService",
      "id": "injectable-ExecutionStatsService-fc27c3795d6bb4f8f1d6e1c2bf54210b4e5412c1a0c3bcb4fbf30e6e74742228fef6b5d35f3e3df6b9259ba2e7d307a9cb161b7984e3046eacb2414018cd9d52",
      "file": "src/app/providers/execution-stats.service.ts",
      "properties": [
        {
          "name": "jobStats",
          "defaultValue": "{\r\n    progressValue: 0,\r\n    numberOfActiveUpdateJobs: 0,\r\n    numberOfActiveJobs: 0,\r\n    progressJobFileExists: 0,\r\n    pauseJobFileExists: 0,\r\n    cancelJobFileExists: 0,\r\n    workingOnJobs: [],\r\n    workingOnFileNames: [],\r\n    niceWorkingOnFileNames: '',\r\n    jobsToResume: [],\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "logStats",
          "defaultValue": "{\r\n    infoLogFilePath: undefined,\r\n    errorsLogFilePath: undefined,\r\n    warningsLogFilePath: undefined,\r\n    bashServiceLogFilePath: undefined,\r\n    infoLogFileIsLocked: false,\r\n    errorsLogFileIsLocked: false,\r\n    warningsLogFileIsLocked: false,\r\n    bashServiceLogFileIsLocked: false,\r\n    infoLogFileSize: -1,\r\n    errorsLogFileSize: -1,\r\n    warningsLogFileSize: -1,\r\n    bashServiceLogFileSize: -1,\r\n    updateErrMessage: undefined,\r\n    foundDirtyLogFiles: false,\r\n    errorsLogLines: [],\r\n    errorsLogContent: '',\r\n    infoLogLines: [],\r\n    infoLogContent: '',\r\n    warningsLogLines: [],\r\n    warningsLogContent: '',\r\n    infoTailingActive: 0,\r\n    errorsTailingActive: 0,\r\n    warningsTailingActive: 0,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExecutionStatsService {\r\n  logStats = {\r\n    infoLogFilePath: undefined,\r\n    errorsLogFilePath: undefined,\r\n    warningsLogFilePath: undefined,\r\n    bashServiceLogFilePath: undefined,\r\n    infoLogFileIsLocked: false,\r\n    errorsLogFileIsLocked: false,\r\n    warningsLogFileIsLocked: false,\r\n    bashServiceLogFileIsLocked: false,\r\n    infoLogFileSize: -1,\r\n    errorsLogFileSize: -1,\r\n    warningsLogFileSize: -1,\r\n    bashServiceLogFileSize: -1,\r\n    updateErrMessage: undefined,\r\n    foundDirtyLogFiles: false,\r\n    errorsLogLines: [],\r\n    errorsLogContent: '',\r\n    infoLogLines: [],\r\n    infoLogContent: '',\r\n    warningsLogLines: [],\r\n    warningsLogContent: '',\r\n    infoTailingActive: 0,\r\n    errorsTailingActive: 0,\r\n    warningsTailingActive: 0,\r\n  };\r\n\r\n  jobStats = {\r\n    progressValue: 0,\r\n    numberOfActiveUpdateJobs: 0,\r\n    numberOfActiveJobs: 0,\r\n    progressJobFileExists: 0,\r\n    pauseJobFileExists: 0,\r\n    cancelJobFileExists: 0,\r\n    workingOnJobs: [],\r\n    workingOnFileNames: [],\r\n    niceWorkingOnFileNames: '',\r\n    jobsToResume: [],\r\n  };\r\n\r\n  constructor() {}\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 47
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "FsService",
      "id": "injectable-FsService-41de3895bdd3297a2501fdc5c1b24c309ea759b32923a14b7d058f1fb67d89bc635ee2330c592f1e8d267a676777682c68911bd889e6fef1bb9aeaa851ff5e73",
      "file": "src/app/providers/fs.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "copyAsync",
          "args": [
            {
              "name": "sourcePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "destinationPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}"
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "sourcePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "destinationPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "dirAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}"
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "existsAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<\"dir\" | \"file\" | \"other\" | >",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "fileAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}"
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "inspectAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}"
            }
          ],
          "optional": false,
          "returnType": "Promise<InspectResult | undefined>",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "readAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 92,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "removeAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resolveAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 152,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "content",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 103,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "content",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiService } from './api.service';\r\nimport Utilities from '../helpers/utilities';\r\n\r\nexport interface InspectResult {\r\n  name: string;\r\n  type: 'file' | 'dir' | 'symlink';\r\n  size: number;\r\n  absolutePath?: string;\r\n  md5?: string;\r\n  sha1?: string;\r\n  sha256?: string;\r\n  sha512?: string;\r\n  mode?: number;\r\n  accessTime?: Date;\r\n  modifyTime?: Date;\r\n  changeTime?: Date;\r\n  birthTime?: Date;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FsService {\r\n  constructor(protected apiService: ApiService) {}\r\n\r\n  async removeAsync(path: string) {\r\n    console.log('removeAsync', path);\r\n    return this.apiService.delete(\r\n      `/jobman/system/fs/delete-quietly?path=${encodeURIComponent(\r\n        Utilities.slash(path),\r\n      )}`,\r\n    );\r\n  }\r\n\r\n  async copyAsync(\r\n    sourcePath: string,\r\n    destinationPath: string,\r\n    criteria: {\r\n      overwrite?:\r\n        | boolean\r\n        | ((src: any, dest: any) => boolean | Promise<boolean>);\r\n      matching?: string[];\r\n      ignoreCase?: boolean;\r\n    } = {},\r\n  ): Promise<void> {\r\n    const overwrite =\r\n      typeof criteria.overwrite === 'function'\r\n        ? criteria.overwrite(sourcePath, destinationPath)\r\n        : criteria.overwrite;\r\n\r\n    console.log(`overwrite = ${overwrite}`);\r\n\r\n    let postUrl = `/jobman/system/fs/copy?fromPath=${encodeURIComponent(\r\n      Utilities.slash(sourcePath),\r\n    )}&toPath=${encodeURIComponent(Utilities.slash(destinationPath))}`;\r\n\r\n    if (overwrite) postUrl = `${postUrl}&overwrite=${overwrite}`;\r\n    if (criteria.matching) postUrl = `${postUrl}&matching=${criteria.matching}`;\r\n    if (criteria.matching)\r\n      postUrl = `${postUrl}&ignoreCase=${criteria.ignoreCase}`;\r\n\r\n    return this.apiService.post(postUrl);\r\n  }\r\n\r\n  async existsAsync(path: string): Promise<'dir' | 'file' | 'other' | false> {\r\n    return this.apiService.get(\r\n      '/jobman/system/fs/exists',\r\n      {\r\n        path: encodeURIComponent(Utilities.slash(path)),\r\n      },\r\n      new Headers({\r\n        Accept: 'text/plain',\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    );\r\n  }\r\n\r\n  async dirAsync(\r\n    path: string,\r\n    criteria: {\r\n      empty?: true;\r\n      mode?: string;\r\n    } = {},\r\n  ): Promise<void> {\r\n    return this.apiService.post(\r\n      `/jobman/system/fs/dir?path=${encodeURIComponent(Utilities.slash(path))}`,\r\n      criteria,\r\n    );\r\n  }\r\n\r\n  async readAsync(path: string): Promise<string> {\r\n    return this.apiService.get(\r\n      '/jobman/system/fs/read-file-to-string',\r\n      { path: encodeURIComponent(path) },\r\n      new Headers({\r\n        Accept: 'text/plain',\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    );\r\n  }\r\n\r\n  async writeAsync(path: string, content: string) {\r\n    const encodedPath = encodeURIComponent(Utilities.slash(path));\r\n    return this.apiService.post(\r\n      `/jobman/system/fs/write-string-to-file?path=${encodedPath}`,\r\n      content,\r\n      new Headers({\r\n        'Content-Type': 'text/plain',\r\n      }),\r\n    );\r\n  }\r\n\r\n  async fileAsync(\r\n    path: string,\r\n    criteria: {\r\n      content?: string | Buffer | Object | Array<any>;\r\n      jsonIndent?: number;\r\n      mode?: number | string;\r\n    } = {},\r\n  ): Promise<void> {\r\n    const encodedPath = encodeURIComponent(Utilities.slash(path));\r\n\r\n    return this.apiService.post(\r\n      `/jobman/system/fs/file?path=${encodedPath}`,\r\n      criteria,\r\n    );\r\n  }\r\n\r\n  inspectAsync(\r\n    path: string,\r\n    criteria: {\r\n      checksum?: 'md5' | 'sha1' | 'sha256' | 'sha512';\r\n      mode?: boolean;\r\n      times?: boolean;\r\n      absolutePath?: boolean;\r\n      symlinks?: 'report' | 'follow';\r\n    } = {},\r\n  ): Promise<InspectResult | undefined> {\r\n    return this.apiService.get(\r\n      `/jobman/system/fs/inspect/${encodeURIComponent(Utilities.slash(path))}`,\r\n      {\r\n        checksum: criteria.checksum,\r\n        mode: criteria.mode,\r\n        times: criteria.times,\r\n        absolutePath: criteria.absolutePath,\r\n        symlinks: criteria.symlinks,\r\n      },\r\n    );\r\n  }\r\n\r\n  async resolveAsync(path: string): Promise<string> {\r\n    console.log(`path = ${path}`);\r\n    return this.apiService.get(\r\n      '/jobman/system/fs/resolve',\r\n      {\r\n        path: encodeURIComponent(Utilities.slash(path)),\r\n      },\r\n      new Headers({\r\n        Accept: 'text/plain',\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "InfoService",
      "id": "injectable-InfoService-46df552e940f28e8944ff59155f43158ae58e9f2d0255ca9fc2239f99047f328c41615bba4a9d8ece46b65033fbbcf9b6b6f1ae008cebf566ff47a88ef7aba78",
      "file": "src/app/components/dialog-info/info.service.ts",
      "properties": [
        {
          "name": "modalRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BsModalRef",
          "optional": true,
          "description": "",
          "line": 6
        }
      ],
      "methods": [
        {
          "name": "showInformation",
          "args": [
            {
              "name": "options",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "options",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { InfoDialogComponent } from './info-dialog.component';\r\n@Injectable()\r\nexport class InfoService {\r\n  modalRef?: BsModalRef;\r\n  constructor(protected modalService: BsModalService) {}\r\n\r\n  showInformation(options: any): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.modalRef = this.modalService.show(InfoDialogComponent);\r\n      this.modalRef.content.title = options.title\r\n        ? options.title\r\n        : 'Information';\r\n      this.modalRef.content.message = options.message;\r\n      this.modalRef.content.confirmLabel = options.confirmLabel\r\n        ? options.confirmLabel\r\n        : 'OK';\r\n\r\n      this.modalRef.content.onClose.subscribe((result: boolean) => {\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "modalService",
            "type": "BsModalService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 6,
        "jsdoctags": [
          {
            "name": "modalService",
            "type": "BsModalService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "LicenseService",
      "id": "injectable-LicenseService-4a0be1e637d4e7994cd48b3653c0443dba0bd7cdb9a7756792355d57808c109029ebe1936ab050ffa028d29d5c7afe022f321306ae73cf3274b6d4b0c38445d0",
      "file": "src/app/providers/license.service.ts",
      "properties": [
        {
          "name": "changeLog",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Changelog",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "changeLogStr",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "isNewerVersionAvailable",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "latestVersion",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "semver.SemVer",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "licenseDetails",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "licenseFilePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "deActivateLicense",
          "args": [
            {
              "name": "exitCallback",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 135,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "exitCallback",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getChangeLogForTheDemoInstallationToo",
          "args": [],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 125,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadLicenseFileAsync",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 61,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "saveLicenseFileAsync",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "verifyLicense",
          "args": [
            {
              "name": "action",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "exitCallback",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "exitCallback",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport * as xml2js from 'xml2js';\r\n\r\nimport { unserialize } from 'php-serialize';\r\n\r\nimport { Changelog, parser } from 'keep-a-changelog';\r\n\r\nimport * as semver from 'semver';\r\n\r\nimport Utilities from '../helpers/utilities';\r\nimport { SettingsService } from './settings.service';\r\nimport { ShellService } from './shell.service';\r\nimport { FsService } from './fs.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LicenseService {\r\n  protected licenseFilePath: string;\r\n\r\n  licenseDetails: any;\r\n\r\n  changeLogStr: string;\r\n  changeLog: Changelog;\r\n\r\n  latestVersion: semver.SemVer;\r\n  isNewerVersionAvailable: boolean = false;\r\n\r\n  constructor(\r\n    protected settingsService: SettingsService,\r\n    protected shellService: ShellService,\r\n    protected fsService: FsService,\r\n  ) {\r\n    this.licenseFilePath = Utilities.slash(\r\n      `${this.settingsService.CONFIGURATION_FOLDER_PATH}/_internal/license.xml`,\r\n    );\r\n  }\r\n\r\n  async saveLicenseFileAsync() {\r\n    console.log(\r\n      `saveLicenseFileAsync - this.licenseDetails = ${JSON.stringify(\r\n        this.licenseDetails,\r\n      )}`,\r\n    );\r\n\r\n    const builder = new xml2js.Builder();\r\n\r\n    const licenseDetailsAsString = builder.buildObject(this.licenseDetails);\r\n\r\n    //console.log(\r\n    //  `saveLicenseFileAsync - licenseDetailsAsString = ${licenseDetailsAsString}`\r\n    //);\r\n\r\n    return this.fsService.writeAsync(\r\n      this.licenseFilePath,\r\n      licenseDetailsAsString,\r\n    );\r\n  }\r\n\r\n  async loadLicenseFileAsync() {\r\n    //if (this.latestVersion) return;\r\n\r\n    //console.log(`this.latestVersion = ${this.latestVersion}`);\r\n\r\n    //console.log(`license.service.loadLicenseFileAsync()`);\r\n\r\n    const content = await this.fsService.readAsync(this.licenseFilePath);\r\n\r\n    //console.log(`license.service.content = ${content}`);\r\n\r\n    this.licenseDetails = await Utilities.parseStringPromise(content, {\r\n      trim: true,\r\n      explicitArray: false,\r\n    });\r\n\r\n    // console.log(\r\n    //   `loadLicenseFileAsync - this.licenseDetails = ${JSON.stringify(\r\n    //     this.licenseDetails\r\n    //   )}`\r\n    // );\r\n\r\n    if (this.licenseDetails.license.latestversion) {\r\n      this.latestVersion = this.licenseDetails.license.latestversion;\r\n      this.changeLogStr = this.licenseDetails.license.changelog;\r\n    } // if it is a demo installation\r\n    else {\r\n      const response = await this.getChangeLogForTheDemoInstallationToo();\r\n      const bodyAsJson = await response.json();\r\n\r\n      //console.log(`response.json: ${JSON.stringify(bodyAsJson)}`);\r\n\r\n      this.latestVersion = bodyAsJson.new_version;\r\n\r\n      const { changelog } = unserialize(bodyAsJson.sections, {\r\n        description: String,\r\n        changelog: String,\r\n      });\r\n      this.changeLogStr = changelog;\r\n    }\r\n\r\n    this.isNewerVersionAvailable = false;\r\n\r\n    if (!this.settingsService.version)\r\n      await this.settingsService.loadDefaultSettingsFileAsync();\r\n\r\n    this.latestVersion = semver.coerce(this.latestVersion);\r\n    this.settingsService.version = semver.coerce(this.settingsService.version);\r\n\r\n    //console.log(\r\n    //  `this.latestVersion = ${this.latestVersion}, this.settingsService.version = ${this.settingsService.version}`\r\n    //);\r\n\r\n    if (semver.gt(this.latestVersion, this.settingsService.version)) {\r\n      this.isNewerVersionAvailable = true;\r\n    }\r\n\r\n    try {\r\n      //the \"Improved software changelog\" keepachangelog format was implemented in\r\n      //DocumentBurster v8.8.0\r\n      this.changeLog = parser(this.changeLogStr);\r\n    } catch {}\r\n  }\r\n\r\n  getChangeLogForTheDemoInstallationToo(): Promise<any> {\r\n    return Utilities.httpGet(\r\n      `https://www.pdfburst.com/store?edd_action=get_version&item_name=${this.settingsService.product}`,\r\n    );\r\n  }\r\n\r\n  verifyLicense(action, exitCallback?): Promise<void> {\r\n    return this.shellService.runBatFile([action], 'license', exitCallback);\r\n  }\r\n\r\n  deActivateLicense(exitCallback?) {\r\n    this.shellService.runBatFile(['-dl'], 'license', exitCallback);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 28,
        "jsdoctags": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "LogsServiceWebSocket",
      "id": "injectable-LogsServiceWebSocket-0bce8243cb7fd82166e9a96ad4423675c8fb17d7ac28f430648b71d155e15985c8729621dbdfcabc5245c7c07a1583fe09467824325034cb1a299a3e6d416ba8",
      "file": "src/app/providers/ws-logs.service.ts",
      "properties": [
        {
          "name": "logsSubjects",
          "defaultValue": "new Map<string, Subject<string>>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "subscriptionCheckIfLogFileWasCreatedIsEmptyOrRemoved",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "subscriptionsLogFileContent",
          "defaultValue": "new Map<string, Subscription>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "wsSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "StompSubscription",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "_messageIds",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 19,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_onSocketError",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_options",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SocketOptions",
          "optional": false,
          "description": "",
          "line": 11,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_socket",
          "defaultValue": "new SocketEndpoint()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SocketEndpoint",
          "optional": false,
          "description": "",
          "line": 13,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_socketListener",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 79,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "addToSubscribers",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 44,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "BACKEND_URL",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "connect",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 133,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "createObservableSocket",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [123],
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "getMessage",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 63,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "getObservable",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 59,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "getOptions",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "observableStompConnection",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any>",
          "optional": false,
          "description": "",
          "line": 15,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "reconnectionPromise",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 21,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "reconnectNow",
          "defaultValue": "function (this: WebSocketEndpoint) {\r\n    this._socket.stomp.disconnect();\r\n    if (this.reconnectionPromise && this.reconnectionPromise.cancel)\r\n      this.reconnectionPromise.cancel();\r\n    this.connect();\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 111,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "removeFromSubscribers",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 51,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "scheduleReconnection",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 100,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "send",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 118,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "subscriberIndex",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "subscribers",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 16,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        }
      ],
      "methods": [
        {
          "name": "checkIfFileWasCreatedIsEmptyOrRemoved",
          "args": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 227,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "checkLogsFolder",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 282,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "clearLogs",
          "args": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 208,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getLogs$",
          "args": [
            {
              "name": "fileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 201,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "makeWSConnectionAndHandleMessages",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "startTailing",
          "args": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "tailerStart",
          "args": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "tailerStop",
          "args": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 147,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "logFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "makeWSConnection",
          "args": [
            {
              "name": "options",
              "type": "SocketOptions",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "options",
              "type": "SocketOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Subject, Subscription, interval } from 'rxjs';\r\nimport {\r\n  SocketOptions,\r\n  WebSocketEndpoint,\r\n} from '../helpers/websocket-endpoint';\r\nimport { SettingsService } from './settings.service';\r\nimport { Constants } from '../helpers/constants';\r\nimport { ApiService } from './api.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { StompSubscription } from '@stomp/stompjs';\r\nimport { FsService } from './fs.service';\r\nimport { ExecutionStatsService } from './execution-stats.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LogsServiceWebSocket extends WebSocketEndpoint {\r\n  logsSubjects = new Map<string, Subject<string>>();\r\n  subscriptionsLogFileContent = new Map<string, Subscription>();\r\n\r\n  subscriptionCheckIfLogFileWasCreatedIsEmptyOrRemoved: Subscription;\r\n\r\n  wsSubscription: StompSubscription;\r\n\r\n  constructor(\r\n    protected apiService: ApiService,\r\n    protected settingsService: SettingsService,\r\n    protected fsService: FsService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  async makeWSConnectionAndHandleMessages() {\r\n    //if server is started and the subscription is not already active\r\n    const sOptions = new SocketOptions(\r\n      Constants.WS_ENDPOINT,\r\n      Constants.WS_TOPIC_TAILER,\r\n      this.apiService.getToken,\r\n    );\r\n\r\n    await this.makeWSConnection(sOptions);\r\n    this.settingsService.activeWebSocketSubcriptions.push(sOptions);\r\n\r\n    this.wsSubscription = this._socket.stomp.subscribe(\r\n      sOptions.topicName,\r\n      (data: any) => {\r\n        const message = this.getMessage(data);\r\n        //console.log(`message = ${JSON.stringify(message)}`);\r\n        const payload = message.message.filesPayload[0];\r\n        const fileName = payload.fileName;\r\n        if (this.logsSubjects.has(fileName)) {\r\n          const logLine = payload.fileContent;\r\n          this.logsSubjects.get(fileName).next(logLine);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  async startTailing(logFileName: string) {\r\n    const repeat = interval(750);\r\n    this.subscriptionCheckIfLogFileWasCreatedIsEmptyOrRemoved =\r\n      repeat.subscribe((val) =>\r\n        this.checkIfFileWasCreatedIsEmptyOrRemoved(logFileName),\r\n      );\r\n  }\r\n\r\n  async tailerStart(logFileName: string) {\r\n    if (!this.wsSubscription) {\r\n      await this.makeWSConnectionAndHandleMessages();\r\n    }\r\n\r\n    if (logFileName == 'info.log')\r\n      if (this.executionStatsService.logStats.infoTailingActive > 0) {\r\n        this.executionStatsService.logStats.infoTailingActive = 2;\r\n        return;\r\n      } else this.executionStatsService.logStats.infoTailingActive++;\r\n\r\n    if (logFileName == 'errors.log')\r\n      if (this.executionStatsService.logStats.errorsTailingActive > 0) {\r\n        this.executionStatsService.logStats.errorsTailingActive = 2;\r\n        return;\r\n      } else this.executionStatsService.logStats.errorsTailingActive++;\r\n\r\n    if (logFileName == 'warnings.log')\r\n      if (this.executionStatsService.logStats.warningsTailingActive > 0) {\r\n        this.executionStatsService.logStats.warningsTailingActive = 2;\r\n        return;\r\n      } else this.executionStatsService.logStats.warningsTailingActive++;\r\n\r\n    const subscriptionLogFileContent = this.getLogs$(logFileName).subscribe(\r\n      (logLine: string) => {\r\n        //console.log(`this.logFileName = ${logFileName}, logLine = ${logLine}`);\r\n\r\n        if (logFileName == 'info.log') {\r\n          if (\r\n            !this.executionStatsService.logStats.infoLogLines.includes(logLine)\r\n          ) {\r\n            this.executionStatsService.logStats.infoLogLines.unshift(logLine);\r\n          }\r\n          this.executionStatsService.logStats.infoLogContent =\r\n            this.executionStatsService.logStats.infoLogLines.join('\\n'); // Update the content property\r\n        }\r\n\r\n        if (logFileName == 'errors.log') {\r\n          if (\r\n            !this.executionStatsService.logStats.errorsLogLines.includes(\r\n              logLine,\r\n            )\r\n          ) {\r\n            this.executionStatsService.logStats.errorsLogLines.unshift(logLine);\r\n          }\r\n          this.executionStatsService.logStats.errorsLogContent =\r\n            this.executionStatsService.logStats.errorsLogLines.join('\\n'); // Update the content property\r\n\r\n          //console.log(\r\n          //  `this.executionStatsService.logStats.errorsLogContent = ${this.executionStatsService.logStats.errorsLogContent}`,\r\n          //);\r\n        }\r\n\r\n        if (logFileName == 'warnings.log') {\r\n          if (\r\n            !this.executionStatsService.logStats.warningsLogLines.includes(\r\n              logLine,\r\n            )\r\n          ) {\r\n            this.executionStatsService.logStats.warningsLogLines.unshift(\r\n              logLine,\r\n            );\r\n          }\r\n          this.executionStatsService.logStats.warningsLogContent =\r\n            this.executionStatsService.logStats.warningsLogLines.join('\\n'); // Update the content property\r\n        }\r\n      },\r\n    );\r\n\r\n    this.subscriptionsLogFileContent.set(\r\n      logFileName,\r\n      subscriptionLogFileContent,\r\n    );\r\n    await this.apiService.put('/jobman/logs/tailer', {\r\n      fileName: logFileName,\r\n      command: 'start',\r\n    });\r\n  }\r\n\r\n  async tailerStop(logFileName: string) {\r\n    //console.log(\r\n    //  `tailerStop: logFileName = ${logFileName}, logStats = ${JSON.stringify(this.executionStatsService.logStats)}`,\r\n    //);\r\n    if (logFileName == 'info.log')\r\n      if (this.executionStatsService.logStats.infoTailingActive == 2) {\r\n        this.executionStatsService.logStats.infoTailingActive--;\r\n        return;\r\n      } else {\r\n        this.executionStatsService.logStats.infoTailingActive = 0;\r\n\r\n        delete this.executionStatsService.logStats.infoLogContent;\r\n        this.executionStatsService.logStats.infoLogLines = [];\r\n      }\r\n\r\n    if (logFileName == 'errors.log')\r\n      if (this.executionStatsService.logStats.errorsTailingActive == 2) {\r\n        this.executionStatsService.logStats.errorsTailingActive--;\r\n        return;\r\n      } else {\r\n        this.executionStatsService.logStats.errorsTailingActive = 0;\r\n        delete this.executionStatsService.logStats.errorsLogContent;\r\n        this.executionStatsService.logStats.errorsLogLines = [];\r\n      }\r\n\r\n    if (logFileName == 'warnings.log')\r\n      if (this.executionStatsService.logStats.warningsTailingActive == 2) {\r\n        this.executionStatsService.logStats.warningsTailingActive--;\r\n        return;\r\n      } else {\r\n        this.executionStatsService.logStats.warningsTailingActive = 0;\r\n        delete this.executionStatsService.logStats.warningsLogContent;\r\n        this.executionStatsService.logStats.warningsLogLines = [];\r\n      }\r\n\r\n    if (this.logsSubjects.has(logFileName)) {\r\n      this.logsSubjects.get(logFileName).complete();\r\n      this.subscriptionsLogFileContent.get(logFileName).unsubscribe();\r\n      this.logsSubjects.delete(logFileName);\r\n    }\r\n\r\n    if (this.logsSubjects.size == 0) {\r\n      if (this.wsSubscription) {\r\n        this.wsSubscription.unsubscribe();\r\n        this.wsSubscription = null;\r\n      }\r\n    }\r\n\r\n    await this.apiService.put('/jobman/logs/tailer', {\r\n      fileName: logFileName,\r\n      command: 'stop',\r\n    });\r\n  }\r\n\r\n  getLogs$(fileName: string) {\r\n    if (!this.logsSubjects.has(fileName)) {\r\n      this.logsSubjects.set(fileName, new Subject<string>());\r\n    }\r\n    return this.logsSubjects.get(fileName).asObservable();\r\n  }\r\n\r\n  async clearLogs(logFileName?: string) {\r\n    if (logFileName) {\r\n      await this.fsService.writeAsync(\r\n        `${this.settingsService.LOGS_FOLDER_PATH}/${logFileName}`,\r\n        '',\r\n      );\r\n    } else {\r\n      const logsFiles = ['errors.log', 'warnings.log', 'info.log'];\r\n\r\n      for (const logFileName of logsFiles) {\r\n        await this.fsService.writeAsync(\r\n          `${this.settingsService.LOGS_FOLDER_PATH}/${logFileName}`,\r\n          '',\r\n        );\r\n      }\r\n      await this.checkLogsFolder();\r\n    }\r\n  }\r\n\r\n  async checkIfFileWasCreatedIsEmptyOrRemoved(logFileName: string) {\r\n    let logFileExists = false;\r\n    let logFileSize = -1;\r\n\r\n    switch (logFileName) {\r\n      case 'info.log': {\r\n        logFileExists =\r\n          this.executionStatsService.logStats.infoLogFileSize >= 0;\r\n        logFileSize = this.executionStatsService.logStats.infoLogFileSize;\r\n        break;\r\n      }\r\n      case 'errors.log': {\r\n        logFileExists =\r\n          this.executionStatsService.logStats.errorsLogFileSize >= 0;\r\n        logFileSize = this.executionStatsService.logStats.errorsLogFileSize;\r\n\r\n        break;\r\n      }\r\n      case 'warnings.log': {\r\n        logFileExists =\r\n          this.executionStatsService.logStats.warningsLogFileSize >= 0;\r\n        logFileSize = this.executionStatsService.logStats.warningsLogFileSize;\r\n\r\n        break;\r\n      }\r\n      case 'bash.service.log': {\r\n        logFileExists =\r\n          this.executionStatsService.logStats.bashServiceLogFileSize >= 0;\r\n        logFileSize =\r\n          this.executionStatsService.logStats.bashServiceLogFileSize;\r\n        break;\r\n      }\r\n      default: {\r\n        logFileExists = false;\r\n        logFileSize = -1;\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    //console.log(\r\n    //  `this.logFileName = ${logFileName}, logFileExists = ${logFileExists}, logFileSize = ${logFileSize}`,\r\n    //);\r\n\r\n    if (logFileExists) {\r\n      if (logFileSize <= 0) {\r\n        this.tailerStop(logFileName);\r\n      } else if (logFileSize > 0) {\r\n        this.tailerStart(logFileName);\r\n      }\r\n    } else {\r\n      this.tailerStop(logFileName);\r\n    }\r\n  }\r\n\r\n  async checkLogsFolder() {}\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": ["WebSocketEndpoint"],
      "type": "injectable"
    },
    {
      "name": "ProcessingService",
      "id": "injectable-ProcessingService-398fccc939e304c7c0030cd4d9af6a26c938f8390e10926310172f1d0a7ae9679e53f1902c01d1d4fcafbd5ede0e184d6d62f46c65393f0b0f96dd7fd62aef3e",
      "file": "src/app/providers/processing.service.ts",
      "properties": [
        {
          "name": "procBurstInfo",
          "defaultValue": "{\r\n    inputFile: null,\r\n    inputFileName: '',\r\n    prefilledInputFilePath: '',\r\n    prefilledConfigurationFilePath: '',\r\n    mailMergeClassicReportInputFilePath: '',\r\n    isSample: false,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "procMergeBurstInfo",
          "defaultValue": "{\r\n    inputFiles: [],\r\n    inputFilesNames: [],\r\n    shouldBurstResultedMergedFile: false,\r\n    mergedFileName: 'merged.pdf',\r\n    selectedFile: null,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "procQualityAssuranceInfo",
          "defaultValue": "{\r\n    inputFile: null,\r\n    inputFileName: '',\r\n    prefilledInputFilePath: '',\r\n    prefilledConfigurationFilePath: '',\r\n    whichAction: 'burst',\r\n    mode: 'ta',\r\n    listOfTokens: '',\r\n    numberOfRandomTokens: '2',\r\n    testEmailServerStatus: 'stopped',\r\n    testEmailServerUrl: '',\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 24
        }
      ],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProcessingService {\r\n  procBurstInfo = {\r\n    inputFile: null,\r\n    inputFileName: '',\r\n    prefilledInputFilePath: '',\r\n    prefilledConfigurationFilePath: '',\r\n    mailMergeClassicReportInputFilePath: '',\r\n    isSample: false,\r\n  };\r\n\r\n  procMergeBurstInfo = {\r\n    inputFiles: [],\r\n    inputFilesNames: [],\r\n    shouldBurstResultedMergedFile: false,\r\n    mergedFileName: 'merged.pdf',\r\n    selectedFile: null,\r\n  };\r\n\r\n  procQualityAssuranceInfo = {\r\n    inputFile: null,\r\n    inputFileName: '',\r\n    prefilledInputFilePath: '',\r\n    prefilledConfigurationFilePath: '',\r\n    whichAction: 'burst',\r\n    mode: 'ta',\r\n    listOfTokens: '',\r\n    numberOfRandomTokens: '2',\r\n    testEmailServerStatus: 'stopped',\r\n    testEmailServerUrl: '',\r\n  };\r\n}\r\n",
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "SamplesService",
      "id": "injectable-SamplesService-42ac4fb99e4a766ae67f21b4bcba7c2080616dbc4ac029e01ad79fa02aec86e38a160953e8a9a520e6ba115659569efd16142412c2b147b5ce3d3fae3af177a7",
      "file": "src/app/providers/samples.service.ts",
      "properties": [
        {
          "name": "countVisibleSamples",
          "defaultValue": "-1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "samples",
          "defaultValue": "[\r\n    {\r\n      id: 'MONTHLY-PAYSLIPS-SPLIT-ONLY',\r\n      name: '1. Monthly Payslips PDF (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/burst/Payslips.pdf'],\r\n        dataUrl: ['file:https://www.pdfburst.com/samples/Payslips.pdf'],\r\n        numberOfPages: 3,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'file:clyde.grew@northridgehealth.org.pdf',\r\n          'file:kyle.butford@northridgehealth.org.pdf',\r\n          'file:alfreda.waldback@northridgehealth.org.pdf',\r\n        ],\r\n        folder:\r\n          \"output/Payslips.pdf/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.pdf.html#chapter.pdf.bursting',\r\n    },\r\n    {\r\n      id: 'EXCEL-DISTINCT-SHEETS-SPLIT-ONLY',\r\n      name: '2. Monthly Payslips Excel - split Excel file by distinct sheets (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Payslips-Distinct-Sheets.xls'],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Payslips-Distinct-Sheets.xls',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      output: {\r\n        data: [\r\n          'file:clyde.grew@northridgehealth.org.xls',\r\n          'file:kyle.butford@northridgehealth.org.xls',\r\n          'file:alfreda.waldback@northridgehealth.org.xls',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-file-excel-o\"></i> clyde.grew@northridgehealth.org.xls employee payslip<br><i class=\"fa fa-file-excel-o\"></i> kyle.butford@northridgehealth.org.xls employee payslip<br><i class=\"fa fa-file-excel-o\"></i> alfreda.waldback@northridgehealth.org.xls employee payslip',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.excel.html#chapter.excel.bursting.by.distinct.sheets',\r\n    },\r\n    {\r\n      id: 'EXCEL-DISTINCT-COLUMN-VALUES-SPLIT-ONLY',\r\n      name: '3. Customer List/Country Excel - split Excel file by distinct column values (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Customers-Distinct-Column-Values.xls'],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Customers-Distinct-Column-Values.xls',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      output: {\r\n        data: [],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-file-excel-o\"></i> United States of America.xls<br><i class=\"fa fa-file-excel-o\"></i> Australia.xls<br><i class=\"fa fa-file-excel-o\"></i> Canada.xls<br><i class=\"fa fa-file-excel-o\"></i> United Kingdom.xls<br><i class=\"fa fa-file-excel-o\"></i> Germany.xls<br>etc... (separate file containing customer list for each country)',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoices',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.excel.html#chapter.excel.bursting.by.distinct.column.values',\r\n    },\r\n    {\r\n      id: 'INVOICES-SPLIT-ONCE-MORE-SPLIT-ONLY',\r\n      name: '4. Customers with Multiple Invoices PDF (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Split2Times.pdf'],\r\n        dataUrl: ['file:https://www.pdfburst.com/samples/Split2Times.pdf'],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      output: {\r\n        data: [\r\n          'file:10.pdf (for accounting@alphainsurance.biz)',\r\n          'file:9.pdf (for accounting@alphainsurance.biz)',\r\n          'file:8.pdf (for accounting@alphainsurance.biz)',\r\n          'file:7.pdf (for accounting@alphainsurance.biz)',\r\n          'file:6.pdf (for accounting@betainsurance.biz)',\r\n          'file:5.pdf (for accounting@betainsurance.biz)',\r\n          'file:4.pdf (for accounting@betainsurance.biz)',\r\n          'file:3.pdf (for accounting@gammahealth.biz)',\r\n          'file:2.pdf (for accounting@gammahealth.biz)',\r\n        ],\r\n        folder:\r\n          \"output/Payslips.pdf/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-two-times-split-only/settings.xml`,\r\n      configurationFileName: 'split-two-times-split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoice',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'http://www.pdfburst.com/docs/html/userguide/chapter.pdf.html#chapter.config.advanced',\r\n    },\r\n    {\r\n      id: 'INVOICES-MERGE-THEN-SPLIT',\r\n      name: '5. Customer Invoices PDF - Merge and then Process Multiple Files Together',\r\n      visibility: 'visible',\r\n      jobType: 'merge-burst',\r\n      input: {\r\n        data: [\r\n          'file:samples/burst/Invoices-Oct.pdf',\r\n          'file:samples/burst/Invoices-Nov.pdf',\r\n          'file:samples/burst/Invoices-Dec.pdf',\r\n        ],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Invoices-Oct.pdf',\r\n          'file:https://www.pdfburst.com/samples/Invoices-Nov.pdf',\r\n          'file:https://www.pdfburst.com/samples/Invoices-Dec.pdf',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      step1: 'merge',\r\n      step2: 'split',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'file:0011.pdf',\r\n          'file:0012.pdf',\r\n          'file:0013.pdf',\r\n          'file:0014.pdf',\r\n          'file:0015.pdf',\r\n          'file:0016.pdf',\r\n          'file:0017.pdf',\r\n          'file:0018.pdf',\r\n          'file:0019.pdf',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoice',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<SampleInfo>",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "samplesNotYetImplemented",
          "defaultValue": "[\r\n    {\r\n      id: 'GENERATE-EMAIL-PAYSLIPS',\r\n      name: '6. Monthly Payslips (again)',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'generate',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email-file-attached:clyde.grew@northridgehealth.org.docx',\r\n          'email-file-attached:kyle.butford@northridgehealth.org.docx',\r\n          'email-file-attached:alfreda.waldback@northridgehealth.org.docx',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/monthly-payslips-generate-docx/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n    {\r\n      id: 'MAIL-MERGE-EMAIL-LETTERS-TO-STUDENTS',\r\n      name: '7. Mail Merge Email Letters to All Students',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'mail-merge-emails',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email:clyde.grew@northridgeschool.edu',\r\n          'email:kyle.butford@northridgeschool.edu',\r\n          'email:alfreda.waldback@northridgeschool.edu',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-envelope-o\"></i> letter to student clyde.grew@northridgeschool.edu<br><i class=\"fa fa-envelope-o\"></i> letter to student kyle.butford@northridgeschool.edu<br><i class=\"fa fa-envelope-o\"></i> letter to student alfreda.waldback@northridgeschool.edu',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/mail-merge-emails/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'student',\r\n      documentType: 'letter',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n    {\r\n      id: 'NEWSLETTER1',\r\n      name: '9. Newsletter 1',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'mail-merge-documents',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email-file-attached:clyde.grew@northridgeschool.edu.docx',\r\n          'email-file-attached:kyle.butford@northridgeschool.edu.docx',\r\n          'email-file-attached:alfreda.waldback@northridgeschool.edu.docx',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/newsletter-1/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'student',\r\n      documentType: 'letter',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<SampleInfo>",
          "optional": false,
          "description": "",
          "line": 253
        }
      ],
      "methods": [
        {
          "name": "fillSamplesNotes",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 484,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "getInputHtml",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fullDetails",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 365,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fullDetails",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOutputHtml",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fullDetails",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 418,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fullDetails",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "hideAllSamples",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 547,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "toggleSampleVisibility",
          "args": [
            {
              "name": "sample",
              "type": "SampleInfo",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 520,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "sample",
              "type": "SampleInfo",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { SettingsService } from './settings.service';\r\nimport Utilities from '../helpers/utilities';\r\n\r\nexport interface SampleInfo {\r\n  id: string;\r\n  name: string;\r\n  visibility: string;\r\n  jobType: string;\r\n  input: {\r\n    data: string[];\r\n    dataUrl?: string[];\r\n    numberOfPages: number;\r\n    tokens: string[];\r\n  };\r\n  step1: string;\r\n  step2: string;\r\n  step3: string;\r\n  output: {\r\n    data: string[];\r\n    folder: string;\r\n  };\r\n  outputHtmlHardcoded: string;\r\n  configurationFilePath: string;\r\n  configurationFileName: string;\r\n  notes: string;\r\n  recipientType: string;\r\n  documentType: string;\r\n  activeClicked: boolean;\r\n  capReportDistribution: boolean;\r\n  capReportGenerationMailMerge: boolean;\r\n  documentation?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SamplesService {\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected settingsService: SettingsService,\r\n  ) {}\r\n\r\n  countVisibleSamples = -1;\r\n\r\n  samples: Array<SampleInfo> = [\r\n    {\r\n      id: 'MONTHLY-PAYSLIPS-SPLIT-ONLY',\r\n      name: '1. Monthly Payslips PDF (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/burst/Payslips.pdf'],\r\n        dataUrl: ['file:https://www.pdfburst.com/samples/Payslips.pdf'],\r\n        numberOfPages: 3,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'file:clyde.grew@northridgehealth.org.pdf',\r\n          'file:kyle.butford@northridgehealth.org.pdf',\r\n          'file:alfreda.waldback@northridgehealth.org.pdf',\r\n        ],\r\n        folder:\r\n          \"output/Payslips.pdf/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.pdf.html#chapter.pdf.bursting',\r\n    },\r\n    {\r\n      id: 'EXCEL-DISTINCT-SHEETS-SPLIT-ONLY',\r\n      name: '2. Monthly Payslips Excel - split Excel file by distinct sheets (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Payslips-Distinct-Sheets.xls'],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Payslips-Distinct-Sheets.xls',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      output: {\r\n        data: [\r\n          'file:clyde.grew@northridgehealth.org.xls',\r\n          'file:kyle.butford@northridgehealth.org.xls',\r\n          'file:alfreda.waldback@northridgehealth.org.xls',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-file-excel-o\"></i> clyde.grew@northridgehealth.org.xls employee payslip<br><i class=\"fa fa-file-excel-o\"></i> kyle.butford@northridgehealth.org.xls employee payslip<br><i class=\"fa fa-file-excel-o\"></i> alfreda.waldback@northridgehealth.org.xls employee payslip',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.excel.html#chapter.excel.bursting.by.distinct.sheets',\r\n    },\r\n    {\r\n      id: 'EXCEL-DISTINCT-COLUMN-VALUES-SPLIT-ONLY',\r\n      name: '3. Customer List/Country Excel - split Excel file by distinct column values (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Customers-Distinct-Column-Values.xls'],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Customers-Distinct-Column-Values.xls',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      output: {\r\n        data: [],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-file-excel-o\"></i> United States of America.xls<br><i class=\"fa fa-file-excel-o\"></i> Australia.xls<br><i class=\"fa fa-file-excel-o\"></i> Canada.xls<br><i class=\"fa fa-file-excel-o\"></i> United Kingdom.xls<br><i class=\"fa fa-file-excel-o\"></i> Germany.xls<br>etc... (separate file containing customer list for each country)',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoices',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'https://www.pdfburst.com/docs/html/userguide/chapter.excel.html#chapter.excel.bursting.by.distinct.column.values',\r\n    },\r\n    {\r\n      id: 'INVOICES-SPLIT-ONCE-MORE-SPLIT-ONLY',\r\n      name: '4. Customers with Multiple Invoices PDF (split only)',\r\n      visibility: 'visible',\r\n      jobType: 'burst',\r\n      step1: 'split',\r\n      step2: '',\r\n      step3: '',\r\n      input: {\r\n        data: ['file:samples/burst/Split2Times.pdf'],\r\n        dataUrl: ['file:https://www.pdfburst.com/samples/Split2Times.pdf'],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      output: {\r\n        data: [\r\n          'file:10.pdf (for accounting@alphainsurance.biz)',\r\n          'file:9.pdf (for accounting@alphainsurance.biz)',\r\n          'file:8.pdf (for accounting@alphainsurance.biz)',\r\n          'file:7.pdf (for accounting@alphainsurance.biz)',\r\n          'file:6.pdf (for accounting@betainsurance.biz)',\r\n          'file:5.pdf (for accounting@betainsurance.biz)',\r\n          'file:4.pdf (for accounting@betainsurance.biz)',\r\n          'file:3.pdf (for accounting@gammahealth.biz)',\r\n          'file:2.pdf (for accounting@gammahealth.biz)',\r\n        ],\r\n        folder:\r\n          \"output/Payslips.pdf/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-two-times-split-only/settings.xml`,\r\n      configurationFileName: 'split-two-times-split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoice',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n      documentation:\r\n        'http://www.pdfburst.com/docs/html/userguide/chapter.pdf.html#chapter.config.advanced',\r\n    },\r\n    {\r\n      id: 'INVOICES-MERGE-THEN-SPLIT',\r\n      name: '5. Customer Invoices PDF - Merge and then Process Multiple Files Together',\r\n      visibility: 'visible',\r\n      jobType: 'merge-burst',\r\n      input: {\r\n        data: [\r\n          'file:samples/burst/Invoices-Oct.pdf',\r\n          'file:samples/burst/Invoices-Nov.pdf',\r\n          'file:samples/burst/Invoices-Dec.pdf',\r\n        ],\r\n        dataUrl: [\r\n          'file:https://www.pdfburst.com/samples/Invoices-Oct.pdf',\r\n          'file:https://www.pdfburst.com/samples/Invoices-Nov.pdf',\r\n          'file:https://www.pdfburst.com/samples/Invoices-Dec.pdf',\r\n        ],\r\n        numberOfPages: -1,\r\n        tokens: [],\r\n      },\r\n      step1: 'merge',\r\n      step2: 'split',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'file:0011.pdf',\r\n          'file:0012.pdf',\r\n          'file:0013.pdf',\r\n          'file:0014.pdf',\r\n          'file:0015.pdf',\r\n          'file:0016.pdf',\r\n          'file:0017.pdf',\r\n          'file:0018.pdf',\r\n          'file:0019.pdf',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/split-only/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'customer',\r\n      documentType: 'invoice',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n  ];\r\n\r\n  samplesNotYetImplemented: Array<SampleInfo> = [\r\n    {\r\n      id: 'GENERATE-EMAIL-PAYSLIPS',\r\n      name: '6. Monthly Payslips (again)',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'generate',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email-file-attached:clyde.grew@northridgehealth.org.docx',\r\n          'email-file-attached:kyle.butford@northridgehealth.org.docx',\r\n          'email-file-attached:alfreda.waldback@northridgehealth.org.docx',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/monthly-payslips-generate-docx/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'employee',\r\n      documentType: 'payslip',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n    {\r\n      id: 'MAIL-MERGE-EMAIL-LETTERS-TO-STUDENTS',\r\n      name: '7. Mail Merge Email Letters to All Students',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'mail-merge-emails',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email:clyde.grew@northridgeschool.edu',\r\n          'email:kyle.butford@northridgeschool.edu',\r\n          'email:alfreda.waldback@northridgeschool.edu',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded:\r\n        '<i class=\"fa fa-envelope-o\"></i> letter to student clyde.grew@northridgeschool.edu<br><i class=\"fa fa-envelope-o\"></i> letter to student kyle.butford@northridgeschool.edu<br><i class=\"fa fa-envelope-o\"></i> letter to student alfreda.waldback@northridgeschool.edu',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/mail-merge-emails/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'student',\r\n      documentType: 'letter',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n    {\r\n      id: 'NEWSLETTER1',\r\n      name: '9. Newsletter 1',\r\n      visibility: 'hidden',\r\n      jobType: 'burst',\r\n      input: {\r\n        data: ['file:samples/All-Payslips.csv'],\r\n        numberOfPages: -1,\r\n        tokens: [\r\n          'clyde.grew@northridgehealth.org',\r\n          'kyle.butford@northridgehealth.org.pdf',\r\n          'alfreda.waldback@northridgehealth.org',\r\n        ],\r\n      },\r\n      step1: 'mail-merge-documents',\r\n      step2: 'email',\r\n      step3: '',\r\n      output: {\r\n        data: [\r\n          'email-file-attached:clyde.grew@northridgeschool.edu.docx',\r\n          'email-file-attached:kyle.butford@northridgeschool.edu.docx',\r\n          'email-file-attached:alfreda.waldback@northridgeschool.edu.docx',\r\n        ],\r\n        folder:\r\n          \"output/${input_document_name}/${timestamp?format['yyyy.MM.dd_HH.mm.ss.SSS']}\",\r\n      },\r\n      outputHtmlHardcoded: '',\r\n      configurationFilePath: `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/config/samples/newsletter-1/settings.xml`,\r\n      configurationFileName: 'split-only',\r\n      notes: ``,\r\n      recipientType: 'student',\r\n      documentType: 'letter',\r\n      capReportDistribution: false,\r\n      capReportGenerationMailMerge: false,\r\n      activeClicked: false,\r\n    },\r\n  ];\r\n\r\n  getInputHtml(id: string, fullDetails?: boolean) {\r\n    const sample = this.samples.find((sample) => sample.id == id);\r\n    const inputs: string[] = sample.input.data;\r\n    const inputsUrl: string[] = sample.input.dataUrl;\r\n\r\n    let inputLabel = inputs[0].replace('file:', '');\r\n    let inputUrl: string;\r\n\r\n    if (inputsUrl && inputsUrl.length) {\r\n      inputUrl = inputsUrl[0].replace('file:', '');\r\n    }\r\n\r\n    //let inputLabel = inputs[0];\r\n\r\n    let inputFileIcon = 'fa-file-pdf-o';\r\n    if (inputLabel.endsWith('.xls')) {\r\n      inputFileIcon = 'fa-file-excel-o';\r\n    } else if (inputLabel.endsWith('.csv')) {\r\n      inputFileIcon = 'fa-file-text-o';\r\n    }\r\n\r\n    let inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${inputLabel}`;\r\n    if (fullDetails)\r\n      inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}`;\r\n\r\n    if (inputUrl) {\r\n      inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank\">${inputLabel}</a>`;\r\n      if (fullDetails)\r\n        inputHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank\">${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}</a>`;\r\n    }\r\n\r\n    for (let index = 1; index < inputs.length; index++) {\r\n      inputLabel = inputs[index].replace('file:', '');\r\n      //inputLabel = inputs[index];\r\n      let currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${inputLabel}`;\r\n      if (fullDetails)\r\n        currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}`;\r\n\r\n      //console.log(`inputsUrl = ${JSON.stringify(inputsUrl)}`);\r\n\r\n      if (inputUrl) {\r\n        inputUrl = inputsUrl[index].replace('file:', '');\r\n        currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank\">${inputLabel}</a>`;\r\n        if (fullDetails)\r\n          currentHtml = `<i class=\"fa ${inputFileIcon}\"></i>&nbsp;<a href=\"${inputUrl}\" target=\"_blank>${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputLabel}</a>`;\r\n      }\r\n\r\n      inputHtml = `${inputHtml}<br>${currentHtml}`;\r\n    }\r\n\r\n    return inputHtml;\r\n  }\r\n\r\n  getOutputHtml(id: string, fullDetails?: boolean) {\r\n    const sample = this.samples.find((sample) => sample.id == id);\r\n\r\n    //console.log(`sample = ${JSON.stringify(sample)}`);\r\n\r\n    if (sample.outputHtmlHardcoded) return sample.outputHtmlHardcoded;\r\n\r\n    const outputs: string[] = sample.output.data;\r\n    let outputLabel = outputs[0].replace('file:', '');\r\n\r\n    let attachmentFileIcon = 'fa-file-pdf-o';\r\n    if (outputLabel.endsWith('.docx')) attachmentFileIcon = 'fa-file-word-o';\r\n    let outputHtml = '';\r\n    if (fullDetails) {\r\n      const inputs: string[] = sample.input.data;\r\n      if (inputs.length == 1) {\r\n        const inputFileName = Utilities.basename(inputs[0]);\r\n\r\n        outputHtml = `<strong>Folder</strong><br>${this.settingsService.PORTABLE_EXECUTABLE_DIR}/output/${inputFileName}/\\${now?format[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}<br>${outputHtml}`;\r\n      }\r\n    } else {\r\n      if (sample.capReportDistribution)\r\n        outputHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n      else\r\n        outputHtml = `<i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel} ${sample.recipientType} ${sample.documentType}`;\r\n    }\r\n\r\n    //console.log(`outputHtml = ${outputHtml}`);\r\n\r\n    if (!fullDetails) {\r\n      for (let index = 1; index < outputs.length; index++) {\r\n        outputLabel = outputs[index].replace('file:', '');\r\n        let currentHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n        if (!sample.capReportDistribution)\r\n          currentHtml = `<i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel} ${sample.recipientType} ${sample.documentType}`;\r\n\r\n        outputHtml = `${outputHtml}<br>${currentHtml}`;\r\n      }\r\n    } else {\r\n      outputHtml = `${outputHtml}<strong>Files</strong>`;\r\n\r\n      for (let index = 0; index < outputs.length; index++) {\r\n        outputLabel = outputs[index].replace('file:', '');\r\n        //console.log(`outputLabel = ${outputLabel}`);\r\n\r\n        let currentHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n        if (!sample.capReportDistribution)\r\n          currentHtml = `<i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel} ${sample.recipientType} ${sample.documentType}`;\r\n\r\n        outputHtml = `${outputHtml}<br>${currentHtml}`;\r\n      }\r\n\r\n      if (sample.capReportDistribution) {\r\n        outputHtml = `${outputHtml}<br><strong>Emails</strong>`;\r\n\r\n        for (let index = 0; index < outputs.length; index++) {\r\n          outputLabel = outputs[index].replace('file:', '');\r\n          let currentHtml = `<i class=\"fa fa-envelope-o\"></i> ${sample.recipientType} with <i class=\"fa fa-at\"></i> ${sample.documentType} <i class=\"fa ${attachmentFileIcon}\"></i> ${outputLabel}`;\r\n          outputHtml = `${outputHtml}<br>${currentHtml}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return outputHtml;\r\n  }\r\n\r\n  async fillSamplesNotes() {\r\n    //if not yet loaded\r\n    if (this.samples[0].notes.length == 0) {\r\n      const sampleConfigurations =\r\n        this.settingsService.getSampleConfigurations();\r\n\r\n      for (let sample of this.samples) {\r\n        //console.log(JSON.stringify(sampleConfigurations));\r\n        const sampleConfigurationValues = sampleConfigurations.find(\r\n          (configuration) => {\r\n            return sample.configurationFilePath.endsWith(\r\n              configuration.filePath,\r\n            );\r\n          },\r\n        );\r\n\r\n        if (sampleConfigurationValues) {\r\n          sample.capReportDistribution =\r\n            sampleConfigurationValues.capReportDistribution;\r\n          sample.capReportGenerationMailMerge =\r\n            sampleConfigurationValues.capReportGenerationMailMerge;\r\n          sample.visibility = sampleConfigurationValues.visibility;\r\n        }\r\n\r\n        const notes = await this.translateService.instant(\r\n          `SAMPLES.${sample.id}.NOTES.INNER-HTML`,\r\n        );\r\n        sample.notes = notes;\r\n      }\r\n\r\n      this.countVisibleSamples = this.samples.filter(\r\n        (sample) => sample.visibility == 'visible',\r\n      ).length;\r\n    }\r\n  }\r\n\r\n  async toggleSampleVisibility(sample: SampleInfo, visibility: string) {\r\n    const settingsXmlConfigurationValues =\r\n      await this.settingsService.loadSettingsFileAsync(\r\n        sample.configurationFilePath,\r\n      );\r\n\r\n    settingsXmlConfigurationValues.documentburster.settings.visibility =\r\n      visibility;\r\n\r\n    await this.settingsService.saveSettingsFileAsync(\r\n      sample.configurationFilePath,\r\n      settingsXmlConfigurationValues,\r\n    );\r\n\r\n    sample.visibility = visibility;\r\n\r\n    const sampleConfiguration = this.settingsService\r\n      .getSampleConfigurations()\r\n      .find((configuration) =>\r\n        sample.configurationFilePath.endsWith(configuration.filePath),\r\n      );\r\n    sampleConfiguration.visibility = visibility;\r\n    this.countVisibleSamples = this.samples.filter(\r\n      (sample) => sample.visibility == 'visible',\r\n    ).length;\r\n  }\r\n\r\n  async hideAllSamples() {\r\n    for (let sample of this.samples) {\r\n      this.toggleSampleVisibility(sample, 'hidden');\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "SettingsService",
      "id": "injectable-SettingsService-b1c5d3297d08cbcdc8e9ca0cbca8929021cf374a58ff9d939b4ecb3754699b1851c901ca4cbaea5999a740f2bf28054fd23a7c86c107c3db6d6cb8f3ec84f8b3",
      "file": "src/app/providers/settings.service.ts",
      "properties": [
        {
          "name": "activeWebSocketSubcriptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SocketOptions[]",
          "optional": false,
          "description": "",
          "line": 132
        },
        {
          "name": "apiService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ApiService",
          "optional": false,
          "description": "",
          "line": 135,
          "modifierKind": [125]
        },
        {
          "name": "CONFIGURATION_BURST_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 93
        },
        {
          "name": "CONFIGURATION_CONNECTIONS_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 97
        },
        {
          "name": "CONFIGURATION_DEFAULTS_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 99
        },
        {
          "name": "CONFIGURATION_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "CONFIGURATION_REPORTS_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 95
        },
        {
          "name": "CONFIGURATION_SAMPLES_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 101
        },
        {
          "name": "CONFIGURATION_TEMPLATES_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 102
        },
        {
          "name": "configurationFiles",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<CfgTmplFileInfo>",
          "optional": false,
          "description": "",
          "line": 113
        },
        {
          "name": "connectionFiles",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<ExtConnection>",
          "optional": false,
          "description": "",
          "line": 117
        },
        {
          "name": "connectionsLoading",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 130
        },
        {
          "name": "currentConfigurationTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TmplFileInfo",
          "optional": false,
          "description": "",
          "line": 111
        },
        {
          "name": "currentConfigurationTemplateName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 109
        },
        {
          "name": "currentConfigurationTemplatePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 108
        },
        {
          "name": "defaultEmailConnectionFile",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ExtConnection",
          "optional": false,
          "description": "",
          "line": 116
        },
        {
          "name": "INTERNAL_SETTINGS_FILE_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 104
        },
        {
          "name": "isJServerStarted",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 124
        },
        {
          "name": "isServerVersion",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 122
        },
        {
          "name": "isWindows",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 121
        },
        {
          "name": "JOBS_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 89
        },
        {
          "name": "LOGS_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "numberOfUserVariables",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 119
        },
        {
          "name": "PORTABLE_EXECUTABLE_DIR",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "product",
          "defaultValue": "'DocumentBurster'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 126
        },
        {
          "name": "QUARANTINE_FOLDER_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "RUNNING_IN_E2E",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 83
        },
        {
          "name": "SHOULD_SEND_STATS",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "templateFiles",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<TmplFileInfo>",
          "optional": false,
          "description": "",
          "line": 114
        },
        {
          "name": "UPDATE_JAR_FILE_PATH",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 106
        },
        {
          "name": "version",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "semver.SemVer",
          "optional": false,
          "description": "",
          "line": 128
        },
        {
          "name": "xmlInternalSettings",
          "defaultValue": "{\r\n    documentburster: {\r\n      settings: {\r\n        skin: 'skin-blue',\r\n        backendurl: 'http://localhost:9090',\r\n      },\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 73
        }
      ],
      "methods": [
        {
          "name": "getConfigurations",
          "args": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 665,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getConnectionDetails",
          "args": [
            {
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 728,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDefaultsConfigurationValuesFilePath",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 182,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getMailMergeConfigurations",
          "args": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 677,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getReportTemplates",
          "args": [
            {
              "name": "outputType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "filter",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 689,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "outputType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "filter",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getSampleConfigurations",
          "args": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 716,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isDefaultEmailConnectionConfigured",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 570,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "loadAllConnectionFilesAsync",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 487,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "loadAllReportTemplatesFilesAsync",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 585,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "loadAllSettingsFilesAsync",
          "args": [
            {
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}"
            }
          ],
          "optional": false,
          "returnType": "Promise<Array<CfgTmplFileInfo>>",
          "typeParameters": [],
          "line": 309,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadConnectionFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<literal type>",
          "typeParameters": [],
          "line": 266,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadDefaultSettingsFileAsync",
          "args": [],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 186,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "loadPreferencesFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 290,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadReportingFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 659,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadSettingsFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<literal type>",
          "typeParameters": [],
          "line": 231,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveConnectionFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "xmlConnectionSettings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 252,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "xmlConnectionSettings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "savePreferencesFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "xmlSettings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 295,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "xmlSettings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveReportingFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "xmlReporting",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 646,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "xmlReporting",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveSettingsFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "xmlSettings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "xmlSettings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as semver from 'semver';\r\nimport { ApiService } from './api.service';\r\nimport Utilities from '../helpers/utilities';\r\nimport { APP_CONFIG } from '../../environments/environment';\r\nimport { SocketOptions } from '../helpers/websocket-endpoint';\r\nimport { FsService } from './fs.service';\r\nimport { UnixCliService } from './unix-cli.service';\r\n\r\nexport interface ExtConnection {\r\n  fileName: string;\r\n  filePath: string;\r\n  connectionCode: string;\r\n  connectionName: string;\r\n  connectionType: string;\r\n  activeClicked: boolean;\r\n  defaultConnection: boolean;\r\n  usedBy?: string;\r\n  emailserver: {\r\n    host: string;\r\n    port: string;\r\n    userid: string;\r\n    userpassword: string;\r\n    usessl: boolean;\r\n    usetls: boolean;\r\n    fromaddress: string;\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport const newEmailServer = {\r\n  host: 'Email Server Host',\r\n  port: '25',\r\n  userid: 'From Email User ID',\r\n  userpassword: 'From Email Password',\r\n  usessl: false,\r\n  usetls: false,\r\n  fromaddress: 'from@emailaddress.com',\r\n  name: 'From Name',\r\n};\r\n\r\nexport interface TmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  type: string;\r\n  content?: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n}\r\n\r\nexport interface CfgTmplFileInfo {\r\n  fileName: string;\r\n  filePath: string;\r\n  templateName: string;\r\n  capReportGenerationMailMerge: boolean;\r\n  capReportDistribution: boolean;\r\n  dsInputType: string;\r\n  notes: string;\r\n  visibility: string;\r\n  type: string;\r\n  folderName: string;\r\n  relativeFilePath: string;\r\n  isFallback: boolean;\r\n  activeClicked?: boolean;\r\n  useEmlConn?: boolean;\r\n  emlConnCode?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SettingsService {\r\n  xmlInternalSettings = {\r\n    documentburster: {\r\n      settings: {\r\n        skin: 'skin-blue',\r\n        backendurl: 'http://localhost:9090',\r\n      },\r\n    },\r\n  };\r\n\r\n  PORTABLE_EXECUTABLE_DIR: string;\r\n  RUNNING_IN_E2E: boolean;\r\n  SHOULD_SEND_STATS: boolean;\r\n\r\n  LOGS_FOLDER_PATH: string;\r\n  QUARANTINE_FOLDER_PATH: string;\r\n\r\n  JOBS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_BURST_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_REPORTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_CONNECTIONS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_DEFAULTS_FOLDER_PATH: string;\r\n\r\n  CONFIGURATION_SAMPLES_FOLDER_PATH: string;\r\n  CONFIGURATION_TEMPLATES_FOLDER_PATH: string;\r\n\r\n  INTERNAL_SETTINGS_FILE_PATH: string;\r\n\r\n  UPDATE_JAR_FILE_PATH: string;\r\n\r\n  currentConfigurationTemplatePath: string;\r\n  currentConfigurationTemplateName: string;\r\n\r\n  currentConfigurationTemplate: TmplFileInfo;\r\n\r\n  configurationFiles: Array<CfgTmplFileInfo> = [];\r\n  templateFiles: Array<TmplFileInfo> = [];\r\n\r\n  defaultEmailConnectionFile: ExtConnection;\r\n  connectionFiles: Array<ExtConnection> = [];\r\n\r\n  numberOfUserVariables: number;\r\n\r\n  isWindows: boolean = false;\r\n  isServerVersion: boolean = false;\r\n\r\n  isJServerStarted: boolean = false;\r\n\r\n  product: string = 'DocumentBurster';\r\n\r\n  version: semver.SemVer;\r\n\r\n  connectionsLoading: number = 0;\r\n\r\n  activeWebSocketSubcriptions: SocketOptions[] = [];\r\n\r\n  constructor(\r\n    public apiService: ApiService,\r\n    protected fsService: FsService,\r\n    protected unixCliService: UnixCliService,\r\n  ) {\r\n    let process = undefined;\r\n\r\n    if (typeof window.require === 'function') {\r\n      process = window.require('process');\r\n    }\r\n    if (process) {\r\n      this.PORTABLE_EXECUTABLE_DIR = process.env.PORTABLE_EXECUTABLE_DIR;\r\n\r\n      this.RUNNING_IN_E2E = new Boolean(process.env.RUNNING_IN_E2E).valueOf();\r\n      this.SHOULD_SEND_STATS = new Boolean(\r\n        process.env.SHOULD_SEND_STATS,\r\n      ).valueOf();\r\n    } else {\r\n      console.log(\r\n        `window.require('process') NOT AVAILABLE ==> PORTABLE_EXECUTABLE_DIR could not be read (why Virgil, in a Web App, are you using window.require('process')?! instead of using the Java Server for this stuff!!!!)`,\r\n      );\r\n    }\r\n\r\n    this.LOGS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.logs}`;\r\n    this.QUARANTINE_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.quarantine}`;\r\n\r\n    //console.log(`PORTABLE_EXECUTABLE_DIR = ${this.PORTABLE_EXECUTABLE_DIR}`);\r\n\r\n    //console.log(`LOGS_FOLDER_PATH = ${this.LOGS_FOLDER_PATH}`);\r\n\r\n    this.JOBS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.temp}`;\r\n\r\n    this.CONFIGURATION_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}`;\r\n    this.INTERNAL_SETTINGS_FILE_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_internal/settings.xml`;\r\n\r\n    this.CONFIGURATION_DEFAULTS_FOLDER_PATH = `${this.CONFIGURATION_FOLDER_PATH}/_defaults`;\r\n\r\n    this.CONFIGURATION_BURST_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/burst`;\r\n\r\n    this.CONFIGURATION_REPORTS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/reports`;\r\n\r\n    this.CONFIGURATION_SAMPLES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/samples`;\r\n\r\n    this.CONFIGURATION_CONNECTIONS_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/${APP_CONFIG.folders.config}/connections`;\r\n\r\n    this.CONFIGURATION_TEMPLATES_FOLDER_PATH = `${this.PORTABLE_EXECUTABLE_DIR}/templates`;\r\n  }\r\n\r\n  getDefaultsConfigurationValuesFilePath(): string {\r\n    return `${this.CONFIGURATION_DEFAULTS_FOLDER_PATH}/settings.xml`;\r\n  }\r\n\r\n  async loadDefaultSettingsFileAsync(): Promise<any> {\r\n    const systemInfo = await this.apiService.get('/jobman/system/info');\r\n    this.isWindows = systemInfo.osName.startsWith('Windows');\r\n\r\n    const startServerScripts = await this.unixCliService.findAsync(\r\n      this.PORTABLE_EXECUTABLE_DIR,\r\n      {\r\n        matching: ['startServer.*'],\r\n      },\r\n    );\r\n\r\n    if (startServerScripts && startServerScripts.length > 0) {\r\n      this.isServerVersion = true;\r\n      this.product = 'DocumentBurster Server';\r\n    }\r\n\r\n    let xmlSettings = {\r\n      documentburster: {\r\n        settings: null,\r\n      },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: this.getDefaultsConfigurationValuesFilePath(),\r\n    });\r\n\r\n    this.version = xmlSettings.documentburster.settings.version;\r\n\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveSettingsFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadSettingsFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      settings: any;\r\n    };\r\n  }> {\r\n    let xmlSettings = {\r\n      documentburster: { settings: {} },\r\n    };\r\n\r\n    xmlSettings.documentburster = await this.apiService.get('/cfgman/rb/load', {\r\n      path: filePath,\r\n    });\r\n\r\n    //console.log(\r\n    //  `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n    //    xmlSettings\r\n    //  )}`\r\n    //);\r\n    return xmlSettings;\r\n  }\r\n\r\n  async saveConnectionFileAsync(\r\n    filePath: string,\r\n    xmlConnectionSettings: {\r\n      documentburster: {};\r\n    },\r\n  ) {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-connection?path=${path}`,\r\n      xmlConnectionSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadConnectionFileAsync(filePath: string): Promise<{\r\n    documentburster: {\r\n      connection: any;\r\n    };\r\n  }> {\r\n    let xmlConnectionSettings = {\r\n      documentburster: { connection: {} },\r\n    };\r\n\r\n    xmlConnectionSettings.documentburster = await this.apiService.get(\r\n      '/cfgman/rb/load-connection',\r\n      {\r\n        path: filePath,\r\n      },\r\n    );\r\n\r\n    console.log(\r\n      `loadSettingsFileAsync filePath = ${filePath}, settings = ${JSON.stringify(\r\n        xmlConnectionSettings,\r\n      )}`,\r\n    );\r\n    return xmlConnectionSettings;\r\n  }\r\n\r\n  async loadPreferencesFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-internal', {\r\n      path: filePath,\r\n    });\r\n  }\r\n  async savePreferencesFileAsync(\r\n    filePath: string,\r\n    xmlSettings: {\r\n      documentburster: {};\r\n    },\r\n  ): Promise<any> {\r\n    const path = encodeURIComponent(filePath);\r\n\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-internal?path=${path}`,\r\n      xmlSettings.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadAllSettingsFilesAsync({\r\n    forceReload = false,\r\n  }: { forceReload?: boolean } = {}): Promise<Array<CfgTmplFileInfo>> {\r\n    if (\r\n      !forceReload &&\r\n      this.configurationFiles &&\r\n      this.configurationFiles.length > 0\r\n    )\r\n      return this.configurationFiles;\r\n\r\n    //console.log(\r\n    //  `this.CONFIGURATION_BURST_FOLDER_PATH = ${this.CONFIGURATION_BURST_FOLDER_PATH}`\r\n    //);\r\n\r\n    const burstConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_BURST_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `burstConfigFilePaths1 = ${JSON.stringify(burstConfigFilePaths)}`\r\n    //);\r\n\r\n    const reportsConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_REPORTS_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsConfigFilePaths2 = ${JSON.stringify(reportsConfigFilePaths)}`\r\n    //);\r\n\r\n    const samplesConfigFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_SAMPLES_FOLDER_PATH,\r\n      {\r\n        matching: ['settings.xml'],\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    // console.log(\r\n    //   `samplesConfigFilePaths3 = ${JSON.stringify(samplesConfigFilePaths)}`\r\n    // );\r\n\r\n    const configFilePaths = burstConfigFilePaths\r\n      .concat(reportsConfigFilePaths)\r\n      .concat(samplesConfigFilePaths);\r\n\r\n    const configurationFiles: Array<CfgTmplFileInfo> = [];\r\n\r\n    for (let filePath of configFilePaths) {\r\n      const configurationFilePath = filePath;\r\n      const configurationFileName = Utilities.basename(configurationFilePath);\r\n\r\n      const isFallbackSettings =\r\n        configurationFilePath.endsWith('burst/settings.xml');\r\n\r\n      const isNotSettings =\r\n        configurationFilePath.endsWith('_defaults/settings.xml') ||\r\n        configurationFilePath.endsWith('preferences/settings.xml');\r\n\r\n      if (isNotSettings) continue;\r\n\r\n      //console.log(\r\n      //  `configurationFilePath4 = ${JSON.stringify(configurationFilePath)}`\r\n      // );\r\n\r\n      const settingsFileContent = await this.unixCliService.catAsync(filePath);\r\n\r\n      let startPos =\r\n        settingsFileContent.indexOf('<template>') + '<template>'.length;\r\n      let endPos = settingsFileContent.indexOf('</template>');\r\n      const settingsTemplateName = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportdistribution>') +\r\n        '<reportdistribution>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportdistribution>');\r\n      const boolReportDistribution = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<reportgenerationmailmerge>') +\r\n        '<reportgenerationmailmerge>'.length;\r\n      endPos = settingsFileContent.indexOf('</reportgenerationmailmerge>');\r\n      const boolReportGenerationMailMerge = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<visibility>') + '<visibility>'.length;\r\n      endPos = settingsFileContent.indexOf('</visibility>');\r\n      const strVisibility = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      startPos = settingsFileContent.indexOf('<useconn>') + '<useconn>'.length;\r\n      endPos = settingsFileContent.indexOf('</useconn>');\r\n      const boolUseEmailConnection = Boolean(\r\n        JSON.parse(settingsFileContent.substring(startPos, endPos).trim()),\r\n      );\r\n\r\n      startPos =\r\n        settingsFileContent.indexOf('<conncode>') + '<conncode>'.length;\r\n      endPos = settingsFileContent.indexOf('</conncode>');\r\n      const strEmailConnectionCode = settingsFileContent\r\n        .substring(startPos, endPos)\r\n        .trim();\r\n\r\n      let templateRelativeFilePath = `./config/burst/${configurationFileName}`;\r\n      let typeOfConfiguration = 'config-burst-legacy';\r\n\r\n      const folderName = Utilities.basename(\r\n        Utilities.dirname(configurationFilePath),\r\n      );\r\n\r\n      let dsInputType = '';\r\n\r\n      if (configurationFilePath.includes(`config/reports/${folderName}`)) {\r\n        typeOfConfiguration = 'config-reports';\r\n        templateRelativeFilePath = `./config/reports/${folderName}/settings.xml`;\r\n\r\n        if (boolReportGenerationMailMerge) {\r\n          const reportingXmlFilePath = `${Utilities.dirname(\r\n            configurationFilePath,\r\n          )}/reporting.xml`;\r\n\r\n          const reportingXmlFileContent =\r\n            await this.unixCliService.catAsync(reportingXmlFilePath);\r\n          startPos =\r\n            reportingXmlFileContent.indexOf('<type>') + '<type>'.length;\r\n          endPos = reportingXmlFileContent.indexOf('</type>');\r\n          dsInputType = reportingXmlFileContent\r\n            .substring(startPos, endPos)\r\n            .trim();\r\n        }\r\n      } else if (\r\n        configurationFilePath.includes(`config/samples/${folderName}`)\r\n      ) {\r\n        typeOfConfiguration = 'config-samples';\r\n        templateRelativeFilePath = `./config/samples/${folderName}/settings.xml`;\r\n      }\r\n\r\n      configurationFiles.push({\r\n        fileName: configurationFileName,\r\n        filePath: Utilities.slash(configurationFilePath),\r\n        relativeFilePath: templateRelativeFilePath,\r\n        templateName: settingsTemplateName,\r\n        isFallback: isFallbackSettings,\r\n        capReportDistribution: boolReportDistribution,\r\n        capReportGenerationMailMerge: boolReportGenerationMailMerge,\r\n        dsInputType: dsInputType,\r\n        visibility: strVisibility,\r\n        notes: '',\r\n        folderName: folderName,\r\n        type: typeOfConfiguration,\r\n        activeClicked: false,\r\n        useEmlConn: boolUseEmailConnection,\r\n        emlConnCode: strEmailConnectionCode,\r\n      });\r\n    }\r\n\r\n    this.configurationFiles = configurationFiles;\r\n\r\n    // console.log(\r\n    //   `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n    // );\r\n    return configurationFiles;\r\n  }\r\n\r\n  async loadAllConnectionFilesAsync() {\r\n    if (this.connectionsLoading == 1) return;\r\n\r\n    this.connectionsLoading = 1;\r\n\r\n    this.defaultEmailConnectionFile = undefined;\r\n\r\n    const connectionFiles: Array<ExtConnection> = [];\r\n\r\n    const connectionFilePaths = await this.unixCliService.findAsync(\r\n      this.CONFIGURATION_CONNECTIONS_FOLDER_PATH,\r\n      {\r\n        matching: ['*.xml'],\r\n      },\r\n    );\r\n\r\n    for (let connectionFilePath of connectionFilePaths) {\r\n      let connectionSettings = {\r\n        documentburster: {\r\n          connection: null,\r\n        },\r\n      };\r\n\r\n      // console.log(`connectionFilePath = ${JSON.stringify(connectionFilePath)}`);\r\n\r\n      connectionSettings.documentburster = await this.apiService.get(\r\n        '/cfgman/rb/load-connection',\r\n        {\r\n          path: connectionFilePath,\r\n        },\r\n      );\r\n      const connXml = connectionSettings.documentburster.connection;\r\n\r\n      //console.log(`connXml = ${JSON.stringify(connXml)}`);\r\n\r\n      const connectionFileName = Utilities.basename(connectionFilePath);\r\n      //console.log(\r\n      //  `this.configurationFiles = ${JSON.stringify(this.configurationFiles)}`\r\n      //);\r\n      connectionFiles.push({\r\n        fileName: connectionFileName,\r\n        filePath: connectionFilePath,\r\n        connectionCode: connXml.code,\r\n        connectionName: connXml.name,\r\n        connectionType: connectionFileName.startsWith('eml-')\r\n          ? 'email-connection'\r\n          : 'database-connection',\r\n        activeClicked: false,\r\n        defaultConnection: connXml.defaultConnection,\r\n        usedBy: this.configurationFiles\r\n          .filter((conf) => conf.useEmlConn && conf.emlConnCode == connXml.code)\r\n          .map((conf) => conf.templateName)\r\n          .join(', '),\r\n        emailserver: {\r\n          host: connXml.emailserver.host,\r\n          port: connXml.emailserver.port,\r\n          userid: connXml.emailserver.userid,\r\n          userpassword: connXml.emailserver.userpassword,\r\n          usessl: connXml.emailserver.usessl,\r\n          usetls: connXml.emailserver.usetls,\r\n          fromaddress: connXml.emailserver.fromaddress,\r\n          name: connXml.emailserver.name,\r\n        },\r\n      });\r\n    }\r\n\r\n    this.connectionFiles = connectionFiles;\r\n\r\n    this.defaultEmailConnectionFile = this.getConnectionDetails({\r\n      connectionType: 'email-connection',\r\n      defaultConnection: true,\r\n      connectionCode: '',\r\n    });\r\n\r\n    //console.log(\r\n    //  `this.defaultEmailConnectionFile = ${JSON.stringify(\r\n    //    this.defaultEmailConnectionFile\r\n    //  )}`\r\n    //);\r\n\r\n    this.connectionsLoading = 0;\r\n  }\r\n\r\n  isDefaultEmailConnectionConfigured(): boolean {\r\n    return (\r\n      this.defaultEmailConnectionFile &&\r\n      this.defaultEmailConnectionFile.emailserver &&\r\n      this.defaultEmailConnectionFile.emailserver.host != 'Email Server Host' &&\r\n      this.defaultEmailConnectionFile.emailserver.name != 'From Name' &&\r\n      this.defaultEmailConnectionFile.emailserver.fromaddress !=\r\n        'from@emailaddress.com' &&\r\n      this.defaultEmailConnectionFile.emailserver.userid !=\r\n        'From Email User ID' &&\r\n      this.defaultEmailConnectionFile.emailserver.userpassword !=\r\n        'From Email Password'\r\n    );\r\n  }\r\n\r\n  async loadAllReportTemplatesFilesAsync() {\r\n    let relativeFilePath: string, tplType: string;\r\n    const emailsTemplateFiles: Array<TmplFileInfo> = [];\r\n    const reportsTemplateFiles: Array<TmplFileInfo> = [];\r\n\r\n    let reportsTemplateFilePaths = await this.unixCliService.findAsync(\r\n      `${this.CONFIGURATION_TEMPLATES_FOLDER_PATH}/reports`,\r\n      {\r\n        matching: ['*.docx', '*.html'],\r\n        files: true,\r\n        directories: false,\r\n        recursive: true,\r\n      },\r\n    );\r\n\r\n    //console.log(\r\n    //  `reportsTemplateFilePaths = ${JSON.stringify(reportsTemplateFilePaths)}`\r\n    //);\r\n\r\n    //const samplesReportsTemplateFilePaths = [];\r\n\r\n    //reportsTemplateFilePaths = reportsTemplateFilePaths.concat(\r\n    //  samplesReportsTemplateFilePaths\r\n    //);\r\n\r\n    for (let filePath of reportsTemplateFilePaths) {\r\n      console.log(`filePath = ${filePath}`);\r\n\r\n      const reportTemplateFileName = Utilities.basename(filePath);\r\n\r\n      const folderName = Utilities.basename(Utilities.dirname(filePath));\r\n\r\n      if (filePath.includes('samples/reports')) {\r\n        tplType = 'template-report-sample';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/samples/reports/`,\r\n          '',\r\n        );\r\n      } else {\r\n        tplType = 'template-report';\r\n        relativeFilePath = filePath.replace(\r\n          `${this.PORTABLE_EXECUTABLE_DIR}/templates/reports/`,\r\n          '',\r\n        );\r\n      }\r\n\r\n      reportsTemplateFiles.push({\r\n        fileName: reportTemplateFileName,\r\n        filePath: filePath,\r\n        type: tplType,\r\n        folderName: folderName,\r\n        relativeFilePath: relativeFilePath,\r\n      });\r\n    }\r\n\r\n    const templateFiles = emailsTemplateFiles.concat(reportsTemplateFiles);\r\n\r\n    this.templateFiles = templateFiles;\r\n    return templateFiles;\r\n  }\r\n\r\n  async saveReportingFileAsync(\r\n    filePath: string,\r\n    xmlReporting: { documentburster: {} },\r\n  ) {\r\n    console.log(\r\n      `saveReportingFileAsynce xmlReporting = ${JSON.stringify(xmlReporting)}`,\r\n    );\r\n    return this.apiService.post(\r\n      `/cfgman/rb/save-reporting?path=${filePath}`,\r\n      xmlReporting.documentburster,\r\n    );\r\n  }\r\n\r\n  async loadReportingFileAsync(filePath: string): Promise<any> {\r\n    return this.apiService.get('/cfgman/rb/load-reporting', {\r\n      path: filePath,\r\n    });\r\n  }\r\n\r\n  getConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type != 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getMailMergeConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.capReportGenerationMailMerge;\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getReportTemplates(outputType: string, filter: { samples: boolean }) {\r\n    return this.templateFiles.filter((template) => {\r\n      let filterConditionDocx = false;\r\n      let filterConditionHtml = false;\r\n\r\n      if (outputType == 'output.docx') {\r\n        if (filter.samples)\r\n          filterConditionDocx = template.fileName.endsWith('.docx');\r\n        else\r\n          filterConditionDocx =\r\n            template.fileName.endsWith('.docx') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      if (outputType == 'output.html') {\r\n        if (filter.samples)\r\n          filterConditionHtml = template.fileName.endsWith('.html');\r\n        else\r\n          filterConditionHtml =\r\n            template.fileName.endsWith('.html') &&\r\n            !template.type.includes('-sample');\r\n      }\r\n\r\n      return filterConditionDocx || filterConditionHtml;\r\n    });\r\n  }\r\n\r\n  getSampleConfigurations(visibility?: string) {\r\n    return this.configurationFiles.filter((configuration) => {\r\n      let filterCondition = configuration.type == 'config-samples';\r\n\r\n      if (visibility)\r\n        filterCondition =\r\n          filterCondition && configuration.visibility === visibility;\r\n\r\n      return filterCondition;\r\n    });\r\n  }\r\n\r\n  getConnectionDetails({\r\n    connectionType,\r\n    defaultConnection,\r\n    connectionCode,\r\n  }: {\r\n    connectionType: string;\r\n    defaultConnection: boolean;\r\n    connectionCode: string;\r\n  }) {\r\n    //console.log(\r\n    //  `this.connectionFiles = ${JSON.stringify(this.connectionFiles)}`\r\n    //);\r\n    let connFiles = [];\r\n\r\n    if (this.connectionFiles.length > 0) {\r\n      connFiles = this.connectionFiles.filter((connection: ExtConnection) => {\r\n        return connection.connectionType == connectionType;\r\n      });\r\n\r\n      if (defaultConnection) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.defaultConnection;\r\n        });\r\n      }\r\n\r\n      if (connectionCode && connectionCode.length > 0) {\r\n        connFiles = connFiles.filter((connection: ExtConnection) => {\r\n          return connection.connectionCode == connectionCode;\r\n        });\r\n      }\r\n\r\n      if (connFiles && connFiles.length == 1) {\r\n        return connFiles[0];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "unixCliService",
            "type": "UnixCliService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 132,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "unixCliService",
            "type": "UnixCliService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ShellService",
      "id": "injectable-ShellService-ad6c99f73e108e767ed4f804c414e515dba3874b116c4e0d94f628c562855eb9795cd4d92586e11042e740efdbbddc81b8c4ce8fd09c8fd4b0c15d8d7d42deaa",
      "file": "src/app/providers/shell.service.ts",
      "properties": [
        {
          "name": "isJavaOk",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "logFilePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "methods": [
        {
          "name": "checkJavaVersion",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "clearResumeJob",
          "args": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 116,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doKillOldExeThenCopyAndStartNewExe",
          "args": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "newExeFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "upgDbTempFolderPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "newExeFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "upgDbTempFolderPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateMergeFileInTempFolder",
          "args": [
            {
              "name": "filePaths",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePaths",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleScriptEvents",
          "args": [
            {
              "name": "result",
              "type": "ProcessOutputResult",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "workItemName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "exitCallback",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "result",
              "type": "ProcessOutputResult",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "workItemName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "exitCallback",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "runBatFile",
          "args": [
            {
              "name": "arrguments",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "workItemName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "exitCallback",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "arrguments",
              "type": "string[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "workItemName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "exitCallback",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "startStopTestEmailServer",
          "args": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Utilities from '../helpers/utilities';\r\nimport { ApiService } from './api.service';\r\nimport { ToastrMessagesService } from './toastr-messages.service';\r\nimport { SettingsService } from './settings.service';\r\nimport { FsService } from './fs.service';\r\n\r\ninterface ProcessOutputResult {\r\n  success: boolean;\r\n  outputLines: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ShellService {\r\n  logFilePath: string;\r\n  isJavaOk = true;\r\n\r\n  constructor(\r\n    protected settingsService: SettingsService,\r\n    protected messagesService: ToastrMessagesService,\r\n    protected fsService: FsService,\r\n    protected apiService: ApiService,\r\n  ) {}\r\n\r\n  async checkJavaVersion() {\r\n    this.isJavaOk = this.settingsService.isJServerStarted;\r\n  }\r\n\r\n  async doKillOldExeThenCopyAndStartNewExe(\r\n    jobFilePath: string,\r\n    newExeFilePath: string,\r\n    upgDbTempFolderPath: string,\r\n  ) {\r\n    const jblFilePath = Utilities.slash(\r\n      await this.apiService.get('/jobman/system/fs/resolve', {\r\n        paths: jobFilePath,\r\n      }),\r\n    );\r\n\r\n    const script = await this.apiService.post(\r\n      '/jobman/system/child-process/spawn',\r\n      {\r\n        command: 'rb_rust_updater',\r\n        args: ['--job_file_path', jblFilePath, '2>&1', '>>', this.logFilePath],\r\n        options: {\r\n          cwd: this.settingsService.PORTABLE_EXECUTABLE_DIR,\r\n          shell: true,\r\n        },\r\n      },\r\n    );\r\n\r\n    script.data.stderr.on('data', (data) => {\r\n      this.messagesService.showError(data);\r\n    });\r\n  }\r\n\r\n  async runBatFile(\r\n    arrguments: string[],\r\n    workItemName?: string,\r\n    exitCallback?: Function,\r\n  ) {\r\n    let message = 'Working ... Please wait.';\r\n    if (workItemName) {\r\n      message = 'Working on ' + workItemName + '. Please wait.';\r\n    }\r\n    this.messagesService.showInfo(message, '', {\r\n      messageClass: 'java-started',\r\n    });\r\n\r\n    const commands = ['documentburster.bat'].concat(arrguments);\r\n    const batScript = await this.apiService.post(\r\n      '/jobman/system/child-process/spawn',\r\n      commands,\r\n    );\r\n\r\n    console.log(`batScript = ${JSON.stringify(batScript)}`);\r\n    this.handleScriptEvents(batScript, workItemName, exitCallback);\r\n  }\r\n\r\n  async generateMergeFileInTempFolder(filePaths: string[]): Promise<string> {\r\n    console.log(`generateMergeFileInTempFolder filePaths = ${filePaths}`);\r\n    const dir = `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/temp/`;\r\n    const uniqueId =\r\n      Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n    const mergeFilePath = `${dir}merge-files-${uniqueId}`;\r\n\r\n    const content = filePaths.join('\\n');\r\n\r\n    await this.fsService.writeAsync(mergeFilePath, content);\r\n    return mergeFilePath;\r\n  }\r\n\r\n  async startStopTestEmailServer(command: string) {\r\n    const message = 'Working ... Please wait.';\r\n\r\n    this.messagesService.showInfo(message, '', {\r\n      messageClass: 'java-started',\r\n    });\r\n\r\n    const currentWorkingDirPath = `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/tools/test-email-server`;\r\n\r\n    const batFile = command + 'TestEmailServer.bat';\r\n\r\n    const batScript = await this.apiService.post(\r\n      `/jobman/system/child-process/spawn?cwdPath=${encodeURIComponent(\r\n        Utilities.slash(currentWorkingDirPath),\r\n      )}`,\r\n      [batFile],\r\n    );\r\n\r\n    this.handleScriptEvents(batScript, null, null);\r\n  }\r\n\r\n  async clearResumeJob(jobFilePath: string) {\r\n    await this.fsService.removeAsync(jobFilePath);\r\n    this.messagesService.showInfo('Job was cleared.');\r\n  }\r\n\r\n  handleScriptEvents(\r\n    result: ProcessOutputResult,\r\n    workItemName?: string,\r\n    exitCallback?: Function,\r\n  ) {\r\n    // Handle the result here. This will be called when the process has finished executing.\r\n    let message = 'Done';\r\n    if (workItemName) {\r\n      message = 'Done ' + workItemName;\r\n    }\r\n    if (result.success) {\r\n      this.messagesService.showInfo(message, '', {\r\n        messageClass: 'java-exited',\r\n      });\r\n    } else {\r\n      this.messagesService.showError('Error', '', {\r\n        messageClass: 'java-exited',\r\n      });\r\n    }\r\n    if (exitCallback) {\r\n      exitCallback();\r\n    }\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "StateStoreService",
      "id": "injectable-StateStoreService-f8016f821451d9a62d1b51b7b23fd0318ed5817cfef7dbdedc203ad7f0b340974b311a8cd65e3293009812d12ac3869f0754d77e107ffc30e0dd4dd5011d9a83",
      "file": "src/app/providers/state-store.service.ts",
      "properties": [
        {
          "name": "areas",
          "defaultValue": "{\r\n    processing: {\r\n      tabs: {\r\n        burst: {\r\n          filePath: '',\r\n        },\r\n      },\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "clearCurrentConfiguration",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 147
        },
        {
          "name": "configSys",
          "defaultValue": "{\r\n    currentConfigFile: ConfigInfo,\r\n    allConfigFiles: [ConfigInfo],\r\n    sysInfo: SystemInfo,\r\n    env: {\r\n      SHOULD_SEND_STATS: true,\r\n      PORTABLE_EXECUTABLE_DIR: '',\r\n      CONFIGURATION_FOLDER_PATH: '',\r\n      LOGS_FOLDER_PATH: '',\r\n      JOBS_FOLDER_PATH: '',\r\n      QUARANTINED_FOLDER_PATH: '',\r\n      UPDATE_JAR_FILE_PATH: '',\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "exec",
          "defaultValue": "{\r\n    logStats: {\r\n      infoLogFilePath: '',\r\n      errorsLogFilePath: '',\r\n      warningsLogFilePath: '',\r\n      bashServiceLogFilePath: '',\r\n      updateErrMessage: '',\r\n      infoLogFileIsLocked: false,\r\n      errorsLogFileIsLocked: false,\r\n      warningsLogFileIsLocked: false,\r\n      bashServiceLogFileIsLocked: false,\r\n      infoLogFileSize: -1,\r\n      errorsLogFileSize: -1,\r\n      warningsLogFileSize: -1,\r\n      bashServiceLogFileSize: -1,\r\n    },\r\n    jobStats: {\r\n      progressValue: 0,\r\n      numberOfActiveJobs: 0,\r\n      progressJobFileExists: 0,\r\n      pauseJobFileExists: 0,\r\n      cancelJobFileExists: 0,\r\n      workingOnJobs: [\r\n        {\r\n          fileName: '',\r\n          jobFilePath: '',\r\n        },\r\n      ],\r\n      workingOnFileNames: [],\r\n      niceWorkingOnFileNames: '',\r\n      jobsToResume: [],\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "license",
          "defaultValue": "{\r\n    key: '',\r\n    status: '',\r\n    customerName: '',\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 73
        },
        {
          "name": "modals",
          "defaultValue": "{\r\n    htmlCodeToPreview: '',\r\n    modalSMSInfo: {\r\n      isModalSMSVisible: false,\r\n      fromNumber: '',\r\n      toNumber: '',\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 88
        },
        {
          "name": "product",
          "defaultValue": "{\r\n    name: 'DocumentBurster',\r\n    version: '8.8.1',\r\n    latestVersion: '',\r\n    changeLog:\r\n      '# DocumentBurster<br><br>All notable changes to this project will be documented in this file.',\r\n    isNewerVersionAvailable: false,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "setup",
          "defaultValue": "{\r\n    isRestartRequired: false,\r\n    chocolatey: {\r\n      isChocoOk: false,\r\n      version: 'v0.10.15',\r\n    },\r\n    java: {\r\n      isJavaOk: false,\r\n      version: '1.8.271',\r\n    },\r\n    env: {\r\n      PATH: UtilitiesElectron.getEnvVariable('PATH'),\r\n      JAVA_HOME: UtilitiesElectron.getEnvVariable('JAVA_HOME'),\r\n      JRE_HOME: UtilitiesElectron.getEnvVariable('JRE_HOME'),\r\n    },\r\n    update: {\r\n      succint: true,\r\n      letMeUpdateManually: false,\r\n      letMeUpdateSourceDirectoryPath: '',\r\n      homeDirectoryPath: '',\r\n      info: {\r\n        errorMsg: '',\r\n        updateSourceDirectoryPath: '',\r\n        updateSourceVersion: '',\r\n        migrateConfigFiles: [['', '']],\r\n        migrateScriptFiles: [['', '']],\r\n        templatesFolders: [['', '']],\r\n      },\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 97
        },
        {
          "name": "terminal",
          "defaultValue": "{\r\n    readOnly: true,\r\n    availableCommandsVisible: false,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 128
        },
        {
          "name": "whatsNew",
          "defaultValue": "{\r\n    blogPosts: [BlogPostInfo],\r\n    visibleBlogPost: BlogPostInfo,\r\n    visibleBlogPostIndex: -1,\r\n    changeLogMarkdown: '',\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    changeLog: Changelog,\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    visibleRelease: Release,\r\n    visibleReleaseIndex: -1,\r\n    visibleReleaseDate: '',\r\n    visibleReleaseBlogPostAnnouncement: [BlogPostInfo],\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 133
        }
      ],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Changelog, Release } from 'keep-a-changelog';\r\nimport { ConfigInfo } from '../models/config-info.model';\r\nimport { SystemInfo } from '../models/system-info.model';\r\nimport { BlogPostInfo } from '../models/blog-post-info.model';\r\nimport UtilitiesElectron from '../helpers/utilities-electron';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StateStoreService {\r\n  //Configuration\r\n  configSys = {\r\n    currentConfigFile: ConfigInfo,\r\n    allConfigFiles: [ConfigInfo],\r\n    sysInfo: SystemInfo,\r\n    env: {\r\n      SHOULD_SEND_STATS: true,\r\n      PORTABLE_EXECUTABLE_DIR: '',\r\n      CONFIGURATION_FOLDER_PATH: '',\r\n      LOGS_FOLDER_PATH: '',\r\n      JOBS_FOLDER_PATH: '',\r\n      QUARANTINED_FOLDER_PATH: '',\r\n      UPDATE_JAR_FILE_PATH: '',\r\n    },\r\n  };\r\n\r\n  //Execution Stats\r\n  exec = {\r\n    logStats: {\r\n      infoLogFilePath: '',\r\n      errorsLogFilePath: '',\r\n      warningsLogFilePath: '',\r\n      bashServiceLogFilePath: '',\r\n      updateErrMessage: '',\r\n      infoLogFileIsLocked: false,\r\n      errorsLogFileIsLocked: false,\r\n      warningsLogFileIsLocked: false,\r\n      bashServiceLogFileIsLocked: false,\r\n      infoLogFileSize: -1,\r\n      errorsLogFileSize: -1,\r\n      warningsLogFileSize: -1,\r\n      bashServiceLogFileSize: -1,\r\n    },\r\n    jobStats: {\r\n      progressValue: 0,\r\n      numberOfActiveJobs: 0,\r\n      progressJobFileExists: 0,\r\n      pauseJobFileExists: 0,\r\n      cancelJobFileExists: 0,\r\n      workingOnJobs: [\r\n        {\r\n          fileName: '',\r\n          jobFilePath: '',\r\n        },\r\n      ],\r\n      workingOnFileNames: [],\r\n      niceWorkingOnFileNames: '',\r\n      jobsToResume: [],\r\n    },\r\n  };\r\n\r\n  areas = {\r\n    processing: {\r\n      tabs: {\r\n        burst: {\r\n          filePath: '',\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  license = {\r\n    key: '',\r\n    status: '',\r\n    customerName: '',\r\n  };\r\n\r\n  product = {\r\n    name: 'DocumentBurster',\r\n    version: '8.8.1',\r\n    latestVersion: '',\r\n    changeLog:\r\n      '# DocumentBurster<br><br>All notable changes to this project will be documented in this file.',\r\n    isNewerVersionAvailable: false,\r\n  };\r\n\r\n  modals = {\r\n    htmlCodeToPreview: '',\r\n    modalSMSInfo: {\r\n      isModalSMSVisible: false,\r\n      fromNumber: '',\r\n      toNumber: '',\r\n    },\r\n  };\r\n\r\n  setup = {\r\n    isRestartRequired: false,\r\n    chocolatey: {\r\n      isChocoOk: false,\r\n      version: 'v0.10.15',\r\n    },\r\n    java: {\r\n      isJavaOk: false,\r\n      version: '1.8.271',\r\n    },\r\n    env: {\r\n      PATH: UtilitiesElectron.getEnvVariable('PATH'),\r\n      JAVA_HOME: UtilitiesElectron.getEnvVariable('JAVA_HOME'),\r\n      JRE_HOME: UtilitiesElectron.getEnvVariable('JRE_HOME'),\r\n    },\r\n    update: {\r\n      succint: true,\r\n      letMeUpdateManually: false,\r\n      letMeUpdateSourceDirectoryPath: '',\r\n      homeDirectoryPath: '',\r\n      info: {\r\n        errorMsg: '',\r\n        updateSourceDirectoryPath: '',\r\n        updateSourceVersion: '',\r\n        migrateConfigFiles: [['', '']],\r\n        migrateScriptFiles: [['', '']],\r\n        templatesFolders: [['', '']],\r\n      },\r\n    },\r\n  };\r\n\r\n  terminal = {\r\n    readOnly: true,\r\n    availableCommandsVisible: false,\r\n  };\r\n\r\n  whatsNew = {\r\n    blogPosts: [BlogPostInfo],\r\n    visibleBlogPost: BlogPostInfo,\r\n    visibleBlogPostIndex: -1,\r\n    changeLogMarkdown: '',\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    changeLog: Changelog,\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    visibleRelease: Release,\r\n    visibleReleaseIndex: -1,\r\n    visibleReleaseDate: '',\r\n    visibleReleaseBlogPostAnnouncement: [BlogPostInfo],\r\n  };\r\n\r\n  clearCurrentConfiguration = () => {\r\n    this.configSys.currentConfigFile.fileName = '';\r\n    this.configSys.currentConfigFile.filePath = '';\r\n    this.configSys.currentConfigFile.configuration.settings.template = '';\r\n  };\r\n}\r\n",
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "ToastrMessagesService",
      "id": "injectable-ToastrMessagesService-52f1420153c1bab16e1e718e73955aa5733c7e40b74d2ad1b8782b90109d0469e4d37f67adac54b14936272e395097f56137092b1dd0c5511216a6a40fbba24c",
      "file": "src/app/providers/toastr-messages.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "showError",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showInfo",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showSuccess",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showWarning",
          "args": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "message",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "title",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "override",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable()\r\nexport class ToastrMessagesService {\r\n  constructor(protected toastrService: ToastrService) {}\r\n\r\n  showSuccess(message?: string, title?: string, override?: {}) {\r\n    this.toastrService.success(message, title, override);\r\n  }\r\n\r\n  showInfo(message?: string, title?: string, override?: {}) {\r\n    this.toastrService.info(message, title, override);\r\n  }\r\n\r\n  showError(message?: string, title?: string, override?: {}) {\r\n    this.toastrService.error(message, title, override);\r\n  }\r\n\r\n  showWarning(message?: string, title?: string, override?: {}) {\r\n    this.toastrService.warning(message, title, override);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "toastrService",
            "type": "ToastrService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 5,
        "jsdoctags": [
          {
            "name": "toastrService",
            "type": "ToastrService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "UnixCliService",
      "id": "injectable-UnixCliService-94a4e8cbbb4902750b10dd6cc4119b478d94954158a206c3efdb1d986777503c926564e37f91da3ff982ba6c77d392720776864b044155d7476df9edff2accfe",
      "file": "src/app/providers/unix-cli.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "catAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'.'"
            },
            {
              "name": "searchOptions",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{ matching: ['*'], files: true, directories: false, recursive: false }"
            }
          ],
          "optional": false,
          "returnType": "Promise<string[]>",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "'.'",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "searchOptions",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{ matching: ['*'], files: true, directories: false, recursive: false }",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ApiService } from './api.service';\r\nimport Utilities from '../helpers/utilities';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UnixCliService {\r\n  constructor(protected apiService: ApiService) {}\r\n\r\n  async findAsync(\r\n    path: string = '.',\r\n    searchOptions: {\r\n      matching?: string[];\r\n      filter?: (path: string) => boolean;\r\n      files?: boolean;\r\n      directories?: boolean;\r\n      recursive?: boolean;\r\n      ignoreCase?: boolean;\r\n    } = { matching: ['*'], files: true, directories: false, recursive: false },\r\n  ): Promise<string[]> {\r\n    // Construct the parameters as an object\r\n    const params: any = {};\r\n\r\n    // Loop over the keys of searchOptions to set the parameters\r\n    for (const [key, value] of Object.entries(searchOptions)) {\r\n      if (value) {\r\n        params[key] = value;\r\n      }\r\n    }\r\n\r\n    return this.apiService.get(`/jobman/system/unix-cli/find`, {\r\n      //path: encodeURIComponent(Utilities.slash(path)),\r\n      path: Utilities.slash(path),\r\n      ...params,\r\n    });\r\n  }\r\n\r\n  async catAsync(path: string) {\r\n    //console.log(`catAsync = ${path}`);\r\n    return this.apiService.get(\r\n      `/jobman/system/unix-cli/cat`,\r\n      {\r\n        //path: encodeURIComponent(Utilities.slash(path)),\r\n        path: Utilities.slash(path),\r\n      },\r\n      new Headers({\r\n        Accept: 'text/plain',\r\n        'Content-Type': 'application/json',\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "type": "injectable"
    },
    {
      "name": "WebSocketExecutionStatsService",
      "id": "injectable-WebSocketExecutionStatsService-19d1ebb7f347b0c73c0b2f4745221d7f6904056f214c6219a0c8d202b316cf3a1b99cb00fbc8fa086d43cbe0b84b7ce328bdd57ffbe4b565274a6fb9ddd3285e",
      "file": "src/app/providers/ws-execution-stats.service.ts",
      "properties": [
        {
          "name": "callBacks",
          "defaultValue": "{\r\n    onProcessComplete: null,\r\n    onProcessFailed: null,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "handleExecutionStatsEvent",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 281
        },
        {
          "name": "handleExecutionStatsJobsEvent",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "handleExecutionStatsLogsEvent",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 305
        },
        {
          "name": "handleExecutionStatsOnProcessEvent",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "handleResumeJobs",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 215
        },
        {
          "name": "handleRunningJobs",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "settingsService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SettingsService",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [125]
        },
        {
          "name": "wsSubscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "_messageIds",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 19,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_onSocketError",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_options",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SocketOptions",
          "optional": false,
          "description": "",
          "line": 11,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_socket",
          "defaultValue": "new SocketEndpoint()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SocketEndpoint",
          "optional": false,
          "description": "",
          "line": 13,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "_socketListener",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 79,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "addToSubscribers",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 44,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "BACKEND_URL",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "connect",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 133,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "createObservableSocket",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [123],
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "getMessage",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 63,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "getObservable",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 59,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "getOptions",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "observableStompConnection",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any>",
          "optional": false,
          "description": "",
          "line": 15,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "reconnectionPromise",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 21,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "reconnectNow",
          "defaultValue": "function (this: WebSocketEndpoint) {\r\n    this._socket.stomp.disconnect();\r\n    if (this.reconnectionPromise && this.reconnectionPromise.cancel)\r\n      this.reconnectionPromise.cancel();\r\n    this.connect();\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 111,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "removeFromSubscribers",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 51,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "scheduleReconnection",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 100,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "send",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 118,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "subscriberIndex",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        },
        {
          "name": "subscribers",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 16,
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        }
      ],
      "methods": [
        {
          "name": "getNiceListOfFileNames",
          "args": [
            {
              "name": "fileNames",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 362,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fileNames",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "makeWSConnectionAndHandleMessages",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "makeWSConnection",
          "args": [
            {
              "name": "options",
              "type": "SocketOptions",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "options",
              "type": "SocketOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "WebSocketEndpoint"
          }
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { SettingsService } from './settings.service';\r\nimport {\r\n  SocketOptions,\r\n  WebSocketEndpoint,\r\n} from '../helpers/websocket-endpoint';\r\nimport { Constants } from '../helpers/constants';\r\nimport { ApiService } from './api.service';\r\nimport { Subscription } from 'rxjs';\r\nimport Utilities from '../helpers/utilities';\r\nimport { ExecutionStatsService } from './execution-stats.service';\r\nimport { ToastrMessagesService } from './toastr-messages.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WebSocketExecutionStatsService extends WebSocketEndpoint {\r\n  wsSubscription: Subscription;\r\n\r\n  callBacks = {\r\n    onProcessComplete: null,\r\n    onProcessFailed: null,\r\n  };\r\n\r\n  constructor(\r\n    protected apiService: ApiService,\r\n    public settingsService: SettingsService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected toastMessagesService: ToastrMessagesService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  async makeWSConnectionAndHandleMessages() {\r\n    //if server is started and the subscription is not already active\r\n    const sOptions = new SocketOptions(\r\n      Constants.WS_ENDPOINT,\r\n      Constants.WS_TOPIC_EXECUTION_STATS,\r\n      this.apiService.getToken,\r\n    );\r\n\r\n    await this.makeWSConnection(sOptions);\r\n    this.settingsService.activeWebSocketSubcriptions.push(sOptions);\r\n\r\n    this.wsSubscription = this.getObservable().subscribe({\r\n      next: this.handleExecutionStatsEvent,\r\n      error: (err) => {\r\n        console.log(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  handleExecutionStatsOnProcessEvent = async (\r\n    exitValue: number,\r\n    exceptionMessage = '',\r\n  ) => {\r\n    if (this.callBacks.onProcessComplete) {\r\n      await this.callBacks.onProcessComplete();\r\n      this.callBacks.onProcessComplete = null;\r\n    }\r\n\r\n    if (exitValue == 0)\r\n      this.toastMessagesService.showSuccess('Done', '', {\r\n        messageClass: 'java-exited',\r\n      });\r\n    else\r\n      this.toastMessagesService.showError(exceptionMessage, '', {\r\n        messageClass: 'java-exited',\r\n      });\r\n  };\r\n\r\n  handleExecutionStatsJobsEvent = async (\r\n    jobsEventDetails: {\r\n      fileName: string;\r\n      filePath: string;\r\n      fileContent: string;\r\n    }[],\r\n  ) => {\r\n    await this.handleRunningJobs(jobsEventDetails);\r\n    await this.handleResumeJobs(jobsEventDetails);\r\n  };\r\n\r\n  handleRunningJobs = async (\r\n    jobsEventDetails: {\r\n      fileName: string;\r\n      filePath: string;\r\n      fileContent: string;\r\n    }[],\r\n  ) => {\r\n    const allJobFiles = jobsEventDetails;\r\n    const processingJobs = [];\r\n    for (const jobFile of allJobFiles) {\r\n      // jobtype === 'burst' job files\r\n      if (jobFile.fileName.endsWith('.job')) {\r\n        const jobDetails = await Utilities.parseStringPromise(\r\n          jobFile.fileContent,\r\n          {\r\n            trim: true,\r\n            explicitArray: false,\r\n          },\r\n        );\r\n        //console.log(jobDetails);\r\n        processingJobs.push({ jobFilePath: jobFile.filePath, ...jobDetails });\r\n      }\r\n    }\r\n    if (processingJobs.length == 0) {\r\n      this.executionStatsService.jobStats.workingOnJobs = [];\r\n      this.executionStatsService.jobStats.workingOnFileNames = [];\r\n\r\n      this.executionStatsService.jobStats.niceWorkingOnFileNames = '';\r\n\r\n      this.executionStatsService.jobStats.progressValue = 0;\r\n      this.executionStatsService.jobStats.numberOfActiveJobs = 0;\r\n    } else {\r\n      if (\r\n        this.executionStatsService.jobStats.progressValue <\r\n        Constants.MAX_PROGRESS_LENGTH\r\n      ) {\r\n        this.executionStatsService.jobStats.progressValue += 1;\r\n      } else {\r\n        this.executionStatsService.jobStats.progressValue = 0;\r\n      }\r\n      this.executionStatsService.jobStats.numberOfActiveJobs =\r\n        processingJobs.length;\r\n\r\n      if (\r\n        this.executionStatsService.jobStats.workingOnFileNames.length !==\r\n        processingJobs.length\r\n      ) {\r\n        this.executionStatsService.jobStats.workingOnJobs = [];\r\n        this.executionStatsService.jobStats.workingOnFileNames = [];\r\n      }\r\n\r\n      for (const activeJob of processingJobs) {\r\n        let fileName = Utilities.getFileNameFromPath(activeJob.job.filepath);\r\n\r\n        if (fileName === 'license.xml') {\r\n          fileName = 'license';\r\n        }\r\n        if (fileName === 'email.groovy') {\r\n          fileName = 'email';\r\n        }\r\n\r\n        if (fileName === 'twilio.groovy') {\r\n          fileName = 'twilio';\r\n        }\r\n\r\n        if (\r\n          this.executionStatsService.jobStats.workingOnFileNames.indexOf(\r\n            fileName,\r\n          ) < 0\r\n        ) {\r\n          this.executionStatsService.jobStats.workingOnFileNames.push(fileName);\r\n\r\n          this.executionStatsService.jobStats.workingOnJobs.push({\r\n            jobFilePath: activeJob.jobFilePath,\r\n            fileName: fileName,\r\n          });\r\n        }\r\n      }\r\n\r\n      const newNiceListOfFileNames = this.getNiceListOfFileNames(\r\n        this.executionStatsService.jobStats.workingOnFileNames.sort(),\r\n      );\r\n\r\n      if (\r\n        newNiceListOfFileNames !==\r\n        this.executionStatsService.jobStats.niceWorkingOnFileNames\r\n      ) {\r\n        this.executionStatsService.jobStats.niceWorkingOnFileNames =\r\n          newNiceListOfFileNames;\r\n        this.executionStatsService.jobStats.numberOfActiveJobs =\r\n          processingJobs.length;\r\n      }\r\n    }\r\n\r\n    // pause and cancel job files\r\n    const pauseJobFiles = allJobFiles.filter((jobFile) =>\r\n      jobFile.fileName.endsWith('.pause'),\r\n    );\r\n\r\n    if (pauseJobFiles && pauseJobFiles.length) {\r\n      this.executionStatsService.jobStats.pauseJobFileExists =\r\n        pauseJobFiles.length;\r\n    } else {\r\n      this.executionStatsService.jobStats.pauseJobFileExists = 0;\r\n    }\r\n\r\n    const cancelJobFiles = allJobFiles.filter((jobFile) =>\r\n      jobFile.fileName.endsWith('.cancel'),\r\n    );\r\n\r\n    if (cancelJobFiles && cancelJobFiles.length) {\r\n      this.executionStatsService.jobStats.cancelJobFileExists =\r\n        cancelJobFiles.length;\r\n    } else {\r\n      this.executionStatsService.jobStats.cancelJobFileExists = 0;\r\n    }\r\n\r\n    const progressJobFiles = allJobFiles.filter((jobFile) =>\r\n      jobFile.fileName.endsWith('.progress'),\r\n    );\r\n\r\n    if (progressJobFiles && progressJobFiles.length) {\r\n      this.executionStatsService.jobStats.progressJobFileExists =\r\n        progressJobFiles.length;\r\n    } else {\r\n      this.executionStatsService.jobStats.progressJobFileExists = 0;\r\n    }\r\n  };\r\n\r\n  handleResumeJobs = async (\r\n    jobsEventDetails: {\r\n      fileName: string;\r\n      filePath: string;\r\n      fileContent: string;\r\n    }[],\r\n  ) => {\r\n    const allJobFiles = jobsEventDetails;\r\n    if (this.executionStatsService.jobStats.numberOfActiveJobs == 0) {\r\n      const progressJobFiles = allJobFiles.filter((jobFile) =>\r\n        jobFile.fileName.endsWith('.progress'),\r\n      );\r\n\r\n      if (progressJobFiles && progressJobFiles.length > 0) {\r\n        if (\r\n          this.executionStatsService.jobStats.jobsToResume.length !=\r\n          progressJobFiles.length\r\n        ) {\r\n          this.executionStatsService.jobStats.jobsToResume = [];\r\n        }\r\n\r\n        for (let progressJobFile of progressJobFiles) {\r\n          const progressJobFileAlreadyIndexed =\r\n            this.executionStatsService.jobStats.jobsToResume.filter((job) => {\r\n              if (job.jobFilePath === progressJobFile.filePath) {\r\n                return job;\r\n              }\r\n            });\r\n\r\n          if (\r\n            !progressJobFileAlreadyIndexed ||\r\n            progressJobFileAlreadyIndexed.length === 0\r\n          ) {\r\n            const jobProgressDetailsXML = await Utilities.parseStringPromise(\r\n              progressJobFile.fileContent,\r\n              {\r\n                trim: true,\r\n                explicitArray: false,\r\n              },\r\n            );\r\n            this.executionStatsService.jobStats.jobsToResume.push({\r\n              jobFilePath: progressJobFile.filePath,\r\n              jobDate: jobProgressDetailsXML.jobprogress.currentdate,\r\n              filePath: jobProgressDetailsXML.jobprogress.filepath,\r\n              lastTokenProcessed:\r\n                jobProgressDetailsXML.jobprogress.lasttokenprocessed,\r\n              lastTokenInDocument:\r\n                jobProgressDetailsXML.jobprogress.lasttokenindocument,\r\n              testAll: jobProgressDetailsXML.jobprogress.testall,\r\n              listOfTestTokens:\r\n                jobProgressDetailsXML.jobprogress.listoftesttokens,\r\n              numberOfRandomTestTokens:\r\n                jobProgressDetailsXML.jobprogress.numberofrandomtesttokens,\r\n              tokensCount: jobProgressDetailsXML.jobprogress.tokenscount,\r\n              pagesCount: jobProgressDetailsXML.jobprogress.pagescount,\r\n              numberOfRemainingTokens:\r\n                jobProgressDetailsXML.jobprogress.numberofremainingtokens,\r\n              indexOfLastTokenProcessed:\r\n                jobProgressDetailsXML.jobprogress.indexoflasttokenprocessed,\r\n            });\r\n          }\r\n        }\r\n      } else this.executionStatsService.jobStats.jobsToResume = [];\r\n    }\r\n  };\r\n\r\n  handleExecutionStatsEvent = async (receivedEvent: {\r\n    eventType: string;\r\n    filesPayload: [];\r\n    exitValue: number;\r\n    exceptionMessage: '';\r\n  }) => {\r\n    this.settingsService.isJServerStarted = true;\r\n\r\n    const message = receivedEvent['message'];\r\n\r\n    //console.log(`message = ${message}`);\r\n    //this.toastMessagesService.success(message.eventType);\r\n\r\n    if (message.eventType === 'stats.jobs')\r\n      await this.handleExecutionStatsJobsEvent(message.filesPayload);\r\n    else if (message.eventType === 'stats.logs')\r\n      await this.handleExecutionStatsLogsEvent(message.filesPayload);\r\n    else if (message.eventType.startsWith('on.process.'))\r\n      await this.handleExecutionStatsOnProcessEvent(\r\n        message.exitValue,\r\n        message.exceptionMessage,\r\n      );\r\n  };\r\n\r\n  handleExecutionStatsLogsEvent = async (\r\n    logsEventDetails: {\r\n      fileName: string;\r\n      fileSize: number;\r\n    }[],\r\n  ) => {\r\n    //console.log(`logsEventDetails = ${JSON.stringify(logsEventDetails)}`);\r\n    this.executionStatsService.logStats.foundDirtyLogFiles = false;\r\n    const allLogFiles = logsEventDetails;\r\n\r\n    if (allLogFiles.length == 0) {\r\n      this.executionStatsService.logStats.errorsLogFileSize = -1;\r\n      this.executionStatsService.logStats.infoLogFileSize = -1;\r\n      this.executionStatsService.logStats.warningsLogFileSize = -1;\r\n    } else {\r\n      const errorsLog = allLogFiles.find(\r\n        (logFile) => logFile.fileName === 'errors.log',\r\n      );\r\n\r\n      if (!errorsLog)\r\n        this.executionStatsService.logStats.errorsLogFileSize = -1;\r\n      else {\r\n        this.executionStatsService.logStats.errorsLogFileSize =\r\n          errorsLog.fileSize;\r\n      }\r\n\r\n      const warningsLog = allLogFiles.find(\r\n        (logFile) => logFile.fileName === 'warnings.log',\r\n      );\r\n\r\n      if (!warningsLog)\r\n        this.executionStatsService.logStats.warningsLogFileSize = -1;\r\n      else {\r\n        this.executionStatsService.logStats.warningsLogFileSize =\r\n          warningsLog.fileSize;\r\n      }\r\n\r\n      const infoLog = allLogFiles.find(\r\n        (logFile) => logFile.fileName === 'info.log',\r\n      );\r\n\r\n      if (!infoLog) this.executionStatsService.logStats.infoLogFileSize = -1;\r\n      else {\r\n        this.executionStatsService.logStats.infoLogFileSize = infoLog.fileSize;\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.executionStatsService.logStats.errorsLogFileSize > 0 ||\r\n      this.executionStatsService.logStats.infoLogFileSize > 0 ||\r\n      this.executionStatsService.logStats.warningsLogFileSize > 0\r\n    ) {\r\n      this.executionStatsService.logStats.foundDirtyLogFiles = true;\r\n    }\r\n    // /console.log(this.executionStatsService.logStats.errorsLogFileSize);\r\n  };\r\n\r\n  getNiceListOfFileNames(fileNames: Array<string>) {\r\n    return [fileNames.slice(0, -1).join(', '), fileNames.slice(-1)[0]].join(\r\n      fileNames.length < 2 ? '' : ' and ',\r\n    );\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "toastMessagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toastMessagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": ["WebSocketEndpoint"],
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "Constants",
      "id": "class-Constants-62395855d564dc217891cf023ddaab1170cd1e5261eaf9df5ea63f1b1a8fd738a0b52e30cd3408d7df2e182a8c117280ce7abb7d0885306373effd282ad5a39d",
      "file": "src/app/helpers/constants.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class Constants {\r\n  public static WS_ENDPOINT = '/jobman/ws';\r\n  public static WS_TOPIC_TAILER = '/topic/tailer';\r\n  public static WS_TOPIC_EXECUTION_STATS = '/topic/execution-stats';\r\n  public static MAX_PROGRESS_LENGTH = 100;\r\n}\r\n",
      "properties": [
        {
          "name": "MAX_PROGRESS_LENGTH",
          "defaultValue": "100",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5,
          "modifierKind": [126]
        },
        {
          "name": "WS_ENDPOINT",
          "defaultValue": "'/jobman/ws'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2,
          "modifierKind": [126]
        },
        {
          "name": "WS_TOPIC_EXECUTION_STATS",
          "defaultValue": "'/topic/execution-stats'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [126]
        },
        {
          "name": "WS_TOPIC_TAILER",
          "defaultValue": "'/topic/tailer'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3,
          "modifierKind": [126]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Dialog",
      "id": "class-Dialog-78cba890f00c0bb80b4c83526a2c2d35aa989b951d8fdf42cecbf208d2159058eadf32053539ebd1962ba939edcc9328324e53935d98738de94d80a8c0af112c",
      "file": "src/app/core/services/electron/electron.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport * as process from 'process';\r\nimport { ChildProcess, spawn } from 'child_process';\r\nimport * as childProcess from 'child_process';\r\n\r\nimport * as jetpack from 'fs-jetpack';\r\nimport * as uniqueFilename from 'unique-filename';\r\n\r\nimport * as ElectronLog from 'electron-log';\r\n\r\nimport * as semver from 'semver';\r\nimport { SemVer } from 'semver';\r\nimport * as dayjs from 'dayjs';\r\n\r\nimport { Subscription, interval } from 'rxjs';\r\nimport * as CustomElectronTitlebar from 'custom-electron-titlebar/dist';\r\n\r\nimport { ApiService } from '../../../providers/api.service';\r\nimport Utilities from '../../../helpers/utilities';\r\nimport UtilitiesElectron from '../../../helpers/utilities-electron';\r\n\r\nclass Dialog {\r\n  showSaveDialog(options: {\r\n    defaultPath: string;\r\n  }): Promise<{ canceled: boolean; filePath?: string; bookmark?: string }> {\r\n    return new Promise((resolve, reject) => {\r\n      // Simulate a successful operation for demonstration purposes\r\n      resolve({\r\n        canceled: false, // change this to true to simulate a canceled operation\r\n        filePath: `${\r\n          window.require('process').env.PORTABLE_EXECUTABLE_DIR\r\n        }/temp/file`, // this will be undefined if the operation was canceled\r\n        bookmark: 'base64-encoded-bookmark', // this is optional and specific to macOS MAS\r\n      });\r\n    });\r\n  }\r\n\r\n  showOpenDialog(options: { defaultPath: string }): Promise<{\r\n    canceled: boolean;\r\n    filePaths: string[];\r\n    bookmarks?: string[];\r\n  }> {\r\n    return new Promise((resolve, reject) => {\r\n      // Simulate a successful operation for demonstration purposes\r\n      resolve({\r\n        canceled: false, // change this to true to simulate a canceled operation\r\n        filePaths: window.require('process').env.PORTABLE_EXECUTABLE_DIR, // this will be an empty array if the operation was canceled\r\n        bookmarks: ['base64-encoded-bookmark1', 'base64-encoded-bookmark2'], // this is optional and specific to macOS MAS\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ElectronService {\r\n  process: typeof process;\r\n  childProcess: typeof childProcess;\r\n  exec: typeof childProcess.exec;\r\n  spawn: typeof childProcess.spawn;\r\n\r\n  log: typeof ElectronLog;\r\n  cet: typeof CustomElectronTitlebar;\r\n\r\n  PORTABLE_EXECUTABLE_DIR: string;\r\n\r\n  SHOULD_SEND_STATS: boolean = false;\r\n  RUNNING_IN_E2E: boolean = false;\r\n\r\n  dialog: Dialog;\r\n\r\n  JAVA_HOME: string;\r\n  JRE_HOME: string;\r\n\r\n  PATH: string;\r\n\r\n  isJavaOk = false;\r\n  javaVersion: string;\r\n  checkJavaSubscription: Subscription;\r\n\r\n  javaDiagnostics = {\r\n    javaHomeFolderExists: false,\r\n    pathIncludesJavaHomeBin: false,\r\n    javaExeExists: false,\r\n    jreHomeFolderExists: false,\r\n  };\r\n\r\n  isChocoOk = false;\r\n  chocoVersion: string;\r\n\r\n  logFilePath: string;\r\n\r\n  pTerminalInput: HTMLInputElement;\r\n\r\n  constructor(protected apiService: ApiService) {\r\n    this.process = window.require('process');\r\n\r\n    this.PORTABLE_EXECUTABLE_DIR = this.process.env.PORTABLE_EXECUTABLE_DIR;\r\n\r\n    this.RUNNING_IN_E2E = new Boolean(\r\n      this.process.env.RUNNING_IN_E2E,\r\n    ).valueOf();\r\n\r\n    this.dialog = new Dialog();\r\n\r\n    //if (this.isElectron) {\r\n    this.childProcess = window.require('child_process');\r\n    this.exec = this.childProcess.exec;\r\n    this.spawn = this.childProcess.spawn;\r\n\r\n    this.log = window.require('electron-log');\r\n    this.cet = window.require('custom-electron-titlebar');\r\n\r\n    this.logFilePath = Utilities.slash(\r\n      `${this.PORTABLE_EXECUTABLE_DIR}/logs/bash.service.log`,\r\n    );\r\n\r\n    this.checkJavaSubscription = interval(1000).subscribe(async (x) => {\r\n      await this.checkJava();\r\n    });\r\n    //}\r\n  }\r\n\r\n  get isElectron(): boolean {\r\n    return !!(window && window.process && window.process.type);\r\n  }\r\n\r\n  clock(start?: [number, number]): [number, number] {\r\n    return [0, 0];\r\n  }\r\n\r\n  async checkJavaVersion(throwError = false) {\r\n    if (process.env.JAVA_HOME)\r\n      this.JAVA_HOME = Utilities.slash(process.env.JAVA_HOME);\r\n\r\n    if (process.env.JRE_HOME)\r\n      this.JRE_HOME = Utilities.slash(process.env.JRE_HOME);\r\n\r\n    this.PATH = process.env.PATH;\r\n\r\n    try {\r\n      //on Windows 7 java 8 java --version is not working, the command is simply java -version\r\n      //console.log(`java -version`);\r\n\r\n      //console.log(\r\n      //  `await this.execCommand('java -version') = ${await this.execCommand(\r\n      //    'java -version'\r\n      //  )}`\r\n      //);\r\n\r\n      const { stdout, stderr } =\r\n        await UtilitiesElectron.execNativeCommand('java -version');\r\n\r\n      //console.log(stdout, stderr);\r\n\r\n      let javaV = stdout;\r\n\r\n      if (!javaV) javaV = stderr;\r\n\r\n      //No errors => we have Java installed\r\n      //https://stackoverflow.com/questions/19734477/verify-if-java-is-installed-from-node-js/19734810\r\n\r\n      //console.log(`java javaV: ${javaV}`);\r\n\r\n      let firstLine: string = javaV;\r\n\r\n      // if (javaV) firstLine = javaV.split('\\n')[0];\r\n      //else firstLine = stderr.toString().split('\\n')[0];\r\n\r\n      // console.log(`firstLine: ${firstLine}`);\r\n\r\n      //sometimes it is coming as 'openjdk version \"14.0.2\" 2020-07-14'\r\n\r\n      let javaVersion = new RegExp('(java|openjdk) version').test(firstLine)\r\n        ? firstLine.split(' ')[2].replace(/\"/g, '')\r\n        : '';\r\n\r\n      //and sometimes it is coming as 'openjdk 14.0.2 2020-07-14'\r\n      if (!javaVersion)\r\n        javaVersion = new RegExp('(java|openjdk)').test(firstLine)\r\n          ? firstLine.split(' ')[1].replace(/\"/g, '')\r\n          : '';\r\n\r\n      //console.log(`java javaVersion: ${javaVersion}`);\r\n\r\n      //console.log(`javaVersion = ${javaV}`);\r\n      let semVersion = new SemVer(javaVersion);\r\n      const semVersion1_8 = semver.coerce('1.8');\r\n\r\n      if (!semver.valid(javaVersion)) semVersion = semver.coerce(javaVersion);\r\n\r\n      if (semver.gte(semVersion, semVersion1_8)) {\r\n        this.isJavaOk = true;\r\n        this.javaVersion = javaVersion.toString();\r\n      }\r\n\r\n      return javaV;\r\n    } catch (error) {\r\n      this.isJavaOk = false;\r\n      this.javaVersion = undefined;\r\n    }\r\n  }\r\n\r\n  async checkChocoVersion(throwError = false) {\r\n    try {\r\n      const { stdout, stderr } =\r\n        await UtilitiesElectron.execNativeCommand('choco --version');\r\n\r\n      if (!this.isChocoOk) this.isChocoOk = true;\r\n      this.chocoVersion = stdout;\r\n      //console.log(`this.chocoVersion  = ${this.chocoVersion}`);\r\n\r\n      return stdout;\r\n    } catch (error) {\r\n      if (this.isChocoOk) this.isChocoOk = false;\r\n      this.chocoVersion = undefined;\r\n\r\n      if (throwError) throw error;\r\n    }\r\n  }\r\n\r\n  async checkJava() {\r\n    await this.checkChocoVersion(true);\r\n    await this.checkJavaVersion(true);\r\n\r\n    if (this.JAVA_HOME) {\r\n      const javaHomeFolderPathExists = await jetpack.existsAsync(\r\n        this.JAVA_HOME,\r\n      );\r\n\r\n      if (javaHomeFolderPathExists === 'dir')\r\n        this.javaDiagnostics.javaHomeFolderExists = true;\r\n      else this.javaDiagnostics.javaHomeFolderExists = false;\r\n\r\n      const javaHomeBin = this.JAVA_HOME + '/bin';\r\n\r\n      if (\r\n        this.PATH.includes(javaHomeBin) ||\r\n        this.PATH.includes(this.JAVA_HOME + '\\\\bin')\r\n      )\r\n        this.javaDiagnostics.pathIncludesJavaHomeBin = true;\r\n      else this.javaDiagnostics.pathIncludesJavaHomeBin = false;\r\n\r\n      const javaExeFilePathExists = await jetpack.existsAsync(\r\n        javaHomeBin + '/java.exe',\r\n      );\r\n\r\n      if (javaExeFilePathExists === 'file')\r\n        this.javaDiagnostics.javaExeExists = true;\r\n      else this.javaDiagnostics.javaExeExists = false;\r\n    } else {\r\n      this.javaDiagnostics.javaHomeFolderExists = false;\r\n      this.javaDiagnostics.pathIncludesJavaHomeBin = false;\r\n      this.javaDiagnostics.javaExeExists = false;\r\n    }\r\n\r\n    if (this.JRE_HOME) {\r\n      const jreHomeFolderPathExists = await jetpack.existsAsync(this.JRE_HOME);\r\n\r\n      if (jreHomeFolderPathExists === 'dir')\r\n        this.javaDiagnostics.jreHomeFolderExists = true;\r\n      else this.javaDiagnostics.jreHomeFolderExists = false;\r\n    }\r\n  }\r\n\r\n  async _getEnvironmentVariableValue(envKey: string, throwError = false) {\r\n    // https://stackoverflow.com/questions/445167/how-can-i-get-the-value-of-a-registry-key-from-within-a-batch-script\r\n    // How can I get the value of a registry key from within a batch script?\r\n    let value = '';\r\n    const queryCommand = `for /F \"tokens=3*\" %A in ('reg query \"HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment\" /v \"${envKey}\"') DO @Echo %A %B`;\r\n\r\n    try {\r\n      const { stdout, stderr } =\r\n        await UtilitiesElectron.execNativeCommand(queryCommand);\r\n      if (stdout) value = stdout;\r\n    } catch (error) {\r\n      //console.log(`error = ${error}, throwError = ${throwError}`);\r\n\r\n      if (throwError) throw error;\r\n    } finally {\r\n      return value;\r\n    }\r\n  }\r\n  async installChocolatey(): Promise<ChildProcess> {\r\n    //https://chocolatey.org/docs/installation#install-using-powershell-from-cmdexe\r\n\r\n    //Step 1 generate /temp/installChocolatey.cmd\r\n    const scriptContent = `@echo off\r\n\r\nSET DIR=%~dp0%\r\n    \r\n::download install.ps1\r\n%systemroot%/System32/WindowsPowerShell/v1.0/powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"((new-object net.webclient).DownloadFile('https://chocolatey.org/install.ps1','%DIR%install.ps1'))\"\r\n::run installer\r\n%systemroot%/System32/WindowsPowerShell/v1.0/powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"& '%DIR%install.ps1' %*\"\r\ndel /f /s install.ps1\r\n`;\r\n\r\n    const scriptFilePath = Utilities.slash(\r\n      this.PORTABLE_EXECUTABLE_DIR + '/temp/installChocolatey.cmd',\r\n    );\r\n\r\n    await jetpack.writeAsync(scriptFilePath, scriptContent);\r\n\r\n    //Step 2 Run installChocolatey.cmd\r\n\r\n    // Run installChocolatey.cmd from an elevated cmd.exe command prompt and it will install the latest version of Chocolatey.\r\n    return Promise.resolve(\r\n      this.getCommandReadyToBeRunAsAdministratorUsingBatchCmd(\r\n        'CALL installChocolatey.cmd',\r\n      ),\r\n    );\r\n  }\r\n\r\n  async getCommandReadyToBeRunAsAdministratorUsingBatchCmd(\r\n    command: string,\r\n  ): Promise<ChildProcess> {\r\n    const elevatedScriptFilePath =\r\n      await this.generateScriptForRunningCommandAsAdministratorUsingBatchCmd(\r\n        command,\r\n      );\r\n\r\n    return Promise.resolve(\r\n      spawn('cmd.exe', ['/c', elevatedScriptFilePath], {\r\n        cwd: Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n      }),\r\n    );\r\n  }\r\n\r\n  async getCommandReadyToBeRunAsAdministratorUsingPowerShell(\r\n    command: string,\r\n    testCommand = '',\r\n  ): Promise<ChildProcess> {\r\n    const elevatedScriptFilePath =\r\n      await this.generateScriptForRunningCommandAsAdministratorUsingPowerShell(\r\n        command,\r\n        testCommand,\r\n      );\r\n\r\n    return Promise.resolve(\r\n      spawn('powershell.exe', [elevatedScriptFilePath], {\r\n        cwd: Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n      }),\r\n    );\r\n  }\r\n\r\n  async generateScriptForRunningCommandAsAdministratorUsingPowerShell(\r\n    commandToElevate: string,\r\n    testCommand = '',\r\n  ) {\r\n    //https://stackoverflow.com/questions/7690994/running-a-command-as-administrator-using-powershell\r\n    //Here's a self-elevating snippet for Powershell scripts which preserves the working directory:\r\n\r\n    const elevatedScriptFilePath =\r\n      uniqueFilename(\r\n        Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n        'elevated-powershell-script',\r\n      ) + '.ps1';\r\n    const now = dayjs().format('DD/MM/YYYY HH:mm:ss');\r\n\r\n    const scriptContent = `if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {\r\n      \r\n      # If not already admin\r\n      \r\n      Write-Host \"${now} - Executing '${commandToElevate}' as Administrator\";\r\n      Start-Process PowerShell -Verb RunAs \"-NoProfile -ExecutionPolicy Bypass -Command \\`\"cd '$pwd'; & '$PSCommandPath';\\`\"\";\r\n      \r\n      # Exit the non-elevated script\r\n      exit 0;\r\n    \r\n    }\r\n  \r\n    # Your script here\r\n    # Below code is executed RunAs admin\r\n\r\n    function timestamp {\r\n      \r\n      # append timestamp to each line of the input (output of the previous command in the pipeline)\r\n      foreach ($i in $input){\r\n          \"${now} - $i\"\r\n      }\r\n    }  \r\n\r\n    ${testCommand}\r\n    \r\n    # if ${testCommand} was succesfull\r\n    if($?)\r\n    {\r\n      Write-Host \"Please wait while executing '${commandToElevate}' as Administrator...\";\r\n      ${commandToElevate} 2>&1 | timestamp | Out-File -Append -Encoding ascii ${this.logFilePath};\r\n    }\r\n    else {\r\n      Add-Content ${this.logFilePath} \"${now} ERRROR - Could not execute '${commandToElevate}' because '${testCommand}' failed!\"\r\n    }\r\n    \r\n    Remove-Item $PSCommandPath;\r\n    `;\r\n\r\n    await jetpack.writeAsync(elevatedScriptFilePath, scriptContent);\r\n\r\n    return Promise.resolve(elevatedScriptFilePath);\r\n  }\r\n\r\n  async generateScriptForRunningCommandAsAdministratorUsingBatchCmd(\r\n    commandToElevate: string,\r\n  ) {\r\n    //https://stackoverflow.com/questions/7044985/how-can-i-auto-elevate-my-batch-file-so-that-it-requests-from-uac-administrator\r\n    //There is an easy way without the need to use an external tool - it runs fine with Windows 7, 8, 8.1 and 10\r\n\r\n    const elevatedScriptFilePath =\r\n      uniqueFilename(\r\n        Utilities.slash(this.PORTABLE_EXECUTABLE_DIR + '/temp/'),\r\n        'elevated-batch-cmd-script',\r\n      ) + '.cmd';\r\n\r\n    const now = dayjs().format('DD/MM/YYYY HH:mm:ss');\r\n\r\n    const scriptContent = `::::::::::::::::::::::::::::::::::::::::::::\r\n    :: Elevate.cmd - Version 4\r\n    :: Automatically check & get admin rights\r\n    :: see \"https://stackoverflow.com/a/12264592/1016343\" for description\r\n    ::::::::::::::::::::::::::::::::::::::::::::\r\n     @echo off\r\n     CLS\r\n     ECHO.\r\n     ECHO =============================\r\n     ECHO Please wait... Running '${commandToElevate}' as Admin...\r\n     ECHO =============================\r\n    \r\n    :init\r\n     setlocal DisableDelayedExpansion\r\n     set cmdInvoke=0\r\n     set winSysFolder=System32\r\n     set \"batchPath=%~0\"\r\n     for %%k in (%0) do set batchName=%%~nk\r\n     set \"vbsGetPrivileges=%temp%/OEgetPriv_%batchName%.vbs\"\r\n     setlocal EnableDelayedExpansion\r\n    \r\n    :checkPrivileges\r\n      NET FILE 1>NUL 2>NUL\r\n      if '%errorlevel%' == '0' ( goto gotPrivileges ) else ( goto getPrivileges )\r\n    \r\n    :getPrivileges\r\n      if '%1'=='ELEV' (echo ELEV & shift /1 & goto gotPrivileges)\r\n      ECHO.\r\n      ECHO **************************************\r\n      ECHO Invoking UAC for Privilege Escalation\r\n      ECHO **************************************\r\n    \r\n      ECHO Set UAC = CreateObject^(\"Shell.Application\"^) > \"%vbsGetPrivileges%\"\r\n      ECHO args = \"ELEV \" >> \"%vbsGetPrivileges%\"\r\n      ECHO For Each strArg in WScript.Arguments >> \"%vbsGetPrivileges%\"\r\n      ECHO args = args ^& strArg ^& \" \"  >> \"%vbsGetPrivileges%\"\r\n      ECHO Next >> \"%vbsGetPrivileges%\"\r\n    \r\n      if '%cmdInvoke%'=='1' goto InvokeCmd \r\n    \r\n      ECHO UAC.ShellExecute \"!batchPath!\", args, \"\", \"runas\", 1 >> \"%vbsGetPrivileges%\"\r\n      goto ExecElevation\r\n    \r\n    :InvokeCmd\r\n      ECHO args = \"/c \"\"\" + \"!batchPath!\" + \"\"\" \" + args >> \"%vbsGetPrivileges%\"\r\n      ECHO UAC.ShellExecute \"%SystemRoot%/%winSysFolder%/cmd.exe\", args, \"\", \"runas\", 1 >> \"%vbsGetPrivileges%\"\r\n    \r\n    :ExecElevation\r\n     \"%SystemRoot%/%winSysFolder%/WScript.exe\" \"%vbsGetPrivileges%\" %*\r\n     exit /B\r\n    \r\n    :gotPrivileges\r\n     setlocal & cd /d %~dp0\r\n     if '%1'=='ELEV' (del \"%vbsGetPrivileges%\" 1>nul 2>nul  &  shift /1)\r\n    \r\n     ::::::::::::::::::::::::::::\r\n     ::START\r\n     ::::::::::::::::::::::::::::\r\n     REM Run shell as admin (example) - put here code as you like\r\n     ${commandToElevate} 2>&1 >> ${this.logFilePath}\r\n     del /f /s *.cmd 2>&1 >> ${this.logFilePath}\r\n     cmd /k\r\n     `;\r\n\r\n    await jetpack.writeAsync(elevatedScriptFilePath, scriptContent);\r\n\r\n    return Promise.resolve(elevatedScriptFilePath);\r\n  }\r\n\r\n  async emptyLogFile() {\r\n    return jetpack.writeAsync(this.logFilePath, '');\r\n  }\r\n\r\n  async createJobFile(jobType: string): Promise<string> {\r\n    let filePath = '';\r\n    if (jobType === 'update')\r\n      filePath = `${this.PORTABLE_EXECUTABLE_DIR}/updating DocumentBurster, please wait`;\r\n\r\n    const jobFileName = Utilities.getRandomJobFileName();\r\n\r\n    const jobFilePath = `${this.PORTABLE_EXECUTABLE_DIR}/temp/${jobFileName}`;\r\n    const jobFileContent = Utilities.getJobFileContent(\r\n      filePath,\r\n      jobType,\r\n      '14234234324324',\r\n    );\r\n\r\n    await jetpack.writeAsync(jobFilePath, jobFileContent);\r\n\r\n    return Promise.resolve(Utilities.slash(jobFilePath));\r\n  }\r\n\r\n  async logMessage(message: string) {\r\n    if (message) {\r\n      return jetpack.appendAsync(\r\n        this.logFilePath,\r\n        '\\n' + dayjs().format('DD/MM/YYYY HH:mm:ss') + ' - ' + message,\r\n      );\r\n    }\r\n  }\r\n\r\n  async deleteJobFile(jobFilePath: string) {\r\n    return jetpack.removeAsync(jobFilePath);\r\n  }\r\n\r\n  typeCommandOnTerminalAndThenPressEnter(command: string) {\r\n    this.pTerminalInput.value = command;\r\n    this.pTerminalInput.dispatchEvent(new Event('input'));\r\n    this.pTerminalInput.dispatchEvent(\r\n      new KeyboardEvent('keydown', {\r\n        keyCode: 13,\r\n      } as KeyboardEventInit),\r\n    );\r\n    this.pTerminalInput.focus();\r\n  }\r\n\r\n  restartElectronApp() {\r\n    //this should call the RUST writen program rb_rust_updater\r\n    //with the Electron APIs the restartElectronApp() never worked properly\r\n  }\r\n}\r\n",
      "properties": [],
      "methods": [
        {
          "name": "showOpenDialog",
          "args": [
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<literal type>",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showSaveDialog",
          "args": [
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<literal type>",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Settings",
      "id": "class-Settings-038cfc3855d313c5f74eacf4c5b0a9d53d9c1e929bd2f7d01b24902b88db6dca555a3eb6dedc52b09b2d6057148a0a6adc5f0bf668b88323b0e817ede52530c6",
      "file": "src/app/helpers/settings.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import * as xml2js from 'xml2js';\r\nimport Utilities from './utilities';\r\nimport UtilitiesElectron from './utilities-electron';\r\n\r\nexport class Settings {\r\n  constructor() {}\r\n  async saveSettingsFileAsync(settings: {}, filePath: string) {\r\n    //console.log(`filePath: ${filePath}`);\r\n    //console.log(`settings: ${JSON.stringify(settings)}`);\r\n\r\n    try {\r\n      await UtilitiesElectron.removeAsync(filePath);\r\n      //await this.fs.unlink(filePath);\r\n    } catch (error) {\r\n    } finally {\r\n      const builder = new xml2js.Builder();\r\n      return UtilitiesElectron.writeAsync(\r\n        filePath,\r\n        builder.buildObject(settings),\r\n      );\r\n\r\n      //return this.fs.writeFile(filePath, '123');\r\n    }\r\n  }\r\n\r\n  async loadFileContentAsync(filePath: string): Promise<string> {\r\n    return UtilitiesElectron.readAsync(filePath);\r\n  }\r\n\r\n  async loadReportingFileAsync(filePath: string): Promise<any> {\r\n    const configFolderPath = Utilities.dirname(filePath);\r\n\r\n    const configReportingFilePath = `${configFolderPath}/reporting.xml`;\r\n\r\n    const content = await UtilitiesElectron.readAsync(configReportingFilePath);\r\n\r\n    return Utilities.parseStringPromise(content, {\r\n      trim: true,\r\n      explicitArray: false,\r\n      valueProcessors: [xml2js.processors.parseBooleans],\r\n    });\r\n  }\r\n\r\n  async loadSettingsFileAsync(filePath: string): Promise<any> {\r\n    //console.trace();\r\n\r\n    const content = await UtilitiesElectron.readAsync(filePath);\r\n\r\n    const parsedString = await Utilities.parseStringPromise(content, {\r\n      trim: true,\r\n      explicitArray: false,\r\n      valueProcessors: [xml2js.processors.parseBooleans],\r\n    });\r\n\r\n    //XML files from older versions (i.e. v5) do not contain attachments\r\n    if (parsedString.documentburster.settings.attachments) {\r\n      if (\r\n        parsedString.documentburster.settings.attachments.items.attachmentItems\r\n      ) {\r\n        if (\r\n          !Array.isArray(\r\n            parsedString.documentburster.settings.attachments.items\r\n              .attachmentItems,\r\n          )\r\n        ) {\r\n          parsedString.documentburster.settings.attachments.items.attachmentItems =\r\n            [\r\n              parsedString.documentburster.settings.attachments.itemsItems\r\n                .attachment,\r\n            ];\r\n        }\r\n      } else {\r\n        parsedString.documentburster.settings.attachments.items = {};\r\n        parsedString.documentburster.settings.attachments.items.attachment = [];\r\n      }\r\n    }\r\n\r\n    return parsedString;\r\n  }\r\n\r\n  async loadPreferencesFileAsync(filePath: string): Promise<any> {\r\n    const content = await UtilitiesElectron.readAsync(filePath);\r\n\r\n    const parsedString = await Utilities.parseStringPromise(content, {\r\n      trim: true,\r\n      explicitArray: false,\r\n      valueProcessors: [xml2js.processors.parseBooleans],\r\n    });\r\n\r\n    return parsedString;\r\n  }\r\n\r\n  async parseXmlFileAsync(filePath: string): Promise<any> {\r\n    //console.trace();\r\n\r\n    const content = await UtilitiesElectron.readAsync(filePath);\r\n\r\n    const xml = await Utilities.parseStringPromise(content, {\r\n      trim: true,\r\n      explicitArray: false,\r\n      valueProcessors: [xml2js.processors.parseBooleans],\r\n    });\r\n\r\n    return xml;\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 5
      },
      "properties": [],
      "methods": [
        {
          "name": "loadFileContentAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadPreferencesFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadReportingFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadSettingsFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "parseXmlFileAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "saveSettingsFileAsync",
          "args": [
            {
              "name": "settings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "settings",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "SocketEndpoint",
      "id": "class-SocketEndpoint-c9aa12b485a42242a2fafa274b86d1dca2333fee4930e2e5e91f4fbdbf3b96b84c0c998912be934d1dc16a16ac8d2de2280f32aaf99568c69faa7573d1772c34",
      "file": "src/app/helpers/websocket-endpoint.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Observable, Subscriber } from 'rxjs';\r\n\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport * as SockJS from 'sockjs-client';\r\nimport Utilities from './utilities';\r\nimport UtilitiesElectron from './utilities-electron';\r\n\r\nexport class WebSocketEndpoint {\r\n  BACKEND_URL = '';\r\n\r\n  _options: SocketOptions;\r\n\r\n  _socket: SocketEndpoint = new SocketEndpoint();\r\n\r\n  observableStompConnection!: Observable<any>;\r\n  subscribers: Array<any> = [];\r\n  subscriberIndex: number = 0;\r\n\r\n  _messageIds: Array<any> = [];\r\n\r\n  reconnectionPromise: any;\r\n\r\n  constructor() {}\r\n\r\n  async makeWSConnection(options: SocketOptions) {\r\n    this._options = options;\r\n    this.createObservableSocket();\r\n    return this.connect();\r\n  }\r\n\r\n  //TO BE OVERIDDEN\r\n  getOptions = () => {\r\n    return {};\r\n  };\r\n\r\n  private createObservableSocket = () => {\r\n    this.observableStompConnection = new Observable((observer) => {\r\n      const subscriberIndex = this.subscriberIndex++;\r\n      this.addToSubscribers({ index: subscriberIndex, observer });\r\n      return () => this.removeFromSubscribers(subscriberIndex);\r\n    });\r\n  };\r\n\r\n  addToSubscribers = (subscriber: {\r\n    index: number;\r\n    observer: Subscriber<any>;\r\n  }) => {\r\n    this.subscribers.push(subscriber);\r\n  };\r\n\r\n  removeFromSubscribers = (index: number) => {\r\n    if (index > this.subscribers.length)\r\n      throw new Error(\r\n        `Unexpected error removing subscriber from websocket, because index ${index} is greater than subscriber length ${this.subscribers.length}`,\r\n      );\r\n    this.subscribers.splice(index, 1);\r\n  };\r\n\r\n  getObservable = () => {\r\n    return this.observableStompConnection;\r\n  };\r\n\r\n  getMessage = (data: { body: string; headers: { [x: string]: any } }) => {\r\n    let out: any = {};\r\n    out.type = 'SUCCESS';\r\n    out.message = JSON.parse(data.body);\r\n    out.headers = {};\r\n    out.headers.messageId = data.headers['message-id'];\r\n\r\n    let messageIdIndex = this._messageIds.indexOf(out.headers.messageId);\r\n    if (messageIdIndex > -1) {\r\n      out.self = true;\r\n      this._messageIds = this._messageIds.splice(messageIdIndex, 1);\r\n    }\r\n    return out;\r\n  };\r\n\r\n  //_socketListener = (frame: string) => {\r\n  _socketListener = () => {\r\n    //console.log('WebSocket Connected: ' + frame);\r\n    console.log('WebSocket Connected');\r\n\r\n    this._socket.stomp.subscribe(this._options.topicName, (data: any) =>\r\n      this.subscribers.forEach((subscriber) =>\r\n        subscriber.observer.next(this.getMessage(data)),\r\n      ),\r\n    );\r\n  };\r\n\r\n  _onSocketError = (errorMsg: any) => {\r\n    console.log(`WebSocket _onSocketError ${errorMsg}`);\r\n\r\n    let out: any = {};\r\n    out.type = 'ERROR';\r\n    out.message = errorMsg;\r\n    this.subscribers.forEach((subscriber) => subscriber.observer.error(out));\r\n    this.scheduleReconnection();\r\n  };\r\n\r\n  scheduleReconnection = () => {\r\n    this.reconnectionPromise = setTimeout(() => {\r\n      console.log(\r\n        'Socket reconnecting... (if it fails, next attempt in ' +\r\n          this._options.reconnectionTimeout +\r\n          ' msec)',\r\n      );\r\n      this.connect();\r\n    }, this._options.reconnectionTimeout);\r\n  };\r\n\r\n  reconnectNow = function (this: WebSocketEndpoint) {\r\n    this._socket.stomp.disconnect();\r\n    if (this.reconnectionPromise && this.reconnectionPromise.cancel)\r\n      this.reconnectionPromise.cancel();\r\n    this.connect();\r\n  };\r\n\r\n  send = (message: any) => {\r\n    var id = Math.floor(Math.random() * 1000000);\r\n    this._socket.stomp.send(\r\n      this._options.brokerName,\r\n      {\r\n        priority: 9,\r\n      },\r\n      JSON.stringify({\r\n        message: message,\r\n        id: id,\r\n      }),\r\n    );\r\n    this._messageIds.push(id);\r\n  };\r\n\r\n  connect = async () => {\r\n    const headers = {};\r\n\r\n    if (!this.BACKEND_URL)\r\n      this.BACKEND_URL = await UtilitiesElectron.getBackendUrl();\r\n    let socketUrl = this.BACKEND_URL + this._options.socketUrl;\r\n    if (this._options.getAccessToken())\r\n      socketUrl += `?access_token=${this._options.getAccessToken()}`;\r\n\r\n    this._socket.client = new SockJS(socketUrl);\r\n\r\n    //console.log(`socketUrl = ${socketUrl}`);\r\n\r\n    this._socket.client.discardWebsocketOnCommFailure = true;\r\n    this._socket.client.connectionTimeout = 500;\r\n\r\n    this._socket.stomp = Stomp.over(this._socket.client);\r\n\r\n    //disable logging\r\n    this._socket.stomp.debug = () => {};\r\n\r\n    this._socket.stomp.onclose = this.scheduleReconnection;\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      this._socket.stomp.connect(\r\n        headers,\r\n        async () => {\r\n          await Utilities.sleep(100);\r\n          this._socketListener();\r\n          resolve();\r\n        },\r\n        (error) => {\r\n          this._onSocketError(error);\r\n          reject(error);\r\n        },\r\n      );\r\n    });\r\n  };\r\n}\r\n\r\nclass SocketEndpoint {\r\n  client: any;\r\n  stomp: any;\r\n}\r\n\r\nexport class SocketOptions {\r\n  socketUrl: string;\r\n  topicName: string;\r\n  brokerName: string;\r\n  reconnectionTimeout: number = 30000;\r\n\r\n  getAccessToken: Function = () => null;\r\n\r\n  constructor(\r\n    socketUrl: string,\r\n    topicName: string,\r\n    getAccessToken?: Function,\r\n    brokerName = '',\r\n    reconnectionTimeout: number = 30000,\r\n  ) {\r\n    this.socketUrl = socketUrl;\r\n    this.topicName = topicName;\r\n    this.brokerName = brokerName;\r\n    this.reconnectionTimeout = reconnectionTimeout;\r\n    this.getAccessToken = getAccessToken || (() => null);\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "client",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 174
        },
        {
          "name": "stomp",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 175
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "SocketOptions",
      "id": "class-SocketOptions-c9aa12b485a42242a2fafa274b86d1dca2333fee4930e2e5e91f4fbdbf3b96b84c0c998912be934d1dc16a16ac8d2de2280f32aaf99568c69faa7573d1772c34",
      "file": "src/app/helpers/websocket-endpoint.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Observable, Subscriber } from 'rxjs';\r\n\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport * as SockJS from 'sockjs-client';\r\nimport Utilities from './utilities';\r\nimport UtilitiesElectron from './utilities-electron';\r\n\r\nexport class WebSocketEndpoint {\r\n  BACKEND_URL = '';\r\n\r\n  _options: SocketOptions;\r\n\r\n  _socket: SocketEndpoint = new SocketEndpoint();\r\n\r\n  observableStompConnection!: Observable<any>;\r\n  subscribers: Array<any> = [];\r\n  subscriberIndex: number = 0;\r\n\r\n  _messageIds: Array<any> = [];\r\n\r\n  reconnectionPromise: any;\r\n\r\n  constructor() {}\r\n\r\n  async makeWSConnection(options: SocketOptions) {\r\n    this._options = options;\r\n    this.createObservableSocket();\r\n    return this.connect();\r\n  }\r\n\r\n  //TO BE OVERIDDEN\r\n  getOptions = () => {\r\n    return {};\r\n  };\r\n\r\n  private createObservableSocket = () => {\r\n    this.observableStompConnection = new Observable((observer) => {\r\n      const subscriberIndex = this.subscriberIndex++;\r\n      this.addToSubscribers({ index: subscriberIndex, observer });\r\n      return () => this.removeFromSubscribers(subscriberIndex);\r\n    });\r\n  };\r\n\r\n  addToSubscribers = (subscriber: {\r\n    index: number;\r\n    observer: Subscriber<any>;\r\n  }) => {\r\n    this.subscribers.push(subscriber);\r\n  };\r\n\r\n  removeFromSubscribers = (index: number) => {\r\n    if (index > this.subscribers.length)\r\n      throw new Error(\r\n        `Unexpected error removing subscriber from websocket, because index ${index} is greater than subscriber length ${this.subscribers.length}`,\r\n      );\r\n    this.subscribers.splice(index, 1);\r\n  };\r\n\r\n  getObservable = () => {\r\n    return this.observableStompConnection;\r\n  };\r\n\r\n  getMessage = (data: { body: string; headers: { [x: string]: any } }) => {\r\n    let out: any = {};\r\n    out.type = 'SUCCESS';\r\n    out.message = JSON.parse(data.body);\r\n    out.headers = {};\r\n    out.headers.messageId = data.headers['message-id'];\r\n\r\n    let messageIdIndex = this._messageIds.indexOf(out.headers.messageId);\r\n    if (messageIdIndex > -1) {\r\n      out.self = true;\r\n      this._messageIds = this._messageIds.splice(messageIdIndex, 1);\r\n    }\r\n    return out;\r\n  };\r\n\r\n  //_socketListener = (frame: string) => {\r\n  _socketListener = () => {\r\n    //console.log('WebSocket Connected: ' + frame);\r\n    console.log('WebSocket Connected');\r\n\r\n    this._socket.stomp.subscribe(this._options.topicName, (data: any) =>\r\n      this.subscribers.forEach((subscriber) =>\r\n        subscriber.observer.next(this.getMessage(data)),\r\n      ),\r\n    );\r\n  };\r\n\r\n  _onSocketError = (errorMsg: any) => {\r\n    console.log(`WebSocket _onSocketError ${errorMsg}`);\r\n\r\n    let out: any = {};\r\n    out.type = 'ERROR';\r\n    out.message = errorMsg;\r\n    this.subscribers.forEach((subscriber) => subscriber.observer.error(out));\r\n    this.scheduleReconnection();\r\n  };\r\n\r\n  scheduleReconnection = () => {\r\n    this.reconnectionPromise = setTimeout(() => {\r\n      console.log(\r\n        'Socket reconnecting... (if it fails, next attempt in ' +\r\n          this._options.reconnectionTimeout +\r\n          ' msec)',\r\n      );\r\n      this.connect();\r\n    }, this._options.reconnectionTimeout);\r\n  };\r\n\r\n  reconnectNow = function (this: WebSocketEndpoint) {\r\n    this._socket.stomp.disconnect();\r\n    if (this.reconnectionPromise && this.reconnectionPromise.cancel)\r\n      this.reconnectionPromise.cancel();\r\n    this.connect();\r\n  };\r\n\r\n  send = (message: any) => {\r\n    var id = Math.floor(Math.random() * 1000000);\r\n    this._socket.stomp.send(\r\n      this._options.brokerName,\r\n      {\r\n        priority: 9,\r\n      },\r\n      JSON.stringify({\r\n        message: message,\r\n        id: id,\r\n      }),\r\n    );\r\n    this._messageIds.push(id);\r\n  };\r\n\r\n  connect = async () => {\r\n    const headers = {};\r\n\r\n    if (!this.BACKEND_URL)\r\n      this.BACKEND_URL = await UtilitiesElectron.getBackendUrl();\r\n    let socketUrl = this.BACKEND_URL + this._options.socketUrl;\r\n    if (this._options.getAccessToken())\r\n      socketUrl += `?access_token=${this._options.getAccessToken()}`;\r\n\r\n    this._socket.client = new SockJS(socketUrl);\r\n\r\n    //console.log(`socketUrl = ${socketUrl}`);\r\n\r\n    this._socket.client.discardWebsocketOnCommFailure = true;\r\n    this._socket.client.connectionTimeout = 500;\r\n\r\n    this._socket.stomp = Stomp.over(this._socket.client);\r\n\r\n    //disable logging\r\n    this._socket.stomp.debug = () => {};\r\n\r\n    this._socket.stomp.onclose = this.scheduleReconnection;\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      this._socket.stomp.connect(\r\n        headers,\r\n        async () => {\r\n          await Utilities.sleep(100);\r\n          this._socketListener();\r\n          resolve();\r\n        },\r\n        (error) => {\r\n          this._onSocketError(error);\r\n          reject(error);\r\n        },\r\n      );\r\n    });\r\n  };\r\n}\r\n\r\nclass SocketEndpoint {\r\n  client: any;\r\n  stomp: any;\r\n}\r\n\r\nexport class SocketOptions {\r\n  socketUrl: string;\r\n  topicName: string;\r\n  brokerName: string;\r\n  reconnectionTimeout: number = 30000;\r\n\r\n  getAccessToken: Function = () => null;\r\n\r\n  constructor(\r\n    socketUrl: string,\r\n    topicName: string,\r\n    getAccessToken?: Function,\r\n    brokerName = '',\r\n    reconnectionTimeout: number = 30000,\r\n  ) {\r\n    this.socketUrl = socketUrl;\r\n    this.topicName = topicName;\r\n    this.brokerName = brokerName;\r\n    this.reconnectionTimeout = reconnectionTimeout;\r\n    this.getAccessToken = getAccessToken || (() => null);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "socketUrl",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "topicName",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "getAccessToken",
            "type": "Function",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          },
          {
            "name": "brokerName",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "''"
          },
          {
            "name": "reconnectionTimeout",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "30000"
          }
        ],
        "line": 184,
        "jsdoctags": [
          {
            "name": "socketUrl",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "topicName",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "getAccessToken",
            "type": "Function",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "brokerName",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "''",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "reconnectionTimeout",
            "type": "number",
            "deprecated": false,
            "deprecationMessage": "",
            "defaultValue": "30000",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "brokerName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 181
        },
        {
          "name": "getAccessToken",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Function",
          "optional": false,
          "description": "",
          "line": 184
        },
        {
          "name": "reconnectionTimeout",
          "defaultValue": "30000",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 182
        },
        {
          "name": "socketUrl",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 179
        },
        {
          "name": "topicName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 180
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UpdateInfo",
      "id": "class-UpdateInfo-3ce5c93edcb41172d315ab90a42f7ad5bc43dc44738b49705fd486b5d1aff0a051db471a0dbf7ea5914b20b4cba5e0abbe34ba251975b0fed4b28144e8f6f6a2",
      "file": "src/app/areas/install-setup-upgrade/updater.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import * as path from 'path';\r\nimport uniqueFilename from 'unique-filename';\r\nimport dayjs from 'dayjs';\r\nimport AdmZip from 'adm-zip';\r\n\r\nimport Utilities from '../../helpers/utilities';\r\nimport { Settings } from '../../helpers/settings';\r\n\r\nimport * as semver from 'semver';\r\n\r\nimport ElectronLog from 'electron-log';\r\nimport UtilitiesElectron from '../../helpers/utilities-electron';\r\n\r\nexport class UpdateInfo {\r\n  mode = 'update-now';\r\n\r\n  errorMsg: string;\r\n\r\n  jobFilePath: string;\r\n  updateSourceDirectoryPath: string;\r\n  updateSourceVersion: string;\r\n\r\n  migrateConfigFiles = new Array<[string, string]>();\r\n  migrateScriptFiles = new Array<[string, string]>();\r\n\r\n  templatesFolders = new Array<[string, string]>();\r\n\r\n  licenseInfo = {\r\n    latestVersion: '',\r\n    key: '',\r\n    customeremail: '',\r\n    status: '',\r\n  };\r\n\r\n  productInfo = {\r\n    product: '',\r\n    version: new semver.SemVer('0.0.0'),\r\n    isServerVersion: false,\r\n    isWindows: true,\r\n  };\r\n\r\n  updateOptions = {\r\n    copylicensinginformation: true,\r\n    copyoutputfiles: false,\r\n    copylogfiles: false,\r\n    copyquarantinefiles: false,\r\n    copybackupfiles: false,\r\n  };\r\n}\r\n\r\nexport class Updater {\r\n  nowFormatted: string;\r\n\r\n  updateDestinationDirectoryPath: string;\r\n  upgdDbTempDirectoryPath: string;\r\n  backupZipFileName: string;\r\n\r\n  defaultSettings: any;\r\n\r\n  readonly BUILTIN_VARS_LEGACY_STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX_MAP =\r\n    new Map([\r\n      ['$burst_token$', '${burst_token}'],\r\n      ['$input_document_extension$', '${input_document_extension}'],\r\n      ['$input_document_name$', '${input_document_name}'],\r\n      ['$burst_index$', '${burst_index}'],\r\n      ['$now_default_date$', '${now_default_date}'],\r\n      ['$now_short_date$', '${now_short_date}'],\r\n      ['$now_medium_date$', '${now_medium_date}'],\r\n      ['$now_long_date$', '${now_long_date}'],\r\n      ['$now_full_date$', '${now_full_date}'],\r\n      ['$now_quarter$', '${now_quarter}'],\r\n      ['$extracted_file_path$', '${extracted_file_path}'],\r\n      [\r\n        '$extracted_file_paths_after_splitting_2nd_time$',\r\n        '${extracted_file_paths_after_splitting_2nd_time}',\r\n      ],\r\n      ['$now;format=\"yyyy.MM.dd\"$', '${now?string[\"yyyy.MM.dd\"]}'],\r\n      [\r\n        '$now;format=\"yyyy.MM.dd_HH.mm.ss\"$',\r\n        '${now?string[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}',\r\n      ],\r\n      [\r\n        '$now;format=\"yyyy.MM.dd_HH.mm.ss.SSS\"$',\r\n        '${now?string[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}',\r\n      ],\r\n      [\r\n        '_stats-$num_pages$pages-$num_files_extracted$extracted-$num_files_distributed$distributed.log',\r\n        '_stats-${stats_info}.log',\r\n      ],\r\n    ]);\r\n  isElectron: boolean = false;\r\n\r\n  constructor(\r\n    protected portableExecutableDirectoryPath: string,\r\n    protected log?: typeof ElectronLog,\r\n  ) {\r\n    this.updateDestinationDirectoryPath = Utilities.slash(\r\n      this.portableExecutableDirectoryPath,\r\n    );\r\n\r\n    this.nowFormatted = dayjs().format('YYYY.MM.DD_HH.mm.ss');\r\n    this.upgdDbTempDirectoryPath = Utilities.slash(\r\n      uniqueFilename(Utilities.UPG_DB_FOLDER_PATH, this.nowFormatted),\r\n    );\r\n  }\r\n\r\n  async fillUpdateInfo(updateInfo: UpdateInfo): Promise<UpdateInfo> {\r\n    updateInfo.migrateConfigFiles = [];\r\n    updateInfo.migrateScriptFiles = [];\r\n    updateInfo.templatesFolders = [];\r\n\r\n    // console.log(`${this.updateDestinationDirectoryPath}/config/burst/settings.xml`);\r\n    if (updateInfo.mode == 'migrate-copy') {\r\n      //console.log('Log 1');\r\n\r\n      let validDbExeFilePath = await UtilitiesElectron.existsAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/DocumentBurster.exe`,\r\n      );\r\n\r\n      console.log(\r\n        `validDbExeFilePath = ${updateInfo.updateSourceDirectoryPath}/DocumentBurster.exe`,\r\n      );\r\n\r\n      if (validDbExeFilePath !== 'file') {\r\n        updateInfo.errorMsg = `DocumentBurster.exe was not found in the ${updateInfo.updateSourceDirectoryPath} selected location. Please select an existing DocumentBurster installation folder!`;\r\n      } else {\r\n        let xmlSourceSettings = {\r\n          documentburster: {\r\n            settings: {\r\n              version: '',\r\n            },\r\n          },\r\n        };\r\n\r\n        xmlSourceSettings = await new Settings().loadSettingsFileAsync(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/burst/settings.xml`,\r\n        );\r\n\r\n        //console.log(\r\n        //  `SourceDirectoryPath.settings.xml = ${updateInfo.updateSourceDirectoryPath}/config/burst/settings.xml`\r\n        //);\r\n\r\n        updateInfo.updateSourceVersion =\r\n          xmlSourceSettings.documentburster.settings.version;\r\n      }\r\n    }\r\n    //config folder\r\n    if (!updateInfo.errorMsg) {\r\n      //console.log(\r\n      //  `exists(updateInfo.updateSourceDirectoryPath) = ${JSON.stringify(\r\n      //    sourceDirectoryExists\r\n      //  )}`\r\n      //);\r\n\r\n      //console.log(\r\n      //  `Log 2 updateInfo.updateSourceDirectoryPath: ${updateInfo.updateSourceDirectoryPath}`\r\n      //);\r\n\r\n      // Finds all '.xml' files inside 'config' folder but excluding those in 'vendor' subtree.\r\n      const configFilePaths = await UtilitiesElectron.findAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config`,\r\n        {\r\n          matching: [\r\n            '*.xml',\r\n            `!_internal/**/*`,\r\n            `!_defaults/**/*`,\r\n            `!burst/internal/**/*`,\r\n            `!burst/default/**/*`,\r\n          ],\r\n        },\r\n      );\r\n\r\n      for (const configFilePath of configFilePaths) {\r\n        const configFileName = Utilities.basename(configFilePath);\r\n\r\n        const fullConfigFilePath = Utilities.slash(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/burst/${configFileName}`,\r\n        );\r\n\r\n        //console.log(`Log 3.00 configFileName = ${configFileName}`);\r\n\r\n        //console.log(`Log 3.0 configFilPath = ${configFilePath}`);\r\n        //console.log(`Log 3 fullConfigFilePath = ${fullConfigFilePath}`);\r\n        updateInfo.migrateConfigFiles.push([\r\n          configFileName,\r\n          fullConfigFilePath,\r\n        ]);\r\n      }\r\n\r\n      //console.log(updateInfo.migrateConfigFiles);\r\n\r\n      //scripts\r\n      const scriptFilePaths = await UtilitiesElectron.findAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/scripts/burst`,\r\n        {\r\n          matching: ['*.groovy', `!internal/**/*`, `!samples/**/*`],\r\n        },\r\n      );\r\n\r\n      for (const scriptFilePath of scriptFilePaths) {\r\n        const fullScriptFilePath = Utilities.slash(\r\n          `${updateInfo.updateSourceDirectoryPath}/${scriptFilePath}`,\r\n        );\r\n        const scriptFileName = path.basename(fullScriptFilePath);\r\n\r\n        //console.log('Log 3');\r\n\r\n        const scriptContent =\r\n          await UtilitiesElectron.readAsync(fullScriptFilePath);\r\n        //console.log(`fullScriptFilePath = ${fullScriptFilePath}`);\r\n\r\n        //only copy / migrate groovy scripts which were customized (which are not empty)\r\n        if (scriptContent) {\r\n          updateInfo.migrateScriptFiles.push([\r\n            scriptFileName,\r\n            fullScriptFilePath,\r\n          ]);\r\n        }\r\n      }\r\n\r\n      // Looks for all custom html templates directories\r\n      // (all html templates directories besides the 2 sample templates provided with the app)\r\n      const templatesFolderPaths = await UtilitiesElectron.findAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/templates`,\r\n        {\r\n          matching: [\r\n            '!html-basic-example',\r\n            '!html-mobile-responsive-emails',\r\n            `!html-email-templates/basic-example`,\r\n            `!html-email-templates/mobile-responsive-example`,\r\n          ],\r\n          files: false,\r\n          directories: true,\r\n          recursive: false,\r\n        },\r\n      );\r\n\r\n      for (const templateFolderPath of templatesFolderPaths) {\r\n        const fullTemplatePath = Utilities.slash(\r\n          `${updateInfo.updateSourceDirectoryPath}/${templateFolderPath}`,\r\n        );\r\n        const templateName = path.basename(fullTemplatePath);\r\n        //console.log(`fullTemplatePath = ${fullTemplatePath}`);\r\n        updateInfo.templatesFolders.push([templateName, fullTemplatePath]);\r\n      }\r\n    }\r\n\r\n    return updateInfo;\r\n  }\r\n\r\n  downloadDb = async (sourceUrl: string, targetFile: string) => {\r\n    await Utilities.download(sourceUrl, targetFile);\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    new AdmZip(targetFile).extractAllTo(\r\n      Utilities.slash(path.dirname(targetFile)),\r\n    );\r\n  };\r\n\r\n  async doUpdate(updateInfo: UpdateInfo) {\r\n    let topFolderName = 'DocumentBurster';\r\n\r\n    // console.log(updateInfo);\r\n\r\n    if (updateInfo.mode == 'update-now') {\r\n      if (updateInfo.productInfo.isServerVersion)\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}/server`;\r\n      else\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}`;\r\n    }\r\n\r\n    let homeDirectoryPath = this.portableExecutableDirectoryPath;\r\n\r\n    if (updateInfo.productInfo.isServerVersion)\r\n      homeDirectoryPath = path.resolve(homeDirectoryPath, '..');\r\n\r\n    //console.log(`homeDirectoryPath = ${homeDirectoryPath}`);\r\n\r\n    const upgdDbFromFolderPath = `${this.upgdDbTempDirectoryPath}/from/DocumentBurster`;\r\n\r\n    if (updateInfo.mode == 'update-now') {\r\n      //console.log('Log 4');\r\n\r\n      await UtilitiesElectron.dirAsync(Utilities.UPG_DB_FOLDER_PATH, {\r\n        empty: true,\r\n        mode: '700',\r\n      });\r\n\r\n      //download latest version\r\n      let latestVersionDownloadUrl =\r\n        'https://s3.amazonaws.com/documentburster/newest/documentburster.zip';\r\n      let latestVersionTargetFilePath = `${this.upgdDbTempDirectoryPath}/to/documentburster.zip`;\r\n\r\n      if (updateInfo.productInfo.isServerVersion) {\r\n        latestVersionDownloadUrl =\r\n          'https://s3.amazonaws.com/documentburster/newest/documentburster-server.zip';\r\n        latestVersionTargetFilePath = `${this.upgdDbTempDirectoryPath}/to/documentburster-server.zip`;\r\n      }\r\n\r\n      //Ensures that directory on given path exists and meets given criteria\r\n      //console.log('Log 5');\r\n\r\n      await UtilitiesElectron.dirAsync(`${this.upgdDbTempDirectoryPath}/to`, {\r\n        empty: true,\r\n      });\r\n\r\n      await this.downloadDb(\r\n        latestVersionDownloadUrl,\r\n        latestVersionTargetFilePath,\r\n      );\r\n\r\n      //it could be DocumentBurster-8.7.1 but it could  be also just\r\n      //DocumentBurster => it should work in both cases\r\n      let topFolderNamePath = '';\r\n\r\n      //console.log(\r\n      //  `Log 6 - this.upgdDbTempDirectoryPath = ${this.upgdDbTempDirectoryPath}`\r\n      //);\r\n\r\n      topFolderNamePath = await UtilitiesElectron.findAsync(\r\n        `${this.upgdDbTempDirectoryPath}/to`,\r\n        {\r\n          matching: ['DocumentBurster*'],\r\n          files: false,\r\n          directories: true,\r\n          recursive: false,\r\n        },\r\n      )[0];\r\n\r\n      if (!topFolderNamePath)\r\n        topFolderNamePath = `${this.upgdDbTempDirectoryPath}/to/DocumentBurster`;\r\n\r\n      //console.log(`Log 61 - topFolderNamePath = ${topFolderNamePath}`);\r\n\r\n      topFolderName = path.basename(topFolderNamePath);\r\n\r\n      if (updateInfo.productInfo.isServerVersion)\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}/server`;\r\n      else\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}`;\r\n\r\n      // keep a backup of the existing installation\r\n      //console.log('Log 7');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        homeDirectoryPath,\r\n        upgdDbFromFolderPath,\r\n      );\r\n    }\r\n\r\n    // console.log(updateInfo);\r\n    /*\r\n    if (updateInfo.mode == 'update-now') {\r\n    } else if (updateInfo.mode == 'migrate-copy') {\r\n    }\r\n    */\r\n\r\n    // config files\r\n    for (const configFile of updateInfo.migrateConfigFiles) {\r\n      const configFilePath = configFile[1];\r\n\r\n      // console.log(configFilePath);\r\n      await this.migrateSettingsFile(configFilePath);\r\n      // console.log(configFilePath);\r\n    }\r\n\r\n    //documentburster.properties\r\n    //old location\r\n    //console.log('Log 8');\r\n\r\n    let dbPropertiesFileExists = await UtilitiesElectron.existsAsync(\r\n      `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/documentburster.properties`,\r\n    );\r\n\r\n    if (dbPropertiesFileExists) {\r\n      //console.log('Log 9');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/documentburster.properties`,\r\n        `${this.updateDestinationDirectoryPath}/config/_internal/documentburster.properties`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    //new location\r\n    //console.log('Log 10');\r\n\r\n    dbPropertiesFileExists = await UtilitiesElectron.existsAsync(\r\n      `${updateInfo.updateSourceDirectoryPath}/config/_internal/documentburster.properties`,\r\n    );\r\n\r\n    if (dbPropertiesFileExists) {\r\n      //console.log('Log 11');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/_internal/documentburster.properties`,\r\n        `${this.updateDestinationDirectoryPath}/config/_internal/documentburster.properties`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n    // script files\r\n    for (const scriptFile of updateInfo.migrateScriptFiles) {\r\n      const scriptFilePath = scriptFile[1];\r\n\r\n      await this.migrateScriptFile(scriptFilePath);\r\n    }\r\n\r\n    // template folders\r\n    for (const templateFolder of updateInfo.templatesFolders) {\r\n      const templateFolderName = templateFolder[0];\r\n      const templateFolderPath = templateFolder[1];\r\n\r\n      //console.log('Log 12');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        templateFolderPath,\r\n        `${this.updateDestinationDirectoryPath}/templates/${templateFolderName}`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    // if (updateInfo.mode == \"migrate-copy\") {\r\n\r\n    if (updateInfo.updateOptions.copyoutputfiles) {\r\n      //console.log('Log 13');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/output`,\r\n        `${this.updateDestinationDirectoryPath}/output`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copylogfiles) {\r\n      //console.log('Log 14');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/logs`,\r\n        `${this.updateDestinationDirectoryPath}/logs`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copyquarantinefiles) {\r\n      //console.log('Log 15');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/quarantine`,\r\n        `${this.updateDestinationDirectoryPath}/quarantine`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copybackupfiles) {\r\n      //console.log('Log 16');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/backup`,\r\n        `${this.updateDestinationDirectoryPath}/backup`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copylicensinginformation) {\r\n      //Before v7.1 license.xml file was not existing (software licensing was introduced in v7.1)\r\n      //old location\r\n      //console.log('Log 17');\r\n\r\n      let licenseFileExists = await UtilitiesElectron.existsAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/license.xml`,\r\n      );\r\n\r\n      if (licenseFileExists) {\r\n        //console.log('Log 18');\r\n\r\n        await UtilitiesElectron.copyAsync(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/license.xml`,\r\n          `${this.updateDestinationDirectoryPath}/config/_internal/license.xml`,\r\n          { overwrite: true },\r\n        );\r\n      }\r\n      //new location\r\n      //console.log('Log 19');\r\n\r\n      licenseFileExists = await UtilitiesElectron.existsAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/_internal/license.xml`,\r\n      );\r\n\r\n      if (licenseFileExists) {\r\n        //console.log('Log 20');\r\n\r\n        await UtilitiesElectron.copyAsync(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/_internal/license.xml`,\r\n          `${this.updateDestinationDirectoryPath}/config/_internal/license.xml`,\r\n          { overwrite: true },\r\n        );\r\n      }\r\n    }\r\n\r\n    //}\r\n\r\n    if (updateInfo.mode == 'update-now') {\r\n      //console.log('Log 21');\r\n\r\n      let allFilesAndFoldersPaths = await UtilitiesElectron.findAsync(\r\n        homeDirectoryPath,\r\n        {\r\n          matching: ['**/*'],\r\n          directories: true,\r\n        },\r\n      );\r\n\r\n      //remove all but not DocumentBurster.exe\r\n      allFilesAndFoldersPaths = allFilesAndFoldersPaths.filter(\r\n        (fileFolderPath) => !fileFolderPath.includes('DocumentBurster.exe'),\r\n      );\r\n\r\n      for (const fileFolderPath of allFilesAndFoldersPaths) {\r\n        //console.log('Log 22');\r\n        await UtilitiesElectron.removeAsync(fileFolderPath);\r\n      }\r\n\r\n      //console.log('Log 23');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${this.upgdDbTempDirectoryPath}/to/${topFolderName}`,\r\n        homeDirectoryPath,\r\n        {\r\n          matching: [\r\n            `!${this.updateDestinationDirectoryPath}/DocumentBurster.exe`,\r\n          ],\r\n          overwrite: true,\r\n        },\r\n      );\r\n\r\n      if (updateInfo.productInfo.isServerVersion)\r\n        this.backupZipFileName = `documentburster-server-${updateInfo.productInfo.version}-${this.nowFormatted}.zip`;\r\n      else\r\n        this.backupZipFileName = `documentburster-${updateInfo.productInfo.version}-${this.nowFormatted}.zip`;\r\n\r\n      const zip = new AdmZip();\r\n      zip.addLocalFolder(`${this.upgdDbTempDirectoryPath}/from`);\r\n\r\n      zip.writeZip(`${this.upgdDbTempDirectoryPath}/${this.backupZipFileName}`);\r\n\r\n      //console.log('Log 24');\r\n      await UtilitiesElectron.moveAsync(\r\n        `${this.upgdDbTempDirectoryPath}/${this.backupZipFileName}`,\r\n        `${updateInfo.updateSourceDirectoryPath}/backup/${this.backupZipFileName}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  async migrateSettingsFile(settingsFilePath: string) {\r\n    //console.log(\r\n    //  `Log 86 - this.updateDestinationDirectoryPath = ${this.updateDestinationDirectoryPath}`\r\n    //);\r\n\r\n    //console.log(`Log 99 - settingsFilePath = ${settingsFilePath}`);\r\n\r\n    //console.log('Log 25');\r\n    let previousXMLSettingsContent =\r\n      await UtilitiesElectron.readAsync(settingsFilePath);\r\n\r\n    if (!previousXMLSettingsContent) {\r\n      Error.stackTraceLimit = 100;\r\n      console.log(`Log 25 - settingsFilePath = ${settingsFilePath}`);\r\n    }\r\n\r\n    const previousConfigFileName = Utilities.basename(settingsFilePath);\r\n\r\n    const newMigratedSettingsFilePath = `${this.updateDestinationDirectoryPath}/config/burst/${previousConfigFileName}`;\r\n\r\n    //STEP0 - some configuration settings node names were renamed (no structural changes)\r\n\r\n    //this is a quick way to \"re-map\" such old tag names to the new tag names\r\n    if (previousXMLSettingsContent.includes('defaultmessage')) {\r\n      previousXMLSettingsContent = previousXMLSettingsContent\r\n        .split('<defaultmessage>')\r\n        .join('<emailsettings>');\r\n\r\n      previousXMLSettingsContent = previousXMLSettingsContent\r\n        .split('</defaultmessage>')\r\n        .join('</emailsettings>');\r\n    }\r\n\r\n    if (previousXMLSettingsContent.includes('defaultmessage'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'defaultmessage' not expected!`,\r\n        );\r\n\r\n    if (!previousXMLSettingsContent.includes('emailsettings'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'emailsettings' not found!`,\r\n        );\r\n\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('<defaultftp>')\r\n      .join('<uploadsettings>');\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('</defaultftp>')\r\n      .join('</uploadsettings>');\r\n\r\n    if (previousXMLSettingsContent.includes('defaultftp'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'defaultftp' not expected!`,\r\n        );\r\n\r\n    if (!previousXMLSettingsContent.includes('uploadsettings'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'uploadsettings' not found!`,\r\n        );\r\n\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('<url>')\r\n      .join('<ftpcommand>');\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('</url>')\r\n      .join('</ftpcommand>');\r\n\r\n    if (previousXMLSettingsContent.includes('<url'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} '<url' not expected!`,\r\n        );\r\n\r\n    if (!previousXMLSettingsContent.includes('ftpcommand'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'ftpcommand' not found!`,\r\n        );\r\n\r\n    const previousSettings = await Utilities.parseStringPromise(\r\n      previousXMLSettingsContent,\r\n      {\r\n        trim: true,\r\n        explicitArray: false,\r\n      },\r\n    );\r\n\r\n    //console.log(`defaultSettings = ${this.defaultSettings}`);\r\n\r\n    if (!this.defaultSettings) {\r\n      //console.log('Log 26');\r\n      const defaultsXMLSettingsContent = await UtilitiesElectron.readAsync(\r\n        `${this.updateDestinationDirectoryPath}/config/_defaults/settings.xml`,\r\n      );\r\n\r\n      //console.log(`defaultsXMLSettingsContent = ${defaultsXMLSettingsContent}`);\r\n      //console.log(\r\n      //  `this.updateDestinationDirectoryPath = ${this.updateDestinationDirectoryPath}`\r\n      //);\r\n\r\n      this.defaultSettings = await Utilities.parseStringPromise(\r\n        defaultsXMLSettingsContent,\r\n        {\r\n          trim: true,\r\n          explicitArray: false,\r\n        },\r\n      );\r\n    }\r\n\r\n    const migratedSettings = JSON.parse(JSON.stringify(this.defaultSettings));\r\n\r\n    const numberOfUserVariables =\r\n      previousSettings.documentburster.settings.numberofuservariables;\r\n\r\n    //STEP1 - automatically migrate the vast majority of the configuration settings for which the structure\r\n    //did not change between the software versions\r\n    Utilities.traverseJSONObjTree(migratedSettings, (key, value, scope) => {\r\n      //version should not be copied from the previousSettings\r\n      if (typeof value !== 'object' && key != 'version') {\r\n        const currentConfigurationItemKeys = scope.concat(key);\r\n\r\n        const configurationStructureDidNotChange =\r\n          this.checkObjectHasAllAttributes(\r\n            previousSettings,\r\n            currentConfigurationItemKeys,\r\n          );\r\n\r\n        let migratedValue = value;\r\n\r\n        if (configurationStructureDidNotChange) {\r\n          //initialize the \"migratedValue\" configuration value with the previous configuration value\r\n          migratedValue = Utilities.getDeeplyNestedLastProp(\r\n            previousSettings,\r\n            currentConfigurationItemKeys,\r\n          );\r\n\r\n          //if neeeded, migrate STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX\r\n          if (migratedValue) {\r\n            // remove the line breaks characters which sometimes appear in the configuration values\r\n            // (but don't remove this from the email message configurations)\r\n\r\n            if (!['text', 'html', 'subject'].includes(key)) {\r\n              // remove the line breaks\r\n              migratedValue = migratedValue.replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n\r\n              // remove the spaces but only if in between $ and $ (i.e only for vars, not for folder paths with spaces)\r\n              if (migratedValue)\r\n                migratedValue = migratedValue.replace(/\\s+(?=[^$\\$]*\\$)/g, '');\r\n            }\r\n\r\n            if (migratedValue)\r\n              for (const [keyST, valueFM] of Array.from(\r\n                this\r\n                  .BUILTIN_VARS_LEGACY_STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX_MAP,\r\n              )) {\r\n                //migrate STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX\r\n                migratedValue = migratedValue.split(keyST).join(valueFM);\r\n              }\r\n\r\n            if (migratedValue)\r\n              for (let i = 0; i < numberOfUserVariables; i++) {\r\n                //migrate STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX\r\n                migratedValue = migratedValue\r\n                  .split(`$var${i}$`)\r\n                  .join(`$\\{var${i}\\}`);\r\n              }\r\n          }\r\n        } else {\r\n          if (key == 'template' && previousConfigFileName != 'settings.xml')\r\n            migratedValue = previousConfigFileName;\r\n        }\r\n\r\n        this.setDeeplyNestedLastProp(\r\n          migratedSettings,\r\n          migratedValue,\r\n          currentConfigurationItemKeys,\r\n        );\r\n      }\r\n    });\r\n\r\n    //STEP2 - new default values for configuration settings for which the structure did not change between\r\n    if (\r\n      previousSettings.documentburster.settings.numberofuservariables == '10'\r\n    ) {\r\n      migratedSettings.documentburster.settings.numberofuservariables = '20';\r\n    }\r\n\r\n    //STEP3 - manually migrate the configuration settings for which the structure did change between\r\n    //versions\r\n\r\n    // do this only if the structure is old like this <sendfiles>true</sendfiles>\r\n\r\n    // otherwise, if the structure is new like <sendfiles><email>true</email></sendfiles> the below\r\n    // line of code should not execute\r\n    if (\r\n      typeof previousSettings.documentburster.settings.sendfiles.email ===\r\n      'undefined'\r\n    )\r\n      migratedSettings.documentburster.settings.sendfiles.email =\r\n        previousSettings.documentburster.settings.sendfiles;\r\n\r\n    if (\r\n      migratedSettings.documentburster.settings.uploadsettings.ftpcommand ==\r\n      'ftp://'\r\n    )\r\n      migratedSettings.documentburster.settings.uploadsettings.ftpcommand = '';\r\n\r\n    //STEP5 - manually handle few special situations\r\n    if (\r\n      migratedSettings.documentburster.settings.burstfilename.includes(\r\n        'input_document_extension',\r\n      )\r\n    )\r\n      migratedSettings.documentburster.settings.burstfilename =\r\n        migratedSettings.documentburster.settings.burstfilename.replace(\r\n          'input_document_extension',\r\n          'output_type_extension',\r\n        );\r\n\r\n    migratedSettings.documentburster.settings.qualityassurance.emailserver.port =\r\n      this.defaultSettings.documentburster.settings.qualityassurance.emailserver.port;\r\n\r\n    migratedSettings.documentburster.settings.sortbyposition =\r\n      this.defaultSettings.documentburster.settings.sortbyposition;\r\n\r\n    migratedSettings.documentburster.settings.emailserver.useconn = false;\r\n    migratedSettings.documentburster.settings.emailserver.conncode = '';\r\n\r\n    // console.log(`${this.updateDestinationDirectoryPath}/config/burst/${previousConfigFileName}`);\r\n\r\n    //finally, once everything is migrated, save the configuration\r\n    return new Settings().saveSettingsFileAsync(\r\n      migratedSettings,\r\n      newMigratedSettingsFilePath,\r\n    );\r\n  }\r\n\r\n  async migrateScriptFile(\r\n    scriptFilePath: string,\r\n    legacyVersion?: string,\r\n  ): Promise<string> {\r\n    const scriptFileName = path.basename(scriptFilePath);\r\n\r\n    let newScriptFilePath = `${this.updateDestinationDirectoryPath}/scripts/burst/${scriptFileName}`;\r\n\r\n    if (legacyVersion)\r\n      newScriptFilePath = `${this.updateDestinationDirectoryPath}/scripts/burst/${legacyVersion}/${scriptFileName}`;\r\n\r\n    //ASYNC ISSUE - if I make this async it fails\r\n    //console.log('Log 27');\r\n    await UtilitiesElectron.copyAsync(scriptFilePath, newScriptFilePath, {\r\n      overwrite: true,\r\n    });\r\n\r\n    /*\r\n    let exists = await fsExtra.pathExists(scriptFilePath);\r\n \r\n    if (exists)\r\n      console.log(scriptFilePath);\r\n    else\r\n      throw new Error(`!!! scriptFilePath File Path Not Found -  ${scriptFilePath}`);\r\n \r\n    exists = await fsExtra.pathExists(newScriptFilePath);\r\n \r\n    if (exists)\r\n      console.log(newScriptFilePath);\r\n    else\r\n      throw new Error(`!!! newScriptFilePath File Path Not Found -  ${newScriptFilePath}`);\r\n    \r\n      */\r\n\r\n    let replaceValues: { from: string; to: string }[] = [];\r\n\r\n    replaceValues.push({\r\n      from: 'import com.smartwish',\r\n      to: 'import com.sourcekraft',\r\n    });\r\n\r\n    replaceValues.push({ from: 'extractFilePath', to: 'extractedFilePath' });\r\n\r\n    replaceValues.push({\r\n      from: 'org.apache.commons.vfs.tasks',\r\n      to: 'org.apache.commons.vfs2.tasks',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: ';lib/burst/commons-logging-1.1.1.jar',\r\n      to: ';lib/burst/jcl-over-slf4j-1.7.30.jar;lib/burst/slf4j-api-1.7.30.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'jcl-over-slf4j-1.7.5.jar',\r\n      to: 'jcl-over-slf4j-1.7.30.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'slf4j-api-1.7.5.jar',\r\n      to: 'slf4j-api-1.7.30.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'lib/burst/pdfbox-1.0.0.jar',\r\n      to: 'lib/burst/pdfbox-2.0.20.jar;lib/burst/pdfbox-tools-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'lib/burst/pdfbox-1.8.2.jar',\r\n      to: 'lib/burst/pdfbox-2.0.20.jar;lib/burst/pdfbox-tools-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'jempbox-1.0.0.jar',\r\n      to: 'xmpbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'jempbox-1.8.2.jar',\r\n      to: 'xmpbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'fontbox-1.0.0.jar',\r\n      to: 'fontbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'fontbox-1.8.2.jar',\r\n      to: 'fontbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'bcmail-jdk15-1.44.jar',\r\n      to: 'bcmail-jdk15-1.46.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'bcprov-jdk15-1.44.jar',\r\n      to: 'bcprov-jdk15-1.46.jar',\r\n    });\r\n\r\n    //console.log('Log 28');\r\n    //console.log(`newScriptFilePath = ${newScriptFilePath}`);\r\n\r\n    let scriptContent = await UtilitiesElectron.readAsync(newScriptFilePath);\r\n    //console.log(`scriptContent before = ${scriptContent}`);\r\n\r\n    for (const replaceValue of replaceValues) {\r\n      if (scriptContent.includes(replaceValue.from)) {\r\n        scriptContent = scriptContent.replace(\r\n          new RegExp(replaceValue.from, 'g'),\r\n          replaceValue.to,\r\n        );\r\n      }\r\n    }\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp(\r\n        'samples\\\\/stamp\\\\.pdf \\\\\\\\\"\\\\$inputFile\\\\\\\\\" \\\\\\\\\"\\\\$inputFile\\\\\\\\\"',\r\n        'g',\r\n      ),\r\n      '\\\\\"$inputFile\\\\\" samples/Stamp.pdf \\\\\"$inputFile\\\\\"',\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp(\r\n        'samples\\\\/Stamp\\\\.pdf \\\\\\\\\"\\\\$inputFile\\\\\\\\\" \\\\\\\\\"\\\\$inputFile\\\\\\\\\"',\r\n        'g',\r\n      ),\r\n      '\\\\\"$inputFile\\\\\" samples/Stamp.pdf \\\\\"$inputFile\\\\\"',\r\n    );\r\n\r\n    //correct groovy vars\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('.Overlay \\\\$overlayOptions', 'g'),\r\n      '.OverlayPDF ${overlayOptions}',\r\n    );\r\n\r\n    if (\r\n      scriptContent.includes('.Overlay') &&\r\n      !scriptContent.includes('.OverlayPDF ${overlayOptions}')\r\n    )\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '.OverlayPDF \\${overlayOptions}' not found!`,\r\n        );\r\n\r\n    if (\r\n      scriptContent.includes('org.apache.pdfbox.') &&\r\n      !scriptContent.includes('org.apache.pdfbox.tools.')\r\n    ) {\r\n      scriptContent = scriptContent.replace(\r\n        new RegExp('-cp \\\\$pdfBoxClassPath org.apache.pdfbox.', 'g'),\r\n        '-cp ${pdfBoxClassPath} org.apache.pdfbox.tools.',\r\n      );\r\n\r\n      if (\r\n        scriptContent.includes('pdfBoxClassPath') &&\r\n        scriptContent.includes('org.apache.pdfbox.') &&\r\n        !scriptContent.includes('org.apache.pdfbox.tools')\r\n      )\r\n        if (this.log)\r\n          this.log.error(\r\n            `migrateScriptFile - ${newScriptFilePath} 'org.apache.pdfbox.tools' not found!`,\r\n          );\r\n    }\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$hostName', 'g'),\r\n      '${hostName}',\r\n    );\r\n\r\n    if (scriptContent.includes('$hostName'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$hostName' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$tempFilePath', 'g'),\r\n      '${tempFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$tempFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$tempFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$curlOptions', 'g'),\r\n      '${curlOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$curlOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$curlOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$userName', 'g'),\r\n      '${userName}',\r\n    );\r\n\r\n    if (scriptContent.includes('$userName'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$userName' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$password', 'g'),\r\n      '${password}',\r\n    );\r\n\r\n    if (scriptContent.includes('$password'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$password' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$absolutePath', 'g'),\r\n      '${absolutePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$absolutePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$absolutePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$destDir', 'g'),\r\n      '${destDir}',\r\n    );\r\n\r\n    if (scriptContent.includes('$destDir'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$destDir' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$sharedLocationPath', 'g'),\r\n      '${sharedLocationPath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$sharedLocationPath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$sharedLocationPath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$uploadFilePath', 'g'),\r\n      '${uploadFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$uploadFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$uploadFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$execOptions', 'g'),\r\n      '${execOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$execOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$execOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$inputFile', 'g'),\r\n      '${inputFile}',\r\n    );\r\n\r\n    if (scriptContent.includes('$inputFile'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$inputFile' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$pdfBoxClassPath', 'g'),\r\n      '${pdfBoxClassPath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$pdfBoxClassPath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$pdfBoxClassPath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$encryptOptions', 'g'),\r\n      '${encryptOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$encryptOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$encryptOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$extractedFilePath', 'g'),\r\n      '${extractedFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$extractedFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$extractedFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$stampedFilePath', 'g'),\r\n      '${stampedFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$stampedFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$stampedFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$overlayOptions', 'g'),\r\n      '${overlayOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$overlayOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$overlayOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$printOptions', 'g'),\r\n      '${printOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$printOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$printOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$numberedFilePath', 'g'),\r\n      '${numberedFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$numberedFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$numberedFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$host', 'g'),\r\n      '${host}',\r\n    );\r\n\r\n    if (scriptContent.includes('$host'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$host' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$port', 'g'),\r\n      '${port}',\r\n    );\r\n\r\n    if (scriptContent.includes('$port'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$port' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$user', 'g'),\r\n      '${user}',\r\n    );\r\n\r\n    if (scriptContent.includes('$user'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$user' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$subject', 'g'),\r\n      '${subject}',\r\n    );\r\n\r\n    if (scriptContent.includes('$subject'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$subject' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$from', 'g'),\r\n      '${from}',\r\n    );\r\n\r\n    if (scriptContent.includes('$from'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$from' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(new RegExp('\\\\$to', 'g'), '${to}');\r\n\r\n    if (scriptContent.includes('$to'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$to' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$message', 'g'),\r\n      '${message}',\r\n    );\r\n\r\n    if (scriptContent.includes('$message'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$message' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(new RegExp('\\\\$ssl', 'g'), '${ssl}');\r\n\r\n    if (scriptContent.includes('$ssl'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$ssl' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$enableStartTLS', 'g'),\r\n      '${enableStartTLS}',\r\n    );\r\n\r\n    if (scriptContent.includes('$enableStartTLS'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$enableStartTLS' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$mergedFileName', 'g'),\r\n      '${mergedFileName}',\r\n    );\r\n\r\n    if (scriptContent.includes('$mergedFileName'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$mergedFileName' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\${employeeRow.employee_id}', 'g'),\r\n      '$employeeRow.employee_id',\r\n    );\r\n\r\n    if (scriptContent.includes('${employeeRow.employee_id}'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '\\${employeeRow.employee_id}' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${token}\"\\\\)', 'g'),\r\n      `\"\\${token}\"`,\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${emailAddress}\"\\\\)', 'g'),\r\n      `\"\\${emailAddress}\"`,\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${firstName}\"\\\\)', 'g'),\r\n      `\"\\${firstName}\"`,\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${lastName}\"\\\\)', 'g'),\r\n      `\"\\${lastName}\"`,\r\n    );\r\n\r\n    if (scriptContent.includes('String.valueOf'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'String.valueOf' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var0\\\\$', 'g'),\r\n      '${var0}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var0$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var0$' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var1\\\\$', 'g'),\r\n      '${var1}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var1$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var1$' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var2\\\\$', 'g'),\r\n      '${var2}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var2$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var2$' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var3\\\\$', 'g'),\r\n      '${var3}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var3$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var3$' not expected!`,\r\n        );\r\n    //end correct groovy vars\r\n\r\n    //console.log(`scriptContent after = ${scriptContent}`);\r\n\r\n    if (scriptContent.includes('import com.smartwish'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'import com.smartwish' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('extractFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'extractFilePath' not expected!`,\r\n        );\r\n\r\n    if (\r\n      scriptContent.includes(\r\n        'samples/Stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"',\r\n      )\r\n    )\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'samples/Stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"' not expected!`,\r\n        );\r\n\r\n    if (\r\n      scriptContent.includes(\r\n        'samples/stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"',\r\n      )\r\n    )\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'samples/stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('org.apache.commons.vfs.tasks'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'org.apache.commons.vfs.tasks' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('commons-logging'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'commons-logging' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('jcl-over-slf4j-1.7.5.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'jcl-over-slf4j-1.7.5.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('slf4j-api-1.7.5.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'slf4j-api-1.7.5.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('pdfbox-1.0.0.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'pdfbox-1.0.0.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('pdfbox-1.8.2.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'pdfbox-1.8.2.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('jempbox-1.0.0.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'jempbox-1.0.0.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('jempbox-1.8.2.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'jempbox-1.8.2.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('fontbox-1.0.0.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'fontbox-1.0.0.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('fontbox-1.8.2.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'fontbox-1.8.2.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('bcmail-jdk15-1.44.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'bcmail-jdk15-1.44.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('bcprov-jdk15-1.44.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'bcprov-jdk15-1.44.jar' not expected!`,\r\n        );\r\n\r\n    //console.log('Log 29');\r\n    await UtilitiesElectron.writeAsync(newScriptFilePath, scriptContent);\r\n\r\n    return Promise.resolve(newScriptFilePath);\r\n  }\r\n\r\n  async removeTempUpgradeFolder() {\r\n    //console.log('Log 30');\r\n    return UtilitiesElectron.removeAsync(this.upgdDbTempDirectoryPath);\r\n  }\r\n\r\n  checkObjectHasAllAttributes(obj: any, attrs: Array<string>): boolean {\r\n    let tempObj = obj;\r\n\r\n    let hasAllAttrs = true;\r\n\r\n    for (const attr of attrs) {\r\n      if (hasAllAttrs) {\r\n        tempObj = tempObj[attr];\r\n        hasAllAttrs = typeof tempObj !== 'undefined';\r\n      }\r\n    }\r\n\r\n    return hasAllAttrs;\r\n  }\r\n\r\n  setDeeplyNestedLastProp(obj: any, value: string, props: Array<string>) {\r\n    const [head, ...rest] = props;\r\n\r\n    !rest.length\r\n      ? (obj[head] = value)\r\n      : this.setDeeplyNestedLastProp(obj[head], value, rest);\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "errorMsg",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "jobFilePath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "licenseInfo",
          "defaultValue": "{\r\n    latestVersion: '',\r\n    key: '',\r\n    customeremail: '',\r\n    status: '',\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "migrateConfigFiles",
          "defaultValue": "new Array<[string, string]>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "migrateScriptFiles",
          "defaultValue": "new Array<[string, string]>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "mode",
          "defaultValue": "'update-now'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "productInfo",
          "defaultValue": "{\r\n    product: '',\r\n    version: new semver.SemVer('0.0.0'),\r\n    isServerVersion: false,\r\n    isWindows: true,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "templatesFolders",
          "defaultValue": "new Array<[string, string]>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "updateOptions",
          "defaultValue": "{\r\n    copylicensinginformation: true,\r\n    copyoutputfiles: false,\r\n    copylogfiles: false,\r\n    copyquarantinefiles: false,\r\n    copybackupfiles: false,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "updateSourceDirectoryPath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "updateSourceVersion",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Updater",
      "id": "class-Updater-3ce5c93edcb41172d315ab90a42f7ad5bc43dc44738b49705fd486b5d1aff0a051db471a0dbf7ea5914b20b4cba5e0abbe34ba251975b0fed4b28144e8f6f6a2",
      "file": "src/app/areas/install-setup-upgrade/updater.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import * as path from 'path';\r\nimport uniqueFilename from 'unique-filename';\r\nimport dayjs from 'dayjs';\r\nimport AdmZip from 'adm-zip';\r\n\r\nimport Utilities from '../../helpers/utilities';\r\nimport { Settings } from '../../helpers/settings';\r\n\r\nimport * as semver from 'semver';\r\n\r\nimport ElectronLog from 'electron-log';\r\nimport UtilitiesElectron from '../../helpers/utilities-electron';\r\n\r\nexport class UpdateInfo {\r\n  mode = 'update-now';\r\n\r\n  errorMsg: string;\r\n\r\n  jobFilePath: string;\r\n  updateSourceDirectoryPath: string;\r\n  updateSourceVersion: string;\r\n\r\n  migrateConfigFiles = new Array<[string, string]>();\r\n  migrateScriptFiles = new Array<[string, string]>();\r\n\r\n  templatesFolders = new Array<[string, string]>();\r\n\r\n  licenseInfo = {\r\n    latestVersion: '',\r\n    key: '',\r\n    customeremail: '',\r\n    status: '',\r\n  };\r\n\r\n  productInfo = {\r\n    product: '',\r\n    version: new semver.SemVer('0.0.0'),\r\n    isServerVersion: false,\r\n    isWindows: true,\r\n  };\r\n\r\n  updateOptions = {\r\n    copylicensinginformation: true,\r\n    copyoutputfiles: false,\r\n    copylogfiles: false,\r\n    copyquarantinefiles: false,\r\n    copybackupfiles: false,\r\n  };\r\n}\r\n\r\nexport class Updater {\r\n  nowFormatted: string;\r\n\r\n  updateDestinationDirectoryPath: string;\r\n  upgdDbTempDirectoryPath: string;\r\n  backupZipFileName: string;\r\n\r\n  defaultSettings: any;\r\n\r\n  readonly BUILTIN_VARS_LEGACY_STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX_MAP =\r\n    new Map([\r\n      ['$burst_token$', '${burst_token}'],\r\n      ['$input_document_extension$', '${input_document_extension}'],\r\n      ['$input_document_name$', '${input_document_name}'],\r\n      ['$burst_index$', '${burst_index}'],\r\n      ['$now_default_date$', '${now_default_date}'],\r\n      ['$now_short_date$', '${now_short_date}'],\r\n      ['$now_medium_date$', '${now_medium_date}'],\r\n      ['$now_long_date$', '${now_long_date}'],\r\n      ['$now_full_date$', '${now_full_date}'],\r\n      ['$now_quarter$', '${now_quarter}'],\r\n      ['$extracted_file_path$', '${extracted_file_path}'],\r\n      [\r\n        '$extracted_file_paths_after_splitting_2nd_time$',\r\n        '${extracted_file_paths_after_splitting_2nd_time}',\r\n      ],\r\n      ['$now;format=\"yyyy.MM.dd\"$', '${now?string[\"yyyy.MM.dd\"]}'],\r\n      [\r\n        '$now;format=\"yyyy.MM.dd_HH.mm.ss\"$',\r\n        '${now?string[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}',\r\n      ],\r\n      [\r\n        '$now;format=\"yyyy.MM.dd_HH.mm.ss.SSS\"$',\r\n        '${now?string[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}',\r\n      ],\r\n      [\r\n        '_stats-$num_pages$pages-$num_files_extracted$extracted-$num_files_distributed$distributed.log',\r\n        '_stats-${stats_info}.log',\r\n      ],\r\n    ]);\r\n  isElectron: boolean = false;\r\n\r\n  constructor(\r\n    protected portableExecutableDirectoryPath: string,\r\n    protected log?: typeof ElectronLog,\r\n  ) {\r\n    this.updateDestinationDirectoryPath = Utilities.slash(\r\n      this.portableExecutableDirectoryPath,\r\n    );\r\n\r\n    this.nowFormatted = dayjs().format('YYYY.MM.DD_HH.mm.ss');\r\n    this.upgdDbTempDirectoryPath = Utilities.slash(\r\n      uniqueFilename(Utilities.UPG_DB_FOLDER_PATH, this.nowFormatted),\r\n    );\r\n  }\r\n\r\n  async fillUpdateInfo(updateInfo: UpdateInfo): Promise<UpdateInfo> {\r\n    updateInfo.migrateConfigFiles = [];\r\n    updateInfo.migrateScriptFiles = [];\r\n    updateInfo.templatesFolders = [];\r\n\r\n    // console.log(`${this.updateDestinationDirectoryPath}/config/burst/settings.xml`);\r\n    if (updateInfo.mode == 'migrate-copy') {\r\n      //console.log('Log 1');\r\n\r\n      let validDbExeFilePath = await UtilitiesElectron.existsAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/DocumentBurster.exe`,\r\n      );\r\n\r\n      console.log(\r\n        `validDbExeFilePath = ${updateInfo.updateSourceDirectoryPath}/DocumentBurster.exe`,\r\n      );\r\n\r\n      if (validDbExeFilePath !== 'file') {\r\n        updateInfo.errorMsg = `DocumentBurster.exe was not found in the ${updateInfo.updateSourceDirectoryPath} selected location. Please select an existing DocumentBurster installation folder!`;\r\n      } else {\r\n        let xmlSourceSettings = {\r\n          documentburster: {\r\n            settings: {\r\n              version: '',\r\n            },\r\n          },\r\n        };\r\n\r\n        xmlSourceSettings = await new Settings().loadSettingsFileAsync(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/burst/settings.xml`,\r\n        );\r\n\r\n        //console.log(\r\n        //  `SourceDirectoryPath.settings.xml = ${updateInfo.updateSourceDirectoryPath}/config/burst/settings.xml`\r\n        //);\r\n\r\n        updateInfo.updateSourceVersion =\r\n          xmlSourceSettings.documentburster.settings.version;\r\n      }\r\n    }\r\n    //config folder\r\n    if (!updateInfo.errorMsg) {\r\n      //console.log(\r\n      //  `exists(updateInfo.updateSourceDirectoryPath) = ${JSON.stringify(\r\n      //    sourceDirectoryExists\r\n      //  )}`\r\n      //);\r\n\r\n      //console.log(\r\n      //  `Log 2 updateInfo.updateSourceDirectoryPath: ${updateInfo.updateSourceDirectoryPath}`\r\n      //);\r\n\r\n      // Finds all '.xml' files inside 'config' folder but excluding those in 'vendor' subtree.\r\n      const configFilePaths = await UtilitiesElectron.findAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config`,\r\n        {\r\n          matching: [\r\n            '*.xml',\r\n            `!_internal/**/*`,\r\n            `!_defaults/**/*`,\r\n            `!burst/internal/**/*`,\r\n            `!burst/default/**/*`,\r\n          ],\r\n        },\r\n      );\r\n\r\n      for (const configFilePath of configFilePaths) {\r\n        const configFileName = Utilities.basename(configFilePath);\r\n\r\n        const fullConfigFilePath = Utilities.slash(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/burst/${configFileName}`,\r\n        );\r\n\r\n        //console.log(`Log 3.00 configFileName = ${configFileName}`);\r\n\r\n        //console.log(`Log 3.0 configFilPath = ${configFilePath}`);\r\n        //console.log(`Log 3 fullConfigFilePath = ${fullConfigFilePath}`);\r\n        updateInfo.migrateConfigFiles.push([\r\n          configFileName,\r\n          fullConfigFilePath,\r\n        ]);\r\n      }\r\n\r\n      //console.log(updateInfo.migrateConfigFiles);\r\n\r\n      //scripts\r\n      const scriptFilePaths = await UtilitiesElectron.findAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/scripts/burst`,\r\n        {\r\n          matching: ['*.groovy', `!internal/**/*`, `!samples/**/*`],\r\n        },\r\n      );\r\n\r\n      for (const scriptFilePath of scriptFilePaths) {\r\n        const fullScriptFilePath = Utilities.slash(\r\n          `${updateInfo.updateSourceDirectoryPath}/${scriptFilePath}`,\r\n        );\r\n        const scriptFileName = path.basename(fullScriptFilePath);\r\n\r\n        //console.log('Log 3');\r\n\r\n        const scriptContent =\r\n          await UtilitiesElectron.readAsync(fullScriptFilePath);\r\n        //console.log(`fullScriptFilePath = ${fullScriptFilePath}`);\r\n\r\n        //only copy / migrate groovy scripts which were customized (which are not empty)\r\n        if (scriptContent) {\r\n          updateInfo.migrateScriptFiles.push([\r\n            scriptFileName,\r\n            fullScriptFilePath,\r\n          ]);\r\n        }\r\n      }\r\n\r\n      // Looks for all custom html templates directories\r\n      // (all html templates directories besides the 2 sample templates provided with the app)\r\n      const templatesFolderPaths = await UtilitiesElectron.findAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/templates`,\r\n        {\r\n          matching: [\r\n            '!html-basic-example',\r\n            '!html-mobile-responsive-emails',\r\n            `!html-email-templates/basic-example`,\r\n            `!html-email-templates/mobile-responsive-example`,\r\n          ],\r\n          files: false,\r\n          directories: true,\r\n          recursive: false,\r\n        },\r\n      );\r\n\r\n      for (const templateFolderPath of templatesFolderPaths) {\r\n        const fullTemplatePath = Utilities.slash(\r\n          `${updateInfo.updateSourceDirectoryPath}/${templateFolderPath}`,\r\n        );\r\n        const templateName = path.basename(fullTemplatePath);\r\n        //console.log(`fullTemplatePath = ${fullTemplatePath}`);\r\n        updateInfo.templatesFolders.push([templateName, fullTemplatePath]);\r\n      }\r\n    }\r\n\r\n    return updateInfo;\r\n  }\r\n\r\n  downloadDb = async (sourceUrl: string, targetFile: string) => {\r\n    await Utilities.download(sourceUrl, targetFile);\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    new AdmZip(targetFile).extractAllTo(\r\n      Utilities.slash(path.dirname(targetFile)),\r\n    );\r\n  };\r\n\r\n  async doUpdate(updateInfo: UpdateInfo) {\r\n    let topFolderName = 'DocumentBurster';\r\n\r\n    // console.log(updateInfo);\r\n\r\n    if (updateInfo.mode == 'update-now') {\r\n      if (updateInfo.productInfo.isServerVersion)\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}/server`;\r\n      else\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}`;\r\n    }\r\n\r\n    let homeDirectoryPath = this.portableExecutableDirectoryPath;\r\n\r\n    if (updateInfo.productInfo.isServerVersion)\r\n      homeDirectoryPath = path.resolve(homeDirectoryPath, '..');\r\n\r\n    //console.log(`homeDirectoryPath = ${homeDirectoryPath}`);\r\n\r\n    const upgdDbFromFolderPath = `${this.upgdDbTempDirectoryPath}/from/DocumentBurster`;\r\n\r\n    if (updateInfo.mode == 'update-now') {\r\n      //console.log('Log 4');\r\n\r\n      await UtilitiesElectron.dirAsync(Utilities.UPG_DB_FOLDER_PATH, {\r\n        empty: true,\r\n        mode: '700',\r\n      });\r\n\r\n      //download latest version\r\n      let latestVersionDownloadUrl =\r\n        'https://s3.amazonaws.com/documentburster/newest/documentburster.zip';\r\n      let latestVersionTargetFilePath = `${this.upgdDbTempDirectoryPath}/to/documentburster.zip`;\r\n\r\n      if (updateInfo.productInfo.isServerVersion) {\r\n        latestVersionDownloadUrl =\r\n          'https://s3.amazonaws.com/documentburster/newest/documentburster-server.zip';\r\n        latestVersionTargetFilePath = `${this.upgdDbTempDirectoryPath}/to/documentburster-server.zip`;\r\n      }\r\n\r\n      //Ensures that directory on given path exists and meets given criteria\r\n      //console.log('Log 5');\r\n\r\n      await UtilitiesElectron.dirAsync(`${this.upgdDbTempDirectoryPath}/to`, {\r\n        empty: true,\r\n      });\r\n\r\n      await this.downloadDb(\r\n        latestVersionDownloadUrl,\r\n        latestVersionTargetFilePath,\r\n      );\r\n\r\n      //it could be DocumentBurster-8.7.1 but it could  be also just\r\n      //DocumentBurster => it should work in both cases\r\n      let topFolderNamePath = '';\r\n\r\n      //console.log(\r\n      //  `Log 6 - this.upgdDbTempDirectoryPath = ${this.upgdDbTempDirectoryPath}`\r\n      //);\r\n\r\n      topFolderNamePath = await UtilitiesElectron.findAsync(\r\n        `${this.upgdDbTempDirectoryPath}/to`,\r\n        {\r\n          matching: ['DocumentBurster*'],\r\n          files: false,\r\n          directories: true,\r\n          recursive: false,\r\n        },\r\n      )[0];\r\n\r\n      if (!topFolderNamePath)\r\n        topFolderNamePath = `${this.upgdDbTempDirectoryPath}/to/DocumentBurster`;\r\n\r\n      //console.log(`Log 61 - topFolderNamePath = ${topFolderNamePath}`);\r\n\r\n      topFolderName = path.basename(topFolderNamePath);\r\n\r\n      if (updateInfo.productInfo.isServerVersion)\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}/server`;\r\n      else\r\n        this.updateDestinationDirectoryPath = `${this.upgdDbTempDirectoryPath}/to/${topFolderName}`;\r\n\r\n      // keep a backup of the existing installation\r\n      //console.log('Log 7');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        homeDirectoryPath,\r\n        upgdDbFromFolderPath,\r\n      );\r\n    }\r\n\r\n    // console.log(updateInfo);\r\n    /*\r\n    if (updateInfo.mode == 'update-now') {\r\n    } else if (updateInfo.mode == 'migrate-copy') {\r\n    }\r\n    */\r\n\r\n    // config files\r\n    for (const configFile of updateInfo.migrateConfigFiles) {\r\n      const configFilePath = configFile[1];\r\n\r\n      // console.log(configFilePath);\r\n      await this.migrateSettingsFile(configFilePath);\r\n      // console.log(configFilePath);\r\n    }\r\n\r\n    //documentburster.properties\r\n    //old location\r\n    //console.log('Log 8');\r\n\r\n    let dbPropertiesFileExists = await UtilitiesElectron.existsAsync(\r\n      `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/documentburster.properties`,\r\n    );\r\n\r\n    if (dbPropertiesFileExists) {\r\n      //console.log('Log 9');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/documentburster.properties`,\r\n        `${this.updateDestinationDirectoryPath}/config/_internal/documentburster.properties`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    //new location\r\n    //console.log('Log 10');\r\n\r\n    dbPropertiesFileExists = await UtilitiesElectron.existsAsync(\r\n      `${updateInfo.updateSourceDirectoryPath}/config/_internal/documentburster.properties`,\r\n    );\r\n\r\n    if (dbPropertiesFileExists) {\r\n      //console.log('Log 11');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/_internal/documentburster.properties`,\r\n        `${this.updateDestinationDirectoryPath}/config/_internal/documentburster.properties`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n    // script files\r\n    for (const scriptFile of updateInfo.migrateScriptFiles) {\r\n      const scriptFilePath = scriptFile[1];\r\n\r\n      await this.migrateScriptFile(scriptFilePath);\r\n    }\r\n\r\n    // template folders\r\n    for (const templateFolder of updateInfo.templatesFolders) {\r\n      const templateFolderName = templateFolder[0];\r\n      const templateFolderPath = templateFolder[1];\r\n\r\n      //console.log('Log 12');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        templateFolderPath,\r\n        `${this.updateDestinationDirectoryPath}/templates/${templateFolderName}`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    // if (updateInfo.mode == \"migrate-copy\") {\r\n\r\n    if (updateInfo.updateOptions.copyoutputfiles) {\r\n      //console.log('Log 13');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/output`,\r\n        `${this.updateDestinationDirectoryPath}/output`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copylogfiles) {\r\n      //console.log('Log 14');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/logs`,\r\n        `${this.updateDestinationDirectoryPath}/logs`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copyquarantinefiles) {\r\n      //console.log('Log 15');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/quarantine`,\r\n        `${this.updateDestinationDirectoryPath}/quarantine`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copybackupfiles) {\r\n      //console.log('Log 16');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/backup`,\r\n        `${this.updateDestinationDirectoryPath}/backup`,\r\n        { overwrite: true },\r\n      );\r\n    }\r\n\r\n    if (updateInfo.updateOptions.copylicensinginformation) {\r\n      //Before v7.1 license.xml file was not existing (software licensing was introduced in v7.1)\r\n      //old location\r\n      //console.log('Log 17');\r\n\r\n      let licenseFileExists = await UtilitiesElectron.existsAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/license.xml`,\r\n      );\r\n\r\n      if (licenseFileExists) {\r\n        //console.log('Log 18');\r\n\r\n        await UtilitiesElectron.copyAsync(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/burst/internal/license.xml`,\r\n          `${this.updateDestinationDirectoryPath}/config/_internal/license.xml`,\r\n          { overwrite: true },\r\n        );\r\n      }\r\n      //new location\r\n      //console.log('Log 19');\r\n\r\n      licenseFileExists = await UtilitiesElectron.existsAsync(\r\n        `${updateInfo.updateSourceDirectoryPath}/config/_internal/license.xml`,\r\n      );\r\n\r\n      if (licenseFileExists) {\r\n        //console.log('Log 20');\r\n\r\n        await UtilitiesElectron.copyAsync(\r\n          `${updateInfo.updateSourceDirectoryPath}/config/_internal/license.xml`,\r\n          `${this.updateDestinationDirectoryPath}/config/_internal/license.xml`,\r\n          { overwrite: true },\r\n        );\r\n      }\r\n    }\r\n\r\n    //}\r\n\r\n    if (updateInfo.mode == 'update-now') {\r\n      //console.log('Log 21');\r\n\r\n      let allFilesAndFoldersPaths = await UtilitiesElectron.findAsync(\r\n        homeDirectoryPath,\r\n        {\r\n          matching: ['**/*'],\r\n          directories: true,\r\n        },\r\n      );\r\n\r\n      //remove all but not DocumentBurster.exe\r\n      allFilesAndFoldersPaths = allFilesAndFoldersPaths.filter(\r\n        (fileFolderPath) => !fileFolderPath.includes('DocumentBurster.exe'),\r\n      );\r\n\r\n      for (const fileFolderPath of allFilesAndFoldersPaths) {\r\n        //console.log('Log 22');\r\n        await UtilitiesElectron.removeAsync(fileFolderPath);\r\n      }\r\n\r\n      //console.log('Log 23');\r\n\r\n      await UtilitiesElectron.copyAsync(\r\n        `${this.upgdDbTempDirectoryPath}/to/${topFolderName}`,\r\n        homeDirectoryPath,\r\n        {\r\n          matching: [\r\n            `!${this.updateDestinationDirectoryPath}/DocumentBurster.exe`,\r\n          ],\r\n          overwrite: true,\r\n        },\r\n      );\r\n\r\n      if (updateInfo.productInfo.isServerVersion)\r\n        this.backupZipFileName = `documentburster-server-${updateInfo.productInfo.version}-${this.nowFormatted}.zip`;\r\n      else\r\n        this.backupZipFileName = `documentburster-${updateInfo.productInfo.version}-${this.nowFormatted}.zip`;\r\n\r\n      const zip = new AdmZip();\r\n      zip.addLocalFolder(`${this.upgdDbTempDirectoryPath}/from`);\r\n\r\n      zip.writeZip(`${this.upgdDbTempDirectoryPath}/${this.backupZipFileName}`);\r\n\r\n      //console.log('Log 24');\r\n      await UtilitiesElectron.moveAsync(\r\n        `${this.upgdDbTempDirectoryPath}/${this.backupZipFileName}`,\r\n        `${updateInfo.updateSourceDirectoryPath}/backup/${this.backupZipFileName}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  async migrateSettingsFile(settingsFilePath: string) {\r\n    //console.log(\r\n    //  `Log 86 - this.updateDestinationDirectoryPath = ${this.updateDestinationDirectoryPath}`\r\n    //);\r\n\r\n    //console.log(`Log 99 - settingsFilePath = ${settingsFilePath}`);\r\n\r\n    //console.log('Log 25');\r\n    let previousXMLSettingsContent =\r\n      await UtilitiesElectron.readAsync(settingsFilePath);\r\n\r\n    if (!previousXMLSettingsContent) {\r\n      Error.stackTraceLimit = 100;\r\n      console.log(`Log 25 - settingsFilePath = ${settingsFilePath}`);\r\n    }\r\n\r\n    const previousConfigFileName = Utilities.basename(settingsFilePath);\r\n\r\n    const newMigratedSettingsFilePath = `${this.updateDestinationDirectoryPath}/config/burst/${previousConfigFileName}`;\r\n\r\n    //STEP0 - some configuration settings node names were renamed (no structural changes)\r\n\r\n    //this is a quick way to \"re-map\" such old tag names to the new tag names\r\n    if (previousXMLSettingsContent.includes('defaultmessage')) {\r\n      previousXMLSettingsContent = previousXMLSettingsContent\r\n        .split('<defaultmessage>')\r\n        .join('<emailsettings>');\r\n\r\n      previousXMLSettingsContent = previousXMLSettingsContent\r\n        .split('</defaultmessage>')\r\n        .join('</emailsettings>');\r\n    }\r\n\r\n    if (previousXMLSettingsContent.includes('defaultmessage'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'defaultmessage' not expected!`,\r\n        );\r\n\r\n    if (!previousXMLSettingsContent.includes('emailsettings'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'emailsettings' not found!`,\r\n        );\r\n\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('<defaultftp>')\r\n      .join('<uploadsettings>');\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('</defaultftp>')\r\n      .join('</uploadsettings>');\r\n\r\n    if (previousXMLSettingsContent.includes('defaultftp'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'defaultftp' not expected!`,\r\n        );\r\n\r\n    if (!previousXMLSettingsContent.includes('uploadsettings'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'uploadsettings' not found!`,\r\n        );\r\n\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('<url>')\r\n      .join('<ftpcommand>');\r\n    previousXMLSettingsContent = previousXMLSettingsContent\r\n      .split('</url>')\r\n      .join('</ftpcommand>');\r\n\r\n    if (previousXMLSettingsContent.includes('<url'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} '<url' not expected!`,\r\n        );\r\n\r\n    if (!previousXMLSettingsContent.includes('ftpcommand'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateSettingsFile - ${newMigratedSettingsFilePath} 'ftpcommand' not found!`,\r\n        );\r\n\r\n    const previousSettings = await Utilities.parseStringPromise(\r\n      previousXMLSettingsContent,\r\n      {\r\n        trim: true,\r\n        explicitArray: false,\r\n      },\r\n    );\r\n\r\n    //console.log(`defaultSettings = ${this.defaultSettings}`);\r\n\r\n    if (!this.defaultSettings) {\r\n      //console.log('Log 26');\r\n      const defaultsXMLSettingsContent = await UtilitiesElectron.readAsync(\r\n        `${this.updateDestinationDirectoryPath}/config/_defaults/settings.xml`,\r\n      );\r\n\r\n      //console.log(`defaultsXMLSettingsContent = ${defaultsXMLSettingsContent}`);\r\n      //console.log(\r\n      //  `this.updateDestinationDirectoryPath = ${this.updateDestinationDirectoryPath}`\r\n      //);\r\n\r\n      this.defaultSettings = await Utilities.parseStringPromise(\r\n        defaultsXMLSettingsContent,\r\n        {\r\n          trim: true,\r\n          explicitArray: false,\r\n        },\r\n      );\r\n    }\r\n\r\n    const migratedSettings = JSON.parse(JSON.stringify(this.defaultSettings));\r\n\r\n    const numberOfUserVariables =\r\n      previousSettings.documentburster.settings.numberofuservariables;\r\n\r\n    //STEP1 - automatically migrate the vast majority of the configuration settings for which the structure\r\n    //did not change between the software versions\r\n    Utilities.traverseJSONObjTree(migratedSettings, (key, value, scope) => {\r\n      //version should not be copied from the previousSettings\r\n      if (typeof value !== 'object' && key != 'version') {\r\n        const currentConfigurationItemKeys = scope.concat(key);\r\n\r\n        const configurationStructureDidNotChange =\r\n          this.checkObjectHasAllAttributes(\r\n            previousSettings,\r\n            currentConfigurationItemKeys,\r\n          );\r\n\r\n        let migratedValue = value;\r\n\r\n        if (configurationStructureDidNotChange) {\r\n          //initialize the \"migratedValue\" configuration value with the previous configuration value\r\n          migratedValue = Utilities.getDeeplyNestedLastProp(\r\n            previousSettings,\r\n            currentConfigurationItemKeys,\r\n          );\r\n\r\n          //if neeeded, migrate STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX\r\n          if (migratedValue) {\r\n            // remove the line breaks characters which sometimes appear in the configuration values\r\n            // (but don't remove this from the email message configurations)\r\n\r\n            if (!['text', 'html', 'subject'].includes(key)) {\r\n              // remove the line breaks\r\n              migratedValue = migratedValue.replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n\r\n              // remove the spaces but only if in between $ and $ (i.e only for vars, not for folder paths with spaces)\r\n              if (migratedValue)\r\n                migratedValue = migratedValue.replace(/\\s+(?=[^$\\$]*\\$)/g, '');\r\n            }\r\n\r\n            if (migratedValue)\r\n              for (const [keyST, valueFM] of Array.from(\r\n                this\r\n                  .BUILTIN_VARS_LEGACY_STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX_MAP,\r\n              )) {\r\n                //migrate STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX\r\n                migratedValue = migratedValue.split(keyST).join(valueFM);\r\n              }\r\n\r\n            if (migratedValue)\r\n              for (let i = 0; i < numberOfUserVariables; i++) {\r\n                //migrate STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX\r\n                migratedValue = migratedValue\r\n                  .split(`$var${i}$`)\r\n                  .join(`$\\{var${i}\\}`);\r\n              }\r\n          }\r\n        } else {\r\n          if (key == 'template' && previousConfigFileName != 'settings.xml')\r\n            migratedValue = previousConfigFileName;\r\n        }\r\n\r\n        this.setDeeplyNestedLastProp(\r\n          migratedSettings,\r\n          migratedValue,\r\n          currentConfigurationItemKeys,\r\n        );\r\n      }\r\n    });\r\n\r\n    //STEP2 - new default values for configuration settings for which the structure did not change between\r\n    if (\r\n      previousSettings.documentburster.settings.numberofuservariables == '10'\r\n    ) {\r\n      migratedSettings.documentburster.settings.numberofuservariables = '20';\r\n    }\r\n\r\n    //STEP3 - manually migrate the configuration settings for which the structure did change between\r\n    //versions\r\n\r\n    // do this only if the structure is old like this <sendfiles>true</sendfiles>\r\n\r\n    // otherwise, if the structure is new like <sendfiles><email>true</email></sendfiles> the below\r\n    // line of code should not execute\r\n    if (\r\n      typeof previousSettings.documentburster.settings.sendfiles.email ===\r\n      'undefined'\r\n    )\r\n      migratedSettings.documentburster.settings.sendfiles.email =\r\n        previousSettings.documentburster.settings.sendfiles;\r\n\r\n    if (\r\n      migratedSettings.documentburster.settings.uploadsettings.ftpcommand ==\r\n      'ftp://'\r\n    )\r\n      migratedSettings.documentburster.settings.uploadsettings.ftpcommand = '';\r\n\r\n    //STEP5 - manually handle few special situations\r\n    if (\r\n      migratedSettings.documentburster.settings.burstfilename.includes(\r\n        'input_document_extension',\r\n      )\r\n    )\r\n      migratedSettings.documentburster.settings.burstfilename =\r\n        migratedSettings.documentburster.settings.burstfilename.replace(\r\n          'input_document_extension',\r\n          'output_type_extension',\r\n        );\r\n\r\n    migratedSettings.documentburster.settings.qualityassurance.emailserver.port =\r\n      this.defaultSettings.documentburster.settings.qualityassurance.emailserver.port;\r\n\r\n    migratedSettings.documentburster.settings.sortbyposition =\r\n      this.defaultSettings.documentburster.settings.sortbyposition;\r\n\r\n    migratedSettings.documentburster.settings.emailserver.useconn = false;\r\n    migratedSettings.documentburster.settings.emailserver.conncode = '';\r\n\r\n    // console.log(`${this.updateDestinationDirectoryPath}/config/burst/${previousConfigFileName}`);\r\n\r\n    //finally, once everything is migrated, save the configuration\r\n    return new Settings().saveSettingsFileAsync(\r\n      migratedSettings,\r\n      newMigratedSettingsFilePath,\r\n    );\r\n  }\r\n\r\n  async migrateScriptFile(\r\n    scriptFilePath: string,\r\n    legacyVersion?: string,\r\n  ): Promise<string> {\r\n    const scriptFileName = path.basename(scriptFilePath);\r\n\r\n    let newScriptFilePath = `${this.updateDestinationDirectoryPath}/scripts/burst/${scriptFileName}`;\r\n\r\n    if (legacyVersion)\r\n      newScriptFilePath = `${this.updateDestinationDirectoryPath}/scripts/burst/${legacyVersion}/${scriptFileName}`;\r\n\r\n    //ASYNC ISSUE - if I make this async it fails\r\n    //console.log('Log 27');\r\n    await UtilitiesElectron.copyAsync(scriptFilePath, newScriptFilePath, {\r\n      overwrite: true,\r\n    });\r\n\r\n    /*\r\n    let exists = await fsExtra.pathExists(scriptFilePath);\r\n \r\n    if (exists)\r\n      console.log(scriptFilePath);\r\n    else\r\n      throw new Error(`!!! scriptFilePath File Path Not Found -  ${scriptFilePath}`);\r\n \r\n    exists = await fsExtra.pathExists(newScriptFilePath);\r\n \r\n    if (exists)\r\n      console.log(newScriptFilePath);\r\n    else\r\n      throw new Error(`!!! newScriptFilePath File Path Not Found -  ${newScriptFilePath}`);\r\n    \r\n      */\r\n\r\n    let replaceValues: { from: string; to: string }[] = [];\r\n\r\n    replaceValues.push({\r\n      from: 'import com.smartwish',\r\n      to: 'import com.sourcekraft',\r\n    });\r\n\r\n    replaceValues.push({ from: 'extractFilePath', to: 'extractedFilePath' });\r\n\r\n    replaceValues.push({\r\n      from: 'org.apache.commons.vfs.tasks',\r\n      to: 'org.apache.commons.vfs2.tasks',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: ';lib/burst/commons-logging-1.1.1.jar',\r\n      to: ';lib/burst/jcl-over-slf4j-1.7.30.jar;lib/burst/slf4j-api-1.7.30.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'jcl-over-slf4j-1.7.5.jar',\r\n      to: 'jcl-over-slf4j-1.7.30.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'slf4j-api-1.7.5.jar',\r\n      to: 'slf4j-api-1.7.30.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'lib/burst/pdfbox-1.0.0.jar',\r\n      to: 'lib/burst/pdfbox-2.0.20.jar;lib/burst/pdfbox-tools-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'lib/burst/pdfbox-1.8.2.jar',\r\n      to: 'lib/burst/pdfbox-2.0.20.jar;lib/burst/pdfbox-tools-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'jempbox-1.0.0.jar',\r\n      to: 'xmpbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'jempbox-1.8.2.jar',\r\n      to: 'xmpbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'fontbox-1.0.0.jar',\r\n      to: 'fontbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'fontbox-1.8.2.jar',\r\n      to: 'fontbox-2.0.20.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'bcmail-jdk15-1.44.jar',\r\n      to: 'bcmail-jdk15-1.46.jar',\r\n    });\r\n\r\n    replaceValues.push({\r\n      from: 'bcprov-jdk15-1.44.jar',\r\n      to: 'bcprov-jdk15-1.46.jar',\r\n    });\r\n\r\n    //console.log('Log 28');\r\n    //console.log(`newScriptFilePath = ${newScriptFilePath}`);\r\n\r\n    let scriptContent = await UtilitiesElectron.readAsync(newScriptFilePath);\r\n    //console.log(`scriptContent before = ${scriptContent}`);\r\n\r\n    for (const replaceValue of replaceValues) {\r\n      if (scriptContent.includes(replaceValue.from)) {\r\n        scriptContent = scriptContent.replace(\r\n          new RegExp(replaceValue.from, 'g'),\r\n          replaceValue.to,\r\n        );\r\n      }\r\n    }\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp(\r\n        'samples\\\\/stamp\\\\.pdf \\\\\\\\\"\\\\$inputFile\\\\\\\\\" \\\\\\\\\"\\\\$inputFile\\\\\\\\\"',\r\n        'g',\r\n      ),\r\n      '\\\\\"$inputFile\\\\\" samples/Stamp.pdf \\\\\"$inputFile\\\\\"',\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp(\r\n        'samples\\\\/Stamp\\\\.pdf \\\\\\\\\"\\\\$inputFile\\\\\\\\\" \\\\\\\\\"\\\\$inputFile\\\\\\\\\"',\r\n        'g',\r\n      ),\r\n      '\\\\\"$inputFile\\\\\" samples/Stamp.pdf \\\\\"$inputFile\\\\\"',\r\n    );\r\n\r\n    //correct groovy vars\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('.Overlay \\\\$overlayOptions', 'g'),\r\n      '.OverlayPDF ${overlayOptions}',\r\n    );\r\n\r\n    if (\r\n      scriptContent.includes('.Overlay') &&\r\n      !scriptContent.includes('.OverlayPDF ${overlayOptions}')\r\n    )\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '.OverlayPDF \\${overlayOptions}' not found!`,\r\n        );\r\n\r\n    if (\r\n      scriptContent.includes('org.apache.pdfbox.') &&\r\n      !scriptContent.includes('org.apache.pdfbox.tools.')\r\n    ) {\r\n      scriptContent = scriptContent.replace(\r\n        new RegExp('-cp \\\\$pdfBoxClassPath org.apache.pdfbox.', 'g'),\r\n        '-cp ${pdfBoxClassPath} org.apache.pdfbox.tools.',\r\n      );\r\n\r\n      if (\r\n        scriptContent.includes('pdfBoxClassPath') &&\r\n        scriptContent.includes('org.apache.pdfbox.') &&\r\n        !scriptContent.includes('org.apache.pdfbox.tools')\r\n      )\r\n        if (this.log)\r\n          this.log.error(\r\n            `migrateScriptFile - ${newScriptFilePath} 'org.apache.pdfbox.tools' not found!`,\r\n          );\r\n    }\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$hostName', 'g'),\r\n      '${hostName}',\r\n    );\r\n\r\n    if (scriptContent.includes('$hostName'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$hostName' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$tempFilePath', 'g'),\r\n      '${tempFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$tempFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$tempFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$curlOptions', 'g'),\r\n      '${curlOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$curlOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$curlOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$userName', 'g'),\r\n      '${userName}',\r\n    );\r\n\r\n    if (scriptContent.includes('$userName'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$userName' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$password', 'g'),\r\n      '${password}',\r\n    );\r\n\r\n    if (scriptContent.includes('$password'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$password' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$absolutePath', 'g'),\r\n      '${absolutePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$absolutePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$absolutePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$destDir', 'g'),\r\n      '${destDir}',\r\n    );\r\n\r\n    if (scriptContent.includes('$destDir'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$destDir' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$sharedLocationPath', 'g'),\r\n      '${sharedLocationPath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$sharedLocationPath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$sharedLocationPath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$uploadFilePath', 'g'),\r\n      '${uploadFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$uploadFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$uploadFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$execOptions', 'g'),\r\n      '${execOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$execOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$execOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$inputFile', 'g'),\r\n      '${inputFile}',\r\n    );\r\n\r\n    if (scriptContent.includes('$inputFile'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$inputFile' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$pdfBoxClassPath', 'g'),\r\n      '${pdfBoxClassPath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$pdfBoxClassPath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$pdfBoxClassPath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$encryptOptions', 'g'),\r\n      '${encryptOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$encryptOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$encryptOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$extractedFilePath', 'g'),\r\n      '${extractedFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$extractedFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$extractedFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$stampedFilePath', 'g'),\r\n      '${stampedFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$stampedFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$stampedFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$overlayOptions', 'g'),\r\n      '${overlayOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$overlayOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$overlayOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$printOptions', 'g'),\r\n      '${printOptions}',\r\n    );\r\n\r\n    if (scriptContent.includes('$printOptions'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$printOptions' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$numberedFilePath', 'g'),\r\n      '${numberedFilePath}',\r\n    );\r\n\r\n    if (scriptContent.includes('$numberedFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$numberedFilePath' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$host', 'g'),\r\n      '${host}',\r\n    );\r\n\r\n    if (scriptContent.includes('$host'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$host' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$port', 'g'),\r\n      '${port}',\r\n    );\r\n\r\n    if (scriptContent.includes('$port'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$port' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$user', 'g'),\r\n      '${user}',\r\n    );\r\n\r\n    if (scriptContent.includes('$user'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$user' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$subject', 'g'),\r\n      '${subject}',\r\n    );\r\n\r\n    if (scriptContent.includes('$subject'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$subject' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$from', 'g'),\r\n      '${from}',\r\n    );\r\n\r\n    if (scriptContent.includes('$from'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$from' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(new RegExp('\\\\$to', 'g'), '${to}');\r\n\r\n    if (scriptContent.includes('$to'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$to' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$message', 'g'),\r\n      '${message}',\r\n    );\r\n\r\n    if (scriptContent.includes('$message'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$message' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(new RegExp('\\\\$ssl', 'g'), '${ssl}');\r\n\r\n    if (scriptContent.includes('$ssl'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$ssl' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$enableStartTLS', 'g'),\r\n      '${enableStartTLS}',\r\n    );\r\n\r\n    if (scriptContent.includes('$enableStartTLS'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$enableStartTLS' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$mergedFileName', 'g'),\r\n      '${mergedFileName}',\r\n    );\r\n\r\n    if (scriptContent.includes('$mergedFileName'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$mergedFileName' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\${employeeRow.employee_id}', 'g'),\r\n      '$employeeRow.employee_id',\r\n    );\r\n\r\n    if (scriptContent.includes('${employeeRow.employee_id}'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '\\${employeeRow.employee_id}' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${token}\"\\\\)', 'g'),\r\n      `\"\\${token}\"`,\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${emailAddress}\"\\\\)', 'g'),\r\n      `\"\\${emailAddress}\"`,\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${firstName}\"\\\\)', 'g'),\r\n      `\"\\${firstName}\"`,\r\n    );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('String\\\\.valueOf\\\\(\"\\\\${lastName}\"\\\\)', 'g'),\r\n      `\"\\${lastName}\"`,\r\n    );\r\n\r\n    if (scriptContent.includes('String.valueOf'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'String.valueOf' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var0\\\\$', 'g'),\r\n      '${var0}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var0$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var0$' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var1\\\\$', 'g'),\r\n      '${var1}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var1$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var1$' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var2\\\\$', 'g'),\r\n      '${var2}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var2$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var2$' not expected!`,\r\n        );\r\n\r\n    scriptContent = scriptContent.replace(\r\n      new RegExp('\\\\$var3\\\\$', 'g'),\r\n      '${var3}',\r\n    );\r\n\r\n    if (scriptContent.includes('$var3$'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} '$var3$' not expected!`,\r\n        );\r\n    //end correct groovy vars\r\n\r\n    //console.log(`scriptContent after = ${scriptContent}`);\r\n\r\n    if (scriptContent.includes('import com.smartwish'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'import com.smartwish' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('extractFilePath'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'extractFilePath' not expected!`,\r\n        );\r\n\r\n    if (\r\n      scriptContent.includes(\r\n        'samples/Stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"',\r\n      )\r\n    )\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'samples/Stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"' not expected!`,\r\n        );\r\n\r\n    if (\r\n      scriptContent.includes(\r\n        'samples/stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"',\r\n      )\r\n    )\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'samples/stamp.pdf \\\\\"$inputFile\\\\\" \\\\\"$inputFile\\\\\"' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('org.apache.commons.vfs.tasks'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'org.apache.commons.vfs.tasks' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('commons-logging'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'commons-logging' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('jcl-over-slf4j-1.7.5.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'jcl-over-slf4j-1.7.5.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('slf4j-api-1.7.5.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'slf4j-api-1.7.5.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('pdfbox-1.0.0.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'pdfbox-1.0.0.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('pdfbox-1.8.2.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'pdfbox-1.8.2.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('jempbox-1.0.0.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'jempbox-1.0.0.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('jempbox-1.8.2.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'jempbox-1.8.2.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('fontbox-1.0.0.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'fontbox-1.0.0.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('fontbox-1.8.2.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'fontbox-1.8.2.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('bcmail-jdk15-1.44.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'bcmail-jdk15-1.44.jar' not expected!`,\r\n        );\r\n\r\n    if (scriptContent.includes('bcprov-jdk15-1.44.jar'))\r\n      if (this.log)\r\n        this.log.error(\r\n          `migrateScriptFile - ${newScriptFilePath} 'bcprov-jdk15-1.44.jar' not expected!`,\r\n        );\r\n\r\n    //console.log('Log 29');\r\n    await UtilitiesElectron.writeAsync(newScriptFilePath, scriptContent);\r\n\r\n    return Promise.resolve(newScriptFilePath);\r\n  }\r\n\r\n  async removeTempUpgradeFolder() {\r\n    //console.log('Log 30');\r\n    return UtilitiesElectron.removeAsync(this.upgdDbTempDirectoryPath);\r\n  }\r\n\r\n  checkObjectHasAllAttributes(obj: any, attrs: Array<string>): boolean {\r\n    let tempObj = obj;\r\n\r\n    let hasAllAttrs = true;\r\n\r\n    for (const attr of attrs) {\r\n      if (hasAllAttrs) {\r\n        tempObj = tempObj[attr];\r\n        hasAllAttrs = typeof tempObj !== 'undefined';\r\n      }\r\n    }\r\n\r\n    return hasAllAttrs;\r\n  }\r\n\r\n  setDeeplyNestedLastProp(obj: any, value: string, props: Array<string>) {\r\n    const [head, ...rest] = props;\r\n\r\n    !rest.length\r\n      ? (obj[head] = value)\r\n      : this.setDeeplyNestedLastProp(obj[head], value, rest);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "portableExecutableDirectoryPath",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "log",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true
          }
        ],
        "line": 91,
        "jsdoctags": [
          {
            "name": "portableExecutableDirectoryPath",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "log",
            "type": "",
            "deprecated": false,
            "deprecationMessage": "",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "backupZipFileName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "BUILTIN_VARS_LEGACY_STRINGTEMPLATE_SYNTAX_TO_FREEMARKER_SYNTAX_MAP",
          "defaultValue": "new Map([\r\n      ['$burst_token$', '${burst_token}'],\r\n      ['$input_document_extension$', '${input_document_extension}'],\r\n      ['$input_document_name$', '${input_document_name}'],\r\n      ['$burst_index$', '${burst_index}'],\r\n      ['$now_default_date$', '${now_default_date}'],\r\n      ['$now_short_date$', '${now_short_date}'],\r\n      ['$now_medium_date$', '${now_medium_date}'],\r\n      ['$now_long_date$', '${now_long_date}'],\r\n      ['$now_full_date$', '${now_full_date}'],\r\n      ['$now_quarter$', '${now_quarter}'],\r\n      ['$extracted_file_path$', '${extracted_file_path}'],\r\n      [\r\n        '$extracted_file_paths_after_splitting_2nd_time$',\r\n        '${extracted_file_paths_after_splitting_2nd_time}',\r\n      ],\r\n      ['$now;format=\"yyyy.MM.dd\"$', '${now?string[\"yyyy.MM.dd\"]}'],\r\n      [\r\n        '$now;format=\"yyyy.MM.dd_HH.mm.ss\"$',\r\n        '${now?string[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}',\r\n      ],\r\n      [\r\n        '$now;format=\"yyyy.MM.dd_HH.mm.ss.SSS\"$',\r\n        '${now?string[\"yyyy.MM.dd_HH.mm.ss.SSS\"]}',\r\n      ],\r\n      [\r\n        '_stats-$num_pages$pages-$num_files_extracted$extracted-$num_files_distributed$distributed.log',\r\n        '_stats-${stats_info}.log',\r\n      ],\r\n    ])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [148]
        },
        {
          "name": "defaultSettings",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "downloadDb",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 251
        },
        {
          "name": "isElectron",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "nowFormatted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 52
        },
        {
          "name": "updateDestinationDirectoryPath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "upgdDbTempDirectoryPath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 55
        }
      ],
      "methods": [
        {
          "name": "checkObjectHasAllAttributes",
          "args": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "attrs",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 1465,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "attrs",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doUpdate",
          "args": [
            {
              "name": "updateInfo",
              "type": "UpdateInfo",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 261,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "updateInfo",
              "type": "UpdateInfo",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "fillUpdateInfo",
          "args": [
            {
              "name": "updateInfo",
              "type": "UpdateInfo",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<UpdateInfo>",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "updateInfo",
              "type": "UpdateInfo",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "migrateScriptFile",
          "args": [
            {
              "name": "scriptFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "legacyVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 796,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "scriptFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "legacyVersion",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "migrateSettingsFile",
          "args": [
            {
              "name": "settingsFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 555,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "settingsFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "removeTempUpgradeFolder",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 1460,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "setDeeplyNestedLastProp",
          "args": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "props",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1480,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "props",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UsageDetailsInfo",
      "id": "class-UsageDetailsInfo-00ea10cff004d56c5d99b74d7e00c740e5a0d1265f0478ede0e9dab9e83a538c5761c3e008381a7edfb36011825e12de7b822f1d7f9b966579da0bcc34831441",
      "file": "src/app/models/usage-details-info.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "export class UsageDetailsInfo {\r\n  type1 = 'usage';\r\n  type2: string;\r\n  type3: string;\r\n\r\n  code1: string;\r\n  code2: string;\r\n  code3: string;\r\n\r\n  status1: string;\r\n  status2: string;\r\n  status3: string;\r\n\r\n  text1: string;\r\n  text2: string;\r\n  text3: string;\r\n\r\n  clob1: string;\r\n  clob2: string;\r\n  clob3: string;\r\n}\r\n",
      "properties": [
        {
          "name": "clob1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "clob2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "clob3",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "code1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "code2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "code3",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "status1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "status2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "status3",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "text1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "text2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "text3",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "type1",
          "defaultValue": "'usage'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "type2",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "type3",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Utilities",
      "id": "class-Utilities-f4ac6d22347c98d1bf2667dad2a4d31fb3d12bab99e62ffe9bf117c9c1639344ee9af5b89ea80a241390a952fc2777aa00fe78d54eed565c652b3cb1f23c6b3e",
      "file": "src/app/helpers/utilities.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import * as util from 'util';\r\n\r\nimport * as fs from 'fs';\r\nimport { WriteStream } from 'fs';\r\n\r\nimport * as os from 'os';\r\n\r\nimport * as path from 'path';\r\n\r\nimport { convertableToString, OptionsV2, parseString } from 'xml2js';\r\nimport { Readable } from 'stream';\r\n\r\nexport default class Utilities {\r\n  static TT_URL = 'https://www.reportburster.com/19863306942987104-tt.php';\r\n  static isWindows() {\r\n    return (\r\n      process &&\r\n      (process.platform === 'win32' ||\r\n        /^(msys|cygwin)$/.test(process.env.OSTYPE))\r\n    );\r\n  }\r\n\r\n  static looseInvalid(a: string | number): boolean {\r\n    return a === '' || a === null || a === undefined;\r\n  }\r\n\r\n  static slash(inputPath: string): string {\r\n    if (!inputPath) return inputPath;\r\n\r\n    const isExtendedLengthPath = /^\\\\\\\\\\?\\\\/.test(inputPath);\r\n\r\n    if (isExtendedLengthPath) {\r\n      return inputPath;\r\n    }\r\n    //console.log(\r\n    //  `inputPath = ${inputPath}, typeof inputPath = ${typeof inputPath}`\r\n    //);\r\n    return inputPath.replace(/\\\\/g, '/');\r\n  }\r\n\r\n  static promisify(original: Function): Function {\r\n    return util.promisify(original);\r\n  }\r\n\r\n  //SYSTEM_TEMP_FOLDER_PATH = slash(path.resolve(require('temp-dir')))\r\n  static TMP_DIR_PATH = os.tmpdir;\r\n\r\n  static UPG_DB_FOLDER_PATH = Utilities.slash(\r\n    path.resolve(`${Utilities.TMP_DIR_PATH}/upg-db`),\r\n  );\r\n\r\n  static basename(path: string, extension?: string): string {\r\n    let base = path.split(/[\\\\/]/).pop() || '';\r\n\r\n    if (extension && base.slice(-extension.length) === extension) {\r\n      base = base.slice(0, -extension.length);\r\n    }\r\n\r\n    return base;\r\n  }\r\n\r\n  static dirname(path: string): string {\r\n    const lastSlash = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\\\'));\r\n    return path.substring(0, lastSlash);\r\n  }\r\n\r\n  static resolve(inputPath: string): string {\r\n    return path.resolve(inputPath);\r\n  }\r\n\r\n  static traverseJSONObjTree(\r\n    obj: any,\r\n    fn: (obj: any, k: string, v: any) => void,\r\n    scope = [],\r\n  ) {\r\n    for (const i in obj) {\r\n      fn.apply(this, [i, obj[i], scope]);\r\n      if (obj[i] !== null && typeof obj[i] === 'object') {\r\n        this.traverseJSONObjTree(obj[i], fn, scope.concat(i));\r\n      }\r\n    }\r\n  }\r\n\r\n  static parseStringPromise(\r\n    xml: convertableToString,\r\n    options?: OptionsV2,\r\n  ): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      if (options) {\r\n        parseString(xml, options, (err, results) => {\r\n          if (err) {\r\n            reject(err);\r\n          }\r\n\r\n          resolve(results);\r\n        });\r\n      } else {\r\n        parseString(xml, (err, results) => {\r\n          if (err) {\r\n            reject(err);\r\n          }\r\n\r\n          resolve(results);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  static getDeeplyNestedLastProp(obj: any, props: Array<string>) {\r\n    let tempObj = obj;\r\n\r\n    for (const prop of props) tempObj = tempObj[prop];\r\n\r\n    return tempObj;\r\n  }\r\n\r\n  static getExcerpt(content: string, link?: string, wordLimit = 45) {\r\n    let filter = content.replace(/\\s+/g, ' '); // You can add more filters here\r\n    let wordsArr = filter.split(' ');\r\n\r\n    if (wordsArr.length < wordLimit) {\r\n      return content;\r\n    } else {\r\n      var result = '';\r\n\r\n      for (var i = 0; i < wordLimit; i++) {\r\n        result = result + ' ' + wordsArr[i] + ' ';\r\n      }\r\n\r\n      result += ' ...';\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  static titleCase(text: string) {\r\n    return text[0].toUpperCase() + text.slice(1).toLowerCase();\r\n  }\r\n\r\n  static getJobFileContent(filePath: string, jobType: string, exePid: string) {\r\n    return `<job>\r\n    <filepath>${filePath}</filepath>\r\n    <jobtype>${jobType}</jobtype>\r\n    <exepid>${exePid}</exepid>\r\n    </job>\r\n    `;\r\n  }\r\n\r\n  static getRandomJobFileName() {\r\n    return Utilities.getRandomFileName('job');\r\n  }\r\n\r\n  static getRandomFileName(extension: string) {\r\n    return `${Utilities.getRandomId(9)}.${extension}`;\r\n  }\r\n\r\n  static clock(start?: [number, number]): [number, number] {\r\n    if (!start) return process.hrtime();\r\n    var end = process.hrtime(start);\r\n    return [Math.round(end[0] * 1000 + end[1] / 1000000), 0];\r\n  }\r\n\r\n  static getFileNameFromPath(filePath: string) {\r\n    return filePath.split('\\\\').pop().split('/').pop();\r\n  }\r\n\r\n  static getParentFolderPath(folderPath: string) {\r\n    let separator = folderPath.includes('/') ? '/' : '\\\\';\r\n    return folderPath.substring(0, folderPath.lastIndexOf(separator));\r\n  }\r\n\r\n  static async download(\r\n    sourceUrl: string,\r\n    targetFile: string,\r\n    progressCallback?: (bytesDone: number, percent: number) => void,\r\n    length?: number,\r\n  ) {\r\n    const request = new Request(sourceUrl, {\r\n      headers: new Headers({ 'Content-Type': 'application/octet-stream' }),\r\n    });\r\n\r\n    const response = await fetch(request);\r\n    if (!response.ok) {\r\n      throw Error(\r\n        `Unable to download, server returned ${response.status} ${response.statusText}`,\r\n      );\r\n    }\r\n\r\n    const body = response.body;\r\n    if (body == null) {\r\n      throw Error('No response body');\r\n    }\r\n\r\n    const finalLength =\r\n      length || parseInt(response.headers.get('Content-Length' || '0'), 10);\r\n    const reader = body.getReader();\r\n    const writer = fs.createWriteStream(targetFile);\r\n\r\n    await this.streamWithProgress(\r\n      finalLength,\r\n      reader,\r\n      writer,\r\n      progressCallback,\r\n    );\r\n    writer.end();\r\n  }\r\n\r\n  static sleep(ms: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  static async streamToString(stream: Readable) {\r\n    // lets have a ReadableStream as a stream variable\r\n    const chunks = [];\r\n\r\n    for await (const chunk of stream) {\r\n      chunks.push(Buffer.from(chunk));\r\n    }\r\n\r\n    return Buffer.concat(chunks).toString('utf-8');\r\n  }\r\n\r\n  static async streamWithProgress(\r\n    length: number,\r\n    reader: ReadableStreamReader<Uint8Array>,\r\n    writer: WriteStream,\r\n    progressCallback?: (bytesDone: number, percent: number) => void,\r\n  ) {\r\n    let bytesDone = 0;\r\n\r\n    while (true) {\r\n      // const result = await reader.read(new Uint8Array(length));\r\n      const result = await reader.read();\r\n      if (result.done) {\r\n        if (progressCallback != null) {\r\n          progressCallback(length, 100);\r\n        }\r\n        return;\r\n      }\r\n\r\n      const chunk = result.value;\r\n      if (chunk == null) {\r\n        throw Error('Empty chunk received during download');\r\n      } else {\r\n        writer.write(Buffer.from(chunk));\r\n        if (progressCallback != null) {\r\n          bytesDone += chunk.byteLength;\r\n          const percent =\r\n            length === 0 ? null : Math.floor((bytesDone / length) * 100);\r\n          progressCallback(bytesDone, percent);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static getRandomId(length: number) {\r\n    let result = '';\r\n    const characters =\r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    const charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  static async httpPost(url: string, data: {}) {\r\n    // Default options are marked with *\r\n    return fetch(url, {\r\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'same-origin', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n    });\r\n  }\r\n\r\n  static async httpGet(url: string) {\r\n    //console.log(url);\r\n    return fetch(url, { mode: 'no-cors' });\r\n  }\r\n\r\n  static async httpHead(url: string) {\r\n    console.log(`httpHead: ${url}`);\r\n    try {\r\n      // Suppress console output\r\n      const originalConsoleError = console.error;\r\n      console.error = function () {};\r\n\r\n      const response = await fetch(url, { method: 'head' });\r\n\r\n      // Restore console output\r\n      console.error = originalConsoleError;\r\n\r\n      return response;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static async urlExists(url: string) {\r\n    const response = await this.httpHead(url);\r\n    if (response) {\r\n      return response.ok;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static setCursor(htmlElement: HTMLElement, pos: number) {\r\n    // Creates range object\r\n    const setPos = document.createRange();\r\n\r\n    // Creates object for selection\r\n    var set = window.getSelection();\r\n\r\n    // Set start position of range\r\n    //setPos.setStart(htmlElement.childNodes[0], pos);\r\n    setPos.setStart(htmlElement, pos);\r\n\r\n    // Collapse range within its boundary points\r\n    // Returns boolean\r\n    setPos.collapse(true);\r\n\r\n    // Remove all ranges set\r\n    set.removeAllRanges();\r\n\r\n    // Add range with respect to range object.\r\n    set.addRange(setPos);\r\n\r\n    // Set cursor on focus\r\n    //console.log(`htmlElement: ${JSON.stringify(htmlElement.className)}`);\r\n    htmlElement.focus();\r\n  }\r\n\r\n  static isPositiveInteger(str: string) {\r\n    const num = Number(str);\r\n\r\n    if (Number.isInteger(num) && num > 0) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "TMP_DIR_PATH",
          "defaultValue": "os.tmpdir",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [126]
        },
        {
          "name": "TT_URL",
          "defaultValue": "'https://www.reportburster.com/19863306942987104-tt.php'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [126]
        },
        {
          "name": "UPG_DB_FOLDER_PATH",
          "defaultValue": "Utilities.slash(\r\n    path.resolve(`${Utilities.TMP_DIR_PATH}/upg-db`),\r\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 48,
          "modifierKind": [126]
        }
      ],
      "methods": [
        {
          "name": "basename",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "extension",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "extension",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "clock",
          "args": [
            {
              "name": "start",
              "type": "[number, number]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "",
          "typeParameters": [],
          "line": 157,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "start",
              "type": "[number, number]",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "dirname",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "download",
          "args": [
            {
              "name": "sourceUrl",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "targetFile",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "progressCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "bytesDone",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "percent",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            },
            {
              "name": "length",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "sourceUrl",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "targetFile",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "progressCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "bytesDone",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "percent",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "length",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDeeplyNestedLastProp",
          "args": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "props",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "props",
              "type": "Array<string>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getExcerpt",
          "args": [
            {
              "name": "content",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "link",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            },
            {
              "name": "wordLimit",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "45"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 117,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "content",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "link",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "wordLimit",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "45",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFileNameFromPath",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 163,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getJobFileContent",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "jobType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "exePid",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "jobType",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "exePid",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getParentFolderPath",
          "args": [
            {
              "name": "folderPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 167,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "folderPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRandomFileName",
          "args": [
            {
              "name": "extension",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 153,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "extension",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRandomId",
          "args": [
            {
              "name": "length",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 256,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "length",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getRandomJobFileName",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 149,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126]
        },
        {
          "name": "httpGet",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 285,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "httpHead",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 290,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "httpPost",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "data",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 268,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "data",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isPositiveInteger",
          "args": [
            {
              "name": "str",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 343,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "str",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isWindows",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126]
        },
        {
          "name": "looseInvalid",
          "args": [
            {
              "name": "a",
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "a",
              "type": "string | number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "parseStringPromise",
          "args": [
            {
              "name": "xml",
              "type": "convertableToString",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "options",
              "type": "OptionsV2",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "xml",
              "type": "convertableToString",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "OptionsV2",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "promisify",
          "args": [
            {
              "name": "original",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Function",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "original",
              "type": "Function",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resolve",
          "args": [
            {
              "name": "inputPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "inputPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setCursor",
          "args": [
            {
              "name": "htmlElement",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "pos",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 317,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "htmlElement",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "pos",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "slash",
          "args": [
            {
              "name": "inputPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "inputPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sleep",
          "args": [
            {
              "name": "ms",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 208,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "ms",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "streamToString",
          "args": [
            {
              "name": "stream",
              "type": "Readable",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 212,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "stream",
              "type": "Readable",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "streamWithProgress",
          "args": [
            {
              "name": "length",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "reader",
              "type": "ReadableStreamReader<Uint8Array>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "writer",
              "type": "WriteStream",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "progressCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "bytesDone",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "percent",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 223,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "length",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "reader",
              "type": "ReadableStreamReader<Uint8Array>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "writer",
              "type": "WriteStream",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "progressCallback",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "function": [
                {
                  "name": "bytesDone",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "percent",
                  "type": "number",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "titleCase",
          "args": [
            {
              "name": "text",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "text",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "traverseJSONObjTree",
          "args": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "obj",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "k",
                  "type": "string",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "v",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ]
            },
            {
              "name": "scope",
              "type": "[]",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126],
          "jsdoctags": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fn",
              "type": "function",
              "deprecated": false,
              "deprecationMessage": "",
              "function": [
                {
                  "name": "obj",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "k",
                  "type": "string",
                  "deprecated": false,
                  "deprecationMessage": ""
                },
                {
                  "name": "v",
                  "type": "any",
                  "deprecated": false,
                  "deprecationMessage": ""
                }
              ],
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "scope",
              "type": "[]",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "urlExists",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 308,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UtilitiesElectron",
      "id": "class-UtilitiesElectron-1871779317538858e03004cba8d3eb2b1c4b8b4481144e06c4f7301d04ab07d8db94427b78f5cc7b3294243f91c97c425f7a81bb4c07fc69a6c1c1e7bc81286c",
      "file": "src/app/helpers/utilities-electron.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import * as jetpack from 'fs-jetpack';\r\n\r\nexport default class UtilitiesElectron {\r\n  static renderer: Electron.IpcRenderer;\r\n\r\n  static async getBackendUrl(): Promise<string> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return UtilitiesElectron.renderer.invoke('getBackendUrl');\r\n    } else {\r\n      return 'http://localhost:9090';\r\n    }\r\n  }\r\n\r\n  static async dirAsync(\r\n    path: string,\r\n    criteria: { empty?: boolean; mode?: number | string } = { empty: false },\r\n  ): Promise<void> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      await UtilitiesElectron.renderer.invoke(\r\n        'jetpack.dirAsync',\r\n        path,\r\n        criteria,\r\n      );\r\n    } else {\r\n      await jetpack.dirAsync(path, criteria);\r\n    }\r\n  }\r\n\r\n  static async copyAsync(\r\n    from: string,\r\n    to: string,\r\n    options?: {\r\n      overwrite?:\r\n        | boolean\r\n        | ((source: any, destination: any) => boolean | Promise<boolean>);\r\n      matching?: string[];\r\n      ignoreCase?: boolean;\r\n    },\r\n  ): Promise<void> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return UtilitiesElectron.renderer.invoke(\r\n        'jetpack.copyAsync',\r\n        from,\r\n        to,\r\n        options,\r\n      );\r\n    } else return jetpack.copyAsync(from, to, options);\r\n  }\r\n\r\n  static async moveAsync(\r\n    from: string,\r\n    to: string,\r\n    options?: {\r\n      overwrite?: false;\r\n    },\r\n  ): Promise<void> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return UtilitiesElectron.renderer.invoke(\r\n        'jetpack.moveAsync',\r\n        from,\r\n        to,\r\n        options,\r\n      );\r\n    } else return jetpack.moveAsync(from, to, options);\r\n  }\r\n\r\n  static async removeAsync(path: string): Promise<void> {\r\n    if (path) {\r\n      if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n        return UtilitiesElectron.renderer.invoke('jetpack.removeAsync', path);\r\n      } else return jetpack.removeAsync(path);\r\n    }\r\n  }\r\n\r\n  static async existsAsync(filePath: string): Promise<any> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return UtilitiesElectron.renderer.invoke('jetpack.existsAsync', filePath);\r\n    } else return jetpack.existsAsync(filePath);\r\n  }\r\n\r\n  static async readAsync(filePath: string): Promise<string> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return await UtilitiesElectron.renderer.invoke(\r\n        'jetpack.readAsync',\r\n        filePath,\r\n      );\r\n    } else return jetpack.readAsync(filePath);\r\n  }\r\n\r\n  static async writeAsync(filePath: string, content: string): Promise<void> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return UtilitiesElectron.renderer.invoke(\r\n        'jetpack.writeAsync',\r\n        filePath,\r\n        content,\r\n      );\r\n    } else return jetpack.writeAsync(filePath, content);\r\n  }\r\n\r\n  static async findAsync(directory: string, options: {}): Promise<string[]> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return await UtilitiesElectron.renderer.invoke(\r\n        'jetpack.findAsync',\r\n        directory,\r\n        options,\r\n      );\r\n    } else return jetpack.findAsync(directory, options);\r\n  }\r\n\r\n  static async checkUrl(url: string): Promise<boolean> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable())\r\n      return UtilitiesElectron.renderer.invoke('checkUrl', url);\r\n\r\n    return false;\r\n  }\r\n\r\n  static async execNativeCommand(\r\n    command: string,\r\n  ): Promise<{ stdout: string; stderr: string }> {\r\n    const { stdout, stderr } = await UtilitiesElectron.renderer.invoke(\r\n      'execNativeCommand',\r\n      command,\r\n    );\r\n    //console.log(`stdout: ${stdout}`);\r\n    //console.log(`stderr: ${stderr}`);\r\n    return { stdout, stderr };\r\n  }\r\n\r\n  static async getEnvVariable(envVariableName: string): Promise<string> {\r\n    if (await UtilitiesElectron.isIpcRendererAvailable()) {\r\n      return UtilitiesElectron.renderer.invoke('process.env', envVariableName);\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  static async isIpcRendererAvailable(): Promise<boolean> {\r\n    console.log(`UtilitiesElectron.renderer = ${UtilitiesElectron.renderer}`);\r\n\r\n    if (UtilitiesElectron.renderer) {\r\n      return true;\r\n    } else {\r\n      const { ipcRenderer } = await import('electron');\r\n      console.log(`ipcRenderer = ${ipcRenderer}`);\r\n\r\n      if (ipcRenderer) {\r\n        UtilitiesElectron.renderer = ipcRenderer;\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "renderer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Electron.IpcRenderer",
          "optional": false,
          "description": "",
          "line": 4,
          "modifierKind": [126]
        }
      ],
      "methods": [
        {
          "name": "checkUrl",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "copyAsync",
          "args": [
            {
              "name": "from",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "to",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "from",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "to",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "dirAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{ empty: false }"
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "criteria",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{ empty: false }",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "execNativeCommand",
          "args": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<literal type>",
          "typeParameters": [],
          "line": 117,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "existsAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<any>",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findAsync",
          "args": [
            {
              "name": "directory",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string[]>",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "directory",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getBackendUrl",
          "args": [],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 6,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134]
        },
        {
          "name": "getEnvVariable",
          "args": [
            {
              "name": "envVariableName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "envVariableName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isIpcRendererAvailable",
          "args": [],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 137,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134]
        },
        {
          "name": "moveAsync",
          "args": [
            {
              "name": "from",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "to",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "from",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "to",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "options",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "readAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<string>",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "removeAsync",
          "args": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "path",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeAsync",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "content",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "content",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "UtilitiesNodeJs",
      "id": "class-UtilitiesNodeJs-48325931c66d2bbe167d3793a74d2d18eff2baa682b4ad818ad5fce392376736b65a2c4a189eddf9e8af5969ee51a7b0f508a0d9ad26cde4d66cf235987e0213",
      "file": "src/app/helpers/utilities-nodejs.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import urling from 'urling';\r\n\r\nexport default class UtilitiesNodeJs {\r\n  static async checkUrl(url: string): Promise<boolean> {\r\n    //console.log(`urlExists(url: string): ${url}`);\r\n\r\n    // Save the original console.info function\r\n    const originalConsoleInfo = console.info;\r\n\r\n    // Override console.info with a no-op function\r\n    console.info = () => {};\r\n\r\n    // Call the function\r\n    const options = {\r\n      url: url,\r\n      immediate: true,\r\n    };\r\n    const result = await urling(options);\r\n\r\n    // Restore the original console.info function\r\n    console.info = originalConsoleInfo;\r\n\r\n    return result == 200;\r\n  }\r\n}\r\n",
      "properties": [],
      "methods": [
        {
          "name": "checkUrl",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean>",
          "typeParameters": [],
          "line": 4,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [126, 134],
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "WebSocketEndpoint",
      "id": "class-WebSocketEndpoint-c9aa12b485a42242a2fafa274b86d1dca2333fee4930e2e5e91f4fbdbf3b96b84c0c998912be934d1dc16a16ac8d2de2280f32aaf99568c69faa7573d1772c34",
      "file": "src/app/helpers/websocket-endpoint.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Observable, Subscriber } from 'rxjs';\r\n\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport * as SockJS from 'sockjs-client';\r\nimport Utilities from './utilities';\r\nimport UtilitiesElectron from './utilities-electron';\r\n\r\nexport class WebSocketEndpoint {\r\n  BACKEND_URL = '';\r\n\r\n  _options: SocketOptions;\r\n\r\n  _socket: SocketEndpoint = new SocketEndpoint();\r\n\r\n  observableStompConnection!: Observable<any>;\r\n  subscribers: Array<any> = [];\r\n  subscriberIndex: number = 0;\r\n\r\n  _messageIds: Array<any> = [];\r\n\r\n  reconnectionPromise: any;\r\n\r\n  constructor() {}\r\n\r\n  async makeWSConnection(options: SocketOptions) {\r\n    this._options = options;\r\n    this.createObservableSocket();\r\n    return this.connect();\r\n  }\r\n\r\n  //TO BE OVERIDDEN\r\n  getOptions = () => {\r\n    return {};\r\n  };\r\n\r\n  private createObservableSocket = () => {\r\n    this.observableStompConnection = new Observable((observer) => {\r\n      const subscriberIndex = this.subscriberIndex++;\r\n      this.addToSubscribers({ index: subscriberIndex, observer });\r\n      return () => this.removeFromSubscribers(subscriberIndex);\r\n    });\r\n  };\r\n\r\n  addToSubscribers = (subscriber: {\r\n    index: number;\r\n    observer: Subscriber<any>;\r\n  }) => {\r\n    this.subscribers.push(subscriber);\r\n  };\r\n\r\n  removeFromSubscribers = (index: number) => {\r\n    if (index > this.subscribers.length)\r\n      throw new Error(\r\n        `Unexpected error removing subscriber from websocket, because index ${index} is greater than subscriber length ${this.subscribers.length}`,\r\n      );\r\n    this.subscribers.splice(index, 1);\r\n  };\r\n\r\n  getObservable = () => {\r\n    return this.observableStompConnection;\r\n  };\r\n\r\n  getMessage = (data: { body: string; headers: { [x: string]: any } }) => {\r\n    let out: any = {};\r\n    out.type = 'SUCCESS';\r\n    out.message = JSON.parse(data.body);\r\n    out.headers = {};\r\n    out.headers.messageId = data.headers['message-id'];\r\n\r\n    let messageIdIndex = this._messageIds.indexOf(out.headers.messageId);\r\n    if (messageIdIndex > -1) {\r\n      out.self = true;\r\n      this._messageIds = this._messageIds.splice(messageIdIndex, 1);\r\n    }\r\n    return out;\r\n  };\r\n\r\n  //_socketListener = (frame: string) => {\r\n  _socketListener = () => {\r\n    //console.log('WebSocket Connected: ' + frame);\r\n    console.log('WebSocket Connected');\r\n\r\n    this._socket.stomp.subscribe(this._options.topicName, (data: any) =>\r\n      this.subscribers.forEach((subscriber) =>\r\n        subscriber.observer.next(this.getMessage(data)),\r\n      ),\r\n    );\r\n  };\r\n\r\n  _onSocketError = (errorMsg: any) => {\r\n    console.log(`WebSocket _onSocketError ${errorMsg}`);\r\n\r\n    let out: any = {};\r\n    out.type = 'ERROR';\r\n    out.message = errorMsg;\r\n    this.subscribers.forEach((subscriber) => subscriber.observer.error(out));\r\n    this.scheduleReconnection();\r\n  };\r\n\r\n  scheduleReconnection = () => {\r\n    this.reconnectionPromise = setTimeout(() => {\r\n      console.log(\r\n        'Socket reconnecting... (if it fails, next attempt in ' +\r\n          this._options.reconnectionTimeout +\r\n          ' msec)',\r\n      );\r\n      this.connect();\r\n    }, this._options.reconnectionTimeout);\r\n  };\r\n\r\n  reconnectNow = function (this: WebSocketEndpoint) {\r\n    this._socket.stomp.disconnect();\r\n    if (this.reconnectionPromise && this.reconnectionPromise.cancel)\r\n      this.reconnectionPromise.cancel();\r\n    this.connect();\r\n  };\r\n\r\n  send = (message: any) => {\r\n    var id = Math.floor(Math.random() * 1000000);\r\n    this._socket.stomp.send(\r\n      this._options.brokerName,\r\n      {\r\n        priority: 9,\r\n      },\r\n      JSON.stringify({\r\n        message: message,\r\n        id: id,\r\n      }),\r\n    );\r\n    this._messageIds.push(id);\r\n  };\r\n\r\n  connect = async () => {\r\n    const headers = {};\r\n\r\n    if (!this.BACKEND_URL)\r\n      this.BACKEND_URL = await UtilitiesElectron.getBackendUrl();\r\n    let socketUrl = this.BACKEND_URL + this._options.socketUrl;\r\n    if (this._options.getAccessToken())\r\n      socketUrl += `?access_token=${this._options.getAccessToken()}`;\r\n\r\n    this._socket.client = new SockJS(socketUrl);\r\n\r\n    //console.log(`socketUrl = ${socketUrl}`);\r\n\r\n    this._socket.client.discardWebsocketOnCommFailure = true;\r\n    this._socket.client.connectionTimeout = 500;\r\n\r\n    this._socket.stomp = Stomp.over(this._socket.client);\r\n\r\n    //disable logging\r\n    this._socket.stomp.debug = () => {};\r\n\r\n    this._socket.stomp.onclose = this.scheduleReconnection;\r\n\r\n    return new Promise<void>((resolve, reject) => {\r\n      this._socket.stomp.connect(\r\n        headers,\r\n        async () => {\r\n          await Utilities.sleep(100);\r\n          this._socketListener();\r\n          resolve();\r\n        },\r\n        (error) => {\r\n          this._onSocketError(error);\r\n          reject(error);\r\n        },\r\n      );\r\n    });\r\n  };\r\n}\r\n\r\nclass SocketEndpoint {\r\n  client: any;\r\n  stomp: any;\r\n}\r\n\r\nexport class SocketOptions {\r\n  socketUrl: string;\r\n  topicName: string;\r\n  brokerName: string;\r\n  reconnectionTimeout: number = 30000;\r\n\r\n  getAccessToken: Function = () => null;\r\n\r\n  constructor(\r\n    socketUrl: string,\r\n    topicName: string,\r\n    getAccessToken?: Function,\r\n    brokerName = '',\r\n    reconnectionTimeout: number = 30000,\r\n  ) {\r\n    this.socketUrl = socketUrl;\r\n    this.topicName = topicName;\r\n    this.brokerName = brokerName;\r\n    this.reconnectionTimeout = reconnectionTimeout;\r\n    this.getAccessToken = getAccessToken || (() => null);\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 21
      },
      "properties": [
        {
          "name": "_messageIds",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "_onSocketError",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90
        },
        {
          "name": "_options",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SocketOptions",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "_socket",
          "defaultValue": "new SocketEndpoint()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "SocketEndpoint",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "_socketListener",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 79
        },
        {
          "name": "addToSubscribers",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "BACKEND_URL",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "connect",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 133
        },
        {
          "name": "createObservableSocket",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [123]
        },
        {
          "name": "getMessage",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "getObservable",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 59
        },
        {
          "name": "getOptions",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "observableStompConnection",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any>",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "reconnectionPromise",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "reconnectNow",
          "defaultValue": "function (this: WebSocketEndpoint) {\r\n    this._socket.stomp.disconnect();\r\n    if (this.reconnectionPromise && this.reconnectionPromise.cancel)\r\n      this.reconnectionPromise.cancel();\r\n    this.connect();\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 111
        },
        {
          "name": "removeFromSubscribers",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "scheduleReconnection",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 100
        },
        {
          "name": "send",
          "defaultValue": "() => {...}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 118
        },
        {
          "name": "subscriberIndex",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "subscribers",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<any>",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methods": [
        {
          "name": "makeWSConnection",
          "args": [
            {
              "name": "options",
              "type": "SocketOptions",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "options",
              "type": "SocketOptions",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-a836ed0da80a2ee2694d00cd0f3d278eea55f454efd0849175b5afadc533d8a8c149baa653f387303a3afc73e9db910a67eb78448ddc5850f81bdc3cd97fc4fd",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { setTheme } from 'ngx-bootstrap/utils';\r\nimport { ElectronService } from './core/services';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor(\r\n    protected electronService: ElectronService,\r\n    protected translate: TranslateService,\r\n  ) {\r\n    setTheme('bs3'); // or 'bs4'\r\n\r\n    this.translate.setDefaultLang('en');\r\n\r\n    if (this.electronService.isElectron) {\r\n      new this.electronService.cet.Titlebar({\r\n        backgroundColor: this.electronService.cet.Color.fromHex('#FFF'),\r\n        menu: null,\r\n        maximizable: false,\r\n        shadow: true,\r\n        icon: null,\r\n      });\r\n    } else {\r\n      //console.log('Run in browser');\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host {\r\n  \r\n}",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "translate",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<!--<div id=\"electron-titlebar\" class=\"drag\" style=\"top:-25px;\"></div>\r\n<div class=\"wrapper\" style=\"margin-top:25px\">-->\r\n\r\n<div class=\"wrapper\">\r\n  <dburst-areas></dburst-areas>\r\n</div>\r\n"
    },
    {
      "name": "AreasComponent",
      "id": "component-AreasComponent-cc271216e30d7e339cfd3dcc6c327e2ed8b919c5cd1d5b3feb3a1c71c7e34334264f944ea94dd809bbf9b0db1a23c2a1a38cd3ee5657aad3341fc9987cdb7582",
      "file": "src/app/areas/areas.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-areas",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./areas.template.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'dburst-areas',\r\n  templateUrl: './areas.template.html',\r\n})\r\nexport class AreasComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 7
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<dburst-top-menu-header> </dburst-top-menu-header>\r\n\r\n<div>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<div id=\"statusBar\">\r\n  <dburst-status-bar></dburst-status-bar>\r\n</div>\r\n"
    },
    {
      "name": "AskForFeatureDialogComponent",
      "id": "component-AskForFeatureDialogComponent-83a408f061a72252dc39bd8c39b7d95ebed017dd6c556ad530c9428e480da65e840f4782882a7e08835fabc1acc7a29462f69aecf30665a67fa39377a163a2e7",
      "file": "src/app/components/ask-for-feature/ask-for-feature-dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-ask-for-feature-dialog",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "confirmLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "msgMessage",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "msgSubject",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "msgTo",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "onClose",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "methodsClass": [
        {
          "name": "confirm",
          "args": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { Subject } from 'rxjs';\r\nimport { askForFeatureDialogTemplate } from './ask-for-feature-dialog.template';\r\nimport { ConfirmService } from '../dialog-confirm/confirm.service';\r\nimport Utilities from '../../helpers/utilities';\r\nimport { ShellService } from '../../providers/shell.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { FsService } from '../../providers/fs.service';\r\n\r\n@Component({\r\n  selector: 'dburst-ask-for-feature-dialog',\r\n  template: `${askForFeatureDialogTemplate}`,\r\n})\r\nexport class AskForFeatureDialogComponent implements OnInit {\r\n  onClose: Subject<boolean>;\r\n  title: string;\r\n\r\n  msgTo: string;\r\n  msgSubject: string;\r\n  msgMessage: string;\r\n\r\n  confirmLabel: string;\r\n\r\n  constructor(\r\n    protected bsModalRef: BsModalRef,\r\n    protected settingsService: SettingsService,\r\n    protected confirmService: ConfirmService,\r\n    protected fsService: FsService,\r\n    protected shellService: ShellService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.onClose = new Subject();\r\n  }\r\n\r\n  async confirm(action?: string) {\r\n    if (action == 'send-message') {\r\n      let xmlAskForFeatureFilePath = `${\r\n        this.settingsService.JOBS_FOLDER_PATH\r\n      }/${Utilities.getRandomFileName('xml')}`;\r\n\r\n      xmlAskForFeatureFilePath = Utilities.slash(\r\n        await this.fsService.resolveAsync(xmlAskForFeatureFilePath),\r\n      );\r\n\r\n      await this.settingsService.saveSettingsFileAsync(\r\n        xmlAskForFeatureFilePath,\r\n        {\r\n          documentburster: {\r\n            featurerequest: {\r\n              subject: this.msgSubject,\r\n              message: this.msgMessage,\r\n            },\r\n          },\r\n        },\r\n      );\r\n\r\n      this.shellService.runBatFile(['-rnf', `\"${xmlAskForFeatureFilePath}\"`]);\r\n    } else if (action == 'configure-email-properly') {\r\n      this.router.navigate(['/ext-connections']);\r\n    }\r\n\r\n    this.onClose?.next(true);\r\n    this.bsModalRef.hide();\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "bsModalRef",
            "type": "BsModalRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "bsModalRef",
            "type": "BsModalRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "BrandComponent",
      "id": "component-BrandComponent-853d3f891f1fc347e991e02a5637cbc780d23be74576240ba663752907b763a1d6aea54ff1e4dd995f42bf7ac8d24ce18fbcac0dcfa4d09a88436d4f32bd4576",
      "file": "src/app/components/brand/brand.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "rb-brand",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./brand.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'rb-brand',\r\n  templateUrl: './brand.component.html',\r\n})\r\nexport class BrandComponent {}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "templateData": "<!-- logo for regular state and mobile devices -->\r\n<span class=\"logo-lg\">\r\n  <strong>Report</strong><em>Burster</em>&nbsp;\r\n  <i class=\"fa fa-paper-plane-o\"></i>\r\n</span>\r\n"
    },
    {
      "name": "ButtonClearLogsComponent",
      "id": "component-ButtonClearLogsComponent-ebe2385b868818b6c1372b3ed8a75176838890cdf6bd263fc69a942122321c1b11b2410297aa2482d6f12a5fdbc4a419b0a88a562e1ea1c7072efdb7034c818f",
      "file": "src/app/components/button-clear-logs/button-clear-logs.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-button-clear-logs",
      "styleUrls": [],
      "styles": [":host {display: inline-block; width: 100%}"],
      "templateUrl": ["./button-clear-logs.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "name": "question",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\nimport { ConfirmService } from '../dialog-confirm/confirm.service';\r\nimport { LogsServiceWebSocket } from '../../providers/ws-logs.service';\r\nimport { ToastrMessagesService } from '../../providers/toastr-messages.service';\r\n\r\n@Component({\r\n  selector: 'dburst-button-clear-logs',\r\n  templateUrl: './button-clear-logs.component.html',\r\n  styles: [':host {display: inline-block; width: 100%}'],\r\n})\r\nexport class ButtonClearLogsComponent {\r\n  @Input() id: string;\r\n  @Input() value: string;\r\n  @Input() title: string;\r\n  @Input() question: string;\r\n\r\n  constructor(\r\n    protected logsService: LogsServiceWebSocket,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected confirmService: ConfirmService,\r\n    protected messagesService: ToastrMessagesService,\r\n  ) {}\r\n\r\n  onClick() {\r\n    const dialogQuestion = this.question ? this.question : 'Clear log files?';\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        await this.logsService.clearLogs();\r\n        this.executionStatsService.logStats.foundDirtyLogFiles = false;\r\n        this.messagesService.showInfo('Logs cleared.');\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ":host {display: inline-block; width: 100%}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "logsService",
            "type": "LogsServiceWebSocket",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "logsService",
            "type": "LogsServiceWebSocket",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<button\r\n  id=\"{{ id || 'btnClearLogs' }}\"\r\n  type=\"button\"\r\n  class=\"btn btn-default btn-block\"\r\n  (click)=\"onClick()\"\r\n  [disabled]=\"\r\n    executionStatsService.jobStats.numberOfActiveJobs > 0 ||\r\n    !executionStatsService.logStats.foundDirtyLogFiles\r\n  \"\r\n>\r\n  <i class=\"fa fa-file-o\"></i>&nbsp;{{\r\n    value || \"COMPONENTS.BUTTON-CLEAR-LOGS.CLEAR-LOGS\" | translate\r\n  }}\r\n</button>\r\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-86e2311c54fbca7431c12e070d0fd5b0ebe343eec0553a392f182ba0e04a8f86613233d26ee47718fd0e7a65078f580c76a1fcc928ce55de81193d6618025bc4",
      "file": "src/stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": ["./button.css"],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWhat background color to use\n",
          "description": "<p>What background color to use</p>\n",
          "line": 29,
          "type": "string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 798,
              "end": 811,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 334,
              "tagName": {
                "pos": 799,
                "end": 807,
                "flags": 16842752,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 80,
                "escapedText": "required"
              },
              "comment": ""
            }
          ],
          "rawdescription": "\n\nButton contents\n\n",
          "description": "<p>Button contents</p>\n",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIs this the principal call to action on the page?\n",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHow large should the button be?\n",
          "description": "<p>How large should the button be?</p>\n",
          "line": 35,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOptional click handler\n",
          "description": "<p>Optional click handler</p>\n",
          "line": 49,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "extends": [],
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 51
          }
        }
      }
    },
    {
      "name": "ButtonHtmlPreviewComponent",
      "id": "component-ButtonHtmlPreviewComponent-05ce74261d72b4aac3abaa86758f337300566abe9e9c0aac3c27e1bfaacdda43ce3ccdd378ff6e215fdf0307dbb2e4f0c147f434425d2f8d1d91a636176a4f59",
      "file": "src/app/components/button-html-preview/button-html-preview.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-button-html-preview",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "htmlCode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isModalHtmlPreviewVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [124]
        }
      ],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onCloseModal",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { modalHtmlPreviewTemplate } from './modal-html-preview.template';\r\n\r\n@Component({\r\n  selector: 'dburst-button-html-preview',\r\n  template: `\r\n    <button\r\n      type=\"button\"\r\n      id=\"btnHtmlEmailPreview\"\r\n      class=\"btn\"\r\n      (click)=\"onClick()\"\r\n      style=\"margin-top: 100px; margin-bottom: 50px; width: 100%;\"\r\n    >\r\n      <i class=\"fa fa-eye\"></i> Preview\r\n    </button>\r\n    ${modalHtmlPreviewTemplate}\r\n  `,\r\n})\r\nexport class ButtonHtmlPreviewComponent {\r\n  @Input() htmlCode: string;\r\n\r\n  protected isModalHtmlPreviewVisible = false;\r\n\r\n  constructor() {}\r\n\r\n  onClick() {\r\n    this.isModalHtmlPreviewVisible = true;\r\n  }\r\n\r\n  onCloseModal() {\r\n    this.isModalHtmlPreviewVisible = false;\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 22
      },
      "extends": []
    },
    {
      "name": "ButtonNativeFsDialogComponent",
      "id": "component-ButtonNativeFsDialogComponent-a972662711265e672ef1fa1f1e8eebcf9ef93ec386d343fd64de8b5e3e8d83f0cc87e5f03b378c7849559391d9d2e802c196c682d206f8163d2dbf84bc81bf75",
      "file": "src/app/components/button-native-fs-dialog/button-native-fs-dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-button-native-fs-dialog",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./button-native-fs-dialog.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "btnId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "string",
          "decorators": []
        },
        {
          "name": "defaultPath",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        },
        {
          "name": "dialogTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "dialogType",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "name": "saveDialog",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string",
          "decorators": []
        },
        {
          "name": "style",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "pathsSelected",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ElectronService } from '../../core/services';\r\n\r\n@Component({\r\n  selector: 'dburst-button-native-fs-dialog',\r\n  templateUrl: './button-native-fs-dialog.component.html',\r\n})\r\nexport class ButtonNativeFsDialogComponent {\r\n  @Input() btnId: string;\r\n  @Input() style: string;\r\n\r\n  @Input() value: string;\r\n  @Input() saveDialog: string;\r\n\r\n  @Input() defaultPath: string;\r\n\r\n  @Input() dialogType: string;\r\n  @Input() dialogTitle: string;\r\n\r\n  @Output() pathsSelected: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(protected electronService: ElectronService) {}\r\n\r\n  async onClick() {\r\n    let options: any;\r\n\r\n    if (!this.saveDialog) {\r\n      options = {\r\n        title:\r\n          this.dialogTitle ||\r\n          'Select ' + (this.dialogType === 'folder' ? 'Folder' : 'File'),\r\n        defaultPath: this.defaultPath || 'C:/Users/username/Desktop/test/',\r\n        buttonLabel: this.value,\r\n        properties: [\r\n          this.dialogType === 'folder' ? 'openDirectory' : 'openFile',\r\n          this.dialogType === 'files' ? 'multiSelections' : null,\r\n        ],\r\n      };\r\n    } else {\r\n      options = {\r\n        title:\r\n          this.dialogTitle ||\r\n          'Select ' + (this.dialogType === 'folder' ? 'Folder' : 'File'),\r\n        defaultPath: this.defaultPath || 'C:/Users/username/Desktop/test/',\r\n        buttonLabel: this.value,\r\n      };\r\n    }\r\n\r\n    /*\r\n    console.log(\r\n      `this.electronService.PORTABLE_EXECUTABLE_DIR: ${this.electronService.PORTABLE_EXECUTABLE_DIR}`\r\n    );\r\n\r\n    console.log(\r\n      `this.electronService.SHOULD_SEND_STATS: ${this.electronService.SHOULD_SEND_STATS}`\r\n    );\r\n\r\n    console.log(\r\n      `this.electronService.RUNNING_IN_E2E: ${this.electronService.RUNNING_IN_E2E}`\r\n    );\r\n     */\r\n\r\n    if (this.electronService.RUNNING_IN_E2E) {\r\n      this.pathsSelected.emit('');\r\n    } else {\r\n      let paths: string[];\r\n      if (this.saveDialog) {\r\n        paths[0] = (\r\n          await this.electronService.dialog.showSaveDialog(options)\r\n        ).filePath;\r\n        this.pathsSelected.emit(paths[0]);\r\n      } else {\r\n        paths = (await this.electronService.dialog.showOpenDialog(options))\r\n          .filePaths;\r\n        if (this.dialogType === 'files') {\r\n          this.pathsSelected.emit(paths);\r\n        } else {\r\n          this.pathsSelected.emit(paths[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<button\r\n  id=\"{{ btnId }}\"\r\n  type=\"button\"\r\n  class=\"btn\"\r\n  (click)=\"onClick()\"\r\n  style=\"margin-bottom: 5px; width: 100%\"\r\n>\r\n  <i class=\"fa fa-{{ saveDialog ? 'floppy-o' : 'folder-open-o' }}\"></i>\r\n  {{ value || \"Select\" }}\r\n</button>\r\n"
    },
    {
      "name": "ButtonNativeSystemDialogComponent",
      "id": "component-ButtonNativeSystemDialogComponent-5962217cfccfb50b3dcda96a970c79ad354957b6b5a646020afe8420640a349ecb231be3956c6accd2d4a0730b9d5938bf1717a6df1e1ccc03ca000dc0d1a066",
      "file": "src/app/components/button-native-system-dialog/button-native-system-dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-button-native-system-dialog",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./button-native-system-dialog.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "btnId",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 9,
          "type": "string",
          "decorators": []
        },
        {
          "name": "defaultPath",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        },
        {
          "name": "dialogTitle",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "dialogType",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "name": "saveDialog",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string",
          "decorators": []
        },
        {
          "name": "style",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "pathsSelected",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "EventEmitter<any>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ElectronService } from '../../core/services';\r\n\r\n@Component({\r\n  selector: 'dburst-button-native-system-dialog',\r\n  templateUrl: './button-native-system-dialog.component.html',\r\n})\r\nexport class ButtonNativeSystemDialogComponent {\r\n  @Input() btnId: string;\r\n  @Input() style: string;\r\n\r\n  @Input() value: string;\r\n  @Input() saveDialog: string;\r\n\r\n  @Input() defaultPath: string;\r\n\r\n  @Input() dialogType: string;\r\n  @Input() dialogTitle: string;\r\n\r\n  @Output() pathsSelected: EventEmitter<any> = new EventEmitter();\r\n\r\n  constructor(protected electronService: ElectronService) {}\r\n\r\n  async onClick() {\r\n    let options: any;\r\n\r\n    if (!this.saveDialog) {\r\n      options = {\r\n        title:\r\n          this.dialogTitle ||\r\n          'Select ' + (this.dialogType === 'folder' ? 'Folder' : 'File'),\r\n        defaultPath: this.defaultPath || 'C:/Users/username/Desktop/test/',\r\n        buttonLabel: this.value,\r\n        properties: [\r\n          this.dialogType === 'folder' ? 'openDirectory' : 'openFile',\r\n          this.dialogType === 'files' ? 'multiSelections' : null,\r\n        ],\r\n      };\r\n    } else {\r\n      options = {\r\n        title:\r\n          this.dialogTitle ||\r\n          'Select ' + (this.dialogType === 'folder' ? 'Folder' : 'File'),\r\n        defaultPath: this.defaultPath || 'C:/Users/username/Desktop/test/',\r\n        buttonLabel: this.value,\r\n      };\r\n    }\r\n\r\n    /*\r\n    console.log(\r\n      `this.electronService.PORTABLE_EXECUTABLE_DIR: ${this.electronService.PORTABLE_EXECUTABLE_DIR}`\r\n    );\r\n\r\n    console.log(\r\n      `this.electronService.SHOULD_SEND_STATS: ${this.electronService.SHOULD_SEND_STATS}`\r\n    );\r\n\r\n    console.log(\r\n      `this.electronService.RUNNING_IN_E2E: ${this.electronService.RUNNING_IN_E2E}`\r\n    );\r\n     */\r\n\r\n    if (this.electronService.RUNNING_IN_E2E) {\r\n      this.pathsSelected.emit('');\r\n    } else {\r\n      let paths: string[];\r\n      if (this.saveDialog) {\r\n        paths[0] = (\r\n          await this.electronService.dialog.showSaveDialog(options)\r\n        ).filePath;\r\n        this.pathsSelected.emit(paths[0]);\r\n      } else {\r\n        paths = (await this.electronService.dialog.showOpenDialog(options))\r\n          .filePaths;\r\n        if (this.dialogType === 'files') {\r\n          this.pathsSelected.emit(paths);\r\n        } else {\r\n          this.pathsSelected.emit(paths[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<button\r\n  id=\"{{ btnId }}\"\r\n  type=\"button\"\r\n  class=\"btn\"\r\n  (click)=\"onClick()\"\r\n  style=\"margin-bottom: 5px; width: 100%\"\r\n>\r\n  <i class=\"fa fa-{{ saveDialog ? 'floppy-o' : 'folder-open-o' }}\"></i>\r\n  {{ value || \"Select\" }}\r\n</button>\r\n"
    },
    {
      "name": "ButtonVariablesComponent",
      "id": "component-ButtonVariablesComponent-1bd3329c2f7d9b9016d9e80a22725018a03c58446457a5dd52408d91d227642bed1f48dbb899b177a8143d48e5504df4434ffb7631449739babe1c35365f0e6a",
      "file": "src/app/components/button-variables/button-variables.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-button-variables",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "shouldBeDisabled",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "sendSelectedVariable",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "EventEmitter<string>"
        }
      ],
      "propertiesClass": [
        {
          "name": "builtInVariables",
          "defaultValue": "[\r\n    {\r\n      name: '${input_document_name}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${input_document_extension}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${output_type_extension}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${burst_token}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${burst_index}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now?string[\"yyyy.MM.dd_HH.mm.ss\"]}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_default_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_short_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_medium_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_long_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_full_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_quarter}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${extracted_file_path}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${extracted_file_paths_after_splitting_2nd_time}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "isModalVariablesVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "showMoreCheckBoxValue",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "variables",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<literal type>",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methodsClass": [
        {
          "name": "getAllUserVariables",
          "args": [],
          "optional": false,
          "returnType": "{}",
          "typeParameters": [],
          "line": 118,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getSelectedVariable",
          "args": [],
          "optional": false,
          "returnType": "literal type",
          "typeParameters": [],
          "line": 167,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getShortListUserVariables",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getVariables",
          "args": [],
          "optional": false,
          "returnType": "Array<any>",
          "typeParameters": [],
          "line": 143,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalClose",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 187,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalOK",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 191,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalShow",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 181,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onShowMore",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 147,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onVariableClick",
          "args": [
            {
              "name": "variable",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 161,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "variable",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Output, EventEmitter, Input, OnInit } from '@angular/core';\r\n\r\nimport { modalVariablesTemplate } from './modal-variables.template';\r\nimport { StateStoreService } from '../../providers/state-store.service';\r\n\r\n@Component({\r\n  selector: 'dburst-button-variables',\r\n  template: `\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn\"\r\n      (click)=\"onModalShow()\"\r\n      style=\"width: 100%;padding-left:6px\"\r\n      [disabled]=\"shouldBeDisabled\"\r\n    >\r\n      <i class=\"fa fa-list-ol\"></i>&nbsp;Variables&nbsp;\r\n    </button>\r\n    ${modalVariablesTemplate}\r\n  `,\r\n})\r\nexport class ButtonVariablesComponent {\r\n  isModalVariablesVisible = false;\r\n  showMoreCheckBoxValue = false;\r\n\r\n  variables: Array<{ name: string; type: string; active: boolean }>;\r\n\r\n  @Input() shouldBeDisabled: boolean = false;\r\n  @Output() sendSelectedVariable: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor(protected stateStore: StateStoreService) {}\r\n\r\n  builtInVariables = [\r\n    {\r\n      name: '${input_document_name}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${input_document_extension}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${output_type_extension}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${burst_token}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${burst_index}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now?string[\"yyyy.MM.dd_HH.mm.ss\"]}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_default_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_short_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_medium_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_long_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_full_date}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${now_quarter}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${extracted_file_path}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n    {\r\n      name: '${extracted_file_paths_after_splitting_2nd_time}',\r\n      type: 'built-in',\r\n      active: false,\r\n    },\r\n  ];\r\n\r\n  getShortListUserVariables() {\r\n    if (\r\n      this.stateStore.configSys.currentConfigFile.configuration.settings\r\n        .numberofuservariables <= 5\r\n    ) {\r\n      return this.getAllUserVariables();\r\n    } else {\r\n      return this.getAllUserVariables().filter((variable) => {\r\n        return ['${var0}', '${var1}', '${var2}'].includes(variable.name);\r\n      });\r\n    }\r\n  }\r\n\r\n  getAllUserVariables() {\r\n    const allUserVariables = [];\r\n\r\n    //console.log(\r\n    //  `this.numberOfUserVariables = ${this.stateStore.configSys.currentConfigFile.configuration.settings.numberofuservariables}`,\r\n    //);\r\n\r\n    for (\r\n      let i = 0;\r\n      i <\r\n      this.stateStore.configSys.currentConfigFile.configuration.settings\r\n        .numberofuservariables;\r\n      i++\r\n    ) {\r\n      allUserVariables.push({\r\n        name: '${var' + i + '}',\r\n        type: 'user-defined',\r\n        active: false,\r\n      });\r\n    }\r\n\r\n    //console.log(`allUserVariables = ${JSON.stringify(allUserVariables)}`);\r\n    return allUserVariables;\r\n  }\r\n\r\n  getVariables(): Array<any> {\r\n    return this.builtInVariables.concat(this.getAllUserVariables());\r\n  }\r\n\r\n  onShowMore() {\r\n    if (this.showMoreCheckBoxValue) {\r\n      this.variables = this.builtInVariables.concat(this.getAllUserVariables());\r\n    } else {\r\n      this.variables = this.builtInVariables.concat(\r\n        this.getShortListUserVariables(),\r\n      );\r\n    }\r\n\r\n    //console.log(\r\n    //  `onShowMore() - this.variables = ${JSON.stringify(this.variables)}`,\r\n    //);\r\n  }\r\n\r\n  onVariableClick(variable) {\r\n    this.variables.forEach((element) => {\r\n      element.active = element.name === variable.name ? true : false;\r\n    });\r\n  }\r\n\r\n  getSelectedVariable(): {\r\n    name: string;\r\n    type: string;\r\n    active: boolean;\r\n  } {\r\n    if (!this.variables) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.variables.find((variable) => {\r\n      return variable.active;\r\n    });\r\n  }\r\n\r\n  onModalShow() {\r\n    this.onShowMore();\r\n\r\n    this.isModalVariablesVisible = true;\r\n  }\r\n\r\n  onModalClose() {\r\n    this.isModalVariablesVisible = false;\r\n  }\r\n\r\n  onModalOK() {\r\n    this.sendSelectedVariable.emit(this.getSelectedVariable().name);\r\n    this.isModalVariablesVisible = false;\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "stateStore",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 28,
        "jsdoctags": [
          {
            "name": "stateStore",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": []
    },
    {
      "name": "ButtonWellKnownEmailProvidersComponent",
      "id": "component-ButtonWellKnownEmailProvidersComponent-276aad8a378b2376c3d8b1f092e5582f078f155f3b63502b8069c133388e843169f4d096a143be5f45cb2b87082b6bdc11a6e2c87003c324320b82b47edd19eb",
      "file": "src/app/components/button-well-known/button-well-known.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-button-well-known-email-providers",
      "styleUrls": [],
      "styles": [
        ":host #btnWellKnownEmailProviders {display: inline-block; width: 100%}"
      ],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "sendSelectedProvider",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "EventEmitter<EmailProviderSettings>"
        }
      ],
      "propertiesClass": [
        {
          "name": "isModalWellKnownVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "providers",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<literal type>",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "showMoreCheckBoxValue",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 34
        }
      ],
      "methodsClass": [
        {
          "name": "getAllWellKnownEmailProviders",
          "args": [],
          "optional": false,
          "returnType": "Array<any>",
          "typeParameters": [],
          "line": 64,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getSelectedProvider",
          "args": [],
          "optional": false,
          "returnType": "literal type",
          "typeParameters": [],
          "line": 82,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getShortListWellKnownEmailProviders",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalClose",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 110,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalOK",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalShow",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onProviderClick",
          "args": [
            {
              "name": "provider",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "provider",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onShowMore",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\r\n\r\nimport * as allWellKnownEmailProviders from 'nodemailer-wellknown/services.json';\r\n\r\nimport { modalWellKnownTemplate } from './modal-well-known.template';\r\n\r\nexport type EmailProviderSettings = {\r\n  host: string;\r\n  port: string;\r\n  secure: boolean;\r\n  tls: {};\r\n};\r\n\r\n@Component({\r\n  selector: 'dburst-button-well-known-email-providers',\r\n  template: `\r\n    <button\r\n      id=\"btnWellKnownEmailProviders\"\r\n      type=\"button\"\r\n      class=\"btn btn-block\"\r\n      (click)=\"onModalShow()\"\r\n    >\r\n      <span class=\"glyphicon glyphicon-cloud-upload\"></span>&nbsp;&nbsp;Load\r\n      SMTP Settings for Well-Known Email Providers\r\n    </button>\r\n    ${modalWellKnownTemplate}\r\n  `,\r\n  styles: [\r\n    ':host #btnWellKnownEmailProviders {display: inline-block; width: 100%}',\r\n  ],\r\n})\r\nexport class ButtonWellKnownEmailProvidersComponent {\r\n  isModalWellKnownVisible = false;\r\n  showMoreCheckBoxValue = false;\r\n\r\n  providers: Array<{\r\n    name: string;\r\n    type: string;\r\n    settings: EmailProviderSettings;\r\n    active: boolean;\r\n  }>;\r\n\r\n  @Output() sendSelectedProvider: EventEmitter<EmailProviderSettings> =\r\n    new EventEmitter();\r\n\r\n  getShortListWellKnownEmailProviders() {\r\n    return this.getAllWellKnownEmailProviders().filter((provider) => {\r\n      return [\r\n        'Outlook365',\r\n        'Gmail',\r\n        'SES',\r\n        'SES-US-EAST-1',\r\n        'SES-US-WEST-2',\r\n        'SES-EU-WEST-1',\r\n        'Mailgun',\r\n        'Mandrill',\r\n        'SendGrid',\r\n        'Sparkpost',\r\n        'Zoho',\r\n      ].includes(provider.name);\r\n    });\r\n  }\r\n\r\n  getAllWellKnownEmailProviders(): Array<any> {\r\n    return Object.keys(allWellKnownEmailProviders).map((value) => {\r\n      return {\r\n        name: value,\r\n        settings: allWellKnownEmailProviders[value],\r\n        active: false,\r\n      };\r\n    });\r\n  }\r\n\r\n  onProviderClick(provider) {\r\n    if (this.providers) {\r\n      this.providers.forEach((element) => {\r\n        element.active = element.name === provider.name ? true : false;\r\n      });\r\n    }\r\n  }\r\n\r\n  getSelectedProvider(): {\r\n    name: string;\r\n    type: string;\r\n    settings: EmailProviderSettings;\r\n    active: boolean;\r\n  } {\r\n    if (!this.providers) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.providers.find((provider) => {\r\n      return provider.active;\r\n    });\r\n  }\r\n\r\n  onShowMore() {\r\n    if (this.showMoreCheckBoxValue) {\r\n      this.providers = this.getAllWellKnownEmailProviders();\r\n    } else {\r\n      this.providers = this.getShortListWellKnownEmailProviders();\r\n    }\r\n  }\r\n\r\n  onModalShow() {\r\n    this.onShowMore();\r\n    this.isModalWellKnownVisible = true;\r\n  }\r\n\r\n  onModalClose() {\r\n    this.isModalWellKnownVisible = false;\r\n  }\r\n\r\n  onModalOK() {\r\n    this.sendSelectedProvider.emit(this.getSelectedProvider().settings);\r\n    this.isModalWellKnownVisible = false;\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ":host #btnWellKnownEmailProviders {display: inline-block; width: 100%}\n",
      "extends": []
    },
    {
      "name": "ChocolateyComponent",
      "id": "component-ChocolateyComponent-1368aa09f8321c94345c5a1e5aca9defc5b780c002e895ca4c25ddb39229aed8eb55663bd5d481f7a7f14bcc42bada468a1f65786c0dbda5139dc209fd329628",
      "file": "src/app/areas/install-setup-upgrade/chocolatey/chocolatey.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-chocolatey",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "installChocolatey",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "unInstallChocolatey",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport { chocolateyTemplate } from './chocolatey.template';\r\nimport { ConfirmService } from '../../../components/dialog-confirm/confirm.service';\r\nimport { ElectronService } from '../../../core/services/electron/electron.service';\r\nimport { StateStoreService } from '../../../providers/state-store.service';\r\n\r\n@Component({\r\n  selector: 'dburst-chocolatey',\r\n  template: ` ${chocolateyTemplate} `,\r\n})\r\nexport class ChocolateyComponent {\r\n  constructor(\r\n    protected storeService: StateStoreService,\r\n    protected electronService: ElectronService,\r\n    protected confirmService: ConfirmService,\r\n  ) {\r\n    console.log(`isChocoOk = ${this.storeService.setup.chocolatey.isChocoOk}`);\r\n  }\r\n\r\n  installChocolatey() {\r\n    this.confirmService.askConfirmation({\r\n      message: 'Are you sure that you want to perform this action?',\r\n      confirmAction: () => {\r\n        this.electronService.typeCommandOnTerminalAndThenPressEnter(\r\n          'install chocolatey',\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  unInstallChocolatey() {\r\n    this.confirmService.askConfirmation({\r\n      message: 'Are you sure that you want to perform this action?',\r\n      confirmAction: () => {\r\n        this.electronService.typeCommandOnTerminalAndThenPressEnter(\r\n          'uninstall chocolatey',\r\n        );\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storeService",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "storeService",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": []
    },
    {
      "name": "ConfigurationComponent",
      "id": "component-ConfigurationComponent-d249de8b93a16d1f8f0836651f37549b653b98f1fc7b6e7def56db4247b870890b72eae60f262d439bf9d3b4d5c4a6e1479cbb83307017e730e5e1e73325a5df",
      "file": "src/app/areas/_configuration/configuration.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-configuration",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "ALL_TABS",
          "defaultValue": "[\r\n    {\r\n      id: 'generalSettingsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.GENERAL',\r\n      ngTemplateOutlet: 'tabGeneralSettingsTemplate',\r\n    },\r\n    {\r\n      id: 'reportingDataSourceDataTablesTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.REPORTING-DATASOURCE-DATATABLES',\r\n      ngTemplateOutlet: 'tabReportingDataSourceDataTablesTemplate',\r\n    },\r\n    {\r\n      id: 'reportingTemplateOutputTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.REPORTING-TEMPLATE-OUTPUT',\r\n      ngTemplateOutlet: 'tabReportingTemplateOutputTemplate',\r\n    },\r\n    {\r\n      id: 'enableDisableDistributionTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ENABLE-DISABLE-DELIVERY',\r\n      ngTemplateOutlet: 'tabEnableDisableDeliveryTemplate',\r\n    },\r\n    {\r\n      id: 'cloudEmailProvidersTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL.CLOUD-PROVIDERS',\r\n      ngTemplateOutlet: 'tabEmailCloudProvidersTemplate',\r\n    },\r\n    {\r\n      id: 'connectionSettingsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL.CONNECTION',\r\n      ngTemplateOutlet: 'tabEmailConnectionSettingsTemplate',\r\n    },\r\n    {\r\n      id: 'emailMessageTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL.MESSAGE',\r\n      ngTemplateOutlet: 'tabEmailMessageTemplate',\r\n    },\r\n    {\r\n      id: 'attachmentsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ATTACHMENTS',\r\n      ngTemplateOutlet: 'tabAttachmentsTemplate',\r\n    },\r\n    {\r\n      id: 'ftpTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.FTP',\r\n      ngTemplateOutlet: 'tabUploadFTPTemplate',\r\n      //iconClass: 'fa fa-upload',\r\n    },\r\n    {\r\n      id: 'fileShareTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.FILE-SHARE',\r\n      ngTemplateOutlet: 'tabUploadFileShareTemplate',\r\n      //iconClass: 'fa fa-share-alt',\r\n    },\r\n    {\r\n      id: 'ftpsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.FTPS',\r\n      ngTemplateOutlet: 'tabUploadFTPSTemplate',\r\n      //iconClass: 'fa fa-lock',\r\n    },\r\n    {\r\n      id: 'sftpTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.SFTP',\r\n      ngTemplateOutlet: 'tabUploadSFTPTemplate',\r\n      //iconClass: 'fa fa-terminal',\r\n    },\r\n    {\r\n      id: 'httpTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.HTTP',\r\n      ngTemplateOutlet: 'tabUploadHTTPTemplate',\r\n      //iconClass: 'fa fa-code',\r\n    },\r\n    {\r\n      id: 'cloudUploadTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.CLOUD',\r\n      ngTemplateOutlet: 'tabUploadCloudTemplate',\r\n      //iconClass: 'fa fa-cloud-upload',\r\n    },\r\n    {\r\n      id: 'documentBursterWebTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.DOCUMENTBURSTER-WEB',\r\n      ngTemplateOutlet: 'tabWebUploadDocumentBursterWebTemplate',\r\n      //iconClass: 'fa fa-credit-card',\r\n    },\r\n    {\r\n      id: 'sharePointTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.SHAREPOINT',\r\n      ngTemplateOutlet: 'tabWebUploadSharePointTemplate',\r\n      //iconClass: 'fa fa-windows',\r\n    },\r\n    {\r\n      id: 'wordPressTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.WORDPRESS',\r\n      ngTemplateOutlet: 'tabWebUploadWordPressTemplate',\r\n      //iconClass: 'fa fa-wordpress',\r\n    },\r\n    {\r\n      id: 'drupalTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.DRUPAL',\r\n      ngTemplateOutlet: 'tabWebUploadDrupalTemplate',\r\n      //iconClass: 'fa fa-drupal',\r\n    },\r\n    {\r\n      id: 'joomlaTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.JOOMLA',\r\n      ngTemplateOutlet: 'tabWebUploadJoomlaTemplate',\r\n      //iconClass: 'fa fa-joomla',\r\n    },\r\n    {\r\n      id: 'otherWebPlatformsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.OTHER-WEB-PLATFORMS',\r\n      ngTemplateOutlet: 'tabWebUploadOtherWebPlatformsTemplate',\r\n      //iconClass: 'fa fa-skyatlas',\r\n    },\r\n    {\r\n      id: 'twilioTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.SMS.TWILIO',\r\n      ngTemplateOutlet: 'tabSMSTwilioTemplate',\r\n    },\r\n    {\r\n      id: 'smsMessageTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.SMS.MESSAGE',\r\n      ngTemplateOutlet: 'tabSMSMessageTemplate',\r\n    },\r\n    {\r\n      id: 'confQualityTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.QA',\r\n      ngTemplateOutlet: 'tabQATemplate',\r\n    },\r\n    {\r\n      id: 'advancedTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ADVANCED',\r\n      ngTemplateOutlet: 'tabAdvancedTemplate',\r\n    },\r\n    {\r\n      id: 'errorHandlingTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ERROR-HANDLING',\r\n      ngTemplateOutlet: 'tabAdvancedErrorHandlingTemplate',\r\n      visibleWhenCapability: 'reportdistribution',\r\n    },\r\n    {\r\n      id: 'emailAddressValidationTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL-ADDRESS-VALIDATION',\r\n      ngTemplateOutlet: 'tabEmailAddressValidationTemplate',\r\n      visibleWhenCapability: 'reportdistribution',\r\n    },\r\n    {\r\n      id: 'emailTuningTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL-TUNING',\r\n      ngTemplateOutlet: 'tabEmailTuningTemplate',\r\n      visibleWhenCapability: 'reportdistribution',\r\n    },\r\n    {\r\n      id: 'logsTab',\r\n      heading: 'SHARED-TABS.LOGGING-TRACING',\r\n      ngTemplateOutlet: 'tabLogsTemplate',\r\n    },\r\n    {\r\n      id: 'licenseTab',\r\n      heading: 'SHARED-TABS.LICENSE',\r\n      ngTemplateOutlet: 'tabLicenseTemplate',\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 178
        },
        {
          "name": "currentLeftMenu",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 612
        },
        {
          "name": "editor",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Quill",
          "optional": false,
          "description": "",
          "line": 624
        },
        {
          "name": "editorCaretPosition",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 625
        },
        {
          "name": "isModalAttachmentVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 420
        },
        {
          "name": "isModalSMSVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 427
        },
        {
          "name": "MENU_SELECTED_X_VISIBLE_TABS",
          "defaultValue": "[\r\n    {\r\n      selectedMenu: 'generalSettingsMenuSelected',\r\n      visibleTabs: ['generalSettingsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'reportingSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'reportingDataSourceDataTablesTab',\r\n        'reportingTemplateOutputTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'enableDisableDistributionMenuSelected',\r\n      visibleTabs: ['enableDisableDistributionTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'emailSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'connectionSettingsTab',\r\n        'emailMessageTab',\r\n        'attachmentsTab',\r\n        'logsTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'cloudEmailProvidersMenuSelected',\r\n      visibleTabs: ['cloudEmailProvidersTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'uploadSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'ftpTab',\r\n        'sftpTab',\r\n        'fileShareTab',\r\n        'ftpsTab',\r\n        'httpTab',\r\n        'cloudUploadTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'documentBursterWebSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'documentBursterWebTab',\r\n        'sharePointTab',\r\n        'wordPressTab',\r\n        'drupalTab',\r\n        'joomlaTab',\r\n        'otherWebPlatformsTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'smsSettingsMenuSelected',\r\n      visibleTabs: ['twilioTab', 'smsMessageTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'qualitySettingsMenuSelected',\r\n      visibleTabs: ['confQualityTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'advancedSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'advancedTab',\r\n        'errorHandlingTab',\r\n        'emailAddressValidationTab',\r\n        'emailTuningTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'errorHandlingSettingsMenuSelected',\r\n      visibleTabs: ['errorHandlingTab', 'licenseTab'],\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 341
        },
        {
          "name": "modalAttachmentInfo",
          "defaultValue": "{\r\n    mode: 'new',\r\n    attachmentFilePath: '',\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 422
        },
        {
          "name": "modalSMSInfo",
          "defaultValue": "{\r\n    fromNumber: '',\r\n    toNumber: '',\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 429
        },
        {
          "name": "selectedAttachment",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 170
        },
        {
          "name": "selectedEmailConnectionFile",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ExtConnection",
          "optional": false,
          "description": "",
          "line": 589
        },
        {
          "name": "selectedReportTemplateFile",
          "defaultValue": "{\r\n    fileName: '',\r\n    filePath: '',\r\n    type: '',\r\n    folderName: '',\r\n    relativeFilePath: '',\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 590
        },
        {
          "name": "settingsChanged",
          "defaultValue": "new Subject<any>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 588
        },
        {
          "name": "tabAdvancedErrorHandlingTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 156,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabAdvancedErrorHandlingTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabAdvancedTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 153,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabAdvancedTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabAttachmentsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 118,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabAttachmentsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabEmailAddressValidationTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 159,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabEmailAddressValidationTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabEmailCloudProvidersTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 110,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabEmailCloudProvidersTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabEmailConnectionSettingsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 113,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabEmailConnectionSettingsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabEmailMessageTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 115,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabEmailMessageTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabEmailTuningTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 162,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabEmailTuningTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabEnableDisableDeliveryTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 107,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabEnableDisableDeliveryTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabGeneralSettingsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 98,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabGeneralSettingsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabLicenseTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 168,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabLicenseTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabLogsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 165,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabLogsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabQATemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 151,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabQATemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabReportingDataSourceDataTablesTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 101,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabReportingDataSourceDataTablesTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabReportingTemplateOutputTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 104,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabReportingTemplateOutputTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabSMSMessageTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 149,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabSMSMessageTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabSMSTwilioTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 147,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabSMSTwilioTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabUploadCloudTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 131,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabUploadCloudTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabUploadFileShareTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 122,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabUploadFileShareTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabUploadFTPSTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 125,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabUploadFTPSTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabUploadFTPTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 120,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabUploadFTPTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabUploadHTTPTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 129,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabUploadHTTPTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabUploadSFTPTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 127,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabUploadSFTPTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabWebUploadDocumentBursterWebTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 133,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabWebUploadDocumentBursterWebTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabWebUploadDrupalTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 140,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabWebUploadDrupalTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabWebUploadJoomlaTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 142,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabWebUploadJoomlaTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabWebUploadOtherWebPlatformsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 145,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabWebUploadOtherWebPlatformsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabWebUploadSharePointTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 136,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabWebUploadSharePointTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabWebUploadWordPressTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 138,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabWebUploadWordPressTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "visibleTabs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type[]",
          "optional": false,
          "description": "",
          "line": 172
        },
        {
          "name": "xmlReporting",
          "defaultValue": "{\r\n    documentburster: null,\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 584
        },
        {
          "name": "xmlSettings",
          "defaultValue": "{\r\n    documentburster: {\r\n      settings: null,\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 434
        }
      ],
      "methodsClass": [
        {
          "name": "doTestSMTPConnection",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1134,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "fillExistingEmailConnectionDetails",
          "args": [
            {
              "name": "code",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 831,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "code",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getSortedAttachments",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 1010,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "moveItemInArray",
          "args": [
            {
              "name": "array",
              "type": "[]",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "from",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "to",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1006,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "array",
              "type": "[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "from",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "to",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 640,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onAskForFeatureModalShow",
          "args": [
            {
              "name": "event",
              "type": "Event | string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1255,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event | string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onAttachmentSelected",
          "args": [
            {
              "name": "attachment",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 890,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "attachment",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onCancelAttachmentModal",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1076,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClearAttachments",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 935,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onCloseSMSModal",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1174,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onDeleteSelectedAttachment",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 904,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onEditorCreated",
          "args": [
            {
              "name": "qlEvent",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 627,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "qlEvent",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onEditorSelectionChanged",
          "args": [
            {
              "name": "qlEvent",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 632,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "qlEvent",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onLoadHTMLTemplateClick",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 877,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onNewEditAttachment",
          "args": [
            {
              "name": "newOrEditMode",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1022,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "newOrEditMode",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onOKAttachmentModal",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 1032,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onReportOutputTypeChanged",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 1191,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onSaveHTMLTemplateClick",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 869,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSelectAttachmentFilePath",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 801,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSelectCsvHeader",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1276,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSelectedAttachmentDown",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 978,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onSelectedAttachmentUp",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 955,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onSelectIdColumn",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1291,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSelectOutputFolderPath",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 782,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSelectQuarantineFolderPath",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 792,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSelectTemplateFileChanged",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1305,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSendTestSMS",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1178,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onShowSendTestSMSModal",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1161,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onUsedExistingEmailConnectionChanged",
          "args": [
            {
              "name": "code",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 813,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "code",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "name",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onUseExistingEmailConnectionClick",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 805,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "refreshTabs",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 757,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "settingsChangedEventHandler",
          "args": [
            {
              "name": "newValue",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 614,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "newValue",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "settingsChangedQuillEventHandler",
          "args": [
            {
              "name": "newValue",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 618,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "newValue",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleShowMoreCsvOptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1299,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "updateFormControlWithSelectedVariable",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "selectedVariableValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1083,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "selectedVariableValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateQuillFormControlWithSelectedVariable",
          "args": [
            {
              "name": "selectedVariableValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 1098,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "selectedVariableValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateSMTPFormControlsWithSelectedProviderSettings",
          "args": [
            {
              "name": "selectedProviderSettings",
              "type": "EmailProviderSettings",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 1108,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "selectedProviderSettings",
              "type": "EmailProviderSettings",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ChangeDetectorRef,\r\n  TemplateRef,\r\n} from '@angular/core';\r\n\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\nimport * as _ from 'lodash';\r\n\r\n//import * as path from 'path';\r\n\r\nimport { leftMenuTemplate } from './templates/_left-menu';\r\nimport { tabsTemplate } from './templates/_tabs';\r\n\r\nimport { ExtConnection } from '../../providers/settings.service';\r\nimport { ToastrMessagesService } from '../../providers/toastr-messages.service';\r\n\r\nimport { tabGeneralSettingsTemplate } from './templates/tab-general-settings';\r\nimport { tabReportingDataSourceDataTablesTemplate } from './templates/tab-reporting-datasource-datatables';\r\nimport { tabReportingTemplateOutputTemplate } from './templates/tab-reporting-template-output';\r\nimport { tabEnableDisableDeliveryTemplate } from './templates/tab-enable-disable-delivery';\r\nimport { tabEmailConnectionSettingsTemplate } from './templates/tab-email-connection-settings';\r\nimport { tabEmailMessageTemplate } from './templates/tab-email-message';\r\nimport { tabAttachmentsTemplate } from './templates/tab-attachments';\r\nimport { tabEmailCloudProvidersTemplate } from './templates/tab-email-cloud-providers';\r\nimport { tabUploadFTPTemplate } from './templates/tab-upload-ftp';\r\nimport { tabUploadFileShareTemplate } from './templates/tab-upload-file-share';\r\nimport { tabUploadFTPSTemplate } from './templates/tab-upload-ftps';\r\nimport { tabUploadSFTPTemplate } from './templates/tab-upload-sftp';\r\nimport { tabUploadHTTPTemplate } from './templates/tab-upload-http';\r\nimport { tabUploadCloudTemplate } from './templates/tab-upload-cloud';\r\nimport { tabWebUploadDocumentBursterWebTemplate } from './templates/tab-web-upload-documentburster-web';\r\nimport { tabWebUploadSharePointTemplate } from './templates/tab-web-upload-sharepoint';\r\nimport { tabWebUploadWordPressTemplate } from './templates/tab-web-upload-wordpress';\r\nimport { tabWebUploadDrupalTemplate } from './templates/tab-web-upload-drupal';\r\nimport { tabWebUploadJoomlaTemplate } from './templates/tab-web-upload-joomla';\r\nimport { tabWebUploadOtherWebPlatformsTemplate } from './templates/tab-web-upload-other-web-platforms';\r\nimport { tabSMSTwilioTemplate } from './templates/tab-sms-twilio';\r\nimport { tabSMSMessageTemplate } from './templates/tab-sms-message';\r\nimport { tabQATemplate } from './templates/tab-qa';\r\nimport { tabAdvancedTemplate } from './templates/tab-advanced';\r\nimport { tabAdvancedErrorHandlingTemplate } from './templates/tab-advanced-error-handling';\r\nimport { tabEmailAddressValidationTemplate } from './templates/tab-email-address-validation';\r\nimport { tabEmailTuningTemplate } from './templates/tab-email-tuning';\r\nimport { tabLogsTemplate } from './templates/tab-logs';\r\n\r\nimport { tabLicenseTemplate } from './templates/tab-license';\r\n\r\nimport { modalAttachmentTemplate } from './templates/modal-attachment';\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\nimport Utilities from '../../helpers/utilities';\r\nimport { ConfirmService } from '../../components/dialog-confirm/confirm.service';\r\nimport { EmailProviderSettings } from '../../components/button-well-known/button-well-known.component';\r\nimport { Quill, RangeStatic } from 'quill';\r\nimport { InfoService } from '../../components/dialog-info/info.service';\r\nimport { AskForFeatureService } from '../../components/ask-for-feature/ask-for-feature.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { ShellService } from '../../providers/shell.service';\r\nimport { FsService } from '../../providers/fs.service';\r\nimport { StateStoreService } from '../../providers/state-store.service';\r\n\r\n@Component({\r\n  selector: 'dburst-configuration',\r\n  template: `\r\n    <aside class=\"main-sidebar\">\r\n      <section class=\"sidebar\">${leftMenuTemplate}</section>\r\n    </aside>\r\n    <div class=\"content-wrapper\">\r\n      <section class=\"content\">\r\n        <div>${tabsTemplate}</div>\r\n      </section>\r\n    </div>\r\n    ${tabGeneralSettingsTemplate} ${tabReportingDataSourceDataTablesTemplate}\r\n    ${tabReportingTemplateOutputTemplate} ${tabEnableDisableDeliveryTemplate}\r\n    ${tabEmailCloudProvidersTemplate} ${tabEmailConnectionSettingsTemplate}\r\n    ${tabEmailMessageTemplate} ${tabAttachmentsTemplate} ${tabUploadFTPTemplate}\r\n    ${tabUploadFileShareTemplate} ${tabUploadFTPSTemplate}\r\n    ${tabUploadSFTPTemplate} ${tabUploadHTTPTemplate} ${tabUploadCloudTemplate}\r\n    ${tabWebUploadDocumentBursterWebTemplate} ${tabWebUploadSharePointTemplate}\r\n    ${tabWebUploadWordPressTemplate} ${tabWebUploadDrupalTemplate}\r\n    ${tabWebUploadJoomlaTemplate} ${tabWebUploadOtherWebPlatformsTemplate}\r\n    ${tabSMSTwilioTemplate} ${tabSMSMessageTemplate} ${tabQATemplate}\r\n    ${tabAdvancedTemplate} ${tabAdvancedErrorHandlingTemplate}\r\n    ${tabEmailAddressValidationTemplate} ${tabEmailTuningTemplate}\r\n    ${tabLogsTemplate} ${tabLicenseTemplate} ${modalAttachmentTemplate}\r\n  `,\r\n})\r\nexport class ConfigurationComponent implements OnInit {\r\n  //editor: Squire;\r\n\r\n  @ViewChild('tabGeneralSettingsTemplate', { static: true })\r\n  tabGeneralSettingsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabReportingDataSourceDataTablesTemplate', { static: true })\r\n  tabReportingDataSourceDataTablesTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabReportingTemplateOutputTemplate', { static: true })\r\n  tabReportingTemplateOutputTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabEnableDisableDeliveryTemplate', { static: true })\r\n  tabEnableDisableDeliveryTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabEmailCloudProvidersTemplate', { static: true })\r\n  tabEmailCloudProvidersTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabEmailConnectionSettingsTemplate', { static: true })\r\n  tabEmailConnectionSettingsTemplate: TemplateRef<any>;\r\n  @ViewChild('tabEmailMessageTemplate', { static: true })\r\n  tabEmailMessageTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabAttachmentsTemplate', { static: true })\r\n  tabAttachmentsTemplate: TemplateRef<any>;\r\n  @ViewChild('tabUploadFTPTemplate', { static: true })\r\n  tabUploadFTPTemplate: TemplateRef<any>;\r\n  @ViewChild('tabUploadFileShareTemplate', { static: true })\r\n  tabUploadFileShareTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabUploadFTPSTemplate', { static: true })\r\n  tabUploadFTPSTemplate: TemplateRef<any>;\r\n  @ViewChild('tabUploadSFTPTemplate', { static: true })\r\n  tabUploadSFTPTemplate: TemplateRef<any>;\r\n  @ViewChild('tabUploadHTTPTemplate', { static: true })\r\n  tabUploadHTTPTemplate: TemplateRef<any>;\r\n  @ViewChild('tabUploadCloudTemplate', { static: true })\r\n  tabUploadCloudTemplate: TemplateRef<any>;\r\n  @ViewChild('tabWebUploadDocumentBursterWebTemplate', { static: true })\r\n  tabWebUploadDocumentBursterWebTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabWebUploadSharePointTemplate', { static: true })\r\n  tabWebUploadSharePointTemplate: TemplateRef<any>;\r\n  @ViewChild('tabWebUploadWordPressTemplate', { static: true })\r\n  tabWebUploadWordPressTemplate: TemplateRef<any>;\r\n  @ViewChild('tabWebUploadDrupalTemplate', { static: true })\r\n  tabWebUploadDrupalTemplate: TemplateRef<any>;\r\n  @ViewChild('tabWebUploadJoomlaTemplate', { static: true })\r\n  tabWebUploadJoomlaTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabWebUploadOtherWebPlatformsTemplate', { static: true })\r\n  tabWebUploadOtherWebPlatformsTemplate: TemplateRef<any>;\r\n  @ViewChild('tabSMSTwilioTemplate', { static: true })\r\n  tabSMSTwilioTemplate: TemplateRef<any>;\r\n  @ViewChild('tabSMSMessageTemplate', { static: true })\r\n  tabSMSMessageTemplate: TemplateRef<any>;\r\n  @ViewChild('tabQATemplate', { static: true })\r\n  tabQATemplate: TemplateRef<any>;\r\n  @ViewChild('tabAdvancedTemplate', { static: true })\r\n  tabAdvancedTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabAdvancedErrorHandlingTemplate', { static: true })\r\n  tabAdvancedErrorHandlingTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabEmailAddressValidationTemplate', { static: true })\r\n  tabEmailAddressValidationTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabEmailTuningTemplate', { static: true })\r\n  tabEmailTuningTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabLogsTemplate', { static: true })\r\n  tabLogsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabLicenseTemplate', { static: true })\r\n  tabLicenseTemplate: TemplateRef<any>;\r\n\r\n  selectedAttachment;\r\n\r\n  visibleTabs: {\r\n    id: string;\r\n    heading: string;\r\n    ngTemplateOutlet: string;\r\n  }[];\r\n\r\n  ALL_TABS = [\r\n    {\r\n      id: 'generalSettingsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.GENERAL',\r\n      ngTemplateOutlet: 'tabGeneralSettingsTemplate',\r\n    },\r\n    {\r\n      id: 'reportingDataSourceDataTablesTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.REPORTING-DATASOURCE-DATATABLES',\r\n      ngTemplateOutlet: 'tabReportingDataSourceDataTablesTemplate',\r\n    },\r\n    {\r\n      id: 'reportingTemplateOutputTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.REPORTING-TEMPLATE-OUTPUT',\r\n      ngTemplateOutlet: 'tabReportingTemplateOutputTemplate',\r\n    },\r\n    {\r\n      id: 'enableDisableDistributionTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ENABLE-DISABLE-DELIVERY',\r\n      ngTemplateOutlet: 'tabEnableDisableDeliveryTemplate',\r\n    },\r\n    {\r\n      id: 'cloudEmailProvidersTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL.CLOUD-PROVIDERS',\r\n      ngTemplateOutlet: 'tabEmailCloudProvidersTemplate',\r\n    },\r\n    {\r\n      id: 'connectionSettingsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL.CONNECTION',\r\n      ngTemplateOutlet: 'tabEmailConnectionSettingsTemplate',\r\n    },\r\n    {\r\n      id: 'emailMessageTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL.MESSAGE',\r\n      ngTemplateOutlet: 'tabEmailMessageTemplate',\r\n    },\r\n    {\r\n      id: 'attachmentsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ATTACHMENTS',\r\n      ngTemplateOutlet: 'tabAttachmentsTemplate',\r\n    },\r\n    {\r\n      id: 'ftpTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.FTP',\r\n      ngTemplateOutlet: 'tabUploadFTPTemplate',\r\n      //iconClass: 'fa fa-upload',\r\n    },\r\n    {\r\n      id: 'fileShareTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.FILE-SHARE',\r\n      ngTemplateOutlet: 'tabUploadFileShareTemplate',\r\n      //iconClass: 'fa fa-share-alt',\r\n    },\r\n    {\r\n      id: 'ftpsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.FTPS',\r\n      ngTemplateOutlet: 'tabUploadFTPSTemplate',\r\n      //iconClass: 'fa fa-lock',\r\n    },\r\n    {\r\n      id: 'sftpTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.SFTP',\r\n      ngTemplateOutlet: 'tabUploadSFTPTemplate',\r\n      //iconClass: 'fa fa-terminal',\r\n    },\r\n    {\r\n      id: 'httpTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.HTTP',\r\n      ngTemplateOutlet: 'tabUploadHTTPTemplate',\r\n      //iconClass: 'fa fa-code',\r\n    },\r\n    {\r\n      id: 'cloudUploadTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.UPLOAD.CLOUD',\r\n      ngTemplateOutlet: 'tabUploadCloudTemplate',\r\n      //iconClass: 'fa fa-cloud-upload',\r\n    },\r\n    {\r\n      id: 'documentBursterWebTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.DOCUMENTBURSTER-WEB',\r\n      ngTemplateOutlet: 'tabWebUploadDocumentBursterWebTemplate',\r\n      //iconClass: 'fa fa-credit-card',\r\n    },\r\n    {\r\n      id: 'sharePointTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.SHAREPOINT',\r\n      ngTemplateOutlet: 'tabWebUploadSharePointTemplate',\r\n      //iconClass: 'fa fa-windows',\r\n    },\r\n    {\r\n      id: 'wordPressTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.WORDPRESS',\r\n      ngTemplateOutlet: 'tabWebUploadWordPressTemplate',\r\n      //iconClass: 'fa fa-wordpress',\r\n    },\r\n    {\r\n      id: 'drupalTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.DRUPAL',\r\n      ngTemplateOutlet: 'tabWebUploadDrupalTemplate',\r\n      //iconClass: 'fa fa-drupal',\r\n    },\r\n    {\r\n      id: 'joomlaTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.JOOMLA',\r\n      ngTemplateOutlet: 'tabWebUploadJoomlaTemplate',\r\n      //iconClass: 'fa fa-joomla',\r\n    },\r\n    {\r\n      id: 'otherWebPlatformsTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.WEB-UPLOAD.OTHER-WEB-PLATFORMS',\r\n      ngTemplateOutlet: 'tabWebUploadOtherWebPlatformsTemplate',\r\n      //iconClass: 'fa fa-skyatlas',\r\n    },\r\n    {\r\n      id: 'twilioTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.SMS.TWILIO',\r\n      ngTemplateOutlet: 'tabSMSTwilioTemplate',\r\n    },\r\n    {\r\n      id: 'smsMessageTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.SMS.MESSAGE',\r\n      ngTemplateOutlet: 'tabSMSMessageTemplate',\r\n    },\r\n    {\r\n      id: 'confQualityTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.QA',\r\n      ngTemplateOutlet: 'tabQATemplate',\r\n    },\r\n    {\r\n      id: 'advancedTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ADVANCED',\r\n      ngTemplateOutlet: 'tabAdvancedTemplate',\r\n    },\r\n    {\r\n      id: 'errorHandlingTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.ERROR-HANDLING',\r\n      ngTemplateOutlet: 'tabAdvancedErrorHandlingTemplate',\r\n      visibleWhenCapability: 'reportdistribution',\r\n    },\r\n    {\r\n      id: 'emailAddressValidationTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL-ADDRESS-VALIDATION',\r\n      ngTemplateOutlet: 'tabEmailAddressValidationTemplate',\r\n      visibleWhenCapability: 'reportdistribution',\r\n    },\r\n    {\r\n      id: 'emailTuningTab',\r\n      heading: 'AREAS.CONFIGURATION.TABS.EMAIL-TUNING',\r\n      ngTemplateOutlet: 'tabEmailTuningTemplate',\r\n      visibleWhenCapability: 'reportdistribution',\r\n    },\r\n    {\r\n      id: 'logsTab',\r\n      heading: 'SHARED-TABS.LOGGING-TRACING',\r\n      ngTemplateOutlet: 'tabLogsTemplate',\r\n    },\r\n    {\r\n      id: 'licenseTab',\r\n      heading: 'SHARED-TABS.LICENSE',\r\n      ngTemplateOutlet: 'tabLicenseTemplate',\r\n    },\r\n  ];\r\n\r\n  MENU_SELECTED_X_VISIBLE_TABS = [\r\n    {\r\n      selectedMenu: 'generalSettingsMenuSelected',\r\n      visibleTabs: ['generalSettingsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'reportingSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'reportingDataSourceDataTablesTab',\r\n        'reportingTemplateOutputTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'enableDisableDistributionMenuSelected',\r\n      visibleTabs: ['enableDisableDistributionTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'emailSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'connectionSettingsTab',\r\n        'emailMessageTab',\r\n        'attachmentsTab',\r\n        'logsTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'cloudEmailProvidersMenuSelected',\r\n      visibleTabs: ['cloudEmailProvidersTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'uploadSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'ftpTab',\r\n        'sftpTab',\r\n        'fileShareTab',\r\n        'ftpsTab',\r\n        'httpTab',\r\n        'cloudUploadTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'documentBursterWebSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'documentBursterWebTab',\r\n        'sharePointTab',\r\n        'wordPressTab',\r\n        'drupalTab',\r\n        'joomlaTab',\r\n        'otherWebPlatformsTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'smsSettingsMenuSelected',\r\n      visibleTabs: ['twilioTab', 'smsMessageTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'qualitySettingsMenuSelected',\r\n      visibleTabs: ['confQualityTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'advancedSettingsMenuSelected',\r\n      visibleTabs: [\r\n        'advancedTab',\r\n        'errorHandlingTab',\r\n        'emailAddressValidationTab',\r\n        'emailTuningTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'errorHandlingSettingsMenuSelected',\r\n      visibleTabs: ['errorHandlingTab', 'licenseTab'],\r\n    },\r\n  ];\r\n\r\n  isModalAttachmentVisible = false;\r\n\r\n  modalAttachmentInfo = {\r\n    mode: 'new',\r\n    attachmentFilePath: '',\r\n  };\r\n\r\n  isModalSMSVisible = false;\r\n\r\n  modalSMSInfo = {\r\n    fromNumber: '',\r\n    toNumber: '',\r\n  };\r\n\r\n  xmlSettings = {\r\n    documentburster: {\r\n      settings: null,\r\n    },\r\n  };\r\n  /*\r\n      this initial declaration is required otherwise the view will generate \"NullPointExceptions\" until the async data will be\r\n      loaded and ready from the XML file; having this initialization defined here avoids all these \"NullPointExceptions\"\r\n  xmlSettings = {\r\n    documentburster: {\r\n      settings: {\r\n        version: '',\r\n        template: '',\r\n        burstfilename: '',\r\n        mergefilename: '',\r\n        outputfolder: '',\r\n        //backupfolder: '',\r\n        quarantinefolder: '',\r\n        quarantinefiles: false,\r\n        //logsarchivesfolder: '',\r\n        //statsfilename: '',\r\n        capabilities: {\r\n          reportdistribution: false,\r\n          reportgenerationmailmerge: false,\r\n        },\r\n        sendfiles: {\r\n          email: false,\r\n          upload: false,\r\n          web: false,\r\n          sms: false,\r\n        },\r\n        deletefiles: false,\r\n        emailserver: {\r\n          useconn: false,\r\n          conncode: '',\r\n          host: '',\r\n          port: '',\r\n          userid: '',\r\n          userpassword: '',\r\n          usessl: false,\r\n          usetls: false,\r\n          fromaddress: '',\r\n          name: '',\r\n        },\r\n        htmlemail: true,\r\n        htmlemaileditcode: false,\r\n        emailsettings: {\r\n          to: '',\r\n          cc: '',\r\n          bcc: '',\r\n          subject: '',\r\n          text: '',\r\n          html: '',\r\n        },\r\n        attachments: {\r\n          items: { attachment: <any>[] },\r\n          archive: { archiveattachments: false, archivefilename: '' },\r\n        },\r\n        emailrfc2822validator: {\r\n          allowquotedidentifiers: true,\r\n          allowparensinlocalpart: true,\r\n          allowdomainliterals: false,\r\n          allowdotinatext: false,\r\n          allowsquarebracketsinatext: false,\r\n          skipvalidationfor: '',\r\n        },\r\n        simplejavamail: {\r\n          active: false,\r\n          replytoaddress: '',\r\n          replytoname: '',\r\n          bouncetoaddress: '',\r\n          bouncetoname: '',\r\n          receipttoaddress: '',\r\n          receipttoname: '',\r\n          dispositionnotificationtoaddress: '',\r\n          dispositionnotificationtoname: '',\r\n          customemailheaders: '',\r\n          customsessionproperties: '',\r\n          javaxmaildebug: false,\r\n          transportmodeloggingonly: false,\r\n          proxy: {\r\n            host: '',\r\n            port: '',\r\n            username: '',\r\n            password: '',\r\n            socks5bridgeport: '',\r\n          },\r\n        },\r\n        uploadsettings: {\r\n          ftpcommand: '',\r\n          filesharecommand: '',\r\n          ftpscommand: '',\r\n          sftpcommand: '',\r\n          httpcommand: '',\r\n          cloudcommand: '',\r\n        },\r\n        webuploadsettings: {\r\n          documentbursterwebcommand: '',\r\n          mssharepointcommand: '',\r\n          wordpresscommand: '',\r\n          drupalcommand: '',\r\n          joomlacommand: '',\r\n          otherwebcommand: '',\r\n        },\r\n        smssettings: {\r\n          twilio: {\r\n            accountsid: '',\r\n            authtoken: '',\r\n          },\r\n          fromtelephonenumber: '',\r\n          totelephonenumber: '',\r\n          text: '',\r\n        },\r\n        qualityassurance: {\r\n          emailserver: {\r\n            host: 'localhost',\r\n            port: '1025',\r\n            userid: '',\r\n            userpassword: '',\r\n            usessl: false,\r\n            usetls: false,\r\n            fromaddress: 'from@emailaddress.com',\r\n            name: 'From Name',\r\n            //weburl: 'http://localhost:8025',\r\n          },\r\n        },\r\n        split2ndtime: false,\r\n        bursttokendelimiters: {\r\n          start: '',\r\n          end: '',\r\n          start2nd: '',\r\n          end2nd: '',\r\n        },\r\n        numberofuservariables: 10,\r\n        delayeachdistributionby: 0,\r\n        reusetokenswhennotfound: false,\r\n        failjobifanydistributionfails: false,\r\n        enableretrypolicy: false,\r\n        retrypolicy: {\r\n          delay: 3,\r\n          maxdelay: 30,\r\n          maxretries: 3,\r\n        },\r\n        enableincubatingfeatures: false,\r\n        visibility: 'visible',\r\n      },\r\n    },\r\n  };  \r\n  */\r\n\r\n  xmlReporting = {\r\n    documentburster: null,\r\n  };\r\n\r\n  settingsChanged: Subject<any> = new Subject<any>();\r\n  selectedEmailConnectionFile: ExtConnection;\r\n  selectedReportTemplateFile = {\r\n    fileName: '',\r\n    filePath: '',\r\n    type: '',\r\n    folderName: '',\r\n    relativeFilePath: '',\r\n  };\r\n\r\n  constructor(\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected shellService: ShellService,\r\n    protected confirmService: ConfirmService,\r\n    protected infoService: InfoService,\r\n    protected settingsService: SettingsService,\r\n    protected stateStore: StateStoreService,\r\n    protected messagesService: ToastrMessagesService,\r\n    protected fsService: FsService,\r\n    protected askForFeatureService: AskForFeatureService,\r\n    protected route: ActivatedRoute,\r\n    protected changeDetectorRef: ChangeDetectorRef,\r\n  ) {}\r\n\r\n  currentLeftMenu: string;\r\n\r\n  settingsChangedEventHandler(newValue: any) {\r\n    this.settingsChanged.next(newValue);\r\n  }\r\n\r\n  settingsChangedQuillEventHandler(newValue: any) {\r\n    //console.log(`settingsChangedQuillEventHandler: newValue: ${newValue}`);\r\n    this.xmlSettings.documentburster.settings.emailsettings.html = newValue;\r\n    this.settingsChanged.next(this.xmlSettings);\r\n  }\r\n\r\n  editor: Quill;\r\n  editorCaretPosition: number = 0;\r\n\r\n  onEditorCreated(qlEvent: { editor: Quill }) {\r\n    this.editor = qlEvent.editor;\r\n    this.editor.focus();\r\n  }\r\n\r\n  onEditorSelectionChanged(qlEvent: {\r\n    range: RangeStatic;\r\n    oldRange: RangeStatic;\r\n    source: string;\r\n  }) {\r\n    if (qlEvent.range) this.editorCaretPosition = qlEvent.range.index;\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.route.params.subscribe(async (params) => {\r\n      if (params.leftMenu) {\r\n        this.currentLeftMenu = params.leftMenu;\r\n      } else {\r\n        this.currentLeftMenu = 'generalSettingsMenuSelected';\r\n      }\r\n\r\n      //make sure that the XML file is loaded only once\r\n      if (\r\n        this.currentLeftMenu === 'generalSettingsMenuSelected' ||\r\n        params.reloadConfiguration\r\n      ) {\r\n        this.settingsService.currentConfigurationTemplatePath = Utilities.slash(\r\n          params.configurationFilePath,\r\n        );\r\n\r\n        this.settingsService.currentConfigurationTemplateName =\r\n          params.configurationFileName;\r\n\r\n        // this.xmlSettings.documentburster =\r\n        //   await this.settingsService.loadSettingsFileAsync(\r\n        //     this.settingsService.currentConfigurationTemplatePath\r\n        //   );\r\n\r\n        this.xmlSettings = await this.settingsService.loadSettingsFileAsync(\r\n          this.settingsService.currentConfigurationTemplatePath,\r\n        );\r\n        this.stateStore.configSys.currentConfigFile.configuration.settings = {\r\n          ...this.xmlSettings.documentburster.settings,\r\n        };\r\n\r\n        console.log(\r\n          `1. ConfigurationComponent onInit - this.stateStore.configSys.currentConfigFile.configuration.settings = ${JSON.stringify(this.stateStore.configSys.currentConfigFile.configuration.settings)}`,\r\n        );\r\n      }\r\n\r\n      if (this.currentLeftMenu === 'emailSettingsMenuSelected') {\r\n        await this.settingsService.loadAllConnectionFilesAsync();\r\n        console.log(\r\n          `this.settingsService.defaultEmailConnectionFile = ${JSON.stringify(\r\n            this.settingsService.defaultEmailConnectionFile,\r\n          )}`,\r\n        );\r\n\r\n        if (!this.xmlSettings.documentburster.settings.emailserver.conncode)\r\n          this.xmlSettings.documentburster.settings.emailserver.conncode =\r\n            this.settingsService.defaultEmailConnectionFile.connectionCode;\r\n\r\n        console.log(\r\n          `this.xmlSettings.documentburster.settings.emailserver.conncode = ${this.xmlSettings.documentburster.settings.emailserver.conncode}`,\r\n        );\r\n        if (this.xmlSettings.documentburster.settings.emailserver.conncode) {\r\n          this.selectedEmailConnectionFile =\r\n            this.settingsService.connectionFiles.find(\r\n              (connection) =>\r\n                connection.connectionType == 'email-connection' &&\r\n                connection.connectionCode ==\r\n                  this.xmlSettings.documentburster.settings.emailserver\r\n                    .conncode,\r\n            );\r\n          console.log(\r\n            `this.selectedEmailConnectionFile = ${JSON.stringify(\r\n              this.settingsService.connectionFiles,\r\n            )}`,\r\n          );\r\n          if (this.xmlSettings.documentburster.settings.emailserver.useconn)\r\n            this.fillExistingEmailConnectionDetails(\r\n              this.selectedEmailConnectionFile.connectionCode,\r\n            );\r\n        }\r\n      } else if (this.currentLeftMenu === 'reportingSettingsMenuSelected') {\r\n        await this.settingsService.loadAllReportTemplatesFilesAsync();\r\n\r\n        this.xmlReporting.documentburster =\r\n          await this.settingsService.loadReportingFileAsync(\r\n            this.settingsService.currentConfigurationTemplatePath,\r\n          );\r\n\r\n        console.log(`this.xmlReporting = ${JSON.stringify(this.xmlReporting)}`);\r\n\r\n        this.onReportOutputTypeChanged();\r\n      }\r\n\r\n      this.settingsService.numberOfUserVariables =\r\n        this.xmlSettings.documentburster.settings.numberofuservariables;\r\n\r\n      this.refreshTabs();\r\n\r\n      this.messagesService.showInfo(\r\n        'Showing configuration ' +\r\n          this.settingsService.currentConfigurationTemplateName,\r\n      );\r\n      // wait 300ms after the last event before emitting last event\r\n      this.settingsChanged\r\n        .pipe(debounceTime(30))\r\n        .subscribe(async (newValue) => {\r\n          await this.settingsService.saveSettingsFileAsync(\r\n            this.settingsService.currentConfigurationTemplatePath,\r\n            this.xmlSettings,\r\n          );\r\n\r\n          if (\r\n            this.xmlSettings.documentburster.settings.capabilities\r\n              .reportgenerationmailmerge\r\n          )\r\n            await this.settingsService.saveReportingFileAsync(\r\n              this.settingsService.currentConfigurationTemplatePath,\r\n              this.xmlReporting,\r\n            );\r\n\r\n          this.messagesService.showInfo('Saved');\r\n          this.changeDetectorRef.detectChanges();\r\n        });\r\n    });\r\n  }\r\n\r\n  refreshTabs() {\r\n    this.visibleTabs = [];\r\n\r\n    this.changeDetectorRef.detectChanges();\r\n\r\n    const visibleTabsIds = this.MENU_SELECTED_X_VISIBLE_TABS.find((item) => {\r\n      return item.selectedMenu === this.currentLeftMenu;\r\n    }).visibleTabs;\r\n\r\n    //const enableincubatingfeatures = this.xmlSettings.documentburster.settings.enableincubatingfeatures;\r\n\r\n    this.visibleTabs = this.ALL_TABS.filter((item) => {\r\n      let shouldShow = true;\r\n      if (\r\n        !this.xmlSettings.documentburster.settings.capabilities\r\n          .reportdistribution\r\n      ) {\r\n        if (item.visibleWhenCapability == 'reportdistribution')\r\n          shouldShow = false;\r\n      }\r\n\r\n      return visibleTabsIds.includes(item.id) && shouldShow;\r\n    });\r\n  }\r\n\r\n  async onSelectOutputFolderPath(filePath: string) {\r\n    this.xmlSettings.documentburster.settings.outputfolder =\r\n      Utilities.slash(filePath);\r\n    await this.settingsService.saveSettingsFileAsync(\r\n      this.settingsService.currentConfigurationTemplatePath,\r\n      this.xmlSettings,\r\n    );\r\n    this.messagesService.showInfo('Saved');\r\n  }\r\n\r\n  async onSelectQuarantineFolderPath(filePath: string) {\r\n    this.xmlSettings.documentburster.settings.quarantinefolder = filePath;\r\n    await this.settingsService.saveSettingsFileAsync(\r\n      this.settingsService.currentConfigurationTemplatePath,\r\n      this.xmlSettings,\r\n    );\r\n    this.messagesService.showInfo('Saved');\r\n  }\r\n\r\n  async onSelectAttachmentFilePath(filePath: string) {\r\n    this.modalAttachmentInfo.attachmentFilePath = Utilities.slash(filePath);\r\n  }\r\n\r\n  onUseExistingEmailConnectionClick(event: Event) {\r\n    if (event instanceof Event)\r\n      if ((event.target as HTMLInputElement).checked)\r\n        this.fillExistingEmailConnectionDetails(\r\n          this.selectedEmailConnectionFile.connectionCode,\r\n        );\r\n  }\r\n\r\n  async onUsedExistingEmailConnectionChanged(code: string, name: string) {\r\n    let dialogQuestion = `Use ${name} email connection?`;\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        this.fillExistingEmailConnectionDetails(code);\r\n\r\n        await this.settingsService.saveSettingsFileAsync(\r\n          this.settingsService.currentConfigurationTemplatePath,\r\n          this.xmlSettings,\r\n        );\r\n\r\n        this.messagesService.showInfo('Saved');\r\n      },\r\n    });\r\n  }\r\n\r\n  fillExistingEmailConnectionDetails(code: string) {\r\n    //this.xmlSettings.documentburster.settings.emailserver.useconn = true;\r\n    this.xmlSettings.documentburster.settings.emailserver.conncode = code;\r\n\r\n    const emailConnection = this.settingsService.connectionFiles.filter(\r\n      (connection) => connection.connectionCode === code,\r\n    )[0];\r\n\r\n    this.selectedEmailConnectionFile = emailConnection;\r\n\r\n    let connFiled = false;\r\n    const asDefined = `As defined by ${name}`;\r\n\r\n    if (emailConnection.emailserver.name) connFiled = true;\r\n\r\n    this.xmlSettings.documentburster.settings.emailserver.name = connFiled\r\n      ? emailConnection.emailserver.name\r\n      : asDefined;\r\n    this.xmlSettings.documentburster.settings.emailserver.fromaddress =\r\n      connFiled ? emailConnection.emailserver.fromaddress : asDefined;\r\n    this.xmlSettings.documentburster.settings.emailserver.host = connFiled\r\n      ? emailConnection.emailserver.host\r\n      : asDefined;\r\n    this.xmlSettings.documentburster.settings.emailserver.userid = connFiled\r\n      ? emailConnection.emailserver.userid\r\n      : asDefined;\r\n    this.xmlSettings.documentburster.settings.emailserver.userpassword =\r\n      connFiled ? emailConnection.emailserver.userpassword : asDefined;\r\n    this.xmlSettings.documentburster.settings.emailserver.port = connFiled\r\n      ? emailConnection.emailserver.port\r\n      : asDefined;\r\n\r\n    this.xmlSettings.documentburster.settings.emailserver.usessl =\r\n      emailConnection.emailserver.usessl;\r\n    this.xmlSettings.documentburster.settings.emailserver.usetls =\r\n      emailConnection.emailserver.usetls;\r\n  }\r\n\r\n  async onSaveHTMLTemplateClick(filePath: string) {\r\n    await this.fsService.writeAsync(\r\n      filePath + '.html',\r\n      this.xmlSettings.documentburster.settings.emailsettings.html,\r\n    );\r\n    this.messagesService.showInfo('HTML template was saved.');\r\n  }\r\n\r\n  async onLoadHTMLTemplateClick(filePath: string) {\r\n    const data = await this.fsService.readAsync(filePath);\r\n\r\n    (\r\n      document.getElementById('htmlCodeEmailMessage') as HTMLInputElement\r\n    ).value = data;\r\n\r\n    document\r\n      .getElementById('htmlCodeEmailMessage')\r\n      .dispatchEvent(new Event('input', { bubbles: true }));\r\n  }\r\n  // attachments\r\n\r\n  onAttachmentSelected(attachment) {\r\n    this.xmlSettings.documentburster.settings.attachments.items.attachmentItems.forEach(\r\n      (each) => {\r\n        console.log(`each = ${JSON.stringify(each)}`);\r\n        if (each.path === attachment.path) {\r\n          each.selected = true;\r\n          this.selectedAttachment = attachment;\r\n        } else {\r\n          each.selected = false;\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  onDeleteSelectedAttachment() {\r\n    let dialogQuestion = 'Send emails without any attachment?';\r\n    if (\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems.length > 1\r\n    ) {\r\n      dialogQuestion = 'Delete selected item?';\r\n    }\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        console.log(\r\n          `this.selectedAttachment = ${JSON.stringify(this.selectedAttachment)}`,\r\n        );\r\n        _.remove(\r\n          this.xmlSettings.documentburster.settings.attachments.items\r\n            .attachmentItems,\r\n          (attachment: any) => attachment.path === this.selectedAttachment.path,\r\n        );\r\n\r\n        delete this.selectedAttachment;\r\n        await this.settingsService.saveSettingsFileAsync(\r\n          this.settingsService.currentConfigurationTemplatePath,\r\n          this.xmlSettings,\r\n        );\r\n        this.messagesService.showInfo('Saved');\r\n      },\r\n    });\r\n  }\r\n\r\n  onClearAttachments() {\r\n    const dialogQuestion = 'Send emails without any attachment?';\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        delete this.selectedAttachment;\r\n\r\n        this.xmlSettings.documentburster.settings.attachments.items.attachmentItems =\r\n          [];\r\n\r\n        await this.settingsService.saveSettingsFileAsync(\r\n          this.settingsService.currentConfigurationTemplatePath,\r\n          this.xmlSettings,\r\n        );\r\n        this.messagesService.showInfo('Saved');\r\n      },\r\n    });\r\n  }\r\n\r\n  async onSelectedAttachmentUp() {\r\n    const index = _.indexOf(\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems,\r\n      this.selectedAttachment,\r\n    );\r\n\r\n    if (index > 0) {\r\n      // Decrement the 'order' of the selected attachment and increment the 'order' of the one above it\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems[index].order--;\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems[index - 1].order++;\r\n\r\n      this.onAttachmentSelected(this.selectedAttachment);\r\n      await this.settingsService.saveSettingsFileAsync(\r\n        this.settingsService.currentConfigurationTemplatePath,\r\n        this.xmlSettings,\r\n      );\r\n      this.messagesService.showInfo('Saved');\r\n    }\r\n  }\r\n\r\n  async onSelectedAttachmentDown() {\r\n    const index = _.indexOf(\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems,\r\n      this.selectedAttachment,\r\n    );\r\n\r\n    if (\r\n      index <\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems.length -\r\n        1\r\n    ) {\r\n      // Increment the 'order' of the selected attachment and decrement the 'order' of the one below it\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems[index].order++;\r\n      this.xmlSettings.documentburster.settings.attachments.items\r\n        .attachmentItems[index + 1].order--;\r\n\r\n      this.onAttachmentSelected(this.selectedAttachment);\r\n      await this.settingsService.saveSettingsFileAsync(\r\n        this.settingsService.currentConfigurationTemplatePath,\r\n        this.xmlSettings,\r\n      );\r\n      this.messagesService.showInfo('Saved');\r\n    }\r\n  }\r\n\r\n  moveItemInArray(array: [], from: number, to: number): void {\r\n    array.splice(to, 0, array.splice(from, 1)[0]);\r\n  }\r\n\r\n  getSortedAttachments() {\r\n    if (this.xmlSettings) {\r\n      return this.xmlSettings.documentburster.settings.attachments.items.attachmentItems.sort(\r\n        (attach1: any, attach2: any): number => {\r\n          return attach1.order - attach2.order;\r\n        },\r\n      );\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  onNewEditAttachment(newOrEditMode) {\r\n    this.modalAttachmentInfo.mode = newOrEditMode;\r\n    if (newOrEditMode === 'edit') {\r\n      this.modalAttachmentInfo.attachmentFilePath =\r\n        this.selectedAttachment.path;\r\n    }\r\n\r\n    this.isModalAttachmentVisible = true;\r\n  }\r\n\r\n  async onOKAttachmentModal() {\r\n    if (this.modalAttachmentInfo.mode === 'edit') {\r\n      const index = _.indexOf(\r\n        this.xmlSettings.documentburster.settings.attachments.items\r\n          .attachmentItems,\r\n        this.selectedAttachment,\r\n      );\r\n      this.xmlSettings.documentburster.settings.attachments.items.attachmentItems[\r\n        index\r\n      ].path = this.modalAttachmentInfo.attachmentFilePath;\r\n      this.selectedAttachment.path =\r\n        this.modalAttachmentInfo.attachmentFilePath;\r\n    } else if (this.modalAttachmentInfo.mode === 'new') {\r\n      this.xmlSettings.documentburster.settings.attachments.items.attachmentItems.push(\r\n        {\r\n          path: this.modalAttachmentInfo.attachmentFilePath,\r\n          order:\r\n            this.xmlSettings.documentburster.settings.attachments.items\r\n              .attachmentItems.length,\r\n        },\r\n      );\r\n      this.modalAttachmentInfo.attachmentFilePath = '';\r\n    }\r\n\r\n    //console.log(\r\n    //  `this.settingsService.currentConfigurationTemplatePath = ${this.settingsService.currentConfigurationTemplatePath}`,\r\n    //);\r\n    //console.log(`this.xmlSettings = ${JSON.stringify(this.xmlSettings)}`);\r\n\r\n    this.xmlSettings.documentburster.settings.attachments.items.attachmentItems.forEach(\r\n      (item) => {\r\n        delete item.selected;\r\n      },\r\n    );\r\n\r\n    await this.settingsService.saveSettingsFileAsync(\r\n      this.settingsService.currentConfigurationTemplatePath,\r\n      this.xmlSettings,\r\n    );\r\n    this.isModalAttachmentVisible = false;\r\n\r\n    this.messagesService.showInfo('Saved');\r\n  }\r\n\r\n  onCancelAttachmentModal() {\r\n    this.isModalAttachmentVisible = false;\r\n    this.modalAttachmentInfo.attachmentFilePath = '';\r\n  }\r\n\r\n  // end attachments\r\n\r\n  updateFormControlWithSelectedVariable(\r\n    id: string,\r\n    selectedVariableValue: string,\r\n  ) {\r\n    const formControl = document.getElementById(id) as HTMLInputElement;\r\n    const caretPos = formControl.selectionStart;\r\n    const oldValue = formControl.value;\r\n    formControl.value =\r\n      oldValue.substring(0, caretPos) +\r\n      selectedVariableValue +\r\n      oldValue.substring(caretPos);\r\n\r\n    formControl.dispatchEvent(new Event('input'));\r\n  }\r\n\r\n  async updateQuillFormControlWithSelectedVariable(\r\n    selectedVariableValue: string,\r\n  ) {\r\n    this.editor.insertText(\r\n      this.editorCaretPosition,\r\n      selectedVariableValue,\r\n      'user',\r\n    );\r\n  }\r\n\r\n  async updateSMTPFormControlsWithSelectedProviderSettings(\r\n    selectedProviderSettings: EmailProviderSettings,\r\n  ) {\r\n    this.xmlSettings.documentburster.settings.emailserver.usessl = false;\r\n    this.xmlSettings.documentburster.settings.emailserver.usetls = false;\r\n\r\n    this.xmlSettings.documentburster.settings.emailserver.host =\r\n      selectedProviderSettings.host;\r\n    this.xmlSettings.documentburster.settings.emailserver.port =\r\n      selectedProviderSettings.port;\r\n\r\n    if (selectedProviderSettings.secure === true) {\r\n      this.xmlSettings.documentburster.settings.emailserver.usessl = true;\r\n    }\r\n\r\n    if (selectedProviderSettings.tls) {\r\n      this.xmlSettings.documentburster.settings.emailserver.usetls = true;\r\n    }\r\n\r\n    await this.settingsService.saveSettingsFileAsync(\r\n      this.settingsService.currentConfigurationTemplatePath,\r\n      this.xmlSettings,\r\n    );\r\n    this.messagesService.showInfo('Saved');\r\n  }\r\n\r\n  doTestSMTPConnection() {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      const dialogQuestion = 'Send test email?';\r\n\r\n      this.confirmService.askConfirmation({\r\n        message: dialogQuestion,\r\n        confirmAction: async () => {\r\n          const configurationTemplatePath = await this.fsService.resolveAsync(\r\n            this.settingsService.currentConfigurationTemplatePath,\r\n          );\r\n          this.shellService.runBatFile([\r\n            '-cec',\r\n            '-c',\r\n            '\"' + Utilities.slash(configurationTemplatePath) + '\"',\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  onShowSendTestSMSModal() {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      this.isModalSMSVisible = true;\r\n    }\r\n  }\r\n\r\n  onCloseSMSModal() {\r\n    this.isModalSMSVisible = false;\r\n  }\r\n\r\n  onSendTestSMS() {\r\n    this.shellService.runBatFile([\r\n      '-ctwlc',\r\n      '-from',\r\n      this.modalSMSInfo.fromNumber,\r\n      '-to',\r\n      this.modalSMSInfo.toNumber,\r\n      '-c',\r\n      '\"' + this.settingsService.currentConfigurationTemplatePath + '\"',\r\n    ]);\r\n  }\r\n\r\n  //reporting\r\n  async onReportOutputTypeChanged() {\r\n    if (\r\n      this.xmlReporting.documentburster.report.template.outputtype ==\r\n      'output.none'\r\n    )\r\n      this.xmlReporting.documentburster.report.template.documentpath = '';\r\n    else if (\r\n      ['output.docx', 'output.html'].includes(\r\n        this.xmlReporting.documentburster.report.template.outputtype,\r\n      )\r\n    ) {\r\n      const reportTemplateFilePath =\r\n        this.xmlReporting.documentburster.report.template.documentpath;\r\n\r\n      if (reportTemplateFilePath) {\r\n        this.selectedReportTemplateFile =\r\n          this.settingsService.templateFiles.find(\r\n            (tplFile) => tplFile.filePath == reportTemplateFilePath,\r\n          );\r\n\r\n        console.log(\r\n          `this.selectedReportTemplateFile = ${JSON.stringify(\r\n            this.selectedReportTemplateFile,\r\n          )}`,\r\n        );\r\n      } else if (!reportTemplateFilePath) {\r\n        this.settingsService.currentConfigurationTemplate = this.settingsService\r\n          .getConfigurations()\r\n          .find(\r\n            (confTemplate) =>\r\n              confTemplate.filePath ==\r\n              this.settingsService.currentConfigurationTemplatePath,\r\n          );\r\n\r\n        const reportTemplateSameFolderNameOrFileName =\r\n          this.settingsService.templateFiles.find((tplFile) => {\r\n            return (\r\n              tplFile.folderName ==\r\n                this.settingsService.currentConfigurationTemplate.folderName ||\r\n              tplFile.fileName.includes(\r\n                this.settingsService.currentConfigurationTemplate.folderName,\r\n              )\r\n            );\r\n          });\r\n        if (reportTemplateSameFolderNameOrFileName) {\r\n          console.log(\r\n            `reportTemplateSameFolderNameOrFileName = ${reportTemplateSameFolderNameOrFileName}`,\r\n          );\r\n          this.selectedReportTemplateFile =\r\n            reportTemplateSameFolderNameOrFileName;\r\n          this.xmlReporting.documentburster.report.template.documentpath =\r\n            reportTemplateSameFolderNameOrFileName.filePath;\r\n\r\n          await this.settingsService.saveReportingFileAsync(\r\n            this.settingsService.currentConfigurationTemplatePath,\r\n            this.xmlReporting,\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.onAskForFeatureModalShow(event);\r\n  }\r\n\r\n  onAskForFeatureModalShow(event: Event | string) {\r\n    let requestedFeature: string;\r\n\r\n    if (event instanceof Event)\r\n      requestedFeature = (event.target as HTMLSelectElement).value;\r\n    else requestedFeature = event;\r\n\r\n    console.log(`requestedFeature = ${requestedFeature}`);\r\n\r\n    if (\r\n      requestedFeature &&\r\n      !this.askForFeatureService.alreadyImplementedFeatures.includes(\r\n        requestedFeature,\r\n      )\r\n    ) {\r\n      this.askForFeatureService.showAskForFeature({\r\n        requestedFeature: requestedFeature,\r\n      });\r\n    }\r\n  }\r\n\r\n  onSelectCsvHeader() {\r\n    this.xmlReporting.documentburster.report.datasource.csvoptions.skiplines = 0;\r\n\r\n    if (\r\n      this.xmlReporting?.documentburster.report.datasource.csvoptions.header ==\r\n      'firstline'\r\n    )\r\n      this.xmlReporting.documentburster.report.datasource.csvoptions.skiplines = 1;\r\n    else if (\r\n      this.xmlReporting?.documentburster.report.datasource.csvoptions.header ==\r\n      'multiline'\r\n    )\r\n      this.xmlReporting.documentburster.report.datasource.csvoptions.skiplines = 2;\r\n  }\r\n\r\n  onSelectIdColumn() {\r\n    if (\r\n      this.xmlReporting?.documentburster.report.datasource.csvoptions\r\n        .idcolumn == 'letmespecify'\r\n    )\r\n      this.xmlReporting.documentburster.report.datasource.csvoptions.idcolumnindex = 0;\r\n  }\r\n\r\n  toggleShowMoreCsvOptions() {\r\n    this.xmlReporting.documentburster.report.datasource.showmorecsvoptions =\r\n      !this.xmlReporting?.documentburster.report.datasource.showmorecsvoptions;\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  onSelectTemplateFileChanged(event: any) {\r\n    if (event)\r\n      this.xmlReporting.documentburster.report.template.documentpath =\r\n        event.filePath;\r\n    else this.xmlReporting.documentburster.report.template.documentpath = '';\r\n\r\n    this.settingsChangedEventHandler(event);\r\n  }\r\n  //end reporting\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "infoService",
            "type": "InfoService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "stateStore",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "askForFeatureService",
            "type": "AskForFeatureService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 596,
        "jsdoctags": [
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "infoService",
            "type": "InfoService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stateStore",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "askForFeatureService",
            "type": "AskForFeatureService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "ConfigurationTemplatesComponent",
      "id": "component-ConfigurationTemplatesComponent-f297cd778b19bd2bcf2e88f3bf29651824da4a5f274b0845d50df6bba619d99b0d31b83b79daea318b7dca212956c14e757f35e656b3598898fef1f79775bfd9",
      "file": "src/app/areas/_configuration-templates/configuration-templates.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-configuration-templates",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "isModalConfigurationTemplateVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "modalConfigurationTemplateInfo",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 42
        }
      ],
      "methodsClass": [
        {
          "name": "getSelectedConfiguration",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 395,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onConfTemplateClick",
          "args": [
            {
              "name": "confTemplateClicked",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "confTemplateClicked",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onDeleteSelectedTemplate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalClose",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 413,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalOK",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 417,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "restoreDefaultConfigurationValues",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "showCrudModal",
          "args": [
            {
              "name": "crudMode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duplicate",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 223,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "crudMode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duplicate",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleVisibility",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 181,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "updateModelAndForm",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 328,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n//import * as slash from 'slash';\r\n//import * as path from 'path';\r\n\r\n//import * as jetpack from 'fs-jetpack';\r\nimport _ from 'lodash';\r\n\r\nimport { ToastrMessagesService } from '../../providers/toastr-messages.service';\r\n\r\nimport { leftMenuTemplate } from './templates/_left-menu';\r\nimport { tabsTemplate } from './templates/_tabs';\r\nimport { CfgTmplFileInfo } from '../../providers/settings.service';\r\nimport { tabConfigurationTemplatesTemplate } from './templates/tab-conf-templates';\r\nimport { tabConfTemplatesSamples } from './templates/tab-conf-templates-samples';\r\n\r\nimport { tabLicenseTemplate } from './templates/tab-license';\r\n\r\nimport { modalConfigurationTemplateTemplate } from './templates/modal-conf-template';\r\nimport { ConfirmService } from '../../components/dialog-confirm/confirm.service';\r\nimport { SamplesService } from '../../providers/samples.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { FsService } from '../../providers/fs.service';\r\nimport Utilities from '../../helpers/utilities';\r\n\r\n@Component({\r\n  selector: 'dburst-configuration-templates',\r\n  template: /*html*/ `\r\n    <aside class=\"main-sidebar\">\r\n      <section class=\"sidebar\">${leftMenuTemplate}</section>\r\n    </aside>\r\n    <div class=\"content-wrapper\">\r\n      <section class=\"content\"><div>${tabsTemplate}</div></section>\r\n    </div>\r\n    ${tabConfigurationTemplatesTemplate} ${tabConfTemplatesSamples}\r\n    ${tabLicenseTemplate} ${modalConfigurationTemplateTemplate}\r\n  `,\r\n})\r\nexport class ConfigurationTemplatesComponent implements OnInit {\r\n  isModalConfigurationTemplateVisible = false;\r\n\r\n  modalConfigurationTemplateInfo: {\r\n    fileInfo: CfgTmplFileInfo;\r\n    copyFromPath: string;\r\n    //invalidCopyFromPath: {};\r\n    templateFilePathExists: boolean | string;\r\n    templateHowTo: string;\r\n    crudMode: string;\r\n    duplicate: boolean;\r\n    modalTitle: string;\r\n  };\r\n\r\n  constructor(\r\n    protected confirmService: ConfirmService,\r\n    protected messagesService: ToastrMessagesService,\r\n    protected fsService: FsService,\r\n    protected settingsService: SettingsService,\r\n    protected samplesService: SamplesService,\r\n  ) {\r\n    this.modalConfigurationTemplateInfo = {\r\n      fileInfo: {\r\n        fileName: '',\r\n        filePath: '',\r\n        templateName: '',\r\n        capReportGenerationMailMerge: false,\r\n        capReportDistribution: false,\r\n        dsInputType: '',\r\n        notes: '',\r\n        visibility: 'visible',\r\n        type: 'config-reports',\r\n        folderName: '',\r\n        relativeFilePath: '',\r\n        isFallback: false,\r\n      },\r\n      copyFromPath: '',\r\n      //invalidCopyFromPath: {},\r\n      templateFilePathExists: false,\r\n      templateHowTo: '',\r\n      crudMode: 'create',\r\n      duplicate: false,\r\n      modalTitle: '',\r\n    };\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.settingsService.currentConfigurationTemplateName = '';\r\n    this.settingsService.currentConfigurationTemplatePath = '';\r\n\r\n    this.settingsService.configurationFiles =\r\n      await this.settingsService.loadAllSettingsFilesAsync();\r\n  }\r\n\r\n  onConfTemplateClick(confTemplateClicked: { templateName: string }) {\r\n    for (const configurationFile of this.settingsService.configurationFiles) {\r\n      configurationFile.activeClicked =\r\n        configurationFile.templateName === confTemplateClicked.templateName\r\n          ? true\r\n          : false;\r\n    }\r\n  }\r\n\r\n  onDeleteSelectedTemplate() {\r\n    const selectedConfiguration = this.getSelectedConfiguration();\r\n\r\n    if (!selectedConfiguration || selectedConfiguration.isFallback) {\r\n      return;\r\n    }\r\n\r\n    const dialogQuestion = 'Delete selected item?';\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        if (selectedConfiguration.type == 'config-burst-legacy') {\r\n          await this.fsService.removeAsync(selectedConfiguration.filePath);\r\n        } else {\r\n          await this.fsService.removeAsync(\r\n            `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${selectedConfiguration.folderName}`,\r\n          );\r\n        }\r\n\r\n        _.remove(\r\n          this.settingsService.configurationFiles,\r\n          (o) => o.filePath === selectedConfiguration.filePath,\r\n        );\r\n\r\n        this.messagesService.showInfo('Done');\r\n      },\r\n    });\r\n  }\r\n\r\n  async restoreDefaultConfigurationValues() {\r\n    const selectedConfiguration = this.getSelectedConfiguration();\r\n\r\n    let dialogQuestion = `Restore the default configuration values and override the existing \"${selectedConfiguration.templateName}\" configuration?`;\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        let configurationValues: any;\r\n        const currentTemplateName = selectedConfiguration.templateName;\r\n        configurationValues = await this.settingsService.loadSettingsFileAsync(\r\n          this.settingsService.getDefaultsConfigurationValuesFilePath(),\r\n        );\r\n\r\n        //don't do this for config-burst-legacy and config-samples\r\n        if (selectedConfiguration.type == 'config-reports') {\r\n          await this.fsService.copyAsync(\r\n            `${this.settingsService.CONFIGURATION_DEFAULTS_FOLDER_PATH}/reporting.xml`,\r\n            `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${selectedConfiguration.folderName}/reporting.xml`,\r\n            {\r\n              overwrite: true,\r\n            },\r\n          );\r\n\r\n          /*\r\n          await this.fsService.copyAsync(\r\n            `${this.settingsService.CONFIGURATION_DEFAULTS_FOLDER_PATH}/datatables.xml`,\r\n            `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${selectedConfiguration.folderName}/datatables.xml`\r\n          );\r\n          */\r\n        }\r\n\r\n        configurationValues.documentburster.settings.template =\r\n          currentTemplateName;\r\n        configurationValues.documentburster.settings.visibility = 'visible';\r\n\r\n        await this.settingsService.saveSettingsFileAsync(\r\n          selectedConfiguration.filePath,\r\n          configurationValues,\r\n        );\r\n\r\n        this.getSelectedConfiguration().visibility = 'visible';\r\n\r\n        await this.settingsService.loadAllSettingsFilesAsync({\r\n          forceReload: true,\r\n        });\r\n        this.messagesService.showInfo('Saved');\r\n      },\r\n    });\r\n  }\r\n\r\n  async toggleVisibility() {\r\n    const selectedConfiguration = this.getSelectedConfiguration();\r\n\r\n    let visibility = this.getSelectedConfiguration().visibility;\r\n\r\n    let dialogQuestion = `Show '${selectedConfiguration.templateName}' configuration in the menu?`;\r\n\r\n    if (visibility == 'visible')\r\n      dialogQuestion = `Hide '${selectedConfiguration.templateName}' configuration from the menu?`;\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        const settingsXmlConfigurationValues =\r\n          await this.settingsService.loadSettingsFileAsync(\r\n            selectedConfiguration.filePath,\r\n          );\r\n\r\n        if (visibility == 'hidden') {\r\n          visibility = 'visible';\r\n        } else {\r\n          visibility = 'hidden';\r\n        }\r\n\r\n        settingsXmlConfigurationValues.documentburster.settings.visibility =\r\n          visibility;\r\n\r\n        await this.settingsService.saveSettingsFileAsync(\r\n          selectedConfiguration.filePath,\r\n          settingsXmlConfigurationValues,\r\n        );\r\n\r\n        console.log(\r\n          `toggleVisibility selectedConfiguration.filePath: ${selectedConfiguration.filePath}`,\r\n        );\r\n\r\n        this.getSelectedConfiguration().visibility = visibility;\r\n        await this.samplesService.fillSamplesNotes();\r\n      },\r\n    });\r\n  }\r\n\r\n  async showCrudModal(crudMode: string, duplicate?: boolean) {\r\n    this.modalConfigurationTemplateInfo.crudMode = crudMode;\r\n    this.modalConfigurationTemplateInfo.duplicate = duplicate;\r\n\r\n    //this.modalConfigurationTemplateInfo.invalidCopyFromPath = false;\r\n\r\n    if (crudMode == 'update') {\r\n      this.modalConfigurationTemplateInfo.modalTitle = 'Update Report';\r\n\r\n      const selectedConfiguration = this.getSelectedConfiguration();\r\n\r\n      /*\r\n      if (this.modalConfigurationTemplateInfo.default) {\r\n        this.modalConfigurationTemplateInfo.templateHowTo =\r\n          'Used when no other configuration template is configured.';\r\n      }\r\n      */\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.isFallback =\r\n        selectedConfiguration.isFallback;\r\n      this.modalConfigurationTemplateInfo.fileInfo.templateName =\r\n        selectedConfiguration.templateName;\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.capReportDistribution =\r\n        selectedConfiguration.capReportDistribution;\r\n      this.modalConfigurationTemplateInfo.fileInfo.capReportGenerationMailMerge =\r\n        selectedConfiguration.capReportGenerationMailMerge;\r\n      this.modalConfigurationTemplateInfo.fileInfo.type =\r\n        selectedConfiguration.type;\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.visibility =\r\n        selectedConfiguration.visibility;\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.filePath =\r\n        selectedConfiguration.filePath;\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.relativeFilePath =\r\n        selectedConfiguration.relativeFilePath;\r\n\r\n      if (\r\n        !selectedConfiguration.isFallback &&\r\n        !selectedConfiguration.capReportGenerationMailMerge\r\n      )\r\n        this.modalConfigurationTemplateInfo.templateHowTo = `<config>${selectedConfiguration.relativeFilePath}</config>`;\r\n\r\n      const settingsXmlConfigurationValues =\r\n        await this.settingsService.loadSettingsFileAsync(\r\n          selectedConfiguration.filePath,\r\n        );\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.notes =\r\n        settingsXmlConfigurationValues.documentburster.settings.notes;\r\n    } else if (crudMode == 'create') {\r\n      this.modalConfigurationTemplateInfo.fileInfo.type = 'config-reports';\r\n\r\n      this.modalConfigurationTemplateInfo.modalTitle = 'Create Report';\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.templateName = '';\r\n      this.modalConfigurationTemplateInfo.fileInfo.isFallback = false;\r\n      let copyFromXmlConfigurationValues: any;\r\n\r\n      console.log(`duplicate = ${duplicate}`);\r\n\r\n      if (!duplicate) {\r\n        this.modalConfigurationTemplateInfo.copyFromPath =\r\n          this.settingsService.getDefaultsConfigurationValuesFilePath();\r\n\r\n        copyFromXmlConfigurationValues =\r\n          await this.settingsService.loadDefaultSettingsFileAsync();\r\n      } else {\r\n        const selectedConfiguration = this.getSelectedConfiguration();\r\n        this.modalConfigurationTemplateInfo.modalTitle = `Create Report by Duplicating '${selectedConfiguration.templateName}' Configuration Values`;\r\n\r\n        this.modalConfigurationTemplateInfo.copyFromPath =\r\n          selectedConfiguration.filePath;\r\n\r\n        copyFromXmlConfigurationValues =\r\n          await this.settingsService.loadSettingsFileAsync(\r\n            this.modalConfigurationTemplateInfo.copyFromPath,\r\n          );\r\n      }\r\n\r\n      console.log(\r\n        `copyFromXmlConfigurationValues = ${JSON.stringify(\r\n          copyFromXmlConfigurationValues,\r\n        )}`,\r\n      );\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.capReportDistribution =\r\n        copyFromXmlConfigurationValues.documentburster.settings.capabilities.reportdistribution;\r\n      this.modalConfigurationTemplateInfo.fileInfo.capReportGenerationMailMerge =\r\n        copyFromXmlConfigurationValues.documentburster.settings.capabilities.reportgenerationmailmerge;\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.visibility =\r\n        copyFromXmlConfigurationValues.documentburster.settings.visibility;\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.notes =\r\n        copyFromXmlConfigurationValues.documentburster.settings.notes;\r\n    }\r\n\r\n    await this.updateModelAndForm();\r\n\r\n    this.isModalConfigurationTemplateVisible = true;\r\n  }\r\n\r\n  async updateModelAndForm() {\r\n    if (this.modalConfigurationTemplateInfo.crudMode == 'create') {\r\n      // if New mode\r\n      // tslint:disable-next-line:max-line-length\r\n      const folderName = this.modalConfigurationTemplateInfo.fileInfo\r\n        .templateName\r\n        ? _.kebabCase(this.modalConfigurationTemplateInfo.fileInfo.templateName)\r\n        : '${folder-name}';\r\n\r\n      this.modalConfigurationTemplateInfo.fileInfo.filePath = `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${folderName}/settings.xml`;\r\n      // tslint:disable-next-line:max-line-length\r\n      this.modalConfigurationTemplateInfo.fileInfo.relativeFilePath = `./config/reports/${folderName}/settings.xml`;\r\n      this.modalConfigurationTemplateInfo.fileInfo.folderName = folderName;\r\n\r\n      // tslint:disable-next-line:max-line-length\r\n      this.modalConfigurationTemplateInfo.templateFilePathExists =\r\n        await this.fsService.existsAsync(\r\n          this.modalConfigurationTemplateInfo.fileInfo.filePath,\r\n        );\r\n\r\n      this.modalConfigurationTemplateInfo.templateHowTo = '';\r\n\r\n      if (\r\n        !this.modalConfigurationTemplateInfo.fileInfo\r\n          .capReportGenerationMailMerge &&\r\n        !this.modalConfigurationTemplateInfo.fileInfo.isFallback\r\n      ) {\r\n        this.modalConfigurationTemplateInfo.templateHowTo =\r\n          '<config>' +\r\n          this.modalConfigurationTemplateInfo.fileInfo.relativeFilePath +\r\n          '</config>';\r\n      }\r\n\r\n      //this.modalConfigurationTemplateInfo.copyFromPath = Utilities.slash(\r\n      //  this.settingsService.getDefaultsConfigurationValuesFilePath()\r\n      //);\r\n    } else if (this.modalConfigurationTemplateInfo.crudMode == 'update') {\r\n      // if Edit mode\r\n      //delete this.modalConfigurationTemplateInfo.copyFromPath;\r\n      delete this.modalConfigurationTemplateInfo.templateFilePathExists;\r\n    }\r\n  }\r\n\r\n  /*\r\n  async checkForAValidCopyFromPath() {\r\n    if (this.modalConfigurationTemplateInfo.copyFromPath) {\r\n      const fileExists = await this.fsService.existsAsync(\r\n        this.modalConfigurationTemplateInfo.copyFromPath\r\n      );\r\n\r\n      this.modalConfigurationTemplateInfo.invalidCopyFromPath =\r\n        fileExists !== 'file' ||\r\n        !this.modalConfigurationTemplateInfo.copyFromPath.endsWith('.xml');\r\n    } else {\r\n      this.modalConfigurationTemplateInfo.invalidCopyFromPath = false;\r\n    }\r\n  }\r\n  */\r\n\r\n  /*\r\n  onConfigurationClick(variable) {\r\n    this.settingsService.configurationFiles.forEach((element) => {\r\n      element.activeClicked = element.name === variable.name ? true : false;\r\n    });\r\n  }\r\n  */\r\n\r\n  getSelectedConfiguration() {\r\n    if (!this.settingsService.configurationFiles) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.settingsService.configurationFiles.find((configuration) => {\r\n      return configuration.activeClicked;\r\n    });\r\n  }\r\n\r\n  /*\r\n  onSelectCopyFromFile(filePath: string) {\r\n    this.modalConfigurationTemplateInfo.copyFromPath =\r\n      Utilities.slash(filePath);\r\n    this.checkForAValidCopyFromPath();\r\n  }\r\n  */\r\n\r\n  onModalClose() {\r\n    this.isModalConfigurationTemplateVisible = false;\r\n  }\r\n\r\n  async onModalOK() {\r\n    // if New mode\r\n    if (this.modalConfigurationTemplateInfo.crudMode == 'create') {\r\n      const settingsXmlConfigurationValues =\r\n        await this.settingsService.loadSettingsFileAsync(\r\n          this.modalConfigurationTemplateInfo.copyFromPath,\r\n        );\r\n      settingsXmlConfigurationValues.documentburster.settings.template =\r\n        this.modalConfigurationTemplateInfo.fileInfo.templateName;\r\n\r\n      settingsXmlConfigurationValues.documentburster.settings.capabilities.reportdistribution =\r\n        this.modalConfigurationTemplateInfo.fileInfo.capReportDistribution;\r\n\r\n      settingsXmlConfigurationValues.documentburster.settings.capabilities.reportgenerationmailmerge =\r\n        this.modalConfigurationTemplateInfo.fileInfo.capReportGenerationMailMerge;\r\n\r\n      settingsXmlConfigurationValues.documentburster.settings.visibility =\r\n        this.modalConfigurationTemplateInfo.fileInfo.visibility;\r\n\r\n      settingsXmlConfigurationValues.documentburster.settings.notes =\r\n        this.modalConfigurationTemplateInfo.fileInfo.notes;\r\n\r\n      if (this.modalConfigurationTemplateInfo.fileInfo.capReportDistribution) {\r\n        if (!this.modalConfigurationTemplateInfo.duplicate) {\r\n          settingsXmlConfigurationValues.documentburster.settings.emailserver.useconn =\r\n            true;\r\n          settingsXmlConfigurationValues.documentburster.settings.emailserver.conncode =\r\n            this.settingsService.defaultEmailConnectionFile.connectionCode;\r\n        }\r\n      }\r\n\r\n      //const folderName = this.electronService.path.basename(\r\n      //  this.electronService.path.dirname(\r\n      //    this.modalConfigurationTemplateInfo.templateFilePath\r\n      //  )\r\n      //);\r\n\r\n      //console.log(JSON.stringify(settingsXmlConfigurationValues));\r\n\r\n      console.log(\r\n        `modalConfigurationTemplateInfo = ${JSON.stringify(\r\n          this.modalConfigurationTemplateInfo,\r\n        )}`,\r\n      );\r\n\r\n      const folderName = Utilities.basename(\r\n        Utilities.dirname(\r\n          this.modalConfigurationTemplateInfo.fileInfo.filePath,\r\n        ),\r\n      );\r\n\r\n      console.log(\r\n        `FOLDER_PATH = ${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${folderName}`,\r\n      );\r\n\r\n      await this.fsService.dirAsync(\r\n        `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${folderName}`,\r\n      );\r\n      console.log('BEFORE SAVE');\r\n\r\n      await this.settingsService.saveSettingsFileAsync(\r\n        this.modalConfigurationTemplateInfo.fileInfo.filePath,\r\n        settingsXmlConfigurationValues,\r\n      );\r\n\r\n      //console.log(this.modalConfigurationTemplateInfo.copyFromPath);\r\n      //console.log(\r\n      //  this.settingsService.getDefaultsConfigurationValuesFilePath()\r\n      //);\r\n\r\n      if (\r\n        this.modalConfigurationTemplateInfo.copyFromPath ==\r\n        this.settingsService.getDefaultsConfigurationValuesFilePath()\r\n      ) {\r\n        // console.log('config/_defaults');\r\n        await this.fsService.copyAsync(\r\n          `${this.settingsService.CONFIGURATION_DEFAULTS_FOLDER_PATH}/reporting.xml`,\r\n          `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${folderName}/reporting.xml`,\r\n        );\r\n\r\n        /*\r\n        await this.fsService.copyAsync(\r\n          `${this.settingsService.CONFIGURATION_DEFAULTS_FOLDER_PATH}/datatables.xml`,\r\n          `${this.modalConfigurationTemplateInfo.templateFolderPath}/datatables.xml`\r\n        );\r\n        */\r\n      } else {\r\n        //console.log('config/reports');\r\n\r\n        let copyFromFolderName = Utilities.basename(\r\n          Utilities.dirname(this.modalConfigurationTemplateInfo.copyFromPath),\r\n        );\r\n\r\n        if (copyFromFolderName != 'burst')\r\n          await this.fsService.copyAsync(\r\n            `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${copyFromFolderName}/reporting.xml`,\r\n            `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${folderName}/reporting.xml`,\r\n          );\r\n        else\r\n          await this.fsService.copyAsync(\r\n            `${this.settingsService.CONFIGURATION_DEFAULTS_FOLDER_PATH}/reporting.xml`,\r\n            `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${folderName}/reporting.xml`,\r\n          );\r\n\r\n        /*\r\n        await this.fsService.copyAsync(\r\n          `${this.settingsService.CONFIGURATION_REPORTS_FOLDER_PATH}/${copyFromFolderName}/datatables.xml`,\r\n          `${this.modalConfigurationTemplateInfo.templateFolderPath}/datatables.xml`\r\n        );\r\n        */\r\n      }\r\n\r\n      const capReportGenerationMailMerge =\r\n        this.modalConfigurationTemplateInfo.fileInfo\r\n          .capReportGenerationMailMerge;\r\n\r\n      this.settingsService.configurationFiles.push({\r\n        fileName: Utilities.basename(\r\n          this.modalConfigurationTemplateInfo.fileInfo.filePath,\r\n        ),\r\n        filePath: this.modalConfigurationTemplateInfo.fileInfo.filePath,\r\n        templateName: this.modalConfigurationTemplateInfo.fileInfo.templateName,\r\n        capReportDistribution:\r\n          this.modalConfigurationTemplateInfo.fileInfo.capReportDistribution,\r\n        capReportGenerationMailMerge: capReportGenerationMailMerge,\r\n        dsInputType: capReportGenerationMailMerge ? 'ds.csvfile' : '',\r\n        folderName: folderName,\r\n        relativeFilePath:\r\n          this.modalConfigurationTemplateInfo.fileInfo.relativeFilePath,\r\n        isFallback: false,\r\n        visibility: this.modalConfigurationTemplateInfo.fileInfo.visibility,\r\n        type: 'config-reports',\r\n        notes: '',\r\n      });\r\n    } else if (this.modalConfigurationTemplateInfo.crudMode == 'update') {\r\n      // if Edit mode\r\n\r\n      let loadingValuesFilePath =\r\n        this.modalConfigurationTemplateInfo.fileInfo.filePath;\r\n\r\n      if (this.modalConfigurationTemplateInfo.copyFromPath) {\r\n        loadingValuesFilePath =\r\n          this.modalConfigurationTemplateInfo.copyFromPath;\r\n      }\r\n      const configurationValues =\r\n        await this.settingsService.loadSettingsFileAsync(loadingValuesFilePath);\r\n\r\n      configurationValues.documentburster.settings.template =\r\n        this.modalConfigurationTemplateInfo.fileInfo.templateName;\r\n\r\n      configurationValues.documentburster.settings.capabilities.reportdistribution =\r\n        this.modalConfigurationTemplateInfo.fileInfo.capReportDistribution;\r\n\r\n      configurationValues.documentburster.settings.capabilities.reportgenerationmailmerge =\r\n        this.modalConfigurationTemplateInfo.fileInfo.capReportGenerationMailMerge;\r\n\r\n      configurationValues.documentburster.settings.visibility =\r\n        this.modalConfigurationTemplateInfo.fileInfo.visibility;\r\n\r\n      configurationValues.documentburster.settings.notes =\r\n        this.modalConfigurationTemplateInfo.fileInfo.notes;\r\n\r\n      await this.settingsService.saveSettingsFileAsync(\r\n        this.modalConfigurationTemplateInfo.fileInfo.filePath,\r\n        configurationValues,\r\n      );\r\n\r\n      this.getSelectedConfiguration().templateName =\r\n        this.modalConfigurationTemplateInfo.fileInfo.templateName;\r\n      this.getSelectedConfiguration().visibility =\r\n        this.modalConfigurationTemplateInfo.fileInfo.visibility;\r\n\r\n      this.getSelectedConfiguration().capReportDistribution =\r\n        this.modalConfigurationTemplateInfo.fileInfo.capReportDistribution;\r\n\r\n      this.getSelectedConfiguration().capReportGenerationMailMerge =\r\n        this.modalConfigurationTemplateInfo.fileInfo.capReportGenerationMailMerge;\r\n    }\r\n\r\n    this.isModalConfigurationTemplateVisible = false;\r\n    this.messagesService.showInfo('Saved');\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "samplesService",
            "type": "SamplesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 51,
        "jsdoctags": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "samplesService",
            "type": "SamplesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "ConfirmDialogComponent",
      "id": "component-ConfirmDialogComponent-254e47ee03baac94190a5ad23f393e1211848050414949139caeab69cb1797bee360dd8fb1520ce72835e9edee43b79b99be8281531f31c667acd8544303aacb",
      "file": "src/app/components/dialog-confirm/confirm-dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-confirm-dialog",
      "styleUrls": [],
      "styles": [],
      "template": "<div id=\"confirmDialog\" class=\"modal-dialog-center\">\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\" [innerHTML]=\"title\"></h4>\n    <button\n      type=\"button\"\n      class=\"btn-close close pull-right\"\n      aria-label=\"Close\"\n      (click)=\"decline()\"\n    >\n      <span aria-hidden=\"true\" class=\"visually-hidden\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\" [innerHTML]=\"message\"></div>\n  <div class=\"modal-footer\">\n    <button\n      type=\"button\"\n      class=\"btn btn-primary dburst-button-question-confirm\"\n      (click)=\"confirm()\"\n      [innerHTML]=\"confirmLabel\"\n    ></button>\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary dburst-button-question-decline\"\n      (click)=\"decline()\"\n      [innerHTML]=\"declineLabel\"\n    ></button>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "confirmAction",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Function",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "confirmLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "declineLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "onClose",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 40
        }
      ],
      "methodsClass": [
        {
          "name": "confirm",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "decline",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'dburst-confirm-dialog',\r\n  template: `\r\n    <div id=\"confirmDialog\" class=\"modal-dialog-center\">\r\n      <div class=\"modal-header\">\r\n        <h4 class=\"modal-title pull-left\" [innerHTML]=\"title\"></h4>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn-close close pull-right\"\r\n          aria-label=\"Close\"\r\n          (click)=\"decline()\"\r\n        >\r\n          <span aria-hidden=\"true\" class=\"visually-hidden\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\" [innerHTML]=\"message\"></div>\r\n      <div class=\"modal-footer\">\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-primary dburst-button-question-confirm\"\r\n          (click)=\"confirm()\"\r\n          [innerHTML]=\"confirmLabel\"\r\n        ></button>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-secondary dburst-button-question-decline\"\r\n          (click)=\"decline()\"\r\n          [innerHTML]=\"declineLabel\"\r\n        ></button>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class ConfirmDialogComponent implements OnInit {\r\n  onClose: Subject<boolean>;\r\n  title: string;\r\n  message: string;\r\n  confirmLabel: string;\r\n  declineLabel: string;\r\n  confirmAction: Function;\r\n\r\n  constructor(protected bsModalRef: BsModalRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.onClose = new Subject();\r\n  }\r\n\r\n  confirm() {\r\n    this.bsModalRef.hide();\r\n    this.onClose?.next(true);\r\n    return this.confirmAction();\r\n  }\r\n\r\n  decline() {\r\n    this.bsModalRef.hide();\r\n    this.onClose?.next(false);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "bsModalRef",
            "type": "BsModalRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 44,
        "jsdoctags": [
          {
            "name": "bsModalRef",
            "type": "BsModalRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "ExternalConnectionsComponent",
      "id": "component-ExternalConnectionsComponent-d33c35acac0cffb5d740dfdacb8c7cbbae8fd39789377e826db5c16900e275b7cfadc84d37d36f422cfd837679bbc62815376c4c67a8b6461d9d3dc6d7f89e96",
      "file": "src/app/areas/_ext-connections/ext-connections.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-ext-connections",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "configurationFileName",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "configurationFilePath",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "goBackLocation",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "isModalExtConnectionVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "modalConnectionInfo",
          "defaultValue": "{\r\n    crudMode: 'create',\r\n    duplicate: false,\r\n    modalTitle: 'Create Email Connection',\r\n    //connectionCode: '',\r\n    //connectionName: '',\r\n    filePath: '',\r\n    connectionFilePathExists: '' as boolean | string,\r\n    email: {\r\n      documentburster: {\r\n        connection: {\r\n          code: '',\r\n          name: '',\r\n          defaultConnection: false,\r\n          emailserver: { ...newEmailServer },\r\n        },\r\n      },\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 44
        }
      ],
      "methodsClass": [
        {
          "name": "doTestSMTPConnection",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 317,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getSelectedConnection",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "goBack",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 307,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onDeleteSelectedConnection",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onItemClick",
          "args": [
            {
              "name": "item",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "item",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onModalClose",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 303,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onModalOK",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 234,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "showCrudModal",
          "args": [
            {
              "name": "crudMode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "duplicate",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 151,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "crudMode",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "duplicate",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleDefault",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 343,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "updateFormControlWithSelectedVariable",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "selectedVariableValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 195,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "selectedVariableValue",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateModelAndForm",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 286,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "updateSMTPFormControlsWithSelectedProviderSettings",
          "args": [
            {
              "name": "selectedProviderSettings",
              "type": "EmailProviderSettings",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 210,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "selectedProviderSettings",
              "type": "EmailProviderSettings",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport _ from 'lodash';\r\n\r\nimport { leftMenuTemplate } from './templates/_left-menu';\r\nimport { tabsTemplate } from './templates/_tabs';\r\nimport { tabExternalConnectionsTemplate } from './templates/tab-ext-connection';\r\nimport { tabLogsTemplate } from './templates/tab-logs';\r\n\r\nimport { tabLicenseTemplate } from './templates/tab-license';\r\nimport { ConfirmService } from '../../components/dialog-confirm/confirm.service';\r\nimport { ToastrMessagesService } from '../../providers/toastr-messages.service';\r\n\r\nimport { modalExtConnectionsTemplate } from './templates/modal-ext-connection';\r\nimport { EmailProviderSettings } from '../../components/button-well-known/button-well-known.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport Utilities from '../../helpers/utilities';\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\nimport { InfoService } from '../../components/dialog-info/info.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { ShellService } from '../../providers/shell.service';\r\nimport { FsService } from '../../providers/fs.service';\r\nimport { newEmailServer } from '../../providers/settings.service';\r\n\r\n@Component({\r\n  selector: 'dburst-ext-connections',\r\n  template: `\r\n    <aside class=\"main-sidebar\">\r\n      <section class=\"sidebar\">${leftMenuTemplate}</section>\r\n    </aside>\r\n    <div class=\"content-wrapper\">\r\n      <section class=\"content\"><div>${tabsTemplate}</div></section>\r\n    </div>\r\n    ${tabExternalConnectionsTemplate} ${modalExtConnectionsTemplate}\r\n    ${tabLogsTemplate} ${tabLicenseTemplate}\r\n  `,\r\n})\r\nexport class ExternalConnectionsComponent implements OnInit {\r\n  isModalExtConnectionVisible = false;\r\n\r\n  goBackLocation = '';\r\n  configurationFilePath = '';\r\n  configurationFileName = '';\r\n\r\n  modalConnectionInfo = {\r\n    crudMode: 'create',\r\n    duplicate: false,\r\n    modalTitle: 'Create Email Connection',\r\n    //connectionCode: '',\r\n    //connectionName: '',\r\n    filePath: '',\r\n    connectionFilePathExists: '' as boolean | string,\r\n    email: {\r\n      documentburster: {\r\n        connection: {\r\n          code: '',\r\n          name: '',\r\n          defaultConnection: false,\r\n          emailserver: { ...newEmailServer },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    protected confirmService: ConfirmService,\r\n    protected messagesService: ToastrMessagesService,\r\n    protected fsService: FsService,\r\n    protected settingsService: SettingsService,\r\n    protected infoService: InfoService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected shellService: ShellService,\r\n    protected route: ActivatedRoute,\r\n    protected router: Router,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.settingsService.numberOfUserVariables = 20;\r\n    this.settingsService.currentConfigurationTemplateName = '';\r\n    this.settingsService.currentConfigurationTemplatePath = '';\r\n\r\n    this.settingsService.configurationFiles =\r\n      await this.settingsService.loadAllSettingsFilesAsync();\r\n\r\n    await this.settingsService.loadAllConnectionFilesAsync();\r\n\r\n    if (!this.settingsService.defaultEmailConnectionFile) {\r\n      if (\r\n        this.settingsService.connectionFiles &&\r\n        this.settingsService.connectionFiles.length > 0\r\n      ) {\r\n        this.messagesService.showWarning(\r\n          'Choose a single email connection to be the `Default` email cnnection',\r\n        );\r\n      } else {\r\n        this.messagesService.showInfo(\r\n          'Multiple email connections can be configured and one should be selected to be the `Default` email connection`',\r\n        );\r\n      }\r\n    }\r\n\r\n    this.route.params.subscribe(async (params) => {\r\n      if (params.goBackLocation) {\r\n        this.goBackLocation = params.goBackLocation;\r\n        this.configurationFilePath = params.configurationFilePath;\r\n        this.configurationFileName = params.configurationFileName;\r\n      }\r\n    });\r\n  }\r\n\r\n  //generate inline a function at this location\r\n\r\n  onItemClick(item: { filePath: string }) {\r\n    //console.log(item.filePath);\r\n\r\n    for (const connectionFile of this.settingsService.connectionFiles) {\r\n      connectionFile.activeClicked =\r\n        connectionFile.filePath === item.filePath ? true : false;\r\n    }\r\n  }\r\n\r\n  getSelectedConnection() {\r\n    if (!this.settingsService.connectionFiles) {\r\n      return undefined;\r\n    }\r\n\r\n    return this.settingsService.connectionFiles.find(\r\n      (connection) => connection.activeClicked,\r\n    );\r\n  }\r\n\r\n  onDeleteSelectedConnection() {\r\n    if (!this.getSelectedConnection()) {\r\n      return;\r\n    }\r\n    const dialogQuestion = 'Delete selected item?';\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        await this.fsService.removeAsync(this.getSelectedConnection().filePath);\r\n\r\n        _.remove(\r\n          this.settingsService.connectionFiles,\r\n          (o) => o.filePath === this.getSelectedConnection().filePath,\r\n        );\r\n\r\n        this.messagesService.showInfo('Done');\r\n      },\r\n    });\r\n  }\r\n\r\n  async showCrudModal(crudMode: string, duplicate?: boolean) {\r\n    this.modalConnectionInfo.crudMode = crudMode;\r\n\r\n    this.modalConnectionInfo.modalTitle = 'Create Email Connection';\r\n\r\n    this.modalConnectionInfo.connectionFilePathExists = false;\r\n    this.modalConnectionInfo.email.documentburster.connection.code = '';\r\n    this.modalConnectionInfo.email.documentburster.connection.name = '';\r\n\r\n    this.modalConnectionInfo.email.documentburster.connection.defaultConnection =\r\n      false;\r\n\r\n    if (crudMode == 'update' || duplicate) {\r\n      const selectedConnection = this.getSelectedConnection();\r\n\r\n      if (crudMode == 'update') {\r\n        this.modalConnectionInfo.filePath = selectedConnection.filePath;\r\n\r\n        this.modalConnectionInfo.modalTitle = 'Update Email Connection';\r\n\r\n        this.modalConnectionInfo.email.documentburster.connection.code =\r\n          selectedConnection.connectionCode;\r\n\r\n        this.modalConnectionInfo.email.documentburster.connection.name =\r\n          selectedConnection.connectionName;\r\n\r\n        this.modalConnectionInfo.email.documentburster.connection.defaultConnection =\r\n          selectedConnection.defaultConnection;\r\n      }\r\n\r\n      this.modalConnectionInfo.email.documentburster.connection.emailserver = {\r\n        ...selectedConnection.emailserver,\r\n      };\r\n    } else {\r\n      this.modalConnectionInfo.email.documentburster.connection.defaultConnection =\r\n        false;\r\n\r\n      this.modalConnectionInfo.email.documentburster.connection.emailserver = {\r\n        ...newEmailServer,\r\n      };\r\n    }\r\n    this.isModalExtConnectionVisible = true;\r\n  }\r\n\r\n  updateFormControlWithSelectedVariable(\r\n    id: string,\r\n    selectedVariableValue: string,\r\n  ) {\r\n    const formControl = document.getElementById(id) as HTMLInputElement;\r\n    const caretPos = formControl.selectionStart;\r\n    const oldValue = formControl.value;\r\n    formControl.value =\r\n      oldValue.substring(0, caretPos) +\r\n      selectedVariableValue +\r\n      oldValue.substring(caretPos);\r\n\r\n    formControl.dispatchEvent(new Event('input'));\r\n  }\r\n\r\n  async updateSMTPFormControlsWithSelectedProviderSettings(\r\n    selectedProviderSettings: EmailProviderSettings,\r\n  ) {\r\n    this.modalConnectionInfo.email.documentburster.connection.emailserver.usessl =\r\n      false;\r\n    this.modalConnectionInfo.email.documentburster.connection.emailserver.usetls =\r\n      false;\r\n\r\n    this.modalConnectionInfo.email.documentburster.connection.emailserver.host =\r\n      selectedProviderSettings.host;\r\n    this.modalConnectionInfo.email.documentburster.connection.emailserver.port =\r\n      selectedProviderSettings.port;\r\n\r\n    if (selectedProviderSettings.secure === true) {\r\n      this.modalConnectionInfo.email.documentburster.connection.emailserver.usessl =\r\n        true;\r\n    }\r\n\r\n    if (selectedProviderSettings.tls) {\r\n      this.modalConnectionInfo.email.documentburster.connection.emailserver.usetls =\r\n        true;\r\n    }\r\n  }\r\n\r\n  async onModalOK() {\r\n    // if New mode\r\n    if (\r\n      this.modalConnectionInfo.crudMode == 'create' ||\r\n      this.modalConnectionInfo.duplicate\r\n    ) {\r\n      const connectionCode = `eml-${_.kebabCase(\r\n        this.modalConnectionInfo.email.documentburster.connection.name,\r\n      )}`;\r\n\r\n      this.modalConnectionInfo.email.documentburster.connection.code =\r\n        connectionCode;\r\n      this.modalConnectionInfo.email.documentburster.connection.defaultConnection =\r\n        false;\r\n\r\n      const connectionFileName = `${connectionCode}.xml`;\r\n\r\n      this.settingsService.connectionFiles.push({\r\n        fileName: connectionFileName,\r\n        filePath: this.modalConnectionInfo.filePath,\r\n        connectionCode: connectionCode,\r\n        connectionName:\r\n          this.modalConnectionInfo.email.documentburster.connection.name,\r\n        connectionType: connectionFileName.startsWith('eml-')\r\n          ? 'email-connection'\r\n          : 'database-connection',\r\n        activeClicked: false,\r\n        defaultConnection: false,\r\n        emailserver:\r\n          this.modalConnectionInfo.email.documentburster.connection.emailserver,\r\n      });\r\n    } else if (this.modalConnectionInfo.crudMode == 'update') {\r\n      const selectedConnection = this.getSelectedConnection();\r\n      selectedConnection.connectionName =\r\n        this.modalConnectionInfo.email.documentburster.connection.name;\r\n\r\n      selectedConnection.emailserver =\r\n        this.modalConnectionInfo.email.documentburster.connection.emailserver;\r\n    }\r\n\r\n    await this.settingsService.saveConnectionFileAsync(\r\n      this.modalConnectionInfo.filePath,\r\n      this.modalConnectionInfo.email,\r\n    );\r\n\r\n    //await this.settingsService.loadAllConnectionFilesAsync();\r\n\r\n    this.messagesService.showInfo('Saved');\r\n\r\n    this.isModalExtConnectionVisible = false;\r\n  }\r\n\r\n  async updateModelAndForm() {\r\n    if (this.modalConnectionInfo.crudMode != 'update') {\r\n      const connectionCode = `eml-${_.kebabCase(\r\n        this.modalConnectionInfo.email.documentburster.connection.name,\r\n      )}`;\r\n\r\n      const connectionFileName = `${connectionCode}.xml`;\r\n      this.modalConnectionInfo.filePath = `${this.settingsService.CONFIGURATION_CONNECTIONS_FOLDER_PATH}/${connectionFileName}`;\r\n\r\n      this.modalConnectionInfo.connectionFilePathExists =\r\n        await this.fsService.existsAsync(this.modalConnectionInfo.filePath);\r\n      console.log(\r\n        `this.modalConnectionInfo.connectionFilePathExists = ${this.modalConnectionInfo.connectionFilePathExists}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  onModalClose() {\r\n    this.isModalExtConnectionVisible = false;\r\n  }\r\n\r\n  goBack() {\r\n    this.router.navigate([\r\n      '/configuration',\r\n      'emailSettingsMenuSelected',\r\n      this.configurationFilePath,\r\n      this.configurationFileName,\r\n      true,\r\n    ]);\r\n  }\r\n\r\n  doTestSMTPConnection() {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      const dialogQuestion = 'Send test email?';\r\n\r\n      this.confirmService.askConfirmation({\r\n        message: dialogQuestion,\r\n        confirmAction: () => {\r\n          const selectedConnection = this.getSelectedConnection();\r\n\r\n          this.shellService.runBatFile([\r\n            '-cec',\r\n            '-c',\r\n            '\"' + Utilities.slash(selectedConnection.filePath) + '\"',\r\n          ]);\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  async toggleDefault() {\r\n    const selectedConnection = this.getSelectedConnection();\r\n\r\n    let dialogQuestion = `Make '${selectedConnection.connectionName}' connection the 'Default' ${selectedConnection.connectionType}?`;\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        const previousDefaultConnection =\r\n          this.settingsService.connectionFiles.find(\r\n            (connection) =>\r\n              connection.defaultConnection &&\r\n              connection.connectionType == selectedConnection.connectionType,\r\n          );\r\n\r\n        //previous\r\n        if (previousDefaultConnection) {\r\n          this.modalConnectionInfo.email.documentburster.connection.defaultConnection =\r\n            false;\r\n          this.modalConnectionInfo.email.documentburster.connection.code =\r\n            previousDefaultConnection.connectionCode;\r\n          this.modalConnectionInfo.email.documentburster.connection.name =\r\n            previousDefaultConnection.connectionName;\r\n          this.modalConnectionInfo.email.documentburster.connection.emailserver =\r\n            previousDefaultConnection.emailserver;\r\n\r\n          previousDefaultConnection.defaultConnection = false;\r\n\r\n          await this.settingsService.saveConnectionFileAsync(\r\n            previousDefaultConnection.filePath,\r\n            this.modalConnectionInfo.email,\r\n          );\r\n        }\r\n        //selected\r\n\r\n        this.modalConnectionInfo.email.documentburster.connection.defaultConnection =\r\n          true;\r\n        this.modalConnectionInfo.email.documentburster.connection.code =\r\n          selectedConnection.connectionCode;\r\n        this.modalConnectionInfo.email.documentburster.connection.name =\r\n          selectedConnection.connectionName;\r\n        this.modalConnectionInfo.email.documentburster.connection.emailserver =\r\n          selectedConnection.emailserver;\r\n\r\n        selectedConnection.defaultConnection = true;\r\n\r\n        this.settingsService.defaultEmailConnectionFile = selectedConnection;\r\n\r\n        await this.settingsService.saveConnectionFileAsync(\r\n          selectedConnection.filePath,\r\n          this.modalConnectionInfo.email,\r\n        );\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "infoService",
            "type": "InfoService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 62,
        "jsdoctags": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "infoService",
            "type": "InfoService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "ExtraPackagesComponent",
      "id": "component-ExtraPackagesComponent-5233476e8a58b9d7aa1d1c767363f134b15896a684e1c55f77d2e070f86958826320bf629a0b32faca1cc0ae6eda47be1fa397c534f8bc1826c040c1ec2f38cc",
      "file": "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-extra-packages",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "extraPackages",
          "defaultValue": "[\r\n    {\r\n      id: 'notepadplusplus',\r\n      name: 'Notepad++',\r\n      icon: 'notepad++.svg',\r\n      website: 'https://notepad-plus-plus.org',\r\n      description: ` is a free (as in “free speech” and also as in “free beer”) source code editor and Notepad replacement. Notepad++ is useful when editing ReportBurster configuration files and scripts.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install notepadplusplus --yes',\r\n      cmdUnInstall: 'choco uninstall notepadplusplus',\r\n      cmdGetInfo: 'choco info notepadplusplus -lo',\r\n    },\r\n    {\r\n      id: 'vscode',\r\n      name: 'Visual Studio Code',\r\n      icon: 'vscode-logo.svg',\r\n      website: 'https://code.visualstudio.com',\r\n      description: ` Code editing. Redefined.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install vscode --yes',\r\n      cmdUnInstall: 'choco uninstall vscode',\r\n      cmdGetInfo: 'choco info vscode -lo',\r\n    },\r\n    {\r\n      id: 'winmerge',\r\n      name: 'WinMerge',\r\n      icon: 'winmerge.png',\r\n      website: 'https://winmerge.org',\r\n      description: ` is an Open Source differencing and merging tool for Windows. WinMerge can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle. WinMerge can be used for comparing ReportBurster configuration files and scripts.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install winmerge --yes',\r\n      cmdUnInstall: 'choco uninstall winmerge',\r\n      cmdGetInfo: 'choco info winmerge -lo',\r\n    },\r\n    {\r\n      id: 'docker-desktop',\r\n      name: 'Docker Desktop',\r\n      icon: 'docker.svg',\r\n      website: 'https://www.docker.com/products/docker-desktop/',\r\n      description: ` a very good containerization software. Docker is required for running other ReportBurster extra packages.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install docker-desktop --yes',\r\n      cmdUnInstall: 'choco uninstall docker-desktop',\r\n      cmdGetInfo: 'choco info docker-desktop -lo',\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [124]
        }
      ],
      "methodsClass": [
        {
          "name": "doInstallUninstallAction",
          "args": [
            {
              "name": "pckage",
              "type": "ExtPackage",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "pckage",
              "type": "ExtPackage",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "fetchExtraPackagesDetails",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\nimport { extraPackagesTemplate } from './extra-packages.template';\r\n\r\nimport { BashService } from '../bash.service';\r\nimport { ConfirmService } from '../../../components/dialog-confirm/confirm.service';\r\nimport { ExecutionStatsService } from '../../../providers/execution-stats.service';\r\nimport Utilities from '../../../helpers/utilities';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport UtilitiesElectron from '../../../helpers/utilities-electron';\r\nimport { ElectronService } from '../../../core/services';\r\n\r\ninterface ExtPackage {\r\n  id: string;\r\n  name: string;\r\n  icon: string;\r\n  website: string;\r\n  description: string;\r\n  status: string;\r\n  packageManager: string;\r\n  cmdInstall: string;\r\n  cmdUnInstall: string;\r\n  cmdGetInfo: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'dburst-extra-packages',\r\n  template: ` ${extraPackagesTemplate} `,\r\n})\r\nexport class ExtraPackagesComponent implements OnInit {\r\n  protected extraPackages = [\r\n    {\r\n      id: 'notepadplusplus',\r\n      name: 'Notepad++',\r\n      icon: 'notepad++.svg',\r\n      website: 'https://notepad-plus-plus.org',\r\n      description: ` is a free (as in “free speech” and also as in “free beer”) source code editor and Notepad replacement. Notepad++ is useful when editing ReportBurster configuration files and scripts.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install notepadplusplus --yes',\r\n      cmdUnInstall: 'choco uninstall notepadplusplus',\r\n      cmdGetInfo: 'choco info notepadplusplus -lo',\r\n    },\r\n    {\r\n      id: 'vscode',\r\n      name: 'Visual Studio Code',\r\n      icon: 'vscode-logo.svg',\r\n      website: 'https://code.visualstudio.com',\r\n      description: ` Code editing. Redefined.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install vscode --yes',\r\n      cmdUnInstall: 'choco uninstall vscode',\r\n      cmdGetInfo: 'choco info vscode -lo',\r\n    },\r\n    {\r\n      id: 'winmerge',\r\n      name: 'WinMerge',\r\n      icon: 'winmerge.png',\r\n      website: 'https://winmerge.org',\r\n      description: ` is an Open Source differencing and merging tool for Windows. WinMerge can compare both folders and files, presenting differences in a visual text format that is easy to understand and handle. WinMerge can be used for comparing ReportBurster configuration files and scripts.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install winmerge --yes',\r\n      cmdUnInstall: 'choco uninstall winmerge',\r\n      cmdGetInfo: 'choco info winmerge -lo',\r\n    },\r\n    {\r\n      id: 'docker-desktop',\r\n      name: 'Docker Desktop',\r\n      icon: 'docker.svg',\r\n      website: 'https://www.docker.com/products/docker-desktop/',\r\n      description: ` a very good containerization software. Docker is required for running other ReportBurster extra packages.`,\r\n      status: 'not-installed',\r\n      packageManager: 'choco',\r\n      cmdInstall: 'choco install docker-desktop --yes',\r\n      cmdUnInstall: 'choco uninstall docker-desktop',\r\n      cmdGetInfo: 'choco info docker-desktop -lo',\r\n    },\r\n  ];\r\n\r\n  constructor(\r\n    protected translateService: TranslateService,\r\n    protected bashService: BashService,\r\n    protected electronService: ElectronService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected confirmService: ConfirmService,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.fetchExtraPackagesDetails();\r\n  }\r\n\r\n  async fetchExtraPackagesDetails() {\r\n    for (const extraPackage of this.extraPackages) {\r\n      const packageId = extraPackage.id;\r\n\r\n      extraPackage.description = await this.translateService.instant(\r\n        `AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INNER-HTML.${packageId.toUpperCase()}`,\r\n      );\r\n\r\n      //console.log(packageId);\r\n\r\n      extraPackage.status = 'not-installed';\r\n\r\n      const chocoInfoCommand = `choco info ${packageId} -lo`;\r\n      //const chocoInfoCommand = `choco --version`;\r\n\r\n      try {\r\n        const { stdout, stderr } =\r\n          await UtilitiesElectron.execNativeCommand(chocoInfoCommand);\r\n\r\n        //console.log(`chocoInfo = ${chocoInfo}`);\r\n\r\n        if (stdout && stdout.includes('1 packages installed.')) {\r\n          extraPackage.status = 'installed';\r\n        }\r\n      } catch (error) {\r\n        extraPackage.status = 'not-installed';\r\n      }\r\n    }\r\n    // Sort the extraPackages array so that installed packages come first\r\n    this.extraPackages.sort((a, b) => {\r\n      if (a.status === 'installed' && b.status !== 'installed') {\r\n        return -1;\r\n      } else if (a.status !== 'installed' && b.status === 'installed') {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  doInstallUninstallAction(pckage: ExtPackage, action: string) {\r\n    const dialogQuestion = `${Utilities.titleCase(action)} ${pckage.name}?`;\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: () => {\r\n        this.bashService.typeCommandOnTerminalAndThenPressEnter(\r\n          `choco ${action} ${pckage.id} --yes`,\r\n        );\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "bashService",
            "type": "BashService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 80,
        "jsdoctags": [
          {
            "name": "translateService",
            "type": "TranslateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "bashService",
            "type": "BashService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-cad94b233ec8e80ceb541e7972c5f9737e08237b4e137112f3987ca48ee0cce5c0d57798d41daa5d4d24d6bdbb2df1606ab68cca2aa0a1785e38f99f3cac0729",
      "file": "src/stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": ["./header.css"],
      "styles": [],
      "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "User | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "ButtonComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": "",
      "extends": []
    },
    {
      "name": "HelpComponent",
      "id": "component-HelpComponent-5370e3c767d69b369d721263363688155385889f161f18c1d52ed9c8bddd73012ab366a2a01a15cb7429d4cde96e8ab0fefe6c3f9bc9ae75d646cc4bbc8cb7d0",
      "file": "src/app/areas/_help/help.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-help",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "ALL_TABS",
          "defaultValue": "[\r\n    {\r\n      id: 'supportTab',\r\n      heading: 'AREAS.HELP.TABS.SUPPORT',\r\n      ngTemplateOutlet: 'tabSupportTemplate',\r\n    },\r\n    {\r\n      id: 'docsTab',\r\n      heading: 'AREAS.HELP.TABS.DOCUMENTATION',\r\n      ngTemplateOutlet: 'tabDocumentationTemplate',\r\n    },\r\n    {\r\n      id: 'servicesTab',\r\n      heading: 'AREAS.HELP.TABS.SERVICES',\r\n      ngTemplateOutlet: 'tabServicesTemplate',\r\n    },\r\n    {\r\n      id: 'useCasesTab',\r\n      heading: 'AREAS.HELP.TABS.EXAMPLES',\r\n      ngTemplateOutlet: 'tabExamplesTemplate',\r\n    },\r\n    {\r\n      id: 'freeForSchoolsTab',\r\n      heading: 'AREAS.HELP.TABS.FREE',\r\n      ngTemplateOutlet: 'tabFreeTemplate',\r\n    },\r\n    {\r\n      id: 'reviewsTab',\r\n      heading: 'AREAS.HELP.TABS.REVIEWS',\r\n      ngTemplateOutlet: 'tabReviewsTemplate',\r\n    },\r\n    {\r\n      id: 'blogTab',\r\n      heading: 'AREAS.HELP.TABS.BLOG',\r\n      ngTemplateOutlet: 'tabBlogTemplate',\r\n    },\r\n    {\r\n      id: 'javaTab',\r\n      heading: 'AREAS.HELP.TABS.JAVA',\r\n      ngTemplateOutlet: 'tabJavaTemplate',\r\n    },\r\n    {\r\n      id: 'systemDiagnosticsTab',\r\n      heading: 'AREAS.HELP.TABS.SYSTEM-DIAGNOSTICS',\r\n      ngTemplateOutlet: 'tabSystemDiagnosticsTemplate',\r\n    },\r\n    {\r\n      id: 'terminalTab',\r\n      heading: 'AREAS.HELP.TABS.TERMINAL',\r\n      ngTemplateOutlet: 'tabTerminalTemplate',\r\n    },\r\n    {\r\n      id: 'updateTab',\r\n      heading: 'AREAS.HELP.TABS.UPDATE',\r\n      ngTemplateOutlet: 'tabUpdateTemplate',\r\n    },\r\n    {\r\n      id: 'extraPackagesTab',\r\n      heading: 'AREAS.HELP.TABS.EXTRA-PACKAGES',\r\n      ngTemplateOutlet: 'tabExtraPackagesTemplate',\r\n    },\r\n    {\r\n      id: 'aboutTab',\r\n      heading: 'AREAS.HELP.TABS.ABOUT',\r\n      ngTemplateOutlet: 'tabAboutTemplate',\r\n    },\r\n    {\r\n      id: 'comparisonTab',\r\n      heading: 'AREAS.HELP.TABS.COMPARISON',\r\n      ngTemplateOutlet: 'tabComparisonTemplate',\r\n    },\r\n    {\r\n      id: 'licenseTab',\r\n      heading: 'SHARED-TABS.LICENSE',\r\n      ngTemplateOutlet: 'tabLicenseTemplate',\r\n    },\r\n    {\r\n      id: 'logsTab',\r\n      heading: 'SHARED-TABS.LOGGING-TRACING',\r\n      ngTemplateOutlet: 'tabLogsTemplate',\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 101
        },
        {
          "name": "currentLeftMenu",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 236
        },
        {
          "name": "MENU_SELECTED_X_VISIBLE_TABS",
          "defaultValue": "[\r\n    {\r\n      selectedMenu: 'supportMenuSelected',\r\n      visibleTabs: ['supportTab', 'licenseTab', 'logsTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'docsMenuSelected',\r\n      visibleTabs: ['docsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'servicesMenuSelected',\r\n      visibleTabs: ['servicesTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'useCasesMenuSelected',\r\n      visibleTabs: ['useCasesTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'freeForSchoolsMenuSelected',\r\n      visibleTabs: ['freeForSchoolsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'reviewsMenuSelected',\r\n      visibleTabs: ['reviewsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'blogMenuSelected',\r\n      visibleTabs: ['blogTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'installSetupMenuSelected',\r\n      visibleTabs: [\r\n        'javaTab',\r\n        'systemDiagnosticsTab',\r\n        'terminalTab',\r\n        'updateTab',\r\n        'extraPackagesTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'licenseMenuSelected',\r\n      visibleTabs: ['licenseTab', 'logsTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'aboutMenuSelected',\r\n      visibleTabs: ['aboutTab', 'comparisonTab', 'licenseTab'],\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 184
        },
        {
          "name": "tabAboutTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 86,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabAboutTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabBlogTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 68,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabBlogTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabComparisonTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 88,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabComparisonTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabDocumentationTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 56,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabDocumentationTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabExamplesTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 61,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabExamplesTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabExtraPackagesTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 77,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabExtraPackagesTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabFreeTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 63,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabFreeTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabJavaTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 71,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabJavaTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabLicenseTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 93,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabLicenseTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabLogsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 91,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabLogsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabReviewsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 65,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabReviewsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabServicesTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 58,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabServicesTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabSupportTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabSupportTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabSystemDiagnosticsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 80,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabSystemDiagnosticsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabTerminalTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 74,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabTerminalTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabUpdateTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 83,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabUpdateTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "visibleTabs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type[]",
          "optional": false,
          "description": "",
          "line": 95,
          "modifierKind": [124]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 260,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 245,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "refreshBlogRss",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 277,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "refreshTabs",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 264,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  TemplateRef,\r\n  AfterViewChecked,\r\n} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n//import RSS from 'vanilla-rss';\r\n\r\nimport { leftMenuTemplate } from './templates/_left-menu';\r\nimport { tabsTemplate } from './templates/_tabs';\r\n\r\nimport { tabSupportTemplate } from './templates/tab-support';\r\nimport { tabDocumentationTemplate } from './templates/tab-documentation';\r\nimport { tabServicesTemplate } from './templates/tab-services';\r\nimport { tabExamplesTemplate } from './templates/tab-examples';\r\nimport { tabFreeTemplate } from './templates/tab-free';\r\nimport { tabReviewsTemplate } from './templates/tab-reviews';\r\nimport { tabBlogTemplate } from './templates/tab-blog';\r\nimport { tabAboutTemplate } from './templates/tab-about';\r\nimport { tabJavaTemplate } from './templates/tab-java';\r\nimport { tabTerminalTemplate } from './templates/tab-terminal';\r\nimport { tabExtraPackagesTemplate } from './templates/tab-extra-packages';\r\nimport { tabSystemDiagnosticsTemplate } from './templates/tab-system-diagnostics';\r\nimport { tabUpdateTemplate } from './templates/tab-update';\r\nimport { tabComparisonTemplate } from './templates/tab-comparison';\r\nimport { tabLogsTemplate } from './templates/tab-logs';\r\nimport { tabLicenseTemplate } from './templates/tab-license';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { ElectronService } from '../../core/services/electron/electron.service';\r\n\r\n@Component({\r\n  selector: 'dburst-help',\r\n  template: `\r\n    <aside class=\"main-sidebar\">\r\n      <section class=\"sidebar\">${leftMenuTemplate}</section>\r\n    </aside>\r\n    <div class=\"content-wrapper\">\r\n      <section class=\"content\"><div>${tabsTemplate}</div></section>\r\n    </div>\r\n    ${tabSupportTemplate} ${tabDocumentationTemplate} ${tabServicesTemplate}\r\n    ${tabExamplesTemplate} ${tabFreeTemplate} ${tabReviewsTemplate}\r\n    ${tabBlogTemplate} ${tabJavaTemplate} ${tabTerminalTemplate}\r\n    ${tabExtraPackagesTemplate} ${tabSystemDiagnosticsTemplate}\r\n    ${tabUpdateTemplate} ${tabAboutTemplate} ${tabComparisonTemplate}\r\n    ${tabLogsTemplate} ${tabLicenseTemplate}\r\n  `,\r\n})\r\nexport class HelpComponent implements OnInit, AfterViewChecked {\r\n  @ViewChild('tabSupportTemplate', { static: true })\r\n  tabSupportTemplate: TemplateRef<any>;\r\n  @ViewChild('tabDocumentationTemplate', { static: true })\r\n  tabDocumentationTemplate: TemplateRef<any>;\r\n  @ViewChild('tabServicesTemplate', { static: true })\r\n  tabServicesTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabExamplesTemplate', { static: true })\r\n  tabExamplesTemplate: TemplateRef<any>;\r\n  @ViewChild('tabFreeTemplate', { static: true })\r\n  tabFreeTemplate: TemplateRef<any>;\r\n  @ViewChild('tabReviewsTemplate', { static: true })\r\n  tabReviewsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabBlogTemplate', { static: true })\r\n  tabBlogTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabJavaTemplate', { static: true })\r\n  tabJavaTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabTerminalTemplate', { static: true })\r\n  tabTerminalTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabExtraPackagesTemplate', { static: true })\r\n  tabExtraPackagesTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabSystemDiagnosticsTemplate', { static: true })\r\n  tabSystemDiagnosticsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabUpdateTemplate', { static: true })\r\n  tabUpdateTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabAboutTemplate', { static: true })\r\n  tabAboutTemplate: TemplateRef<any>;\r\n  @ViewChild('tabComparisonTemplate', { static: true })\r\n  tabComparisonTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabLogsTemplate', { static: true })\r\n  tabLogsTemplate: TemplateRef<any>;\r\n  @ViewChild('tabLicenseTemplate', { static: true })\r\n  tabLicenseTemplate: TemplateRef<any>;\r\n\r\n  protected visibleTabs: {\r\n    id: string;\r\n    heading: string;\r\n    ngTemplateOutlet: string;\r\n  }[];\r\n\r\n  ALL_TABS = [\r\n    {\r\n      id: 'supportTab',\r\n      heading: 'AREAS.HELP.TABS.SUPPORT',\r\n      ngTemplateOutlet: 'tabSupportTemplate',\r\n    },\r\n    {\r\n      id: 'docsTab',\r\n      heading: 'AREAS.HELP.TABS.DOCUMENTATION',\r\n      ngTemplateOutlet: 'tabDocumentationTemplate',\r\n    },\r\n    {\r\n      id: 'servicesTab',\r\n      heading: 'AREAS.HELP.TABS.SERVICES',\r\n      ngTemplateOutlet: 'tabServicesTemplate',\r\n    },\r\n    {\r\n      id: 'useCasesTab',\r\n      heading: 'AREAS.HELP.TABS.EXAMPLES',\r\n      ngTemplateOutlet: 'tabExamplesTemplate',\r\n    },\r\n    {\r\n      id: 'freeForSchoolsTab',\r\n      heading: 'AREAS.HELP.TABS.FREE',\r\n      ngTemplateOutlet: 'tabFreeTemplate',\r\n    },\r\n    {\r\n      id: 'reviewsTab',\r\n      heading: 'AREAS.HELP.TABS.REVIEWS',\r\n      ngTemplateOutlet: 'tabReviewsTemplate',\r\n    },\r\n    {\r\n      id: 'blogTab',\r\n      heading: 'AREAS.HELP.TABS.BLOG',\r\n      ngTemplateOutlet: 'tabBlogTemplate',\r\n    },\r\n    {\r\n      id: 'javaTab',\r\n      heading: 'AREAS.HELP.TABS.JAVA',\r\n      ngTemplateOutlet: 'tabJavaTemplate',\r\n    },\r\n    {\r\n      id: 'systemDiagnosticsTab',\r\n      heading: 'AREAS.HELP.TABS.SYSTEM-DIAGNOSTICS',\r\n      ngTemplateOutlet: 'tabSystemDiagnosticsTemplate',\r\n    },\r\n    {\r\n      id: 'terminalTab',\r\n      heading: 'AREAS.HELP.TABS.TERMINAL',\r\n      ngTemplateOutlet: 'tabTerminalTemplate',\r\n    },\r\n    {\r\n      id: 'updateTab',\r\n      heading: 'AREAS.HELP.TABS.UPDATE',\r\n      ngTemplateOutlet: 'tabUpdateTemplate',\r\n    },\r\n    {\r\n      id: 'extraPackagesTab',\r\n      heading: 'AREAS.HELP.TABS.EXTRA-PACKAGES',\r\n      ngTemplateOutlet: 'tabExtraPackagesTemplate',\r\n    },\r\n    {\r\n      id: 'aboutTab',\r\n      heading: 'AREAS.HELP.TABS.ABOUT',\r\n      ngTemplateOutlet: 'tabAboutTemplate',\r\n    },\r\n    {\r\n      id: 'comparisonTab',\r\n      heading: 'AREAS.HELP.TABS.COMPARISON',\r\n      ngTemplateOutlet: 'tabComparisonTemplate',\r\n    },\r\n    {\r\n      id: 'licenseTab',\r\n      heading: 'SHARED-TABS.LICENSE',\r\n      ngTemplateOutlet: 'tabLicenseTemplate',\r\n    },\r\n    {\r\n      id: 'logsTab',\r\n      heading: 'SHARED-TABS.LOGGING-TRACING',\r\n      ngTemplateOutlet: 'tabLogsTemplate',\r\n    },\r\n  ];\r\n\r\n  MENU_SELECTED_X_VISIBLE_TABS = [\r\n    {\r\n      selectedMenu: 'supportMenuSelected',\r\n      visibleTabs: ['supportTab', 'licenseTab', 'logsTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'docsMenuSelected',\r\n      visibleTabs: ['docsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'servicesMenuSelected',\r\n      visibleTabs: ['servicesTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'useCasesMenuSelected',\r\n      visibleTabs: ['useCasesTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'freeForSchoolsMenuSelected',\r\n      visibleTabs: ['freeForSchoolsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'reviewsMenuSelected',\r\n      visibleTabs: ['reviewsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'blogMenuSelected',\r\n      visibleTabs: ['blogTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'installSetupMenuSelected',\r\n      visibleTabs: [\r\n        'javaTab',\r\n        'systemDiagnosticsTab',\r\n        'terminalTab',\r\n        'updateTab',\r\n        'extraPackagesTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'licenseMenuSelected',\r\n      visibleTabs: ['licenseTab', 'logsTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'aboutMenuSelected',\r\n      visibleTabs: ['aboutTab', 'comparisonTab', 'licenseTab'],\r\n    },\r\n  ];\r\n\r\n  //rssParser: typeof RSS;\r\n\r\n  currentLeftMenu: string;\r\n\r\n  constructor(\r\n    protected route: ActivatedRoute,\r\n    protected changeDetectorRef: ChangeDetectorRef,\r\n    protected settingsService: SettingsService,\r\n    protected electronService: ElectronService,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.settingsService.currentConfigurationTemplateName = '';\r\n    this.settingsService.currentConfigurationTemplatePath = '';\r\n\r\n    this.route.params.subscribe(async (params) => {\r\n      if (params.leftMenu) {\r\n        this.currentLeftMenu = params.leftMenu;\r\n      } else {\r\n        this.currentLeftMenu = 'supportMenuSelected';\r\n      }\r\n\r\n      this.refreshTabs();\r\n    });\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.refreshBlogRss();\r\n  }\r\n\r\n  refreshTabs() {\r\n    this.visibleTabs = [];\r\n    this.changeDetectorRef.detectChanges();\r\n\r\n    const visibleTabsIds = this.MENU_SELECTED_X_VISIBLE_TABS.find((item) => {\r\n      return item.selectedMenu === this.currentLeftMenu;\r\n    }).visibleTabs;\r\n\r\n    this.visibleTabs = this.ALL_TABS.filter((item) => {\r\n      return visibleTabsIds.includes(item.id);\r\n    });\r\n  }\r\n\r\n  refreshBlogRss() {\r\n    if (this.currentLeftMenu !== 'blogMenuSelected') {\r\n      return;\r\n    }\r\n\r\n    /*\r\n    const blogEntriesFetchedCount = document.querySelectorAll(\r\n      '#blogRss .feed-container'\r\n    ).length;\r\n\r\n    if (blogEntriesFetchedCount == 0 && !this.rssParser) {\r\n      this.rssParser = new RSS(\r\n        document.querySelector('#blogRss'),\r\n        'https://www.pdfburst.com/blog/feed/',\r\n        {\r\n          limit: 100,\r\n          ssl: true,\r\n          layoutTemplate: '<div class=\"feed-container\">{entries}</div>',\r\n          entryTemplate:\r\n            '<a href=\"{url}\" target=\"_blank\"><h4>{title}</h4></a><br><br>{shortBodyPlain} <a href=\"{url}\" target=\"_blank\"> ... Read More</a><hr>',\r\n        }\r\n      );\r\n      return this.rssParser.render();\r\n    }\r\n    */\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 236,
        "jsdoctags": [
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit", "AfterViewChecked"]
    },
    {
      "name": "InfoDialogComponent",
      "id": "component-InfoDialogComponent-5318759422eff88a597a269be85be4688f9a2dd87bf18106d694eb385ac3960497484bc8b6cbf6d946045e06f243b5cbe0e89e6016d680fec6d0c078193dcad8",
      "file": "src/app/components/dialog-info/info-dialog.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-info-dialog",
      "styleUrls": [],
      "styles": [],
      "template": "<div class=\"modal-header\">\n  <h4 class=\"modal-title pull-left\" [innerHTML]=\"title\"></h4>\n  <button\n    type=\"button\"\n    class=\"btn-close close pull-right\"\n    aria-label=\"Close\"\n    (click)=\"confirm()\"\n  >\n    <span aria-hidden=\"true\" class=\"visually-hidden\">&times;</span>\n  </button>\n</div>\n<div class=\"modal-body\" [innerHTML]=\"message\"></div>\n<div class=\"modal-footer\">\n  <button\n    type=\"button\"\n    class=\"btn btn-primary dburst-button-question-confirm\"\n    (click)=\"confirm()\"\n    [innerHTML]=\"confirmLabel\"\n  ></button>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "confirmLabel",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "message",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "onClose",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32
        }
      ],
      "methodsClass": [
        {
          "name": "confirm",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'dburst-info-dialog',\r\n  template: `\r\n    <div class=\"modal-header\">\r\n      <h4 class=\"modal-title pull-left\" [innerHTML]=\"title\"></h4>\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn-close close pull-right\"\r\n        aria-label=\"Close\"\r\n        (click)=\"confirm()\"\r\n      >\r\n        <span aria-hidden=\"true\" class=\"visually-hidden\">&times;</span>\r\n      </button>\r\n    </div>\r\n    <div class=\"modal-body\" [innerHTML]=\"message\"></div>\r\n    <div class=\"modal-footer\">\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-primary dburst-button-question-confirm\"\r\n        (click)=\"confirm()\"\r\n        [innerHTML]=\"confirmLabel\"\r\n      ></button>\r\n    </div>\r\n  `,\r\n})\r\nexport class InfoDialogComponent implements OnInit {\r\n  onClose: Subject<boolean>;\r\n  title: string;\r\n  message: string;\r\n  confirmLabel: string;\r\n\r\n  constructor(protected bsModalRef: BsModalRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.onClose = new Subject();\r\n  }\r\n\r\n  confirm() {\r\n    this.onClose?.next(true);\r\n    this.bsModalRef.hide();\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "bsModalRef",
            "type": "BsModalRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "bsModalRef",
            "type": "BsModalRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "JavaComponent",
      "id": "component-JavaComponent-8409f7eb4297b3c210c79b7668177f43cdb1041715504af04eacb70ba0ab066c82c3d23cfe39c3f072a1d319beefa0a0ba0bf1c594d95c645e41e4bbbfed9bf2",
      "file": "src/app/areas/install-setup-upgrade/java/java.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-java",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "installJava",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "restartApp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "unInstallJava",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport { javaTemplate } from './java.template';\r\n\r\nimport { ConfirmService } from '../../../components/dialog-confirm/confirm.service';\r\nimport { ElectronService } from '../../../core/services/electron/electron.service';\r\nimport { StateStoreService } from '../../../providers/state-store.service';\r\n\r\n@Component({\r\n  selector: 'dburst-java',\r\n  template: ` ${javaTemplate} `,\r\n})\r\nexport class JavaComponent {\r\n  constructor(\r\n    protected storeService: StateStoreService,\r\n    protected electronService: ElectronService,\r\n    protected confirmService: ConfirmService,\r\n  ) {}\r\n\r\n  restartApp() {\r\n    this.confirmService.askConfirmation({\r\n      message: 'Are you sure that you want to perform this action?',\r\n      confirmAction: () => {\r\n        this.electronService.restartElectronApp();\r\n      },\r\n    });\r\n  }\r\n\r\n  //DocumentBurster Server Windows Services requires Java32 bit => by default DocumentBurster will install Java8 32bit\r\n  installJava() {\r\n    this.confirmService.askConfirmation({\r\n      message: 'Are you sure that you want to perform this action?',\r\n      confirmAction: () => {\r\n        this.electronService.typeCommandOnTerminalAndThenPressEnter(\r\n          'choco install jre8 -PackageParameters \"/exclude:64\" --yes',\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  unInstallJava() {\r\n    this.confirmService.askConfirmation({\r\n      message: 'Are you sure that you want to perform this action?',\r\n      confirmAction: () => {\r\n        //this.electronService.typeCommandOnTerminalAndThenPressEnter(\r\n        //  'choco uninstall jre8 --yes',\r\n        //);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storeService",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "storeService",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": []
    },
    {
      "name": "LicenseComponent",
      "id": "component-LicenseComponent-f5b0e64681db1ef8825cd7ad42dca184b78f06099723cd15cfb673deedb415a05d685bb3de03d9cc1f11159fec96d41b682eebc9ade135bb265c92404be5f8a5",
      "file": "src/app/components/license/license.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-license",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./license.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "licenseKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methodsClass": [
        {
          "name": "deActivateLicense",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "saveLicenseKey",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "verifyLicense",
          "args": [
            {
              "name": "action",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport { LicenseService } from '../../providers/license.service';\r\n\r\nimport { ConfirmService } from '../dialog-confirm/confirm.service';\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\n\r\n@Component({\r\n  selector: 'dburst-license',\r\n  templateUrl: './license.component.html',\r\n})\r\nexport class LicenseComponent {\r\n  licenseKey: string;\r\n\r\n  constructor(\r\n    protected licenseService: LicenseService,\r\n    protected confirmService: ConfirmService,\r\n    protected settingsService: SettingsService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n  ) {}\r\n\r\n  verifyLicense(action) {\r\n    let message = 'Activate license?';\r\n\r\n    if (action === '-cl') {\r\n      message = 'Check license?';\r\n    }\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: message,\r\n      confirmAction: async () => {\r\n        await this.licenseService.verifyLicense(action);\r\n        console.log(`verifyLicense done`);\r\n        await this.licenseService.loadLicenseFileAsync();\r\n\r\n        //this.router.navigate(['/help', 'licenseMenuSelected']);\r\n      },\r\n    });\r\n  }\r\n\r\n  deActivateLicense() {\r\n    this.confirmService.askConfirmation({\r\n      message: 'Are you sure you want to de-activate the license?',\r\n      confirmAction: async () => {\r\n        this.licenseService.deActivateLicense(async () => {\r\n          await this.licenseService.loadLicenseFileAsync();\r\n\r\n          //this.router.navigate(['/help', 'licenseMenuSelected']);\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  async saveLicenseKey() {\r\n    return this.licenseService.saveLicenseFileAsync();\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<div class=\"well\">\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-1\">{{ \"COMPONENTS.LICENSE.KEY\" | translate }}</div>\r\n    <div class=\"col-xs-8\">\r\n      <input\r\n        id=\"licenseKey\"\r\n        [(ngModel)]=\"licenseService?.licenseDetails?.license.key\"\r\n        (ngModelChange)=\"saveLicenseKey()\"\r\n        class=\"form-control\"\r\n        autofocus\r\n        required\r\n      />\r\n    </div>\r\n    <div\r\n      class=\"col-xs-3\"\r\n      *ngIf=\"\r\n        !licenseService?.licenseDetails?.license.key &&\r\n        (!licenseService?.licenseDetails?.license.status ||\r\n          licenseService?.licenseDetails?.license.status === 0)\r\n      \"\r\n    >\r\n      <a href=\"https://store.reportburster.com\" target=\"_blank\">\r\n        <button id=\"btnGetLicenseKey\" class=\"btn btn-primary\" type=\"button\">\r\n          {{ \"COMPONENTS.LICENSE.GET-LICENSE-KEY\" | translate }}\r\n        </button>\r\n      </a>\r\n    </div>\r\n    <div\r\n      class=\"col-xs-3\"\r\n      *ngIf=\"\r\n        !licenseService?.licenseDetails?.license.key &&\r\n        licenseService?.licenseDetails?.license.status\r\n      \"\r\n    >\r\n      <button\r\n        id=\"btnCheckLicenseKeyDisabled\"\r\n        class=\"btn btn-primary\"\r\n        type=\"button\"\r\n        [disabled]=\"true\"\r\n      >\r\n        {{ \"COMPONENTS.LICENSE.CHECK-LICENSE-KEY\" | translate }}\r\n      </button>\r\n    </div>\r\n    <div class=\"col-xs-3\" *ngIf=\"licenseService?.licenseDetails?.license.key\">\r\n      <button\r\n        *ngIf=\"\r\n          licenseService?.licenseDetails?.license.status &&\r\n          licenseService?.licenseDetails?.license.status != 'deactivated'\r\n        \"\r\n        id=\"btnCheckLicenseKey\"\r\n        class=\"btn btn-primary\"\r\n        type=\"button\"\r\n        (click)=\"verifyLicense('-cl')\"\r\n        [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n      >\r\n        {{ \"COMPONENTS.LICENSE.CHECK-LICENSE-KEY\" | translate }}\r\n      </button>\r\n      <button\r\n        *ngIf=\"\r\n          !licenseService?.licenseDetails?.license.status ||\r\n          licenseService?.licenseDetails?.license.status.length == 0 ||\r\n          licenseService?.licenseDetails?.license.status == 'deactivated'\r\n        \"\r\n        id=\"btnActivateLicenseKey\"\r\n        class=\"btn btn-primary\"\r\n        type=\"button\"\r\n        (click)=\"verifyLicense('-al')\"\r\n        [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n      >\r\n        {{ \"COMPONENTS.LICENSE.ACTIVATE-LICENSE-KEY\" | translate }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <p></p>\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-1\">{{ \"COMPONENTS.LICENSE.STATUS\" | translate }}</div>\r\n\r\n    <div\r\n      class=\"col-xs-8\"\r\n      *ngIf=\"\r\n        !licenseService?.licenseDetails?.license.status ||\r\n        licenseService?.licenseDetails?.license.status.length == 0 ||\r\n        licenseService?.licenseDetails?.license.status == 'deactivated'\r\n      \"\r\n    >\r\n      <span id=\"statusDemoLicense\" class=\"label label-warning round\">{{\r\n        \"COMPONENTS.LICENSE.DEMO-TRIAL\" | translate\r\n      }}</span>\r\n    </div>\r\n\r\n    <div\r\n      class=\"col-xs-8\"\r\n      *ngIf=\"\r\n        licenseService?.licenseDetails?.license.status &&\r\n        licenseService?.licenseDetails?.license.status != 'valid' &&\r\n        licenseService?.licenseDetails?.license.status != 'expired' &&\r\n        licenseService?.licenseDetails?.license.status != 'deactivated'\r\n      \"\r\n    >\r\n      <span id=\"statusInvalidLicense\" class=\"label label-danger round\">{{\r\n        \"COMPONENTS.LICENSE.INVALID-LICENSE\" | translate\r\n      }}</span>\r\n    </div>\r\n\r\n    <div\r\n      class=\"col-xs-8\"\r\n      *ngIf=\"\r\n        licenseService?.licenseDetails?.license.status &&\r\n        licenseService?.licenseDetails?.license.status === 'valid'\r\n      \"\r\n    >\r\n      <span id=\"statusActiveLicenseKey\" class=\"label label-primary round\"\r\n        >{{ \"COMPONENTS.LICENSE.STATUS-ACTIVE\" | translate }} ({{\r\n          licenseService?.licenseDetails?.license.customername\r\n        }})</span\r\n      >\r\n    </div>\r\n\r\n    <div\r\n      class=\"col-xs-8\"\r\n      *ngIf=\"\r\n        licenseService?.licenseDetails?.license.status &&\r\n        licenseService?.licenseDetails?.license.status === 'expired'\r\n      \"\r\n    >\r\n      <a href=\"https://www.pdfburst.com/renew.html\" target=\"_blank\">\r\n        <span id=\"statusExpiredLicense\" class=\"label label-warning round\"\r\n          >{{ \"COMPONENTS.LICENSE.STATUS-EXPIRED\" | translate }} ({{\r\n            licenseService?.licenseDetails?.license.customername\r\n          }})</span\r\n        >&nbsp;\r\n        <span class=\"label label-primary round\">{{\r\n          \"COMPONENTS.LICENSE.RENEW-LICENSE\" | translate\r\n        }}</span>\r\n      </a>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-1\">{{ \"COMPONENTS.LICENSE.VERSION\" | translate }}</div>\r\n\r\n    <div class=\"col-xs-11\">\r\n      <span id=\"version\" class=\"label label-default\"\r\n        ><em>{{ settingsService.product }}</em\r\n        >&nbsp;{{ settingsService.version }}</span\r\n      >&nbsp;\r\n      <dburst-update [succint]=\"true\"></dburst-update>\r\n    </div>\r\n  </div>\r\n  <br />\r\n  <div id=\"whatsnew\" class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n      <dburst-whats-new></dburst-whats-new><br />\r\n      <a\r\n        id=\"deactivateLicenseKey\"\r\n        style=\"cursor: pointer\"\r\n        *ngIf=\"\r\n          licenseService?.licenseDetails?.license.status &&\r\n          licenseService?.licenseDetails?.license.status === 'valid'\r\n        \"\r\n        (click)=\"deActivateLicense()\"\r\n        >_</a\r\n      >\r\n    </div>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "LogFilesViewerAllTogetherComponent",
      "id": "component-LogFilesViewerAllTogetherComponent-ade2021c4551e06445ae06dd502bd41db9b7e96399200e543e62dc61b3e09998275787e2de5d519b52d9947818e40bb8d18e99b0a0b447d6c540638b0f102122",
      "file": "src/app/components/log-files-viewer-all-together/log-files-viewer-all-together.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-log-files-viewer-all-together",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./log-files-viewer-all-together.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "clearLogs",
          "args": [
            {
              "name": "logFile",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "logFile",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "clearQuarantinedAndLogFiles",
          "args": [
            {
              "name": "shouldClearLogFiles",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "shouldClearLogFiles",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\nimport { ConfirmService } from '../dialog-confirm/confirm.service';\r\nimport { LogsServiceWebSocket } from '../../providers/ws-logs.service';\r\nimport { FsService } from '../../providers/fs.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\n\r\n@Component({\r\n  selector: 'dburst-log-files-viewer-all-together',\r\n  templateUrl: './log-files-viewer-all-together.html',\r\n})\r\nexport class LogFilesViewerAllTogetherComponent {\r\n  constructor(\r\n    protected confirmService: ConfirmService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected fsService: FsService,\r\n    protected logsService: LogsServiceWebSocket,\r\n    protected settingsService: SettingsService,\r\n  ) {}\r\n\r\n  clearQuarantinedAndLogFiles(shouldClearLogFiles: boolean) {\r\n    let dialogQuestion = 'Clear all quarantined files?';\r\n    if (shouldClearLogFiles) {\r\n      dialogQuestion = 'Clear all quarantined and log files?';\r\n    }\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        await this.fsService.dirAsync(\r\n          this.settingsService.QUARANTINE_FOLDER_PATH,\r\n          { empty: true },\r\n        );\r\n        if (shouldClearLogFiles) {\r\n          await this.logsService.clearLogs();\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  clearLogs(logFile: string) {\r\n    let dialogQuestion = 'Clear file /logs/' + logFile + '?';\r\n    if (!logFile) {\r\n      dialogQuestion = 'Clear all log files?';\r\n    }\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: () => {\r\n        this.logsService.clearLogs(logFile);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "logsService",
            "type": "LogsServiceWebSocket",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "logsService",
            "type": "LogsServiceWebSocket",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<div class=\"well\">\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-12\">\r\n      <div class=\"panel panel-default\">\r\n        <div class=\"panel-heading\">\r\n          <h6>\r\n            {{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.INFO-LOG-PREVIEW' |\r\n            translate }}\r\n          </h6>\r\n        </div>\r\n        <div\r\n          id=\"infoLog\"\r\n          class=\"panel-body\"\r\n          style=\"\r\n            color: blue;\r\n            background-color: #f5f5f5;\r\n            height: 185px;\r\n            overflow: scroll;\r\n            -webkit-user-select: all;\r\n            user-select: all;\r\n          \"\r\n        >\r\n          <dburst-log-file-viewer\r\n            logFileName=\"info.log\"\r\n          ></dburst-log-file-viewer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-6\">\r\n      <div class=\"panel panel-default\">\r\n        <div class=\"panel-heading\">\r\n          <h6>\r\n            {{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.WARNINGS-LOG-PREVIEW' |\r\n            translate }}\r\n          </h6>\r\n        </div>\r\n        <div\r\n          id=\"warningsLog\"\r\n          class=\"panel-body\"\r\n          style=\"\r\n            color: orange;\r\n            background-color: #f5f5f5;\r\n            height: 185px;\r\n            overflow: scroll;\r\n            -webkit-user-select: all;\r\n            user-select: all;\r\n          \"\r\n        >\r\n          <dburst-log-file-viewer\r\n            logFileName=\"warnings.log\"\r\n          ></dburst-log-file-viewer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-xs-6\">\r\n      <div class=\"panel panel-default\">\r\n        <div class=\"panel-heading\">\r\n          <h6>\r\n            {{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.ERRORS-LOG-PREVIEW' |\r\n            translate }}\r\n          </h6>\r\n        </div>\r\n        <div\r\n          id=\"errorsLog\"\r\n          class=\"panel-body\"\r\n          style=\"\r\n            color: red;\r\n            background-color: #f5f5f5;\r\n            height: 185px;\r\n            overflow: scroll;\r\n            -webkit-user-select: all;\r\n            user-select: all;\r\n          \"\r\n        >\r\n          <dburst-log-file-viewer\r\n            logFileName=\"errors.log\"\r\n          ></dburst-log-file-viewer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-4\">\r\n      <dburst-button-native-system-dialog\r\n        value=\"{{'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.VIEW-LOG-FILES' | translate}}\"\r\n        dialogType=\"file\"\r\n      >\r\n      </dburst-button-native-system-dialog>\r\n    </div>\r\n\r\n    <div class=\"col-xs-4\">\r\n      <div class=\"btn-group dropup\">\r\n        <button type=\"button\" class=\"btn\">\r\n          {{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.CLEAR-LOG-FILES' |\r\n          translate }}\r\n        </button>\r\n\r\n        <button\r\n          id=\"btnClearLogFiles\"\r\n          type=\"button\"\r\n          class=\"btn dropdown-toggle\"\r\n          data-toggle=\"dropdown\"\r\n        >\r\n          <span class=\"caret\"></span>\r\n          <span class=\"sr-only\"\r\n            >{{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.TOGGLE-DROPDOWN' |\r\n            translate }}</span\r\n          >\r\n        </button>\r\n\r\n        <ul class=\"dropdown-menu\" style=\"cursor: pointer\">\r\n          <li>\r\n            <a id=\"btnClearInfoLog\" (click)=\"clearLogs('info.log')\"\r\n              >1. {{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.CLEAR' |\r\n              translate }}\r\n              <em>info.log</em>\r\n              <span *ngIf=\"executionStatsService.logStats.infoLogFileIsLocked\">\r\n                ( <i class=\"fa fa-lock\"></i>&nbsp;{{\r\n                'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.LOCKED' | translate\r\n                }})</span\r\n              >\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a id=\"btnClearWarningsLog\" (click)=\"clearLogs('warnings.log')\"\r\n              >2. {{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.CLEAR' |\r\n              translate }}\r\n              <em>warnings.log</em>\r\n              <span\r\n                *ngIf=\"executionStatsService.logStats.warningsLogFileIsLocked\"\r\n              >\r\n                ( <i class=\"fa fa-lock\"></i>&nbsp;{{\r\n                'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.LOCKED' | translate\r\n                }})</span\r\n              >\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a id=\"btnClearErrorsLog\" (click)=\"clearLogs('errors.log')\"\r\n              >3. {{ 'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.CLEAR' |\r\n              translate }}\r\n              <em>errors.log</em>\r\n              <span\r\n                *ngIf=\"executionStatsService.logStats.errorsLogFileIsLocked\"\r\n              >\r\n                ( <i class=\"fa fa-lock\"></i>&nbsp;{{\r\n                'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.LOCKED' | translate\r\n                }})</span\r\n              >\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              id=\"btnClearQuarantinedFiles\"\r\n              (click)=\"clearQuarantinedAndLogFiles(false)\"\r\n              >4. {{\r\n              'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.CLEAR-QUARANTINED-FILES'\r\n              | translate }}</a\r\n            >\r\n          </li>\r\n          <li role=\"separator\" class=\"divider\"></li>\r\n          <li>\r\n            <a\r\n              id=\"btnClearAllLogQuarantinedFiles\"\r\n              (click)=\"clearQuarantinedAndLogFiles(true)\"\r\n            >\r\n              <span class=\"label label-default\"\r\n                >5. {{\r\n                'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.CLEAR-ALL-LOG-FILES' |\r\n                translate }}\r\n                <span\r\n                  *ngIf=\"executionStatsService.logStats.errorsLogFileIsLocked || executionStatsService.logStats.infoLogFileIsLocked || executionStatsService.logStats.warningsLogFileIsLocked\"\r\n                >\r\n                  (\r\n                  <i class=\"fa fa-lock\"></i>&nbsp;{{\r\n                  'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.LOCKED' | translate\r\n                  }})</span\r\n                >\r\n              </span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-xs-4\">\r\n      <dburst-button-native-system-dialog\r\n        value=\"{{'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.VIEW-QUARANTINED-FILES' | translate}}\"\r\n        dialogType=\"file\"\r\n      >\r\n      </dburst-button-native-system-dialog>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
    },
    {
      "name": "LogFilesViewerSeparateTabsComponent",
      "id": "component-LogFilesViewerSeparateTabsComponent-31f853d4f261677adf6021b2df1f05d0d0926a8a74e32626fe6881984e76a293c84ecf7d7bdd459d849e4c5744e24b384a23e1c0a0996a668b31b7986bb30330",
      "file": "src/app/components/log-files-viewer-separate-tabs/log-files-viewer-separate-tabs.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-log-files-viewer-separate-tabs",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./log-files-viewer-separate-tabs.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\n\r\n@Component({\r\n  selector: 'dburst-log-files-viewer-separate-tabs',\r\n  templateUrl: './log-files-viewer-separate-tabs.component.html',\r\n})\r\nexport class LogFilesViewerSeparateTabsComponent {\r\n  constructor(protected executionStatsService: ExecutionStatsService) {}\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<div *ngIf=\"executionStatsService.logStats.foundDirtyLogFiles\" id=\"logsViewer\">\r\n  <tabset>\r\n    <tab\r\n      heading=\"{{\r\n        'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.INFO-LOG-PREVIEW' | translate\r\n      }}\"\r\n      *ngIf=\"executionStatsService.logStats.infoLogFileSize > 0\"\r\n    >\r\n      <div\r\n        id=\"infoLog\"\r\n        class=\"panel-body\"\r\n        style=\"\r\n          color: blue;\r\n          height: 421px;\r\n          overflow-y: scroll;\r\n          overflow-x: auto;\r\n          -webkit-user-select: all;\r\n          user-select: all;\r\n        \"\r\n      >\r\n        <dburst-log-file-viewer logFileName=\"info.log\"></dburst-log-file-viewer>\r\n      </div>\r\n    </tab>\r\n\r\n    <tab\r\n      heading=\"{{\r\n        'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.WARNINGS-LOG-PREVIEW'\r\n          | translate\r\n      }}\"\r\n      *ngIf=\"executionStatsService.logStats.warningsLogFileSize > 0\"\r\n    >\r\n      <div\r\n        id=\"warningsLog\"\r\n        class=\"panel-body\"\r\n        style=\"\r\n          color: orange;\r\n          height: 421px;\r\n          overflow-y: scroll;\r\n          overflow-x: auto;\r\n          -webkit-user-select: all;\r\n          user-select: all;\r\n        \"\r\n      >\r\n        <dburst-log-file-viewer\r\n          logFileName=\"warnings.log\"\r\n        ></dburst-log-file-viewer>\r\n      </div>\r\n    </tab>\r\n\r\n    <tab\r\n      heading=\"{{\r\n        'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.ERRORS-LOG-PREVIEW'\r\n          | translate\r\n      }}\"\r\n      *ngIf=\"executionStatsService.logStats.errorsLogFileSize > 0\"\r\n    >\r\n      <div\r\n        id=\"errorsLog\"\r\n        class=\"panel-body\"\r\n        style=\"\r\n          color: red;\r\n          height: 421px;\r\n          overflow-y: scroll;\r\n          overflow-x: auto;\r\n          -webkit-user-select: all;\r\n          user-select: all;\r\n        \"\r\n      >\r\n        <dburst-log-file-viewer\r\n          logFileName=\"errors.log\"\r\n        ></dburst-log-file-viewer>\r\n      </div>\r\n    </tab>\r\n  </tabset>\r\n</div>\r\n"
    },
    {
      "name": "LogFileViewerComponent",
      "id": "component-LogFileViewerComponent-5e9b050ab5917017e4fc4913ed509c168630796bc96c873fb158679d106899f190f9e8db66855b7aa42557eb4ad21caca5a78d2f0102426279f41f50723bae36",
      "file": "src/app/components/log-file-viewer/log-file-viewer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-log-file-viewer",
      "styleUrls": [],
      "styles": [],
      "template": "<div *ngIf=\"logFileName == 'info.log'\" [innerHTML]=\"executionStatsService.logStats.infoLogContent\" style=\"white-space: pre-wrap;\"></div><div *ngIf=\"logFileName == 'warnings.log'\" [innerHTML]=\"executionStatsService.logStats.warningsLogContent\" style=\"white-space: pre-wrap;\"></div><div *ngIf=\"logFileName == 'errors.log'\" [innerHTML]=\"executionStatsService.logStats.errorsLogContent\" style=\"white-space: pre-wrap;\"></div>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "logFileName",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { OnInit, Component, Input, OnDestroy } from '@angular/core';\r\n\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\nimport { LogsServiceWebSocket } from '../../providers/ws-logs.service';\r\n\r\n@Component({\r\n  selector: 'dburst-log-file-viewer',\r\n  template:\r\n    '<div *ngIf=\"logFileName == \\'info.log\\'\" [innerHTML]=\"executionStatsService.logStats.infoLogContent\" style=\"white-space: pre-wrap;\"></div><div *ngIf=\"logFileName == \\'warnings.log\\'\" [innerHTML]=\"executionStatsService.logStats.warningsLogContent\" style=\"white-space: pre-wrap;\"></div><div *ngIf=\"logFileName == \\'errors.log\\'\" [innerHTML]=\"executionStatsService.logStats.errorsLogContent\" style=\"white-space: pre-wrap;\"></div>',\r\n})\r\nexport class LogFileViewerComponent implements OnInit, OnDestroy {\r\n  @Input() logFileName: string;\r\n\r\n  constructor(\r\n    //protected settingsService: SettingsServiceJava,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected logsService: LogsServiceWebSocket,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    this.logsService.startTailing(this.logFileName);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.logsService.tailerStop(this.logFileName);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "logsService",
            "type": "LogsServiceWebSocket",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "logsService",
            "type": "LogsServiceWebSocket",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit", "OnDestroy"]
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-d32b0f19628254ea3fc5526c4d4564ada1cc83cf936759006d90a46f5874b02a3359e331bddda20b22e74a616a6443c660602ba74dd38ebe1160759e0de6f7ba",
      "file": "src/stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": ["./page.css"],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "User | null",
          "optional": false,
          "description": "",
          "line": 69
        }
      ],
      "methodsClass": [
        {
          "name": "doCreateAccount",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogin",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": true,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        },
        {
          "name": "HeaderComponent",
          "type": "component"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": "",
      "extends": []
    },
    {
      "name": "ProcessingComponent",
      "id": "component-ProcessingComponent-e9e3651ba20fa8b762d6378dcb3025a48c3abac9e8d48462c497870af0942daadd80b68095bb23268d195b95ca87f8e2b1eb40c1772f41190058db1d8a50da27",
      "file": "src/app/areas/_processing/processing.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-processing",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "ALL_TABS",
          "defaultValue": "[\r\n    {\r\n      id: 'burstTab',\r\n      heading: 'AREAS.PROCESSING.TABS.BURST',\r\n      ngTemplateOutlet: 'tabBurstTemplate',\r\n    },\r\n    {\r\n      id: 'reportGenerationMailMergeTab',\r\n      heading: 'AREAS.PROCESSING.TABS.MAILMERGE-CLASSICREPORTS',\r\n      ngTemplateOutlet: 'tabReportGenerationMailMergeTemplate',\r\n    },\r\n    {\r\n      id: 'mergeBurstTab',\r\n      heading: 'AREAS.PROCESSING.TABS.MERGE-BURST',\r\n      ngTemplateOutlet: 'tabMergeBurstTemplate',\r\n    },\r\n    {\r\n      id: 'procQualityTab',\r\n      heading: 'AREAS.PROCESSING.TABS.QUALITY-ASSURANCE',\r\n      ngTemplateOutlet: 'tabQualityAssuranceTemplate',\r\n    },\r\n    {\r\n      id: 'procSamplesTab',\r\n      heading: 'AREAS.PROCESSING.TABS.SAMPLES',\r\n      ngTemplateOutlet: 'tabSamplesTemplate',\r\n    },\r\n    {\r\n      id: 'logsTab',\r\n      heading: 'AREAS.PROCESSING.TABS.LOGGING-TRACING',\r\n      ngTemplateOutlet: 'tabLogsTemplate',\r\n    },\r\n    {\r\n      id: 'licenseTab',\r\n      heading: 'SHARED-TABS.LICENSE',\r\n      ngTemplateOutlet: 'tabLicenseTemplate',\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 109
        },
        {
          "name": "burstFileUploadInput",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 99,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'burstFileUploadInput'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "currentLeftMenu",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 180
        },
        {
          "name": "isModalSamplesLearnMoreVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "MENU_SELECTED_X_VISIBLE_TABS",
          "defaultValue": "[\r\n    {\r\n      selectedMenu: 'burstMenuSelected',\r\n      visibleTabs: [\r\n        'burstTab',\r\n        'reportGenerationMailMergeTab',\r\n        'logsTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'mergeBurstMenuSelected',\r\n      visibleTabs: ['mergeBurstTab', 'logsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'qualityMenuSelected',\r\n      visibleTabs: ['procQualityTab', 'logsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'logsMenuSelected',\r\n      visibleTabs: ['logsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'samplesMenuSelected',\r\n      visibleTabs: ['procSamplesTab', 'logsTab', 'licenseTab'],\r\n    },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 147
        },
        {
          "name": "mergeFilesUploadInput",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 101,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'mergeFilesUploadInput'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "modalSampleInfo",
          "defaultValue": "{\r\n    id: '',\r\n    title: '',\r\n    capReportDistribution: false,\r\n    capReportGenerationMailMerge: false,\r\n    inputDetails: '',\r\n    outputDetails: '',\r\n    notes: '',\r\n    configurationFilePath: '',\r\n    configurationFileName: '',\r\n    documentation: '',\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "qaFileUploadInput",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 100,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'qaFileUploadInput'"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "reportgenerationmailmerge",
          "defaultValue": "[\r\n    { id: 'payslips.xml', name: 'Payslips' },\r\n    { id: 'invoices.xml', name: 'Invoices' },\r\n    { id: 'bills.xml', name: 'Bills' },\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 184,
          "modifierKind": [124]
        },
        {
          "name": "resumeJobsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 97,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'resumeJobsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "selectedMailMergeClassicReport",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "CfgTmplFileInfo",
          "optional": false,
          "description": "",
          "line": 182,
          "modifierKind": [124]
        },
        {
          "name": "subscriptionCheckIfTestEmailServerIsStarted",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 75
        },
        {
          "name": "tabBurstTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 78,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabBurstTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabLicenseTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 95,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabLicenseTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabLogsTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 89,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabLogsTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabMergeBurstTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 84,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabMergeBurstTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabQualityAssuranceTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 87,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabQualityAssuranceTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabReportGenerationMailMergeTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 81,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabReportGenerationMailMergeTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "tabSamplesTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 92,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'tabSamplesTemplate', {static: true}"
            }
          ],
          "modifierKind": [170]
        },
        {
          "name": "visibleTabs",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type[]",
          "optional": false,
          "description": "",
          "line": 103
        },
        {
          "name": "xmlSettings",
          "defaultValue": "{\r\n    documentburster: {\r\n      settings: null,\r\n    },\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 175,
          "modifierKind": [124]
        }
      ],
      "methodsClass": [
        {
          "name": "checkIfTestEmailServerIsStarted",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 880,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "clearResumeJob",
          "args": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 964,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "disableRunTest",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 387,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doBurst",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 391,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doCloseSamplesLearnMoreModal",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 1021,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "doGenerateReports",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 455,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doHideAllSamples",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1056,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doMergeBurst",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 496,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doResumeJob",
          "args": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 937,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doRunTest",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 727,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doSampleTryIt",
          "args": [
            {
              "name": "clickedSample",
              "type": "SampleInfo",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1079,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "clickedSample",
              "type": "SampleInfo",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doSampleViewConfigurationFile",
          "args": [
            {
              "name": "configFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "configFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1067,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "configFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "configFileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doShowSamplesLearnMoreModal",
          "args": [
            {
              "name": "clickedSample",
              "type": "SampleInfo",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 986,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "clickedSample",
              "type": "SampleInfo",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doStartStopTestEmailServer",
          "args": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 912,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doToggleSampleVisibility",
          "args": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1037,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "visibility",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getSelectedSample",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 1031,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "groupByMailMergeHelper",
          "args": [
            {
              "name": "report",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "\"Reports\" | \"Samples\"",
          "typeParameters": [],
          "line": 979,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "report",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "moveItemInArray",
          "args": [
            {
              "name": "array",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "from",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "to",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 714,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "array",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "from",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "to",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 205,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 211,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "noActiveJobs",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 389,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onBurstFileSelected",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 335,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onClearFiles",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 682,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onDifferentQualityAssuranceModeFocus",
          "args": [
            {
              "name": "mode",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 821,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "mode",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onFilesAdded",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 567,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onFileSelected",
          "args": [
            {
              "name": "file",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 601,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "file",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onMailMergeClassicReportFileSelected",
          "args": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 375,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "filePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onQAFileSelected",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 720,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSampleClick",
          "args": [
            {
              "name": "clickedSample",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 1025,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "clickedSample",
              "type": "literal type",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onSelectedFileDelete",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 612,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSelectedFileDown",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 654,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSelectedFileUp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 628,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "refreshTabs",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 309,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resetProcInfo",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 351,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "runTestShouldBeDisabled",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 841,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "saveMergedFileSetting",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 700,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  TemplateRef,\r\n  ElementRef,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { interval, Subscription } from 'rxjs';\r\n\r\nimport * as _ from 'lodash';\r\n\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\n\r\nimport { leftMenuTemplate } from './templates/_left-menu';\r\nimport { tabsTemplate } from './templates/_tabs';\r\n\r\nimport { tabBurstTemplate } from './templates/tab-burst';\r\nimport { tabReportGenerationMailMergeTemplate } from './templates/tab-reporting-mailmerge-classicreports';\r\n\r\nimport { tabMergeBurstTemplate } from './templates/tab-merge-burst';\r\nimport { tabQualityAssuranceTemplate } from './templates/tab-quality-assurance';\r\nimport { tabLogsTemplate } from './templates/tab-logs';\r\nimport { tabSamplesTemplate } from './templates/tab-samples';\r\nimport { modalSamplesLearnMoreTemplate } from './templates/modal-samples-learn-more';\r\n\r\nimport { tabLicenseTemplate } from './templates/tab-license';\r\n\r\nimport { resumeJobsTemplate } from './templates/resume-jobs';\r\n\r\nimport { CfgTmplFileInfo } from '../../providers/settings.service';\r\nimport Utilities from '../../helpers/utilities';\r\nimport { ConfirmService } from '../../components/dialog-confirm/confirm.service';\r\nimport { InfoService } from '../../components/dialog-info/info.service';\r\nimport { SampleInfo, SamplesService } from '../../providers/samples.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\nimport { ShellService } from '../../providers/shell.service';\r\nimport { ApiService } from '../../providers/api.service';\r\nimport { FsService } from '../../providers/fs.service';\r\nimport { ProcessingService } from '../../providers/processing.service';\r\n\r\n@Component({\r\n  selector: 'dburst-processing',\r\n  template: `\r\n    <aside class=\"main-sidebar\">\r\n      <section class=\"sidebar\">${leftMenuTemplate}</section>\r\n    </aside>\r\n    <div class=\"content-wrapper\">\r\n      <section class=\"content\"><div>${tabsTemplate}</div></section>\r\n    </div>\r\n    ${tabBurstTemplate} ${tabReportGenerationMailMergeTemplate}\r\n    ${tabMergeBurstTemplate} ${tabQualityAssuranceTemplate} ${tabLogsTemplate}\r\n    ${tabSamplesTemplate} ${modalSamplesLearnMoreTemplate} ${tabLicenseTemplate}\r\n    ${resumeJobsTemplate}\r\n  `,\r\n})\r\nexport class ProcessingComponent implements OnInit {\r\n  isModalSamplesLearnMoreVisible = false;\r\n\r\n  modalSampleInfo = {\r\n    id: '',\r\n    title: '',\r\n    capReportDistribution: false,\r\n    capReportGenerationMailMerge: false,\r\n    inputDetails: '',\r\n    outputDetails: '',\r\n    notes: '',\r\n    configurationFilePath: '',\r\n    configurationFileName: '',\r\n    documentation: '',\r\n  };\r\n\r\n  subscriptionCheckIfTestEmailServerIsStarted: Subscription;\r\n\r\n  @ViewChild('tabBurstTemplate', { static: true })\r\n  tabBurstTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabReportGenerationMailMergeTemplate', { static: true })\r\n  tabReportGenerationMailMergeTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabMergeBurstTemplate', { static: true })\r\n  tabMergeBurstTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabQualityAssuranceTemplate', { static: true })\r\n  tabQualityAssuranceTemplate: TemplateRef<any>;\r\n  @ViewChild('tabLogsTemplate', { static: true })\r\n  tabLogsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabSamplesTemplate', { static: true })\r\n  tabSamplesTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('tabLicenseTemplate', { static: true })\r\n  tabLicenseTemplate: TemplateRef<any>;\r\n  @ViewChild('resumeJobsTemplate', { static: true })\r\n  resumeJobsTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('burstFileUploadInput') burstFileUploadInput: ElementRef;\r\n  @ViewChild('qaFileUploadInput') qaFileUploadInput: ElementRef;\r\n  @ViewChild('mergeFilesUploadInput') mergeFilesUploadInput: ElementRef;\r\n\r\n  visibleTabs: {\r\n    id: string;\r\n    heading: string;\r\n    ngTemplateOutlet: string;\r\n  }[];\r\n\r\n  ALL_TABS = [\r\n    {\r\n      id: 'burstTab',\r\n      heading: 'AREAS.PROCESSING.TABS.BURST',\r\n      ngTemplateOutlet: 'tabBurstTemplate',\r\n    },\r\n    {\r\n      id: 'reportGenerationMailMergeTab',\r\n      heading: 'AREAS.PROCESSING.TABS.MAILMERGE-CLASSICREPORTS',\r\n      ngTemplateOutlet: 'tabReportGenerationMailMergeTemplate',\r\n    },\r\n    {\r\n      id: 'mergeBurstTab',\r\n      heading: 'AREAS.PROCESSING.TABS.MERGE-BURST',\r\n      ngTemplateOutlet: 'tabMergeBurstTemplate',\r\n    },\r\n    {\r\n      id: 'procQualityTab',\r\n      heading: 'AREAS.PROCESSING.TABS.QUALITY-ASSURANCE',\r\n      ngTemplateOutlet: 'tabQualityAssuranceTemplate',\r\n    },\r\n    {\r\n      id: 'procSamplesTab',\r\n      heading: 'AREAS.PROCESSING.TABS.SAMPLES',\r\n      ngTemplateOutlet: 'tabSamplesTemplate',\r\n    },\r\n    {\r\n      id: 'logsTab',\r\n      heading: 'AREAS.PROCESSING.TABS.LOGGING-TRACING',\r\n      ngTemplateOutlet: 'tabLogsTemplate',\r\n    },\r\n    {\r\n      id: 'licenseTab',\r\n      heading: 'SHARED-TABS.LICENSE',\r\n      ngTemplateOutlet: 'tabLicenseTemplate',\r\n    },\r\n  ];\r\n\r\n  MENU_SELECTED_X_VISIBLE_TABS = [\r\n    {\r\n      selectedMenu: 'burstMenuSelected',\r\n      visibleTabs: [\r\n        'burstTab',\r\n        'reportGenerationMailMergeTab',\r\n        'logsTab',\r\n        'licenseTab',\r\n      ],\r\n    },\r\n    {\r\n      selectedMenu: 'mergeBurstMenuSelected',\r\n      visibleTabs: ['mergeBurstTab', 'logsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'qualityMenuSelected',\r\n      visibleTabs: ['procQualityTab', 'logsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'logsMenuSelected',\r\n      visibleTabs: ['logsTab', 'licenseTab'],\r\n    },\r\n    {\r\n      selectedMenu: 'samplesMenuSelected',\r\n      visibleTabs: ['procSamplesTab', 'logsTab', 'licenseTab'],\r\n    },\r\n  ];\r\n\r\n  protected xmlSettings = {\r\n    documentburster: {\r\n      settings: null,\r\n    },\r\n  };\r\n  currentLeftMenu: string;\r\n\r\n  protected selectedMailMergeClassicReport: CfgTmplFileInfo;\r\n\r\n  protected reportgenerationmailmerge = [\r\n    { id: 'payslips.xml', name: 'Payslips' },\r\n    { id: 'invoices.xml', name: 'Invoices' },\r\n    { id: 'bills.xml', name: 'Bills' },\r\n  ];\r\n\r\n  constructor(\r\n    protected processingService: ProcessingService,\r\n    protected apiService: ApiService,\r\n    protected settingsService: SettingsService,\r\n    protected confirmService: ConfirmService,\r\n    protected infoService: InfoService,\r\n    protected route: ActivatedRoute,\r\n    protected router: Router,\r\n    protected changeDetectorRef: ChangeDetectorRef,\r\n    protected shellService: ShellService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected fsService: FsService,\r\n    protected samplesService: SamplesService,\r\n  ) {}\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscriptionCheckIfTestEmailServerIsStarted) {\r\n      this.subscriptionCheckIfTestEmailServerIsStarted.unsubscribe();\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    if (this.subscriptionCheckIfTestEmailServerIsStarted) {\r\n      this.subscriptionCheckIfTestEmailServerIsStarted.unsubscribe();\r\n    }\r\n\r\n    this.settingsService.currentConfigurationTemplateName = '';\r\n    this.settingsService.currentConfigurationTemplatePath = '';\r\n\r\n    await this.settingsService.loadAllConnectionFilesAsync();\r\n\r\n    this.settingsService.configurationFiles =\r\n      await this.settingsService.loadAllSettingsFilesAsync();\r\n\r\n    await this.samplesService.fillSamplesNotes();\r\n\r\n    this.route.params.subscribe(async (params) => {\r\n      if (params.leftMenu) {\r\n        this.currentLeftMenu = params.leftMenu;\r\n      } else {\r\n        this.currentLeftMenu = 'burstMenuSelected';\r\n      }\r\n\r\n      if (this.currentLeftMenu == 'qualityMenuSelected') {\r\n        if (params.prefilledInputFilePath) {\r\n          this.processingService.procQualityAssuranceInfo.prefilledInputFilePath =\r\n            params.prefilledInputFilePath;\r\n        }\r\n\r\n        if (params.prefilledConfigurationFilePath) {\r\n          this.processingService.procQualityAssuranceInfo.prefilledConfigurationFilePath =\r\n            params.prefilledConfigurationFilePath;\r\n        }\r\n\r\n        if (params.whichAction) {\r\n          this.processingService.procQualityAssuranceInfo.whichAction =\r\n            params.whichAction;\r\n        }\r\n\r\n        const repeat = interval(1000);\r\n        this.subscriptionCheckIfTestEmailServerIsStarted = repeat.subscribe(\r\n          (val) => {\r\n            this.checkIfTestEmailServerIsStarted();\r\n          },\r\n        );\r\n      } else {\r\n        if (params.prefilledInputFilePath) {\r\n          if (this.currentLeftMenu != 'mergeBurstMenuSelected')\r\n            this.processingService.procBurstInfo.prefilledInputFilePath =\r\n              params.prefilledInputFilePath;\r\n          else if (this.currentLeftMenu == 'mergeBurstMenuSelected') {\r\n            console.log(\r\n              `params.prefilledInputFilePath = ${params.prefilledInputFilePath}`,\r\n            );\r\n\r\n            let pFilledInputFilePath = params.prefilledInputFilePath;\r\n\r\n            this.processingService.procMergeBurstInfo.shouldBurstResultedMergedFile =\r\n              pFilledInputFilePath.endsWith('#burst-merged-file');\r\n\r\n            if (\r\n              this.processingService.procMergeBurstInfo\r\n                .shouldBurstResultedMergedFile\r\n            )\r\n              pFilledInputFilePath = pFilledInputFilePath.replace(\r\n                '#burst-merged-file',\r\n                '',\r\n              );\r\n            const filePaths = pFilledInputFilePath.split('#');\r\n\r\n            filePaths.forEach((filePath: string) => {\r\n              this.processingService.procMergeBurstInfo.inputFiles.push({\r\n                name: Utilities.basename(filePath),\r\n                path: filePath,\r\n              });\r\n            });\r\n          }\r\n        }\r\n        if (params.prefilledConfigurationFilePath) {\r\n          this.processingService.procBurstInfo.prefilledConfigurationFilePath =\r\n            params.prefilledConfigurationFilePath;\r\n        }\r\n      }\r\n\r\n      this.refreshTabs();\r\n    });\r\n\r\n    this.xmlSettings = await this.settingsService.loadSettingsFileAsync(\r\n      this.settingsService.getDefaultsConfigurationValuesFilePath(),\r\n    );\r\n\r\n    //console.log(\r\n    //  `processing.component.xmlSettings: ${JSON.stringify(this.xmlSettings)}`\r\n    //);\r\n\r\n    this.processingService.procMergeBurstInfo.mergedFileName =\r\n      this.xmlSettings.documentburster.settings.mergefilename;\r\n  }\r\n\r\n  refreshTabs() {\r\n    this.visibleTabs = [];\r\n    this.changeDetectorRef.detectChanges();\r\n\r\n    let visibleTabsIds = this.MENU_SELECTED_X_VISIBLE_TABS.find((item) => {\r\n      return item.selectedMenu === this.currentLeftMenu;\r\n    }).visibleTabs;\r\n\r\n    //if (this.currentLeftMenu == 'burstMenuSelected') {\r\n    let mailMergeConfigurations =\r\n      this.settingsService.getMailMergeConfigurations('visible');\r\n\r\n    if (!mailMergeConfigurations.length) {\r\n      visibleTabsIds = visibleTabsIds.filter(\r\n        (tab) => tab != 'reportGenerationMailMergeTab',\r\n      );\r\n    }\r\n    //}\r\n\r\n    this.visibleTabs = this.ALL_TABS.filter((item) => {\r\n      return visibleTabsIds.includes(item.id);\r\n    });\r\n  }\r\n\r\n  // tab Burst\r\n\r\n  onBurstFileSelected(event: Event) {\r\n    const target = event.target as HTMLInputElement;\r\n    this.processingService.procBurstInfo.inputFile = target.files[0];\r\n    this.processingService.procBurstInfo.inputFileName =\r\n      this.processingService.procBurstInfo.inputFile.name;\r\n\r\n    this.processingService.procQualityAssuranceInfo.inputFile =\r\n      this.processingService.procBurstInfo.inputFile;\r\n    this.processingService.procQualityAssuranceInfo.inputFileName =\r\n      this.processingService.procBurstInfo.inputFileName;\r\n\r\n    console.log(\r\n      `processingService.procQualityAssuranceInfo.inputFileName ( onBurstFileSelected) = ${this.processingService.procQualityAssuranceInfo.inputFileName}`,\r\n    );\r\n  }\r\n\r\n  resetProcInfo() {\r\n    this.processingService.procBurstInfo.inputFile = null;\r\n    this.processingService.procBurstInfo.prefilledInputFilePath = null;\r\n\r\n    this.processingService.procBurstInfo.inputFileName = '';\r\n\r\n    this.processingService.procBurstInfo.prefilledConfigurationFilePath = '';\r\n    this.processingService.procBurstInfo.isSample = false;\r\n\r\n    this.processingService.procQualityAssuranceInfo.inputFile = null;\r\n    this.processingService.procQualityAssuranceInfo.inputFileName = '';\r\n    this.processingService.procQualityAssuranceInfo.prefilledInputFilePath = '';\r\n\r\n    this.processingService.procMergeBurstInfo.inputFiles = [];\r\n    this.processingService.procMergeBurstInfo.inputFilesNames = [];\r\n    this.processingService.procMergeBurstInfo.shouldBurstResultedMergedFile =\r\n      false;\r\n    this.processingService.procMergeBurstInfo.mergedFileName = 'merged.pdf';\r\n\r\n    (this.burstFileUploadInput.nativeElement as HTMLInputElement).value = '';\r\n    (this.qaFileUploadInput.nativeElement as HTMLInputElement).value = '';\r\n    (this.mergeFilesUploadInput.nativeElement as HTMLInputElement).value = '';\r\n  }\r\n\r\n  async onMailMergeClassicReportFileSelected(filePath: string) {\r\n    this.processingService.procBurstInfo.mailMergeClassicReportInputFilePath =\r\n      Utilities.slash(await this.fsService.resolveAsync(filePath));\r\n\r\n    this.processingService.procBurstInfo.prefilledConfigurationFilePath =\r\n      Utilities.slash(\r\n        await this.fsService.resolveAsync(\r\n          this.selectedMailMergeClassicReport.filePath,\r\n        ),\r\n      );\r\n  }\r\n\r\n  disableRunTest() {}\r\n\r\n  noActiveJobs() {}\r\n\r\n  doBurst() {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      console.log(\r\n        `this.processingService.procBurstInfo.isSample = ${this.processingService.procBurstInfo.isSample}`,\r\n      );\r\n\r\n      if (this.processingService.procBurstInfo.isSample) {\r\n        this.processingService.procBurstInfo.inputFileName = Utilities.basename(\r\n          this.processingService.procBurstInfo.prefilledInputFilePath,\r\n        );\r\n      }\r\n      const dialogQuestion = `Burst file ${this.processingService.procBurstInfo.inputFileName}?`;\r\n\r\n      this.confirmService.askConfirmation({\r\n        message: dialogQuestion,\r\n        confirmAction: async () => {\r\n          let inputFilePath =\r\n            this.processingService.procBurstInfo.prefilledInputFilePath;\r\n          const configFilePath =\r\n            this.processingService.procBurstInfo.prefilledConfigurationFilePath;\r\n\r\n          if (!this.processingService.procBurstInfo.isSample) {\r\n            const formData = new FormData();\r\n            formData.append(\r\n              'file',\r\n              this.processingService.procBurstInfo.inputFile,\r\n              this.processingService.procBurstInfo.inputFileName,\r\n            );\r\n            const customHeaders = new Headers({\r\n              Accept: 'application/json',\r\n            });\r\n            const uploadedFilesInfo = await this.apiService.post(\r\n              '/jobman/upload/process-single',\r\n              formData,\r\n              customHeaders,\r\n            );\r\n            inputFilePath = uploadedFilesInfo[0].filePath;\r\n          }\r\n\r\n          if (!configFilePath)\r\n            this.shellService.runBatFile(\r\n              ['-f', `\"${inputFilePath}\"`],\r\n              this.processingService.procBurstInfo.inputFileName,\r\n            );\r\n          else {\r\n            this.shellService.runBatFile(\r\n              ['-f', `\"${inputFilePath}\"`, '-c', `\"${configFilePath}\"`],\r\n              this.processingService.procBurstInfo.inputFileName,\r\n            );\r\n          }\r\n\r\n          this.resetProcInfo();\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  doGenerateReports() {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      const inputFileName = Utilities.basename(\r\n        this.processingService.procBurstInfo\r\n          .mailMergeClassicReportInputFilePath,\r\n      );\r\n\r\n      const dialogQuestion = `Process file '${inputFileName}'?`;\r\n\r\n      this.confirmService.askConfirmation({\r\n        message: dialogQuestion,\r\n        confirmAction: () => {\r\n          const configFilePath =\r\n            this.processingService.procBurstInfo.prefilledConfigurationFilePath;\r\n          this.processingService.procBurstInfo.prefilledConfigurationFilePath =\r\n            '';\r\n\r\n          this.shellService.runBatFile(\r\n            [\r\n              '-f',\r\n              `\"${this.processingService.procBurstInfo.mailMergeClassicReportInputFilePath}\"`,\r\n              '-c',\r\n              `\"${configFilePath}\"`,\r\n            ],\r\n            inputFileName,\r\n          );\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // end tab Burst\r\n\r\n  // tab Merge -> Burst\r\n  doMergeBurst() {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      const dialogQuestion = 'Post a new job?';\r\n\r\n      this.confirmService.askConfirmation({\r\n        message: dialogQuestion,\r\n        confirmAction: async () => {\r\n          let mergeFilePath = '';\r\n\r\n          if (!this.processingService.procBurstInfo.isSample) {\r\n            const formData = new FormData();\r\n            this.processingService.procMergeBurstInfo.inputFiles.forEach(\r\n              (inputFile, index) => {\r\n                formData.append('files', inputFile.file, inputFile.name);\r\n              },\r\n            );\r\n\r\n            const customHeaders = new Headers({\r\n              Accept: 'application/json',\r\n            });\r\n\r\n            const uploadedFilesInfo = await this.apiService.post(\r\n              '/jobman/upload/process-multiple',\r\n              formData,\r\n              customHeaders,\r\n            );\r\n            mergeFilePath =\r\n              await this.shellService.generateMergeFileInTempFolder(\r\n                uploadedFilesInfo.map(\r\n                  (fileInfo: { filePath: string }) => fileInfo.filePath,\r\n                ),\r\n              );\r\n          } else if (this.processingService.procBurstInfo.isSample) {\r\n            mergeFilePath =\r\n              await this.shellService.generateMergeFileInTempFolder(\r\n                this.processingService.procMergeBurstInfo.inputFiles.map(\r\n                  (fileInfo: { path: string }) => fileInfo.path,\r\n                ),\r\n              );\r\n          }\r\n\r\n          const arrguments = [\r\n            '-mf',\r\n            '\"' + mergeFilePath + '\"',\r\n            '-o',\r\n            this.processingService.procMergeBurstInfo.mergedFileName,\r\n          ];\r\n\r\n          if (\r\n            this.processingService.procMergeBurstInfo\r\n              .shouldBurstResultedMergedFile\r\n          ) {\r\n            arrguments.push('-b');\r\n          }\r\n\r\n          this.shellService.runBatFile(\r\n            arrguments,\r\n            this.processingService.procMergeBurstInfo.mergedFileName,\r\n          );\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  onFilesAdded(event: Event) {\r\n    const target = event.target as HTMLInputElement;\r\n    const files = Array.from(target.files);\r\n\r\n    //alert('test');\r\n\r\n    //console.log(`onFilesAdded files = ${JSON.stringify(files)}`);\r\n\r\n    files.forEach((file) => {\r\n      this.processingService.procMergeBurstInfo.inputFiles.push({\r\n        name: file.name,\r\n        path: file.path,\r\n        file: file,\r\n      });\r\n    });\r\n\r\n    /*\r\n    console.log(\r\n      `onFilesAdded - inputFiles: ${JSON.stringify(\r\n        this.processingService.procMergeBurstInfo.inputFiles.map(\r\n          (inputFile) => ({\r\n            name: inputFile.name,\r\n            path: inputFile.path,\r\n            fileName: inputFile.file.name,\r\n            fileSize: inputFile.file.size,\r\n          }),\r\n        ),\r\n      )}`,\r\n    );\r\n    */\r\n\r\n    target.value = '';\r\n  }\r\n\r\n  onFileSelected(file: { path: string }) {\r\n    this.processingService.procMergeBurstInfo.inputFiles.forEach((each) => {\r\n      if (each.path === file.path) {\r\n        each.selected = true;\r\n        this.processingService.procMergeBurstInfo.selectedFile = file;\r\n      } else {\r\n        each.selected = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  onSelectedFileDelete() {\r\n    const dialogQuestion = 'Delete selected item?';\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: () => {\r\n        _.remove(\r\n          this.processingService.procMergeBurstInfo.inputFiles,\r\n          (o) =>\r\n            o.path ===\r\n            this.processingService.procMergeBurstInfo.selectedFile.path,\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  onSelectedFileUp() {\r\n    const index = _.indexOf(\r\n      this.processingService.procMergeBurstInfo.inputFiles,\r\n      this.processingService.procMergeBurstInfo.selectedFile,\r\n    );\r\n\r\n    if (index > 0) {\r\n      this.moveItemInArray(\r\n        this.processingService.procMergeBurstInfo.inputFiles,\r\n        index,\r\n        index - 1,\r\n      );\r\n      this.onFileSelected(\r\n        this.processingService.procMergeBurstInfo.selectedFile,\r\n      );\r\n    }\r\n\r\n    console.log(\r\n      JSON.stringify(\r\n        this.processingService.procMergeBurstInfo.inputFiles.map(\r\n          (inputFile) => inputFile.name,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  onSelectedFileDown() {\r\n    const index = _.indexOf(\r\n      this.processingService.procMergeBurstInfo.inputFiles,\r\n      this.processingService.procMergeBurstInfo.selectedFile,\r\n    );\r\n\r\n    if (\r\n      index <\r\n      this.processingService.procMergeBurstInfo.inputFiles.length - 1\r\n    ) {\r\n      this.moveItemInArray(\r\n        this.processingService.procMergeBurstInfo.inputFiles,\r\n        index,\r\n        index + 1,\r\n      );\r\n      this.onFileSelected(\r\n        this.processingService.procMergeBurstInfo.selectedFile,\r\n      );\r\n    }\r\n    console.log(\r\n      JSON.stringify(\r\n        this.processingService.procMergeBurstInfo.inputFiles.map(\r\n          (inputFile) => inputFile.name,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  onClearFiles() {\r\n    const dialogQuestion = 'Clear all items?';\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: () => {\r\n        this.processingService.procMergeBurstInfo.inputFiles = [];\r\n      },\r\n    });\r\n    console.log(\r\n      JSON.stringify(\r\n        this.processingService.procMergeBurstInfo.inputFiles.map(\r\n          (inputFile) => inputFile.name,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  async saveMergedFileSetting() {\r\n    const xmlSettings = await this.settingsService.loadSettingsFileAsync(\r\n      this.settingsService.getDefaultsConfigurationValuesFilePath(),\r\n    );\r\n\r\n    xmlSettings.documentburster.settings.mergefilename =\r\n      this.processingService.procMergeBurstInfo.mergedFileName;\r\n\r\n    this.settingsService.saveSettingsFileAsync(\r\n      this.settingsService.getDefaultsConfigurationValuesFilePath(),\r\n      xmlSettings,\r\n    );\r\n  }\r\n\r\n  moveItemInArray(array, from, to) {\r\n    array.splice(to, 0, array.splice(from, 1)[0]);\r\n  }\r\n  // end tab Merge -> Burst\r\n\r\n  // tab Quality Assurance\r\n  onQAFileSelected(event: Event) {\r\n    const target = event.target as HTMLInputElement;\r\n    this.processingService.procQualityAssuranceInfo.inputFile = target.files[0];\r\n    this.processingService.procQualityAssuranceInfo.inputFileName =\r\n      this.processingService.procQualityAssuranceInfo.inputFile.name;\r\n  }\r\n\r\n  doRunTest() {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      if (this.processingService.procBurstInfo.isSample) {\r\n        this.processingService.procQualityAssuranceInfo.inputFileName =\r\n          Utilities.basename(\r\n            this.processingService.procQualityAssuranceInfo\r\n              .prefilledInputFilePath,\r\n          );\r\n      }\r\n\r\n      const dialogQuestion = `Test file ${this.processingService.procQualityAssuranceInfo.inputFileName}?`;\r\n\r\n      this.confirmService.askConfirmation({\r\n        message: dialogQuestion,\r\n        confirmAction: async () => {\r\n          let inputFilePath =\r\n            this.processingService.procQualityAssuranceInfo\r\n              .prefilledInputFilePath;\r\n          const configFilePath =\r\n            this.processingService.procQualityAssuranceInfo\r\n              .prefilledConfigurationFilePath;\r\n\r\n          let arrguments = [];\r\n\r\n          if (\r\n            this.processingService.procQualityAssuranceInfo.whichAction ==\r\n            'burst'\r\n          )\r\n            arrguments = [\r\n              '-' + this.processingService.procQualityAssuranceInfo.mode,\r\n            ];\r\n          else if (\r\n            this.processingService.procQualityAssuranceInfo.whichAction ==\r\n            'csv-generate-reports'\r\n          )\r\n            arrguments = [\r\n              '-c',\r\n              '\"' + configFilePath + '\"',\r\n              '-' + this.processingService.procQualityAssuranceInfo.mode,\r\n            ];\r\n\r\n          if (this.processingService.procQualityAssuranceInfo.mode === 'tl') {\r\n            arrguments.push(\r\n              '\"' +\r\n                this.processingService.procQualityAssuranceInfo.listOfTokens\r\n                  .toString()\r\n                  .replace(/, +/g, ',') +\r\n                '\"',\r\n            );\r\n          } else if (\r\n            this.processingService.procQualityAssuranceInfo.mode === 'tr'\r\n          ) {\r\n            arrguments.push(\r\n              this.processingService.procQualityAssuranceInfo\r\n                .numberOfRandomTokens,\r\n            );\r\n          }\r\n\r\n          if (!this.processingService.procBurstInfo.isSample) {\r\n            const formData = new FormData();\r\n            formData.append(\r\n              'file',\r\n              this.processingService.procQualityAssuranceInfo.inputFile,\r\n              this.processingService.procQualityAssuranceInfo.inputFileName,\r\n            );\r\n\r\n            const customHeaders = new Headers({\r\n              Accept: 'application/json',\r\n            });\r\n            const uploadedFilesInfo = await this.apiService.post(\r\n              '/jobman/upload/process-qa',\r\n              formData,\r\n              customHeaders,\r\n            );\r\n            inputFilePath = uploadedFilesInfo[0].filePath;\r\n          }\r\n\r\n          this.shellService.runBatFile(\r\n            ['-f', inputFilePath].concat(arrguments),\r\n            Utilities.basename(inputFilePath),\r\n          );\r\n          this.resetProcInfo();\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  onDifferentQualityAssuranceModeFocus(mode) {\r\n    switch (mode) {\r\n      case 'tl':\r\n        document.getElementById('listOfTokens').focus();\r\n        break;\r\n      case 'tr':\r\n        document.getElementById('numberOfRandomTokens').focus();\r\n        break;\r\n      case 'listOfTokens':\r\n        this.processingService.procQualityAssuranceInfo.mode = 'tl';\r\n        break;\r\n      case 'numberOfRandomTokens':\r\n        this.processingService.procQualityAssuranceInfo.mode = 'tr';\r\n        break;\r\n      default:\r\n        document.getElementById('listOfTokens').focus();\r\n        this.processingService.procQualityAssuranceInfo.mode = 'ta';\r\n    }\r\n  }\r\n\r\n  runTestShouldBeDisabled() {\r\n    let disableRunTest = true;\r\n\r\n    let isInputFileSelected = false;\r\n    if (\r\n      this.processingService.procQualityAssuranceInfo.inputFile ||\r\n      (this.processingService.procBurstInfo.isSample &&\r\n        this.processingService.procQualityAssuranceInfo.prefilledInputFilePath)\r\n    ) {\r\n      isInputFileSelected = true;\r\n    }\r\n\r\n    if (isInputFileSelected) {\r\n      switch (this.processingService.procQualityAssuranceInfo.mode) {\r\n        case 'ta':\r\n          disableRunTest = false;\r\n          break;\r\n        case 'tl':\r\n          if (this.processingService.procQualityAssuranceInfo.listOfTokens) {\r\n            disableRunTest = false;\r\n          }\r\n          break;\r\n        case 'tr':\r\n          if (\r\n            Utilities.isPositiveInteger(\r\n              this.processingService.procQualityAssuranceInfo\r\n                .numberOfRandomTokens,\r\n            )\r\n          ) {\r\n            disableRunTest = false;\r\n          }\r\n          break;\r\n        default:\r\n          disableRunTest = true;\r\n      }\r\n    }\r\n    return disableRunTest;\r\n  }\r\n\r\n  async checkIfTestEmailServerIsStarted() {\r\n    //console.log(\r\n    //  `this.xmlSettings.documentburster.settings.qualityassurance.emailserver.weburl = ${this.xmlSettings.documentburster.settings.qualityassurance.emailserver.weburl}`,\r\n    //);\r\n\r\n    let testEmailServerStatus = 'stopped';\r\n    const qaEmailServerStarted = await this.apiService.get(\r\n      '/jobman/system/check-url',\r\n      {\r\n        url: encodeURIComponent(\r\n          this.xmlSettings.documentburster.settings.qualityassurance.emailserver\r\n            .weburl,\r\n        ),\r\n      },\r\n    );\r\n\r\n    //console.log(`qaEmailServerStarted = ${qaEmailServerStarted}`);\r\n\r\n    if (qaEmailServerStarted) testEmailServerStatus = 'started';\r\n\r\n    if (\r\n      this.processingService.procQualityAssuranceInfo.testEmailServerStatus !==\r\n      testEmailServerStatus\r\n    )\r\n      this.processingService.procQualityAssuranceInfo.testEmailServerStatus =\r\n        testEmailServerStatus;\r\n\r\n    //console.log(\r\n    //  `this.processingService.procQualityAssuranceInfo.testEmailServerStatus = ${this.processingService.procQualityAssuranceInfo.testEmailServerStatus}`,\r\n    //);\r\n  }\r\n\r\n  doStartStopTestEmailServer(command: string) {\r\n    let dialogQuestion = 'Start Test Email Server?';\r\n\r\n    if (command === 'shut') {\r\n      dialogQuestion = 'Stop Test Email Server?';\r\n    }\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: () => {\r\n        this.processingService.procQualityAssuranceInfo.testEmailServerStatus =\r\n          'starting';\r\n        if (command === 'shut') {\r\n          this.processingService.procQualityAssuranceInfo.testEmailServerStatus =\r\n            'stopping';\r\n        }\r\n\r\n        this.shellService.startStopTestEmailServer(command);\r\n      },\r\n    });\r\n  }\r\n\r\n  // end tab Quality Assurance\r\n\r\n  // stop / cancel / resume\r\n  doResumeJob(jobFilePath: string) {\r\n    if (this.executionStatsService.logStats.foundDirtyLogFiles) {\r\n      const dialogMessage =\r\n        'Log files are not empty. You need to press the Clear Logs button first.';\r\n\r\n      this.infoService.showInformation({\r\n        message: dialogMessage,\r\n      });\r\n    } else {\r\n      const dialogQuestion = 'Resume processing this job?';\r\n\r\n      this.confirmService.askConfirmation({\r\n        message: dialogQuestion,\r\n        confirmAction: () => {\r\n          this.executionStatsService.jobStats.jobsToResume = [];\r\n          console.log(`jobFilePath = ${jobFilePath}`);\r\n          this.shellService.runBatFile(\r\n            ['-rf', '\"' + jobFilePath + '\"'],\r\n            Utilities.basename(jobFilePath),\r\n          );\r\n\r\n          this.executionStatsService.jobStats.jobsToResume = [];\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  clearResumeJob(jobFilePath: string) {\r\n    const dialogQuestion = 'Clear this job?';\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        await this.shellService.clearResumeJob(jobFilePath);\r\n        this.executionStatsService.jobStats.jobsToResume = [];\r\n      },\r\n    });\r\n  }\r\n\r\n  // end stop / cancel / resume\r\n\r\n  //start Mail Merge\r\n  groupByMailMergeHelper(report: any) {\r\n    if (report.type == 'config-reports') return 'Reports';\r\n    else return 'Samples';\r\n  }\r\n  //end Mail Merge\r\n\r\n  //start samples\r\n  async doShowSamplesLearnMoreModal(clickedSample: SampleInfo) {\r\n    this.modalSampleInfo.id = clickedSample.id;\r\n\r\n    this.modalSampleInfo.title = clickedSample.name;\r\n    this.modalSampleInfo.capReportDistribution =\r\n      clickedSample.capReportDistribution;\r\n    this.modalSampleInfo.capReportGenerationMailMerge =\r\n      clickedSample.capReportGenerationMailMerge;\r\n    this.modalSampleInfo.notes = clickedSample.notes;\r\n\r\n    this.modalSampleInfo.configurationFilePath =\r\n      clickedSample.configurationFilePath;\r\n\r\n    this.modalSampleInfo.configurationFileName =\r\n      clickedSample.configurationFileName;\r\n\r\n    this.modalSampleInfo.inputDetails = this.samplesService.getInputHtml(\r\n      clickedSample.id,\r\n      true,\r\n    );\r\n    this.modalSampleInfo.outputDetails = this.samplesService.getOutputHtml(\r\n      clickedSample.id,\r\n      true,\r\n    );\r\n\r\n    this.modalSampleInfo.outputDetails = this.samplesService.getOutputHtml(\r\n      clickedSample.id,\r\n      true,\r\n    );\r\n\r\n    this.modalSampleInfo.documentation = clickedSample.documentation;\r\n\r\n    this.isModalSamplesLearnMoreVisible = true;\r\n  }\r\n\r\n  async doCloseSamplesLearnMoreModal() {\r\n    this.isModalSamplesLearnMoreVisible = false;\r\n  }\r\n\r\n  onSampleClick(clickedSample: { id: string }) {\r\n    for (const sample of this.samplesService.samples) {\r\n      sample.activeClicked = sample.id === clickedSample.id ? true : false;\r\n    }\r\n  }\r\n\r\n  getSelectedSample() {\r\n    return this.samplesService.samples.find((sample: SampleInfo) => {\r\n      return sample.activeClicked;\r\n    });\r\n  }\r\n\r\n  doToggleSampleVisibility(visibility: string) {\r\n    const selectedSample = this.getSelectedSample();\r\n\r\n    let dialogQuestion = `Show '${selectedSample.name}' sample in the menu?`;\r\n\r\n    if (visibility == 'hidden')\r\n      dialogQuestion = `Hide '${selectedSample.name}' sample from the menu?`;\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        await this.samplesService.toggleSampleVisibility(\r\n          selectedSample,\r\n          visibility,\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  doHideAllSamples() {\r\n    const dialogQuestion = `Hide all samples from the menu and other places in the user interface?`;\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        await this.samplesService.hideAllSamples();\r\n      },\r\n    });\r\n  }\r\n\r\n  doSampleViewConfigurationFile(\r\n    configFilePath: string,\r\n    configFileName: string,\r\n  ) {\r\n    this.router.navigate([\r\n      '/configuration',\r\n      'generalSettingsMenuSelected',\r\n      configFilePath,\r\n      configFileName,\r\n    ]);\r\n  }\r\n\r\n  doSampleTryIt(clickedSample: SampleInfo) {\r\n    const dialogQuestion = clickedSample.notes;\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmLabel: \"OK and I'll click 'Burst' in the following screen\",\r\n      declineLabel: \"No, I'll do it later\",\r\n      confirmAction: () => {\r\n        if (clickedSample.input.data.length == 1) {\r\n          this.processingService.procBurstInfo.isSample = true;\r\n          const inputDocumentShortPath = clickedSample.input.data[0].replace(\r\n            'file:',\r\n            '',\r\n          );\r\n\r\n          this.router.navigate([\r\n            '/processingSample',\r\n            'burstMenuSelected',\r\n            Utilities.resolve(\r\n              Utilities.slash(\r\n                `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/${inputDocumentShortPath}`,\r\n              ),\r\n            ),\r\n            Utilities.resolve(\r\n              Utilities.slash(clickedSample.configurationFilePath),\r\n            ),\r\n          ]);\r\n        } else if (clickedSample.input.data.length > 1) {\r\n          this.processingService.procBurstInfo.isSample = true;\r\n\r\n          let diezSeparatedListOfFilePathsToMerge = '';\r\n          const filesToMerge = clickedSample.input.data;\r\n          filesToMerge.forEach((fileToMerge: string) => {\r\n            const filePath = Utilities.resolve(\r\n              Utilities.slash(\r\n                `${\r\n                  this.settingsService.PORTABLE_EXECUTABLE_DIR\r\n                }/${fileToMerge.replace('file:', '')}`,\r\n              ),\r\n            );\r\n            if (diezSeparatedListOfFilePathsToMerge.length == 0) {\r\n              diezSeparatedListOfFilePathsToMerge = filePath;\r\n            } else {\r\n              diezSeparatedListOfFilePathsToMerge = `${diezSeparatedListOfFilePathsToMerge}#${filePath}`;\r\n            }\r\n          });\r\n\r\n          diezSeparatedListOfFilePathsToMerge = `${diezSeparatedListOfFilePathsToMerge}#burst-merged-file`;\r\n          console.log(\r\n            `diezSeparatedListOfFilePathsToMerge = ${diezSeparatedListOfFilePathsToMerge}`,\r\n          );\r\n          this.router.navigate([\r\n            '/processingSample',\r\n            'mergeBurstMenuSelected',\r\n            diezSeparatedListOfFilePathsToMerge,\r\n            Utilities.resolve(\r\n              Utilities.slash(clickedSample.configurationFilePath),\r\n            ),\r\n          ]);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  //end samples\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "processingService",
            "type": "ProcessingService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "infoService",
            "type": "InfoService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "samplesService",
            "type": "SamplesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 188,
        "jsdoctags": [
          {
            "name": "processingService",
            "type": "ProcessingService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "apiService",
            "type": "ApiService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "infoService",
            "type": "InfoService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "route",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "samplesService",
            "type": "SamplesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "SkinsComponent",
      "id": "component-SkinsComponent-c5180e7a95636c0cb90ed4e5e203363cea83e21d72a3520ef85a8a4fe425451dcaa1f2697b8c425235b7ce449ae5ae0a56cce5e9c41a305d89d98c2102ba4b6b",
      "file": "src/app/components/skins/skins.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-skins",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./skins.template.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "ALL_SKINS",
          "defaultValue": "[\r\n    'skin-blue',\r\n    'skin-blue-light',\r\n    'skin-yellow',\r\n    'skin-yellow-light',\r\n    'skin-green',\r\n    'skin-green-light',\r\n    'skin-purple',\r\n    'skin-purple-light',\r\n    'skin-red',\r\n    'skin-red-light',\r\n    'skin-black',\r\n    'skin-black-light',\r\n  ]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "bodyElement",
          "defaultValue": "document.getElementsByTagName('body')[0]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24
        }
      ],
      "methodsClass": [
        {
          "name": "applySkin",
          "args": [
            {
              "name": "skin",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "skin",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "changeSkin",
          "args": [
            {
              "name": "skin",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "skin",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "saveSkin",
          "args": [
            {
              "name": "newSkin",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 68,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "newSkin",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { OnInit, Component } from '@angular/core';\r\nimport { SettingsService } from '../../providers/settings.service';\r\n\r\n@Component({\r\n  selector: 'dburst-skins',\r\n  templateUrl: './skins.template.html',\r\n})\r\nexport class SkinsComponent implements OnInit {\r\n  ALL_SKINS = [\r\n    'skin-blue',\r\n    'skin-blue-light',\r\n    'skin-yellow',\r\n    'skin-yellow-light',\r\n    'skin-green',\r\n    'skin-green-light',\r\n    'skin-purple',\r\n    'skin-purple-light',\r\n    'skin-red',\r\n    'skin-red-light',\r\n    'skin-black',\r\n    'skin-black-light',\r\n  ];\r\n\r\n  bodyElement = document.getElementsByTagName('body')[0];\r\n\r\n  constructor(protected settingsService: SettingsService) {}\r\n\r\n  async ngOnInit() {\r\n    this.settingsService.xmlInternalSettings.documentburster =\r\n      await this.settingsService.loadPreferencesFileAsync(\r\n        this.settingsService.INTERNAL_SETTINGS_FILE_PATH,\r\n      );\r\n\r\n    //console.log(\r\n    //  `this.settingsService.xmlInternalSettings = ${JSON.stringify(\r\n    //    this.settingsService.xmlInternalSettings\r\n    //  )}`\r\n    //);\r\n\r\n    let skin =\r\n      this.settingsService.xmlInternalSettings.documentburster.settings.skin;\r\n\r\n    if (!skin) skin = 'skin-blue';\r\n\r\n    this.applySkin(skin);\r\n  }\r\n\r\n  async changeSkin(skin: string) {\r\n    this.applySkin(skin);\r\n\r\n    await this.saveSkin(skin);\r\n  }\r\n\r\n  applySkin(skin: string) {\r\n    if (skin) {\r\n      for (let eachSkin of this.ALL_SKINS) {\r\n        setTimeout(() => {\r\n          this.bodyElement.classList.remove(eachSkin);\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        this.bodyElement.classList.add(skin);\r\n      });\r\n    }\r\n  }\r\n\r\n  async saveSkin(newSkin: string) {\r\n    this.settingsService.xmlInternalSettings.documentburster =\r\n      await this.settingsService.loadPreferencesFileAsync(\r\n        this.settingsService.INTERNAL_SETTINGS_FILE_PATH,\r\n      );\r\n\r\n    this.settingsService.xmlInternalSettings.documentburster.settings.skin =\r\n      newSkin;\r\n\r\n    await this.settingsService.savePreferencesFileAsync(\r\n      this.settingsService.INTERNAL_SETTINGS_FILE_PATH,\r\n      this.settingsService.xmlInternalSettings,\r\n    );\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<!-- Control Sidebar -->\r\n<aside id=\"controlSidebar\" class=\"control-sidebar control-sidebar-dark\">\r\n  <h4 class=\"control-sidebar-heading\">\r\n    {{ \"COMPONENTS.SKINS.SKINS\" | translate }}\r\n  </h4>\r\n  <ul class=\"list-unstyled skins-grid clearfix\">\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-blue\"\r\n        (click)=\"changeSkin('skin-blue')\"\r\n        data-skin=\"skin-blue\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 7px;\r\n              background: #367fa9;\r\n            \"\r\n          ></span\r\n          ><span\r\n            class=\"bg-light-blue\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #222d32;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\">\r\n        {{ \"COMPONENTS.SKINS.BLUE\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-black\"\r\n        (click)=\"changeSkin('skin-black')\"\r\n        data-skin=\"skin-black\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div style=\"box-shadow: 0 0 2px rgba(0, 0, 0, 0.1)\" class=\"clearfix\">\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 7px;\r\n              background: #fefefe;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 7px;\r\n              background: #fefefe;\r\n            \"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #222;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\">\r\n        {{ \"COMPONENTS.SKINS.BLACK\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-purple\"\r\n        (click)=\"changeSkin('skin-purple')\"\r\n        data-skin=\"skin-purple\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-purple-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-purple\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #222d32;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\">\r\n        {{ \"COMPONENTS.SKINS.PURPLE\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-green\"\r\n        (click)=\"changeSkin('skin-green')\"\r\n        data-skin=\"skin-green\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-green-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-green\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #222d32;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\">\r\n        {{ \"COMPONENTS.SKINS.GREEN\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-red\"\r\n        (click)=\"changeSkin('skin-red')\"\r\n        data-skin=\"skin-red\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-red-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-red\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #222d32;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\">\r\n        {{ \"COMPONENTS.SKINS.RED\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-yellow\"\r\n        (click)=\"changeSkin('skin-yellow')\"\r\n        data-skin=\"skin-yellow\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-yellow-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-yellow\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #222d32;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\">\r\n        {{ \"COMPONENTS.SKINS.YELLOW\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-blue-light\"\r\n        (click)=\"changeSkin('skin-blue-light')\"\r\n        data-skin=\"skin-blue-light\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 7px;\r\n              background: #367fa9;\r\n            \"\r\n          ></span\r\n          ><span\r\n            class=\"bg-light-blue\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f9fafc;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\" style=\"font-size: 12px\">\r\n        {{ \"COMPONENTS.SKINS.BLUE-LIGHT\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-black-light\"\r\n        (click)=\"changeSkin('skin-black-light')\"\r\n        data-skin=\"skin-black-light\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div style=\"box-shadow: 0 0 2px rgba(0, 0, 0, 0.1)\" class=\"clearfix\">\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 7px;\r\n              background: #fefefe;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 7px;\r\n              background: #fefefe;\r\n            \"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f9fafc;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\" style=\"font-size: 12px\">\r\n        {{ \"COMPONENTS.SKINS.BLACK-LIGHT\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-purple-light\"\r\n        (click)=\"changeSkin('skin-purple-light')\"\r\n        data-skin=\"skin-purple-light\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-purple-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-purple\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f9fafc;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\" style=\"font-size: 12px\">\r\n        {{ \"COMPONENTS.SKINS.PURPLE-LIGHT\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-green-light\"\r\n        (click)=\"changeSkin('skin-green-light')\"\r\n        data-skin=\"skin-green-light\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-green-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-green\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f9fafc;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\" style=\"font-size: 12px\">\r\n        {{ \"COMPONENTS.SKINS.GREEN-LIGHT\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-red-light\"\r\n        (click)=\"changeSkin('skin-red-light')\"\r\n        data-skin=\"skin-red-light\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-red-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-red\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f9fafc;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\" style=\"font-size: 12px\">\r\n        {{ \"COMPONENTS.SKINS.RED-LIGHT\" | translate }}\r\n      </p>\r\n    </li>\r\n    <li style=\"float: left; width: 33.33333%; padding: 5px\">\r\n      <a\r\n        id=\"skin-yellow-light\"\r\n        (click)=\"changeSkin('skin-yellow-light')\"\r\n        data-skin=\"skin-yellow-light\"\r\n        style=\"\r\n          cursor: pointer;\r\n          display: block;\r\n          box-shadow: 0 0 3px rgba(0, 0, 0, 0.4);\r\n        \"\r\n        class=\"clearfix full-opacity-hover\"\r\n      >\r\n        <div>\r\n          <span\r\n            style=\"display: block; width: 20%; float: left; height: 7px\"\r\n            class=\"bg-yellow-active\"\r\n          ></span\r\n          ><span\r\n            class=\"bg-yellow\"\r\n            style=\"display: block; width: 80%; float: left; height: 7px\"\r\n          ></span>\r\n        </div>\r\n        <div>\r\n          <span\r\n            style=\"\r\n              display: block;\r\n              width: 20%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f9fafc;\r\n            \"\r\n          ></span\r\n          ><span\r\n            style=\"\r\n              display: block;\r\n              width: 80%;\r\n              float: left;\r\n              height: 20px;\r\n              background: #f4f5f7;\r\n            \"\r\n          ></span>\r\n        </div>\r\n      </a>\r\n      <p class=\"text-center no-margin\" style=\"font-size: 12px\">\r\n        {{ \"COMPONENTS.SKINS.YELLOW-LIGHT\" | translate }}\r\n      </p>\r\n    </li>\r\n  </ul>\r\n</aside>\r\n<!-- /.control-sidebar -->\r\n<!-- Add the sidebar's background. This div must be placed\r\n         immediately after the control sidebar -->\r\n<div class=\"control-sidebar-bg\" style=\"margin-top: 25px\"></div>\r\n"
    },
    {
      "name": "StatusBarComponent",
      "id": "component-StatusBarComponent-60d6e115e32ded067c8e10fd5d169fd772153d95ff1d7269aa7e8aeda9bad4bf47f4f46a9cc3fce96522d1247ed50ff2e0b9b2917e13ea24fb1ce133ef468554",
      "file": "src/app/areas/status-bar/status-bar.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-status-bar",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./status-bar.template.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "subscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 19
        }
      ],
      "methodsClass": [
        {
          "name": "doPauseCancelJob",
          "args": [
            {
              "name": "fileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fileName",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "jobFilePath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "command",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "shouldShowPauseCancelButtons",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { ExecutionStatsService } from '../../providers/execution-stats.service';\r\n\r\n//import * as jetpack from 'fs-jetpack';\r\n\r\n//import * as path from 'path';\r\nimport Utilities from '../../helpers/utilities';\r\nimport { ConfirmService } from '../../components/dialog-confirm/confirm.service';\r\nimport { WebSocketExecutionStatsService } from '../../providers/ws-execution-stats.service';\r\nimport { FsService } from '../../providers/fs.service';\r\n\r\n@Component({\r\n  selector: 'dburst-status-bar',\r\n  templateUrl: './status-bar.template.html',\r\n})\r\nexport class StatusBarComponent implements OnInit, OnDestroy {\r\n  subscription: Subscription;\r\n\r\n  constructor(\r\n    protected confirmService: ConfirmService,\r\n    protected fsService: FsService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected executionStatsWsService: WebSocketExecutionStatsService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.executionStatsWsService.makeWSConnectionAndHandleMessages();\r\n    //FIXME define a constant CHECK_INTERVAL = 333 to be reused across all ).subscribe\r\n\r\n    //const repeat = interval(333);\r\n    //const repeat = interval(3333);\r\n\r\n    //this.subscription = repeat.subscribe((val) => {\r\n    //  this.executionStatsService.checkJobsFolder();\r\n    //  this.executionStatsService.checkLogsFolder();\r\n    //  this.executionStatsService.checkResumeJobs();\r\n    //});\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.executionStatsWsService.wsSubscription.unsubscribe();\r\n  }\r\n\r\n  shouldShowPauseCancelButtons() {\r\n    if (\r\n      this.executionStatsService.jobStats.niceWorkingOnFileNames === 'email' ||\r\n      this.executionStatsService.jobStats.niceWorkingOnFileNames ===\r\n        'license' ||\r\n      this.executionStatsService.jobStats.niceWorkingOnFileNames === 'twilio' ||\r\n      this.executionStatsService.jobStats.pauseJobFileExists > 0 ||\r\n      this.executionStatsService.jobStats.cancelJobFileExists > 0 ||\r\n      this.executionStatsService.jobStats.numberOfActiveUpdateJobs > 0\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // jobs\r\n  doPauseCancelJob(fileName: string, jobFilePath: string, command: string) {\r\n    let message = 'Cancel ' + fileName + ' job processing?';\r\n\r\n    if (command === 'pause') {\r\n      message = 'Pause ' + fileName + ' job processing?';\r\n    }\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: message,\r\n      confirmAction: () => {\r\n        if (command === 'pause') {\r\n          this.executionStatsService.jobStats.pauseJobFileExists = 1;\r\n        } else {\r\n          this.executionStatsService.jobStats.cancelJobFileExists = 1;\r\n        }\r\n\r\n        const dirPath = Utilities.dirname(jobFilePath);\r\n        const baseName = Utilities.basename(jobFilePath, '.job');\r\n\r\n        const pauseCancelFileName = baseName + '.' + command;\r\n\r\n        const pauseCancelFilePath = Utilities.slash(\r\n          dirPath + '/' + pauseCancelFileName,\r\n        );\r\n\r\n        console.log(\r\n          `this.executionStatsService. = ${JSON.stringify(this.executionStatsService)}`,\r\n        );\r\n        this.fsService.fileAsync(pauseCancelFilePath);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsWsService",
            "type": "WebSocketExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsWsService",
            "type": "WebSocketExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<footer class=\"main-footer\" style=\"padding: 3px\">\r\n  <div class=\"row\">\r\n    <div class=\"col-xs-6\">\r\n      <span\r\n        id=\"noJobsRunning\"\r\n        *ngIf=\"executionStatsService.jobStats.numberOfActiveJobs === 0\"\r\n        >{{ \"AREAS.STATUS-BAR.NO-JOBS-RUNNING\" | translate }}</span\r\n      >\r\n      <span\r\n        id=\"workingOn\"\r\n        *ngIf=\"\r\n          executionStatsService.jobStats.numberOfActiveJobs > 0 &&\r\n          executionStatsService.jobStats.pauseJobFileExists === 0 &&\r\n          executionStatsService.jobStats.cancelJobFileExists === 0\r\n        \"\r\n      >\r\n        &nbsp;{{ \"AREAS.STATUS-BAR.WORKING-ON\" | translate }} {{\r\n        executionStatsService.jobStats.niceWorkingOnFileNames }} ...\r\n        <span\r\n          id=\"progressJobFileExists\"\r\n          *ngIf=\"executionStatsService.jobStats.progressJobFileExists > 0\"\r\n          >.</span\r\n        >\r\n      </span>\r\n      <span\r\n        id=\"pauseJobFileExists\"\r\n        *ngIf=\"executionStatsService.jobStats.pauseJobFileExists > 0\"\r\n        >{{ \"AREAS.STATUS-BAR.WAIT-EXECUTING-COMMAND\" | translate }}\r\n        <strong>{{ \"AREAS.STATUS-BAR.PAUSE\" | translate }}</strong> ...</span\r\n      >\r\n      <span\r\n        id=\"cancelJobFileExists\"\r\n        *ngIf=\"executionStatsService.jobStats.cancelJobFileExists > 0\"\r\n        >{{ \"AREAS.STATUS-BAR.WAIT-EXECUTING-COMMAND\" | translate }}\r\n        <strong>{{ \"AREAS.STATUS-BAR.CANCEL\" | translate }}</strong> ...</span\r\n      >\r\n    </div>\r\n\r\n    <div\r\n      class=\"col-xs-2\"\r\n      *ngIf=\"\r\n        executionStatsService.jobStats.numberOfActiveJobs > 0 &&\r\n        shouldShowPauseCancelButtons()\r\n      \"\r\n    >\r\n      <progressbar\r\n        *ngIf=\"executionStatsService.jobStats.progressValue > 0\"\r\n        [value]=\"executionStatsService.jobStats.progressValue\"\r\n        style=\"margin: 0px; text-align: left\"\r\n      >\r\n      </progressbar>\r\n    </div>\r\n\r\n    <div\r\n      class=\"col-xs-3\"\r\n      *ngIf=\"\r\n        executionStatsService.jobStats.numberOfActiveJobs > 0 &&\r\n        !shouldShowPauseCancelButtons()\r\n      \"\r\n    >\r\n      <progressbar\r\n        *ngIf=\"executionStatsService.jobStats.progressValue > 0\"\r\n        [value]=\"executionStatsService.jobStats.progressValue\"\r\n        style=\"margin: 0px; text-align: left\"\r\n      >\r\n      </progressbar>\r\n    </div>\r\n\r\n    <div\r\n      class=\"col-xs-1\"\r\n      *ngIf=\"\r\n        executionStatsService.jobStats.numberOfActiveJobs > 0 &&\r\n        shouldShowPauseCancelButtons()\r\n      \"\r\n    >\r\n      <div class=\"btn-group dropup pull-right\">\r\n        <button\r\n          id=\"btnCancelPauseRunningJobs\"\r\n          class=\"btn btn-default btn-xs dropdown-toggle\"\r\n          type=\"button\"\r\n          data-toggle=\"dropdown\"\r\n        >\r\n          <span id=\"cancelPause\" class=\"label label-default\"\r\n            >{{ \"AREAS.STATUS-BAR.CANCEL-PAUSE\" | translate }}</span\r\n          >\r\n          <span class=\"caret\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu\">\r\n          <li *ngFor=\"let job of executionStatsService.jobStats.workingOnJobs\">\r\n            <a\r\n              id=\"btnPause{{ job?.fileName }}\"\r\n              (click)=\"doPauseCancelJob(job.fileName, job.jobFilePath, 'pause')\"\r\n              style=\"cursor: pointer\"\r\n            >\r\n              <i class=\"fa fa-pause-circle-o\"></i>&nbsp;\r\n              <u\r\n                >{{ \"AREAS.STATUS-BAR.PAUSE\" | translate }} {{ job?.fileName }}\r\n                {{ \"AREAS.STATUS-BAR.PROCESSING\" | translate }}</u\r\n              >\r\n            </a>\r\n            <br />\r\n            <a\r\n              id=\"btnCancel{{ job?.fileName }}\"\r\n              (click)=\"\r\n                doPauseCancelJob(job.fileName, job.jobFilePath, 'cancel')\r\n              \"\r\n              style=\"cursor: pointer\"\r\n            >\r\n              <i class=\"fa fa-window-close-o\"></i>&nbsp;\r\n              <u\r\n                >{{ \"AREAS.STATUS-BAR.CANCEL\" | translate }} {{ job?.fileName }}\r\n                {{ \"AREAS.STATUS-BAR.PROCESSING\" | translate }}</u\r\n              >\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <div style=\"width: 98%\">\r\n      <div class=\"btn-group dropup pull-right\">\r\n        <button\r\n          id=\"btnGreatNoErrorsNoWarnings\"\r\n          class=\"btn btn-default btn-xs dropdown-toggle\"\r\n          type=\"button\"\r\n          data-toggle=\"dropdown\"\r\n          *ngIf=\"\r\n            executionStatsService.logStats.warningsLogFileSize <= 0 &&\r\n            executionStatsService.logStats.errorsLogFileSize <= 0\r\n          \"\r\n        >\r\n          {{ \"AREAS.STATUS-BAR.NO-ERRORS-WARNINGS\" | translate }}\r\n          <span class=\"caret\"></span>\r\n        </button>\r\n        <button\r\n          id=\"btnWarnings\"\r\n          type=\"button\"\r\n          class=\"btn btn-warning btn-xs dropdown-toggle\"\r\n          data-toggle=\"dropdown\"\r\n          *ngIf=\"\r\n            executionStatsService.logStats.warningsLogFileSize > 0 &&\r\n            executionStatsService.logStats.errorsLogFileSize <= 0\r\n          \"\r\n        >\r\n          {{ \"AREAS.STATUS-BAR.UPS-VIEW-WARNINGS\" | translate }}\r\n          <span class=\"caret\"></span>\r\n        </button>\r\n        <button\r\n          id=\"btnErrors\"\r\n          type=\"button\"\r\n          class=\"btn btn-danger btn-xs dropdown-toggle\"\r\n          data-toggle=\"dropdown\"\r\n          *ngIf=\"executionStatsService.logStats.errorsLogFileSize > 0\"\r\n        >\r\n          {{ \"AREAS.STATUS-BAR.UPS-VIEW-ERRORS\" | translate }}\r\n          <span class=\"caret\"></span>\r\n        </button>\r\n        <ul class=\"dropdown-menu\">\r\n          <li>\r\n            <a href=\"#\" [routerLink]=\"['/processing', 'logsMenuSelected']\">\r\n              <u>{{ \"AREAS.STATUS-BAR.VIEW-LOGS\" | translate }}</u>\r\n            </a>\r\n          </li>\r\n          <li *ngIf=\"executionStatsWsService.settingsService.isJServerStarted\">\r\n            <a href=\"#\"\r\n              ><i\r\n                class=\"fa fa-check-circle-o\"\r\n                style=\"color: #4caf50\"\r\n                *ngIf=\"executionStatsWsService.settingsService.isJServerStarted\"\r\n              ></i\r\n              ><span\r\n                *ngIf=\"executionStatsWsService.settingsService.isJServerStarted\"\r\n                >server is UP</span\r\n              >&nbsp;<i class=\"fa fa-arrows-v\"></i\r\n            ></a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n"
    },
    {
      "name": "SystemDiagnosticsComponent",
      "id": "component-SystemDiagnosticsComponent-8dd635daf90d83d47ee5076caff8a512fd8b44c07f59349266b098b30fb265e25d4939f90f3d42e6977b33e8e04f3a81d3a0b27f260903011c8c8643f893ae88",
      "file": "src/app/areas/install-setup-upgrade/system-diagnostics/system-diagnostics.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-system-diagnostics",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "restartApp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport { systemDiagnosticsTemplate } from './system-diagnostics.template';\r\nimport { ConfirmService } from '../../../components/dialog-confirm/confirm.service';\r\nimport { SettingsService } from '../../../providers/settings.service';\r\nimport { ElectronService } from '../../../core/services/electron/electron.service';\r\nimport { StateStoreService } from '../../../providers/state-store.service';\r\n\r\n@Component({\r\n  selector: 'dburst-system-diagnostics',\r\n  template: ` ${systemDiagnosticsTemplate} `,\r\n})\r\nexport class SystemDiagnosticsComponent {\r\n  constructor(\r\n    protected storeService: StateStoreService,\r\n    protected electronService: ElectronService,\r\n    protected settingsService: SettingsService,\r\n    protected confirmService: ConfirmService,\r\n  ) {}\r\n\r\n  restartApp() {\r\n    this.confirmService.askConfirmation({\r\n      message: 'Are you sure that you want to perform this action?',\r\n      confirmAction: () => {\r\n        this.electronService.restartElectronApp();\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "storeService",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "storeService",
            "type": "StateStoreService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": []
    },
    {
      "name": "TerminalComponent",
      "id": "component-TerminalComponent-7fd8a4e484c07f347d2c53178a8ac27f4f0b766be16d88b7ddb112a8e397f84e776f293a414a06987fcfda87a9f58a12e05c4c0f42d703450fb60d900faba174",
      "file": "src/app/areas/install-setup-upgrade/terminal/terminal.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-terminal",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "availableCommandsVisible",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "headerLevel",
          "defaultValue": "'Commands (Read-only)'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "readOnly",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "subscription",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 26
        }
      ],
      "methodsClass": [
        {
          "name": "honourReadOnly",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 178,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 199,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "toggleReadOnly",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 182,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {\r\n  Component,\r\n  AfterViewInit,\r\n  ElementRef,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { DomHandler } from 'primeng/dom';\r\n\r\nimport { terminalTemplate } from './terminal.template';\r\nimport { ConfirmService } from '../../../components/dialog-confirm/confirm.service';\r\nimport { TerminalService } from 'primeng/terminal';\r\nimport { ElectronService } from '../../../core/services/electron/electron.service';\r\n\r\n@Component({\r\n  selector: 'dburst-terminal',\r\n  template: ` ${terminalTemplate} `,\r\n})\r\nexport class TerminalComponent implements AfterViewInit {\r\n  readOnly = true;\r\n  availableCommandsVisible = false;\r\n\r\n  headerLevel = 'Commands (Read-only)';\r\n\r\n  subscription: Subscription;\r\n\r\n  /*\r\n  @ViewChild('terminalTemplate', { static: true }) terminalTemplate: TemplateRef<\r\n    any\r\n  >;\r\n  */\r\n\r\n  constructor(\r\n    protected terminalService: TerminalService,\r\n    protected electronService: ElectronService,\r\n    protected confirmService: ConfirmService,\r\n    protected el: ElementRef,\r\n    protected changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.subscription = this.terminalService.commandHandler.subscribe(\r\n      async (command) => {\r\n        let response: string;\r\n        let jobFilePath: string;\r\n        try {\r\n          if (command.includes('install')) {\r\n            const threeWordsKebab = command.split(' ').slice(0, 3).join('-');\r\n\r\n            jobFilePath =\r\n              await this.electronService.createJobFile(threeWordsKebab);\r\n          }\r\n          switch (command) {\r\n            case 'java -version':\r\n            case 'java --version':\r\n              try {\r\n                //const throwError = true;\r\n                const throwError = false;\r\n\r\n                response =\r\n                  await this.electronService.checkJavaVersion(throwError);\r\n              } catch (error) {\r\n                response = error;\r\n              }\r\n\r\n              this.electronService.typeCommandOnTerminalAndThenPressEnter(\r\n                'choco --version',\r\n              );\r\n\r\n              break;\r\n\r\n            case 'choco --version':\r\n              try {\r\n                //const throwError = true;\r\n                const throwError = false;\r\n\r\n                const version =\r\n                  await this.electronService.checkChocoVersion(throwError);\r\n\r\n                response = 'Chocolatey ' + version;\r\n              } catch (error) {\r\n                response = error;\r\n              }\r\n\r\n              break;\r\n\r\n            case 'install chocolatey':\r\n              try {\r\n                await this.electronService.emptyLogFile();\r\n\r\n                await this.electronService.installChocolatey();\r\n\r\n                /*\r\n                    elevatedScript.stderr.on('data', (data) => {\r\n                    response = response + '\\n' + data;\r\n                  });\r\n\r\n                  for await (const data of elevatedScript.stdout) {\r\n                    response = response + '\\n' + data;\r\n                  }\r\n                  */\r\n              } catch (error) {\r\n                response = error;\r\n              }\r\n\r\n              break;\r\n\r\n            case 'uninstall chocolatey':\r\n              try {\r\n                await this.electronService.emptyLogFile();\r\n\r\n                const unInstallCommand = `& ../tools/chocolatey/uninstall.ps1`;\r\n                const testCommand = 'choco --version';\r\n\r\n                const elevatedScript =\r\n                  await this.electronService.getCommandReadyToBeRunAsAdministratorUsingPowerShell(\r\n                    unInstallCommand,\r\n                    testCommand,\r\n                  );\r\n\r\n                elevatedScript.stderr.on('data', (data) => {\r\n                  response = response + '\\n' + data;\r\n                });\r\n\r\n                for await (const data of elevatedScript.stdout) {\r\n                  response = response + '\\n' + data;\r\n                }\r\n              } catch (error) {\r\n                response = error;\r\n              }\r\n\r\n              break;\r\n\r\n            case 'choco install jre8 -PackageParameters \"/exclude:64\" --yes':\r\n            case 'choco install openjdk --yes':\r\n            case 'choco install notepadplusplus --yes':\r\n            case 'choco install winmerge --yes':\r\n            case 'choco uninstall jre8 --yes':\r\n            case 'choco uninstall openjdk --yes':\r\n            case 'choco uninstall notepadplusplus --yes':\r\n            case 'choco uninstall winmerge --yes':\r\n            case '':\r\n              response = '';\r\n              break;\r\n\r\n            default:\r\n              response = 'Unknown command: ' + command;\r\n          }\r\n        } finally {\r\n          if (response) {\r\n            //response = response.toString();\r\n            try {\r\n              await this.electronService.logMessage(\r\n                response.replace('undefined', ''),\r\n              );\r\n            } catch (error) {}\r\n          }\r\n          if (jobFilePath)\r\n            await this.electronService.deleteJobFile(jobFilePath);\r\n          this.changeDetectorRef.detectChanges();\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.electronService.pTerminalInput = DomHandler.find(\r\n      this.el.nativeElement,\r\n      '.p-terminal-input',\r\n    )[0];\r\n\r\n    this.electronService.typeCommandOnTerminalAndThenPressEnter(\r\n      'java -version',\r\n    );\r\n\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  honourReadOnly() {\r\n    return !this.readOnly;\r\n  }\r\n\r\n  toggleReadOnly() {\r\n    if (this.readOnly) {\r\n      this.confirmService.askConfirmation({\r\n        message:\r\n          \"If you don't understand the commands you can break the system. Are you sure that you want to continue?\",\r\n        confirmAction: () => {\r\n          this.electronService.typeCommandOnTerminalAndThenPressEnter('');\r\n          this.readOnly = false;\r\n          this.headerLevel = 'Type Your Commands Here';\r\n        },\r\n      });\r\n    } else {\r\n      this.readOnly = true;\r\n      this.headerLevel = 'Commands (Read-only)';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "terminalService",
            "type": "TerminalService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "terminalService",
            "type": "TerminalService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["AfterViewInit"]
    },
    {
      "name": "TopMenuHeaderComponent",
      "id": "component-TopMenuHeaderComponent-e8d5f4034b51d40b980ebfee6426d7a240e9d20daf694d27fca3034315dfea15bfd409590d0ce2fb6d9578dfc8d70b0ffe75bc1720aadc7005ef40a592dc523f",
      "file": "src/app/areas/top-menu-header/top-menu-header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-top-menu-header",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./top-menu-header.template.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onAskForFeatureModalShow",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { LicenseService } from '../../providers/license.service';\r\nimport { AskForFeatureService } from '../../components/ask-for-feature/ask-for-feature.service';\r\nimport { SamplesService } from '../../providers/samples.service';\r\nimport { SettingsService } from '../../providers/settings.service';\r\n\r\n@Component({\r\n  selector: 'dburst-top-menu-header',\r\n  templateUrl: './top-menu-header.template.html',\r\n})\r\nexport class TopMenuHeaderComponent implements OnInit {\r\n  constructor(\r\n    protected settingsService: SettingsService,\r\n    protected licenseService: LicenseService,\r\n    protected askForFeatureService: AskForFeatureService,\r\n    protected samplesService: SamplesService,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    //console.log('TopMenuHeaderComponent');\r\n    await this.settingsService.loadAllConnectionFilesAsync();\r\n\r\n    this.settingsService.configurationFiles =\r\n      await this.settingsService.loadAllSettingsFilesAsync();\r\n\r\n    await this.samplesService.fillSamplesNotes();\r\n  }\r\n\r\n  onAskForFeatureModalShow() {\r\n    this.askForFeatureService.showAskForFeature({});\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "askForFeatureService",
            "type": "AskForFeatureService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "samplesService",
            "type": "SamplesService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "askForFeatureService",
            "type": "AskForFeatureService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "samplesService",
            "type": "SamplesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"],
      "templateData": "<header class=\"main-header\">\r\n  <!-- Logo -->\r\n  <a href=\"#\" [routerLink]=\"['/processing', 'burstMenuSelected']\" class=\"logo\">\r\n    <rb-brand></rb-brand>\r\n  </a>\r\n\r\n  <!-- Header Navbar -->\r\n  <nav class=\"navbar navbar-static-top\" role=\"navigation\">\r\n    <!-- Collect the nav links, forms, and other content for toggling -->\r\n    <div class=\"collapse navbar-collapse pull-left\" id=\"navbar-collapse\">\r\n      <ul id=\"topMenu\" class=\"nav navbar-nav\">\r\n        <li routerLinkActive=\"active\">\r\n          <a\r\n            id=\"topMenuBurst\"\r\n            href=\"#\"\r\n            [routerLink]=\"['/processing', 'burstMenuSelected']\"\r\n            >{{ 'AREAS.TOP-MENU-HEADER.BURST' | translate }}</a\r\n          >\r\n        </li>\r\n\r\n        <li class=\"dropdown\" routerLinkActive=\"active\">\r\n          <a\r\n            id=\"topMenuConfiguration\"\r\n            href=\"#\"\r\n            class=\"dropdown-toggle\"\r\n            data-toggle=\"dropdown\"\r\n            >{{ 'AREAS.TOP-MENU-HEADER.CONFIGURATION' | translate }}\r\n            <span *ngIf=\"settingsService.currentConfigurationTemplateName\">\r\n              ({{ settingsService.currentConfigurationTemplateName }})</span\r\n            >&nbsp;\r\n            <span class=\"caret\"></span>\r\n          </a>\r\n          <ul id=\"topMenuConfigurationList\" class=\"dropdown-menu\" role=\"menu\">\r\n            <li\r\n              *ngFor=\"let configurationFile of this.settingsService.getConfigurations('visible')\"\r\n            >\r\n              <a\r\n                id=\"topMenuConfigurationLoad_{{ configurationFile.folderName }}_{{ configurationFile.fileName }}\"\r\n                href=\"#\"\r\n                [routerLink]=\"[\r\n                  '/configuration',\r\n                  'generalSettingsMenuSelected',\r\n                  configurationFile.filePath,\r\n                  configurationFile.templateName\r\n                ]\"\r\n                >{{ configurationFile.templateName }}\r\n              </a>\r\n            </li>\r\n            <li class=\"divider\"></li>\r\n            <li>\r\n              <a id=\"topMenuConfigurationManage\" href=\"#\"\r\n                >Manage&nbsp;<i\r\n                  style=\"margin-top: 5px\"\r\n                  class=\"fa fa-caret-right pull-right\"\r\n                  >&nbsp;</i\r\n                ></a\r\n              >\r\n              <ul class=\"dropdown-menu\">\r\n                <li>\r\n                  <a\r\n                    id=\"topMenuConfigurationTemplates\"\r\n                    href=\"#\"\r\n                    routerLink=\"/configuration-templates\"\r\n                    >Reports</a\r\n                  >\r\n                </li>\r\n                <li>\r\n                  <a\r\n                    id=\"topMenuConfigurationExternalConnections\"\r\n                    href=\"#\"\r\n                    routerLink=\"/ext-connections\"\r\n                    >Connections (Email, etc)</a\r\n                  >\r\n                </li>\r\n              </ul>\r\n            </li>\r\n            <li *ngIf=\"false\" class=\"divider\"></li>\r\n            <li *ngIf=\"false\">\r\n              <a href=\"#\"\r\n                >Samples&nbsp;<i\r\n                  style=\"margin-top: 5px\"\r\n                  class=\"fa fa-caret-right pull-right\"\r\n                  >&nbsp;</i\r\n                ></a\r\n              >\r\n              <ul class=\"dropdown-menu\">\r\n                <li\r\n                  *ngIf=\"this.settingsService.getSampleConfigurations('visible').length == 0\"\r\n                >\r\n                  No Samples\r\n                </li>\r\n                <li\r\n                  *ngFor=\"let configurationFile of this.settingsService.getSampleConfigurations('visible')\"\r\n                >\r\n                  <a\r\n                    id=\"topMenuConfigurationLoad_{{ configurationFile.folderName }}_{{ configurationFile.fileName }}\"\r\n                    href=\"#\"\r\n                    [routerLink]=\"[\r\n                  '/configuration',\r\n                  'generalSettingsMenuSelected',\r\n                  configurationFile.filePath,\r\n                  configurationFile.templateName\r\n                ]\"\r\n                    >{{ configurationFile.templateName }}\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n\r\n        <li routerLinkActive=\"active\" class=\"dropdown\">\r\n          <a\r\n            id=\"topMenuHelp\"\r\n            href=\"#\"\r\n            class=\"dropdown-toggle\"\r\n            data-toggle=\"dropdown\"\r\n            >{{ 'AREAS.TOP-MENU-HEADER.HELP-AND-SUPPORT' | translate }}&nbsp;\r\n            <span class=\"caret\"></span>\r\n          </a>\r\n          <ul class=\"dropdown-menu\" role=\"menu\">\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpSupport\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'supportMenuSelected']\"\r\n                >{{ 'AREAS.TOP-MENU-HEADER.GET-SOFTWARE-SUPPORT' | translate\r\n                }}</a\r\n              >\r\n            </li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpServices\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'servicesMenuSelected']\"\r\n              >\r\n                {{ 'AREAS.TOP-MENU-HEADER.DOCUMENTBURSTER-SERVICES' | translate\r\n                }}</a\r\n              >\r\n            </li>\r\n            <li class=\"divider\"></li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpDocumentation\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'docsMenuSelected']\"\r\n                >{{ 'AREAS.TOP-MENU-HEADER.DOCUMENTATION' | translate }}</a\r\n              >\r\n            </li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpExamples\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'useCasesMenuSelected']\"\r\n                >{{ 'AREAS.TOP-MENU-HEADER.EXAMPLES' | translate }}</a\r\n              >\r\n            </li>\r\n            <li class=\"divider\"></li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpFreeForSchools\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'freeForSchoolsMenuSelected']\"\r\n                >{{ 'AREAS.TOP-MENU-HEADER.FREE-FOR-SCHOOLS' | translate }}</a\r\n              >\r\n            </li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpCustomerReviews\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'reviewsMenuSelected']\"\r\n                >{{ 'AREAS.TOP-MENU-HEADER.CUSTOMER-REVIEWS' | translate }}</a\r\n              >\r\n            </li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpBlog\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'blogMenuSelected']\"\r\n              >\r\n                {{ 'AREAS.TOP-MENU-HEADER.DOCUMENTBURSTER-BLOG' | translate\r\n                }}</a\r\n              >\r\n            </li>\r\n\r\n            <li class=\"divider\"></li>\r\n\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpJava\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'installSetupMenuSelected']\"\r\n              >\r\n                {{ 'AREAS.TOP-MENU-HEADER.INSTALL-SETUP' | translate }}</a\r\n              >\r\n            </li>\r\n\r\n            <li class=\"divider\"></li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpLicense\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help','licenseMenuSelected']\"\r\n              >\r\n                {{ 'AREAS.HELP.LEFT-MENU.LICENSE' | translate }}\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a\r\n                id=\"topMenuHelpAbout\"\r\n                href=\"#\"\r\n                [routerLink]=\"['/help', 'aboutMenuSelected']\"\r\n                >{{ 'AREAS.TOP-MENU-HEADER.ABOUT' | translate }}</a\r\n              >\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"navbar-custom-menu\">\r\n      <ul class=\"nav navbar-nav\">\r\n        <li>\r\n          <a\r\n            id=\"askForFeature\"\r\n            href=\"#\"\r\n            (click)=\"onAskForFeatureModalShow(); false\"\r\n            >Request <span class=\"badge\">New</span> Feature</a\r\n          >\r\n        </li>\r\n\r\n        <li>\r\n          <a\r\n            id=\"supportEmail\"\r\n            href=\"#\"\r\n            [routerLink]=\"['/help', 'supportMenuSelected']\"\r\n            >contact@reportburster.org</a\r\n          >\r\n        </li>\r\n        <li class=\"divider\">&nbsp;</li>\r\n        <!-- Control Sidebar Toggle Button -->\r\n        <li\r\n          *ngIf=\"!settingsService.RUNNING_IN_E2E\"\r\n          data-toggle=\"control-sidebar\"\r\n        >\r\n          <a id=\"btnChangeSkin\" style=\"cursor: pointer\">\r\n            <i class=\"fa fa-gears\"></i>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n</header>\r\n<!--<dburst-skins></dburst-skins> -->\r\n<dburst-skins *ngIf=\"!settingsService.RUNNING_IN_E2E\"></dburst-skins>\r\n"
    },
    {
      "name": "UpdateComponent",
      "id": "component-UpdateComponent-dafcfc3425970ff87c9ce729377e5f8d7a544687606b1e1174173d494e102acc8c91de5a9d9e167b38d2062bcb89994c62521f8ef9b19efcd5ac46fb17d5530c",
      "file": "src/app/areas/install-setup-upgrade/update/update.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-update",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "succint",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "homeDirectoryPath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36
        },
        {
          "name": "letMeUpdateManually",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "letMeUpdateSourceDirectoryPath",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "updateInfo",
          "defaultValue": "new UpdateInfo()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "updater",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Updater",
          "optional": false,
          "description": "",
          "line": 42
        }
      ],
      "methodsClass": [
        {
          "name": "backupExistingConfiguration",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 192,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "doStats",
          "args": [
            {
              "name": "updateInfo",
              "type": "UpdateInfo",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "err",
              "type": "Error",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "executionTime",
              "type": "",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 324,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "updateInfo",
              "type": "UpdateInfo",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "err",
              "type": "Error",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "executionTime",
              "type": "",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "doUpdate",
          "args": [],
          "optional": false,
          "returnType": "unknown",
          "typeParameters": [],
          "line": 218,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "handleMigrateCopyAboveFiles",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 130,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "handleUpdateNow",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 116,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        },
        {
          "name": "onExistingInstallationFolderSelected",
          "args": [
            {
              "name": "oldInstallationFolderPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134],
          "jsdoctags": [
            {
              "name": "oldInstallationFolderPath",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\n\r\n//import * as jetpack from 'fs-jetpack';\r\n//import * as slash from 'slash';\r\n\r\n//import * as path from 'path';\r\n\r\nimport * as dayjs from 'dayjs';\r\nimport * as utc from 'dayjs/plugin/utc';\r\ndayjs.extend(utc);\r\n\r\n//import * as semver from 'semver';\r\n\r\nimport { updateTemplate } from './update.template';\r\n\r\nimport { UpdateInfo, Updater } from '../updater';\r\n\r\nimport Utilities from '../../../helpers/utilities';\r\nimport { LicenseService } from '../../../providers/license.service';\r\nimport { ExecutionStatsService } from '../../../providers/execution-stats.service';\r\nimport { ToastrMessagesService } from '../../../providers/toastr-messages.service';\r\nimport { UsageDetailsInfo } from '../../../models/usage-details-info.model';\r\nimport { ConfirmService } from '../../../components/dialog-confirm/confirm.service';\r\nimport { SettingsService } from '../../../providers/settings.service';\r\nimport { ShellService } from '../../../providers/shell.service';\r\nimport { BashService } from '../bash.service';\r\nimport { ElectronService } from '../../../core/services/electron/electron.service';\r\nimport { FsService } from '../../../providers/fs.service';\r\nimport UtilitiesElectron from '../../../helpers/utilities-electron';\r\n\r\n@Component({\r\n  selector: 'dburst-update',\r\n  template: ` ${updateTemplate} `,\r\n})\r\nexport class UpdateComponent implements OnInit {\r\n  homeDirectoryPath: string;\r\n\r\n  letMeUpdateManually: false;\r\n  letMeUpdateSourceDirectoryPath: string;\r\n\r\n  updateInfo = new UpdateInfo();\r\n  updater: Updater;\r\n\r\n  @Input() succint: boolean = false;\r\n\r\n  constructor(\r\n    protected settingsService: SettingsService,\r\n    protected licenseService: LicenseService,\r\n    protected executionStatsService: ExecutionStatsService,\r\n    protected confirmService: ConfirmService,\r\n    protected messagesService: ToastrMessagesService,\r\n    protected shellService: ShellService,\r\n    protected bashService: BashService,\r\n    protected electronService: ElectronService,\r\n    protected fsService: FsService,\r\n  ) {\r\n    this.homeDirectoryPath = this.settingsService.PORTABLE_EXECUTABLE_DIR;\r\n    this.updater = new Updater(\r\n      this.homeDirectoryPath,\r\n      this.electronService.log,\r\n    );\r\n    this.updater.isElectron = true;\r\n  }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.updateInfo.updateSourceDirectoryPath =\r\n      this.settingsService.PORTABLE_EXECUTABLE_DIR;\r\n\r\n    await this.settingsService.loadDefaultSettingsFileAsync();\r\n\r\n    this.updateInfo.productInfo.product = this.settingsService.product;\r\n\r\n    this.updateInfo.productInfo.version = this.settingsService.version;\r\n    this.updateInfo.productInfo.isServerVersion =\r\n      this.settingsService.isServerVersion;\r\n    this.updateInfo.productInfo.isWindows = this.settingsService.isWindows;\r\n\r\n    await this.licenseService.loadLicenseFileAsync();\r\n\r\n    this.updateInfo.licenseInfo.latestVersion =\r\n      this.licenseService.licenseDetails?.license.latestversion;\r\n\r\n    this.updateInfo.licenseInfo.key =\r\n      this.licenseService.licenseDetails?.license.key;\r\n    this.updateInfo.licenseInfo.customeremail =\r\n      this.licenseService.licenseDetails?.license.customeremail;\r\n    this.updateInfo.licenseInfo.status =\r\n      this.licenseService.licenseDetails?.license.status;\r\n  }\r\n\r\n  async onExistingInstallationFolderSelected(\r\n    oldInstallationFolderPath: string,\r\n  ) {\r\n    if (oldInstallationFolderPath) {\r\n      this.letMeUpdateSourceDirectoryPath = oldInstallationFolderPath;\r\n\r\n      if (oldInstallationFolderPath.includes('playwright/'))\r\n        this.letMeUpdateSourceDirectoryPath = `${Utilities.getParentFolderPath(\r\n          this.settingsService.PORTABLE_EXECUTABLE_DIR,\r\n        )}/upgrade/baseline/DocumentBurster`;\r\n\r\n      this.updateInfo.errorMsg = '';\r\n      this.updateInfo.mode = 'migrate-copy';\r\n\r\n      console.log(\r\n        `this.letMeUpdateSourceDirectoryPath : ${this.letMeUpdateSourceDirectoryPath}`,\r\n      );\r\n\r\n      this.updateInfo.updateSourceDirectoryPath =\r\n        this.letMeUpdateSourceDirectoryPath;\r\n\r\n      this.updateInfo = await this.updater.fillUpdateInfo(this.updateInfo);\r\n    }\r\n  }\r\n\r\n  async handleUpdateNow() {\r\n    const dialogQuestion =\r\n      'The update will take a few minutes, grab a glass of water and wait patiently until it is done.';\r\n\r\n    this.confirmService.askConfirmation({\r\n      confirmLabel: \"OK, I'll wait for the update to finish.\",\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        this.updateInfo.mode = 'update-now';\r\n        await this.doUpdate();\r\n      },\r\n    });\r\n  }\r\n\r\n  async handleMigrateCopyAboveFiles() {\r\n    const dialogQuestion =\r\n      'All the existing configuration files (i.e. settings.xml) and scripts could be overridden, are you sure you want to continue? The update will take some time, please wait patiently until it is done.';\r\n\r\n    this.confirmService.askConfirmation({\r\n      message: dialogQuestion,\r\n      confirmAction: async () => {\r\n        this.updateInfo.mode = 'migrate-copy';\r\n        await this.doUpdate();\r\n\r\n        await this.licenseService.loadLicenseFileAsync();\r\n\r\n        if (this.licenseService.licenseDetails.license.key)\r\n          await this.licenseService.verifyLicense('-cl');\r\n\r\n        this.settingsService.configurationFiles =\r\n          await this.settingsService.loadAllSettingsFilesAsync({\r\n            forceReload: true,\r\n          });\r\n\r\n        await this.licenseService.loadLicenseFileAsync();\r\n\r\n        this.letMeUpdateManually = false;\r\n        this.letMeUpdateSourceDirectoryPath = '';\r\n\r\n        this.updateInfo = new UpdateInfo();\r\n\r\n        // this._changeDetectorRef.detectChanges();\r\n\r\n        /*\r\n          this.updateInfo.licenseInfo.key = this._licenseService.licenseDetails.license.key;\r\n          this.updateInfo.licenseInfo.customeremail = this._licenseService.licenseDetails.license.customeremail;\r\n          this.updateInfo.licenseInfo.status = this._licenseService.licenseDetails.license.status;\r\n\r\n        */\r\n      },\r\n    });\r\n  }\r\n\r\n  /*\r\n  async createJobFile(): Promise<string> {\r\n    const filePath = `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/updating DocumentBurster, please wait`;\r\n    const jobType = 'update';\r\n\r\n    const jobFileName = Utilities.getRandomJobFileName();\r\n\r\n    const jobFilePath = `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/temp/${jobFileName}`;\r\n    const jobFileContent = Utilities.getJobFileContent(\r\n      filePath,\r\n      jobType,\r\n      '14234234324324'\r\n    );\r\n\r\n    await this.fsService.writeAsync(jobFilePath, jobFileContent);\r\n\r\n    return Promise.resolve(\r\n      Utilities.slash(this.electronService.path.resolve(jobFilePath))\r\n    );\r\n  }\r\n\r\n  */\r\n\r\n  async backupExistingConfiguration() {\r\n    const nowFormatted = dayjs().utc().format('YYYY-MM-DD HH-mm-ss');\r\n\r\n    // Creates directory if doesn't exist\r\n    const backupFolderPath = `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/backup/config-files-before-updating/${this.settingsService.version}/${nowFormatted}`;\r\n\r\n    console.log(`dirAsync.backupFolderPath: ${backupFolderPath}`);\r\n    await UtilitiesElectron.dirAsync(backupFolderPath);\r\n\r\n    await UtilitiesElectron.copyAsync(\r\n      `${this.settingsService.PORTABLE_EXECUTABLE_DIR}`,\r\n      backupFolderPath,\r\n      { matching: ['config/**/*'], overwrite: true },\r\n    );\r\n    await UtilitiesElectron.copyAsync(\r\n      `${this.settingsService.PORTABLE_EXECUTABLE_DIR}`,\r\n      backupFolderPath,\r\n      { matching: ['scripts/**/*'], overwrite: true },\r\n    );\r\n    await UtilitiesElectron.copyAsync(\r\n      `${this.settingsService.PORTABLE_EXECUTABLE_DIR}`,\r\n      backupFolderPath,\r\n      { matching: ['templates/**/*'], overwrite: true },\r\n    );\r\n  }\r\n\r\n  async doUpdate() {\r\n    const start = this.electronService.clock();\r\n\r\n    let updateError: Error = null;\r\n\r\n    this.updateInfo.jobFilePath =\r\n      await this.bashService.createJobFile('update');\r\n\r\n    try {\r\n      console.log(\r\n        `removeAsync shellService.logFilePath: ${this.shellService.logFilePath}`,\r\n      );\r\n\r\n      await UtilitiesElectron.removeAsync(this.shellService.logFilePath);\r\n\r\n      this.executionStatsService.jobStats.numberOfActiveUpdateJobs = 1;\r\n\r\n      if (this.updateInfo.mode == 'migrate-copy')\r\n        await this.backupExistingConfiguration();\r\n\r\n      this.updateInfo = await this.updater.fillUpdateInfo(this.updateInfo);\r\n\r\n      await this.updater.doUpdate(this.updateInfo);\r\n\r\n      if (this.updateInfo.mode == 'update-now') {\r\n        //START - REMOVE THIS AFTER FEW RELEASES (when the jar will be there)\r\n        let updateJarExists = await UtilitiesElectron.existsAsync(\r\n          this.settingsService.UPDATE_JAR_FILE_PATH,\r\n        );\r\n        if (!updateJarExists) {\r\n          // console.log(`from: ${this._updater.upgdDbTempDirectoryPath}/from/DocumentBurster/lib/burst/${this.electronService.path.basename(this._settingsService.UPDATE_JAR_FILE_PATH)}, to: ${this.settingsService.UPDATE_JAR_FILE_PATH}`)\r\n          await UtilitiesElectron.copyAsync(\r\n            `${\r\n              this.updater.upgdDbTempDirectoryPath\r\n            }/from/DocumentBurster/lib/burst/${Utilities.basename(\r\n              this.settingsService.UPDATE_JAR_FILE_PATH,\r\n            )}`,\r\n            this.settingsService.UPDATE_JAR_FILE_PATH,\r\n          );\r\n        }\r\n        //END - REMOVE THIS AFTER FEW RELEASES (when the jar will be there)\r\n\r\n        await this.licenseService.loadLicenseFileAsync();\r\n\r\n        if (this.licenseService.licenseDetails.license.key)\r\n          await this.licenseService.verifyLicense('-cl');\r\n\r\n        await this.shellService.doKillOldExeThenCopyAndStartNewExe(\r\n          this.updateInfo.jobFilePath,\r\n          `${this.updater.updateDestinationDirectoryPath}/DocumentBurster.exe`,\r\n          this.updater.upgdDbTempDirectoryPath,\r\n        );\r\n      }\r\n\r\n      this.messagesService.showInfo('Update Done!');\r\n    } catch (e) {\r\n      updateError = e;\r\n\r\n      //console.log(`error doUpdate: ${e}`);\r\n\r\n      this.electronService.log.error(updateError.stack);\r\n\r\n      if (updateError.message.includes('zip'))\r\n        this.messagesService.showError(\r\n          \"Ups, there was an update error. Please try to 'Update Now' again!\",\r\n        );\r\n      else this.messagesService.showError('Update Error!');\r\n    } finally {\r\n      this.electronService.log.info(\r\n        `Updater.updateDestinationDirectoryPath: ${this.updater.updateDestinationDirectoryPath}`,\r\n      );\r\n\r\n      if (this.updateInfo.mode == 'update-now') {\r\n        this.electronService.log.info(\r\n          `Updater.upgdDbTempDirectoryPath: ${this.updater.upgdDbTempDirectoryPath}`,\r\n        );\r\n        this.electronService.log.info(\r\n          `Updater.backupZipFileName: ${this.updater.backupZipFileName}`,\r\n        );\r\n      }\r\n\r\n      this.electronService.log.info(\r\n        `Updater.updateInfo: ${JSON.stringify(this.updateInfo)}`,\r\n      );\r\n\r\n      const duration = this.electronService.clock(start)[0];\r\n\r\n      this.electronService.log.info(\r\n        `Updater.Duration: ${Math.round(duration / 1000)} seconds`,\r\n      );\r\n\r\n      if (this.settingsService.SHOULD_SEND_STATS)\r\n        this.doStats(this.updateInfo, updateError, duration);\r\n\r\n      this.executionStatsService.jobStats.numberOfActiveUpdateJobs = 0;\r\n\r\n      this.letMeUpdateSourceDirectoryPath = null;\r\n      this.letMeUpdateManually = false;\r\n\r\n      console.log(\r\n        `removeAsync this.updateInfo.jobFilePath: ${this.updateInfo.jobFilePath}`,\r\n      );\r\n      return UtilitiesElectron.removeAsync(this.updateInfo.jobFilePath);\r\n    }\r\n  }\r\n\r\n  doStats(updateInfo: UpdateInfo, err: Error, executionTime) {\r\n    let eventDetails = 'update';\r\n\r\n    if (updateInfo.mode == 'update-now') eventDetails += '-now';\r\n    else eventDetails += '-letme';\r\n\r\n    if (this.settingsService.isServerVersion) eventDetails += '-dbs';\r\n    else eventDetails += '-db';\r\n\r\n    eventDetails = `${eventDetails}-${updateInfo.updateSourceVersion}-to-${this.settingsService.version}`;\r\n\r\n    if (this.settingsService.isWindows) eventDetails += '-win';\r\n    else eventDetails += '-linux';\r\n\r\n    eventDetails = `${eventDetails}-${Math.round(executionTime / 1000)}sec`;\r\n    const tt = new UsageDetailsInfo();\r\n\r\n    tt.text1 = eventDetails;\r\n\r\n    tt.code1 = this.licenseService.licenseDetails.key;\r\n    tt.code2 = this.licenseService.licenseDetails.customeremail;\r\n\r\n    tt.status1 = this.licenseService.licenseDetails.status;\r\n    tt.status2 = 'COMPLETED';\r\n\r\n    if (err) {\r\n      tt.status2 = 'FAILED';\r\n\r\n      //tt.clob1 = this.electronService.stackUtils.clean(err.stack);\r\n    }\r\n\r\n    tt.clob2 = JSON.stringify(updateInfo);\r\n\r\n    Utilities.httpPost(Utilities.TT_URL, tt);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "bashService",
            "type": "BashService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 44,
        "jsdoctags": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "executionStatsService",
            "type": "ExecutionStatsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "confirmService",
            "type": "ConfirmService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "messagesService",
            "type": "ToastrMessagesService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "shellService",
            "type": "ShellService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "bashService",
            "type": "BashService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "electronService",
            "type": "ElectronService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "implements": ["OnInit"]
    },
    {
      "name": "WhatsNewComponent",
      "id": "component-WhatsNewComponent-dbad442fd685e8aa0a90a76383db4a5343cc355fa86a7e681720b39e1038e91c27a3bd63e881e9591b1f04fd0d9882ab90cdafcba2bc779cdda8d7ab60aca59e",
      "file": "src/app/areas/install-setup-upgrade/whats-new/whats-new.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-whats-new",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./whats-new.component.html"],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "blogPosts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BlogPost[]",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "changeLog",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Changelog",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "changeLogMarkdown",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "mode",
          "defaultValue": "'news-releases'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "visibleBlogPost",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BlogPost",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "visibleBlogPostIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "visibleRelease",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Release",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "visibleReleaseBlogPostAnnouncement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BlogPost[]",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "visibleReleaseDate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 35
        },
        {
          "name": "visibleReleaseIndex",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 34
        }
      ],
      "methodsClass": [
        {
          "name": "handleViewMode",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 122,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleVisibleAnnouncement",
          "args": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleVisibleRelease",
          "args": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "action",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [134]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport * as _ from 'lodash';\r\n\r\nimport * as dayjs from 'dayjs';\r\n\r\n//import * as path from 'path';\r\nimport * as rssFeedParser from 'feedparser-promised';\r\n\r\nimport { Changelog, Release, parser } from 'keep-a-changelog';\r\nimport { LicenseService } from '../../../providers/license.service';\r\nimport Utilities from '../../../helpers/utilities';\r\nimport { SettingsService } from '../../../providers/settings.service';\r\nimport { FsService } from '../../../providers/fs.service';\r\n\r\ntype BlogPost = {\r\n  title: string;\r\n  description: string;\r\n  summary: string;\r\n  link: string;\r\n};\r\n\r\n@Component({\r\n  selector: 'dburst-whats-new',\r\n  templateUrl: './whats-new.component.html',\r\n})\r\nexport class WhatsNewComponent {\r\n  mode = 'news-releases';\r\n\r\n  changeLogMarkdown: string;\r\n  changeLog: Changelog;\r\n\r\n  visibleRelease: Release;\r\n  visibleReleaseIndex: number;\r\n  visibleReleaseDate: string;\r\n\r\n  visibleReleaseBlogPostAnnouncement: BlogPost[];\r\n\r\n  blogPosts: BlogPost[];\r\n\r\n  visibleBlogPost: BlogPost;\r\n  visibleBlogPostIndex: number;\r\n\r\n  constructor(\r\n    protected settingsService: SettingsService,\r\n    protected licenseService: LicenseService,\r\n    protected fsService: FsService,\r\n  ) {}\r\n\r\n  async ngOnInit() {\r\n    await this.licenseService.loadLicenseFileAsync();\r\n    if (this.licenseService.changeLog) {\r\n      this.changeLog = this.licenseService.changeLog;\r\n      this.changeLogMarkdown =\r\n        this.licenseService.licenseDetails.license.changelog;\r\n    } else {\r\n      // if the latest changelog cannot be retrieved from https://www.pdfburst.com/store\r\n      // load the changelog from local CHANGELOG.MD file\r\n\r\n      try {\r\n        const localKeepAChangelogContentPath = Utilities.slash(\r\n          `${this.settingsService.PORTABLE_EXECUTABLE_DIR}/CHANGELOG.md`,\r\n        );\r\n\r\n        this.changeLogMarkdown = await this.fsService.readAsync(\r\n          localKeepAChangelogContentPath,\r\n        );\r\n\r\n        this.changeLog = parser(this.changeLogMarkdown);\r\n      } catch {\r\n        //this means that, probably, the file CHANGELOG.md was deleted by the user\r\n      }\r\n    }\r\n\r\n    this.blogPosts = await rssFeedParser.parse(\r\n      'https://www.pdfburst.com/blog/feed/',\r\n    );\r\n\r\n    this.handleVisibleAnnouncement('first');\r\n\r\n    this.handleVisibleRelease('first');\r\n  }\r\n\r\n  handleVisibleAnnouncement(action: string) {\r\n    if (action == 'first') this.visibleBlogPostIndex = 0;\r\n    else if (action == 'next') this.visibleBlogPostIndex++;\r\n    else this.visibleBlogPostIndex--;\r\n\r\n    if (this.blogPosts) {\r\n      this.visibleBlogPost = this.blogPosts[this.visibleBlogPostIndex];\r\n      this.visibleBlogPost.summary = Utilities.getExcerpt(\r\n        this.visibleBlogPost.description,\r\n        this.visibleBlogPost.link,\r\n      );\r\n    }\r\n  }\r\n\r\n  handleVisibleRelease(action: string) {\r\n    //if the changelog could not be retrieved from any source\r\n    if (!this.changeLog) return;\r\n\r\n    if (action == 'first') this.visibleReleaseIndex = 0;\r\n    else if (action == 'next') this.visibleReleaseIndex++;\r\n    else this.visibleReleaseIndex--;\r\n\r\n    this.visibleRelease = this.changeLog.releases[this.visibleReleaseIndex];\r\n\r\n    this.visibleReleaseDate = dayjs(this.visibleRelease.date).format(\r\n      'DD MMM YYYY',\r\n    );\r\n\r\n    let versionNumber = this.visibleRelease.version.raw.trim();\r\n\r\n    if (versionNumber.endsWith('.0'))\r\n      versionNumber = versionNumber.replace(/.0/gi, '');\r\n\r\n    this.visibleReleaseBlogPostAnnouncement = _.filter(this.blogPosts, (o) => {\r\n      return o.title.includes(versionNumber);\r\n    });\r\n  }\r\n\r\n  handleViewMode() {\r\n    this.mode == 'news-releases'\r\n      ? (this.mode = 'changelog')\r\n      : (this.mode = 'news-releases');\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 42,
        "jsdoctags": [
          {
            "name": "settingsService",
            "type": "SettingsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "licenseService",
            "type": "LicenseService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "fsService",
            "type": "FsService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": [],
      "templateData": "<tabset *ngIf=\"mode != 'changelog'\">\r\n  <tab>\r\n    <ng-template tabHeading>\r\n      <i class=\"fa fa-podcast\" aria-hidden=\"true\"></i>&nbsp;&nbsp;{{\r\n        \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.NEWS\" | translate\r\n      }}\r\n    </ng-template>\r\n    <div style=\"height: 340px; overflow-y: scroll; overflow-x: auto\">\r\n      <br />\r\n      <a\r\n        href=\"{{ visibleBlogPost?.link }}\"\r\n        class=\"btn btn-default\"\r\n        target=\"_blank\"\r\n        >{{\r\n          \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.READ-FULL\"\r\n            | translate\r\n        }}</a\r\n      >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n      <i\r\n        *ngIf=\"visibleBlogPostIndex > 0\"\r\n        class=\"fa fa-arrow-circle-left fa-2x\"\r\n        aria-hidden=\"true\"\r\n        title=\"{{\r\n          'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.PREV-ARTICLE'\r\n            | translate\r\n        }}\"\r\n        style=\"cursor: pointer\"\r\n        (click)=\"handleVisibleAnnouncement('previous')\"\r\n      ></i\r\n      >&nbsp;&nbsp;&nbsp;<i\r\n        *ngIf=\"visibleBlogPostIndex < blogPosts?.length - 1\"\r\n        class=\"fa fa-arrow-circle-right fa-2x\"\r\n        aria-hidden=\"true\"\r\n        title=\"{{\r\n          'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.NEXT-ARTICLE'\r\n            | translate\r\n        }}\"\r\n        style=\"cursor: pointer\"\r\n        (click)=\"handleVisibleAnnouncement('next')\"\r\n      ></i>\r\n      <br /><br />\r\n      <h4>\r\n        <u\r\n          ><a href=\"{{ visibleBlogPost?.link }}\" target=\"_blank\">{{\r\n            visibleBlogPost?.title\r\n          }}</a></u\r\n        >\r\n      </h4>\r\n      <iframe\r\n        srcdoc=\"{{ visibleBlogPost?.summary }}\"\r\n        frameborder=\"0\"\r\n        style=\"width: 100%; height: 62%; overflow-y: visible; overflow-x: auto\"\r\n      ></iframe>\r\n    </div>\r\n  </tab>\r\n\r\n  <tab heading=\"Releases\">\r\n    <div style=\"height: 340px; overflow-y: scroll; overflow-x: auto\">\r\n      <br />\r\n      <span *ngIf=\"visibleReleaseBlogPostAnnouncement?.length > 0\">\r\n        <a\r\n          href=\"{{ visibleReleaseBlogPostAnnouncement[0]?.link }}\"\r\n          class=\"btn btn-default\"\r\n          target=\"_blank\"\r\n          >{{\r\n            \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.READ-ANNOUNCEMENT\"\r\n              | translate\r\n          }}</a\r\n        >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n      </span>\r\n      <span *ngIf=\"visibleReleaseIndex > 0\">\r\n        <i\r\n          class=\"fa fa-arrow-circle-left fa-2x\"\r\n          aria-hidden=\"true\"\r\n          title=\"{{\r\n            'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.NEXT-RELEASE'\r\n              | translate\r\n          }}\"\r\n          style=\"cursor: pointer\"\r\n          (click)=\"handleVisibleRelease('previous')\"\r\n        ></i\r\n        >&nbsp;&nbsp;&nbsp;\r\n      </span>\r\n      <i\r\n        *ngIf=\"visibleReleaseIndex < changeLog?.releases.length - 1\"\r\n        class=\"fa fa-arrow-circle-right fa-2x\"\r\n        aria-hidden=\"true\"\r\n        title=\"{{\r\n          'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.PREV-RELEASE'\r\n            | translate\r\n        }}\"\r\n        style=\"cursor: pointer\"\r\n        (click)=\"handleVisibleRelease('next')\"\r\n      ></i>\r\n      <br /><br />\r\n      <h4>\r\n        <div *ngIf=\"visibleReleaseIndex == 0\">\r\n          <strong\r\n            >{{\r\n              \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.LATEST\"\r\n                | translate\r\n            }}\r\n          </strong>\r\n          <em>DocumentBurster</em>\r\n          is {{ visibleRelease?.version }}\r\n          -\r\n          {{ visibleReleaseDate }}\r\n        </div>\r\n        <div *ngIf=\"visibleReleaseIndex != 0\">\r\n          <em>DocumentBurster</em> {{ visibleRelease?.version }} -\r\n          {{ visibleReleaseDate }}\r\n        </div>\r\n      </h4>\r\n      <br />\r\n      <div *ngIf=\"visibleRelease?.changes.get('added').length > 0\">\r\n        {{\r\n          \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.ADDED\" | translate\r\n        }}\r\n        <br />\r\n        <br />\r\n        <ul>\r\n          <li *ngFor=\"let change of visibleRelease?.changes.get('added')\">\r\n            {{ change.title }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <br />\r\n      <div *ngIf=\"visibleRelease?.changes.get('changed').length > 0\">\r\n        {{\r\n          \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.CHANGED\" | translate\r\n        }}\r\n        <br />\r\n        <br />\r\n        <ul>\r\n          <li *ngFor=\"let change of visibleRelease?.changes.get('changed')\">\r\n            {{ change.title }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <br />\r\n      <div *ngIf=\"visibleRelease?.changes.get('fixed').length > 0\">\r\n        {{\r\n          \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.FIXED\" | translate\r\n        }}\r\n        <br />\r\n        <br />\r\n        <ul>\r\n          <li *ngFor=\"let change of visibleRelease?.changes.get('fixed')\">\r\n            {{ change.title }}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </tab>\r\n</tabset>\r\n<div\r\n  *ngIf=\"mode == 'changelog'\"\r\n  style=\"height: 382px; overflow-y: scroll; overflow-x: auto\"\r\n>\r\n  <markdown [data]=\"changeLogMarkdown\"></markdown>\r\n</div>\r\n<hr />\r\n<button type=\"button\" class=\"btn\" (click)=\"handleViewMode()\">\r\n  <span *ngIf=\"mode != 'changelog'\">{{\r\n    \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.VIEW-FULL\" | translate\r\n  }}</span>\r\n  <span *ngIf=\"mode == 'changelog'\">{{\r\n    \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.WHATS-NEW.VIEW-NEWS\" | translate\r\n  }}</span>\r\n</button>\r\n"
    },
    {
      "name": "WhenUpdatingComponent",
      "id": "component-WhenUpdatingComponent-815c3c68db0af72adc7ceecf41822690eded7df7da6474554e609c995e3bfbb3daff8ec83154a56cd0b2a6c76cc1dff95800c07d1f88a2021bdf4ae688517eb6",
      "file": "src/app/areas/install-setup-upgrade/update/when-updating.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dburst-when-updating",
      "styleUrls": [],
      "styles": [],
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "ctx",
          "defaultValue": "'migratecopy'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string",
          "decorators": []
        },
        {
          "name": "updateInfo",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "UpdateInfo",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { SettingsService } from '../../../providers/settings.service';\r\nimport { UpdateInfo } from '../updater';\r\n\r\nimport { whenUpdatingTemplate } from './when-updating.template';\r\n\r\n@Component({\r\n  selector: 'dburst-when-updating',\r\n  template: ` ${whenUpdatingTemplate} `,\r\n})\r\nexport class WhenUpdatingComponent {\r\n  //@Input() ctx: string = 'updatenow';\r\n  @Input() ctx: string = 'migratecopy';\r\n\r\n  @Input() updateInfo: UpdateInfo;\r\n\r\n  constructor() {\r\n    console.log(`updateInfo = ${this.updateInfo}`);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 15
      },
      "extends": []
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-6c3dad9f2c20f82cd5e5a0f63f7b086643534ec32d5cae9c5e6aabbdceb4e8dff778a5446634cc40e67e904c134087899fe3884863da42d3a47b3e528d764ded",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { CoreModule } from './core/core.module';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n// NG Translate\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { AreasModule } from './areas/areas.module';\r\n\r\n// AoT requires an exported function for factories\r\nconst httpLoaderFactory = (http: HttpClient): TranslateHttpLoader =>\r\n  new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    SharedModule,\r\n    AreasModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    CoreModule,\r\n    AppRoutingModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: httpLoaderFactory,\r\n        deps: [HttpClient],\r\n      },\r\n    }),\r\n    ToastrModule.forRoot({\r\n      timeOut: 5000,\r\n      positionClass: 'toast-bottom-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "AreasModule"
            },
            {
              "name": "CoreModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "id": "module-AppRoutingModule-fcd9faa251d7c6aa4d94831dff56e23e0f2842d7213be8697f48c9d4531025756554922c062a461e33a0a1f6c44c827930234898bfb16fc173dd89d1ef732840",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app-routing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ConfigurationTemplatesComponent } from './areas/_configuration-templates/configuration-templates.component';\r\nimport { ConfigurationComponent } from './areas/_configuration/configuration.component';\r\nimport { ExternalConnectionsComponent } from './areas/_ext-connections/ext-connections.component';\r\nimport { HelpComponent } from './areas/_help/help.component';\r\n\r\nimport { ProcessingComponent } from './areas/_processing/processing.component';\r\n/*\r\nimport { ConfigurationComponent } from './areas/_configuration/configuration.component';\r\nimport { ConfigurationTemplatesComponent } from './areas/_configuration-templates/configuration-templates.component';\r\nimport { HelpComponent } from './areas/_help/help.component';\r\n*/\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProcessingComponent,\r\n  },\r\n  {\r\n    path: 'processing/:leftMenu',\r\n    component: ProcessingComponent,\r\n  },\r\n  {\r\n    path: 'processingSample/:leftMenu/:prefilledInputFilePath/:prefilledConfigurationFilePath',\r\n    component: ProcessingComponent,\r\n  },\r\n  {\r\n    path: 'processingQa/:leftMenu',\r\n    component: ProcessingComponent,\r\n  },\r\n  {\r\n    path: 'processingQa/:leftMenu/:prefilledInputFilePath',\r\n    component: ProcessingComponent,\r\n  },\r\n  {\r\n    path: 'processingQa/:leftMenu/:prefilledInputFilePath/:prefilledConfigurationFilePath',\r\n    component: ProcessingComponent,\r\n  },\r\n  {\r\n    path: 'processingQa/:leftMenu/:prefilledInputFilePath/:prefilledConfigurationFilePath/:whichAction',\r\n    component: ProcessingComponent,\r\n  },\r\n  {\r\n    path: 'configuration/:leftMenu/:configurationFilePath/:configurationFileName/:reloadConfiguration',\r\n    component: ConfigurationComponent,\r\n  },\r\n  {\r\n    path: 'configuration/:leftMenu/:configurationFilePath/:configurationFileName',\r\n    component: ConfigurationComponent,\r\n  },\r\n  {\r\n    path: 'configuration-templates',\r\n    component: ConfigurationTemplatesComponent,\r\n  },\r\n  {\r\n    path: 'ext-connections/:goBackLocation/:configurationFilePath/:configurationFileName',\r\n    component: ExternalConnectionsComponent,\r\n  },\r\n  {\r\n    path: 'ext-connections',\r\n    component: ExternalConnectionsComponent,\r\n  },\r\n  { path: 'help/:leftMenu', component: HelpComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AreasModule",
      "id": "module-AreasModule-8a0052471738640910d853d0717358d6c815b220c82879d5148ed30f3ed51b5afcc594e0c294366ffb0b1593b7acf3c20a4b6683ffd78dfe587523315d489ae2",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/areas.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\r\n\r\nimport { AreasComponent } from './areas.component';\r\nimport { TopMenuHeaderComponent } from './top-menu-header/top-menu-header.component';\r\nimport { StatusBarComponent } from './status-bar/status-bar.component';\r\n\r\n//import { SharedModule } from '../shared.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\nimport { ProcessingModule } from './_processing/processing.module';\r\nimport { AppRoutingModule } from '../app-routing.module';\r\nimport { ConfigurationTemplatesModule } from './_configuration-templates/configuration-templates.module';\r\nimport { HelpModule } from './_help/help.module';\r\nimport { ConfigurationModule } from './_configuration/configuration.module';\r\nimport { SkinsComponent } from '../components/skins/skins.component';\r\nimport { ExternalConnectionsModule } from './_ext-connections/ext-connections.module';\r\nimport { BrandComponent } from '../components/brand/brand.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AreasComponent,\r\n    BrandComponent,\r\n    TopMenuHeaderComponent,\r\n    StatusBarComponent,\r\n    SkinsComponent,\r\n  ],\r\n  exports: [AreasComponent],\r\n  imports: [\r\n    ProcessingModule,\r\n    ConfigurationModule,\r\n    ConfigurationTemplatesModule,\r\n    ExternalConnectionsModule,\r\n    HelpModule,\r\n    SharedModule,\r\n    AppRoutingModule,\r\n    ProgressbarModule.forRoot(),\r\n  ],\r\n})\r\nexport class AreasModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AreasComponent"
            },
            {
              "name": "BrandComponent"
            },
            {
              "name": "SkinsComponent"
            },
            {
              "name": "StatusBarComponent"
            },
            {
              "name": "TopMenuHeaderComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "ConfigurationModule"
            },
            {
              "name": "ConfigurationTemplatesModule"
            },
            {
              "name": "ExternalConnectionsModule"
            },
            {
              "name": "HelpModule"
            },
            {
              "name": "ProcessingModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "AreasComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ButtonClearLogsModule",
      "id": "module-ButtonClearLogsModule-3bec237b9f94c8a949d3029bb69b5a8c4e397ce458c0e8f2fcad5bf7429ee4179e712e5316bf15cfa429bb6300ba1bcda682cceb215bdfcea8c68cd435218284",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/button-clear-logs/button-clear-logs.component.component.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { ButtonClearLogsComponent } from './button-clear-logs.component';\r\n\r\n@NgModule({\r\n  declarations: [ButtonClearLogsComponent],\r\n  exports: [ButtonClearLogsComponent],\r\n  imports: [TranslateModule]\r\n})\r\nexport class ButtonClearLogsModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ButtonClearLogsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ButtonClearLogsComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ButtonNativeSystemDialogModule",
      "id": "module-ButtonNativeSystemDialogModule-e584ae6bec63506b4445b7a6a89576f0e654ee4d59cf23db9ad081ad5749aae7dd06a279098120771c7a1ff6ddd337e3153869956e8b23142d72b21baa3b61a2",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/button-native-fs-dialog/button-native-fs-dialog.component.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { ButtonNativeFsDialogComponent } from './button-native-fs-dialog.component';\r\n\r\n@NgModule({\r\n  declarations: [ButtonNativeFsDialogComponent],\r\n  exports: [ButtonNativeFsDialogComponent],\r\n  imports: [TranslateModule],\r\n})\r\nexport class ButtonNativeSystemDialogModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ButtonNativeFsDialogComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ButtonNativeFsDialogComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ButtonNativeSystemDialogModule",
      "id": "module-ButtonNativeSystemDialogModule-1b4dafe2d185b71d242033a6c5eed0f6d5a3e75371d0e897c9e0f4cbd04da6ddf5c9a30e9cb2f20dd68d6ca2fb67aa9571184e6d8ee51c6fb391f625d2f6bfef-1",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/button-native-system-dialog/button-native-system-dialog.component.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { ButtonNativeSystemDialogComponent } from './button-native-system-dialog.component';\r\n\r\n@NgModule({\r\n  declarations: [ButtonNativeSystemDialogComponent],\r\n  exports: [ButtonNativeSystemDialogComponent],\r\n  imports: [TranslateModule],\r\n})\r\nexport class ButtonNativeSystemDialogModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ButtonNativeSystemDialogComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ButtonNativeSystemDialogComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ConfigurationModule",
      "id": "module-ConfigurationModule-0d3a217a600b50699cc347904ae6135accce2710129bbc581a0ce93824ada0a8ae41623649e8ca1fc5f79cb3f39a5d66ea69861bc3a92effc419d1dce9ed13b6",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/_configuration/configuration.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\nimport { ButtonNativeSystemDialogModule } from '../../components/button-native-system-dialog/button-native-system-dialog.component.module';\r\n\r\nimport { LicenseModule } from '../../components/license/license.module';\r\n\r\nimport { ConfigurationComponent } from './configuration.component';\r\nimport { AppRoutingModule } from '../../app-routing.module';\r\nimport { ButtonHtmlPreviewComponent } from '../../components/button-html-preview/button-html-preview.component';\r\n\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { EditorModule } from 'primeng/editor';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n@NgModule({\r\n  declarations: [ConfigurationComponent],\r\n  exports: [ConfigurationComponent],\r\n  imports: [\r\n    EditorModule,\r\n    NgSelectModule,\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    ButtonNativeSystemDialogModule,\r\n    LicenseModule,\r\n  ],\r\n})\r\nexport class ConfigurationModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ConfigurationComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "ButtonNativeSystemDialogModule"
            },
            {
              "name": "LicenseModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ConfigurationComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ConfigurationTemplatesModule",
      "id": "module-ConfigurationTemplatesModule-9d55fdd226a3d1fee74abc5d418c7d84ed5d83ff75fc70e46a64a3877d378b43f1e99ae19b9298c7fe867700beb13b1784d6be57f6c1fa3249b57057a53aa1da",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/_configuration-templates/configuration-templates.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule, Component } from '@angular/core';\r\n\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\n\r\nimport { ConfigurationTemplatesComponent } from './configuration-templates.component';\r\nimport { AppRoutingModule } from '../../app-routing.module';\r\nimport { LicenseModule } from '../../components/license/license.module';\r\nimport { ButtonNativeSystemDialogModule } from '../../components/button-native-system-dialog/button-native-system-dialog.component.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { EditorModule } from 'primeng/editor';\r\n\r\n@NgModule({\r\n  declarations: [ConfigurationTemplatesComponent],\r\n  exports: [ConfigurationTemplatesComponent],\r\n  imports: [\r\n    TabsModule.forRoot(),\r\n    AppRoutingModule,\r\n    ButtonNativeSystemDialogModule,\r\n    SharedModule,\r\n    LicenseModule,\r\n    EditorModule,\r\n  ],\r\n})\r\nexport class ConfigurationTemplatesModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ConfigurationTemplatesComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "ButtonNativeSystemDialogModule"
            },
            {
              "name": "LicenseModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ConfigurationTemplatesComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "CoreModule",
      "id": "module-CoreModule-2842af535c9a767f196d442e5eec1df18176deaca9710baa5fed9b28cfb5bf7c7594b045679773dfcef82e8f73f786738758854a54311116c7a5c556ebc3bdfe",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/core/core.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class CoreModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ExternalConnectionsModule",
      "id": "module-ExternalConnectionsModule-80f98835062324f50df61e13eed54ce836a1bf7a8c0620e3742d2cc808916c2f78e098aa5b0c07282aaa9bc43e4428ebcd8132531968cf9c91bd5606e7e0869d",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/_ext-connections/ext-connections.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\n\r\nimport { ExternalConnectionsComponent } from './ext-connections.component';\r\nimport { AppRoutingModule } from '../../app-routing.module';\r\nimport { LicenseModule } from '../../components/license/license.module';\r\nimport { ButtonNativeSystemDialogModule } from '../../components/button-native-system-dialog/button-native-system-dialog.component.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [ExternalConnectionsComponent],\r\n  exports: [ExternalConnectionsComponent],\r\n  imports: [\r\n    TabsModule.forRoot(),\r\n    AppRoutingModule,\r\n    ButtonNativeSystemDialogModule,\r\n    SharedModule,\r\n    LicenseModule,\r\n  ],\r\n})\r\nexport class ExternalConnectionsModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ExternalConnectionsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "ButtonNativeSystemDialogModule"
            },
            {
              "name": "LicenseModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ExternalConnectionsComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "HelpModule",
      "id": "module-HelpModule-f6251e1617624369cede6f0c52bdfd93002fd9854a940849866992aacc216358dbf744a50abd463b7c8e209bdb3e718919d0fc54bd6d1615438d071cde6905fc",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/_help/help.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\nimport { HelpComponent } from './help.component';\r\nimport { AppRoutingModule } from '../../app-routing.module';\r\n\r\nimport { LogFilesViewerAllTogetherModule } from '../../components/log-files-viewer-all-together/log-files-viewer-all-together.module';\r\n\r\nimport { ButtonNativeSystemDialogModule } from '../../components/button-native-system-dialog/button-native-system-dialog.component.module';\r\nimport { LicenseModule } from '../../components/license/license.module';\r\nimport { InstallSetupUpgradeModule } from '../install-setup-upgrade/install-setup-upgrade.module';\r\nimport { UpdateModule } from '../install-setup-upgrade/update/update.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { LogFileViewerModule } from '../../components/log-file-viewer/log-file-viewer.module';\r\n\r\n@NgModule({\r\n  declarations: [HelpComponent],\r\n  exports: [HelpComponent],\r\n  imports: [\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    LogFileViewerModule,\r\n    ButtonNativeSystemDialogModule,\r\n    LicenseModule,\r\n    InstallSetupUpgradeModule,\r\n    UpdateModule,\r\n  ],\r\n})\r\nexport class HelpModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "HelpComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "ButtonNativeSystemDialogModule"
            },
            {
              "name": "InstallSetupUpgradeModule"
            },
            {
              "name": "LicenseModule"
            },
            {
              "name": "LogFileViewerModule"
            },
            {
              "name": "SharedModule"
            },
            {
              "name": "UpdateModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "HelpComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "InstallSetupUpgradeModule",
      "id": "module-InstallSetupUpgradeModule-a9a8ebce78ec93ea18699827e13c7b238823a590735d370d86919305b598de4b03f264d25dc3327ff8c1d5a7c087f3ba747936760e39574052ab7f1ffbe2d9cd",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/install-setup-upgrade/install-setup-upgrade.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { TerminalModule, TerminalService } from 'primeng/terminal';\r\n\r\nimport { SidebarModule } from 'primeng/sidebar';\r\nimport { PanelModule } from 'primeng/panel';\r\n\r\nimport { JavaComponent } from './java/java.component';\r\nimport { SystemDiagnosticsComponent } from './system-diagnostics/system-diagnostics.component';\r\nimport { ExtraPackagesComponent } from './extra-packages/extra-packages.component';\r\nimport { TerminalComponent } from './terminal/terminal.component';\r\n\r\nimport { ChocolateyComponent } from './chocolatey/chocolatey.component';\r\n\r\nimport { BashService } from './bash.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    JavaComponent,\r\n    ExtraPackagesComponent,\r\n    TerminalComponent,\r\n    SystemDiagnosticsComponent,\r\n    ChocolateyComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TerminalModule,\r\n    PanelModule,\r\n    SidebarModule,\r\n    TranslateModule,\r\n  ],\r\n  exports: [\r\n    JavaComponent,\r\n    ExtraPackagesComponent,\r\n    TerminalComponent,\r\n    SystemDiagnosticsComponent,\r\n  ],\r\n  providers: [BashService, TerminalService],\r\n})\r\nexport class InstallSetupUpgradeModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "BashService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ChocolateyComponent"
            },
            {
              "name": "ExtraPackagesComponent"
            },
            {
              "name": "JavaComponent"
            },
            {
              "name": "SystemDiagnosticsComponent"
            },
            {
              "name": "TerminalComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ExtraPackagesComponent"
            },
            {
              "name": "JavaComponent"
            },
            {
              "name": "SystemDiagnosticsComponent"
            },
            {
              "name": "TerminalComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "LicenseModule",
      "id": "module-LicenseModule-aeda48f6c839aaadde7b3e5ab904be42ce86372b1c645df6713f2df84140528ca70ba17c3dbb570727855ef48acab079697ee738ecfc35148a695f8d694964a8",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/license/license.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { InstallSetupUpgradeModule } from '../../areas/install-setup-upgrade/install-setup-upgrade.module';\r\nimport { UpdateModule } from '../../areas/install-setup-upgrade/update/update.module';\r\nimport { WhatsNewModule } from '../../areas/install-setup-upgrade/whats-new/whats-new.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\n\r\nimport { LicenseComponent } from './license.component';\r\n\r\n@NgModule({\r\n  declarations: [LicenseComponent],\r\n  exports: [LicenseComponent],\r\n  imports: [\r\n    SharedModule,\r\n    InstallSetupUpgradeModule,\r\n    WhatsNewModule,\r\n    UpdateModule,\r\n  ],\r\n})\r\nexport class LicenseModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "LicenseComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "InstallSetupUpgradeModule"
            },
            {
              "name": "SharedModule"
            },
            {
              "name": "UpdateModule"
            },
            {
              "name": "WhatsNewModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "LicenseComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "LogFilesViewerAllTogetherModule",
      "id": "module-LogFilesViewerAllTogetherModule-4fb984c4e84abf063c589b31ce2dacc5fbb5a0657690508436add4fbcce033bdca4775a4a37b44466a5527fac5bf8d82855152014512afba3b7686b6a38be604",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/log-files-viewer-all-together/log-files-viewer-all-together.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { LogFilesViewerAllTogetherComponent } from './log-files-viewer-all-together.component';\r\nimport { ButtonNativeSystemDialogModule } from '../button-native-system-dialog/button-native-system-dialog.component.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LogFileViewerModule } from '../log-file-viewer/log-file-viewer.module';\r\nimport { LogFileViewerComponent } from '../log-file-viewer/log-file-viewer.component';\r\n\r\n@NgModule({\r\n  declarations: [LogFilesViewerAllTogetherComponent],\r\n  exports: [LogFilesViewerAllTogetherComponent],\r\n  imports: [\r\n    LogFileViewerModule,\r\n    ButtonNativeSystemDialogModule,\r\n    TranslateModule,\r\n  ],\r\n})\r\nexport class LogFilesViewerAllTogetherModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "LogFilesViewerAllTogetherComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ButtonNativeSystemDialogModule"
            },
            {
              "name": "LogFileViewerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "LogFilesViewerAllTogetherComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "LogFilesViewerSeparateTabsModule",
      "id": "module-LogFilesViewerSeparateTabsModule-00306f9eabc037b7303e59aa2b20b614a7a0ba8d559cc3ef3a914a19bf30045c4ee3c93e776ef0d5db00cf43d79c916e99731156397d8239c1fd05ac33d2ea3f",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/log-files-viewer-separate-tabs/log-files-viewer-separate-tabs.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { LogFileViewerModule } from '../log-file-viewer/log-file-viewer.module';\r\n\r\nimport { LogFilesViewerSeparateTabsComponent } from './log-files-viewer-separate-tabs.component';\r\n\r\n@NgModule({\r\n  declarations: [LogFilesViewerSeparateTabsComponent],\r\n  exports: [LogFilesViewerSeparateTabsComponent],\r\n  imports: [LogFileViewerModule, TabsModule.forRoot(), TranslateModule],\r\n})\r\nexport class LogFilesViewerSeparateTabsModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "LogFilesViewerSeparateTabsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "LogFileViewerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "LogFilesViewerSeparateTabsComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "LogFileViewerModule",
      "id": "module-LogFileViewerModule-de37ffa1d6bca57c389b696fb35d6184ad47f46918405629c638e14a3de474b7a8f032bfede8ca4d6a2658c2a7261cbd18ff355627a26f68aee852431314b833",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/log-file-viewer/log-file-viewer.module.ts",
      "methods": [],
      "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { LogFileViewerComponent } from './log-file-viewer.component';\r\n\r\n@NgModule({\r\n  declarations: [LogFileViewerComponent],\r\n  exports: [LogFileViewerComponent, CommonModule],\r\n  imports: [CommonModule],\r\n})\r\nexport class LogFileViewerModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "LogFileViewerComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "LogFileViewerComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ProcessingModule",
      "id": "module-ProcessingModule-206946b7b054590f25cbbb9ef15f76ebb2a969ae3f761050888c038b4dea5bb79ce098391babebd16e60b3722448ee933589904b7d6ef987001207479b04c9ea",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/_processing/processing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\nimport { ProcessingComponent } from './processing.component';\r\nimport { AppRoutingModule } from '../../app-routing.module';\r\n\r\nimport { ButtonNativeSystemDialogModule } from '../../components/button-native-system-dialog/button-native-system-dialog.component.module';\r\nimport { LicenseModule } from '../../components/license/license.module';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { LogFilesViewerSeparateTabsModule } from '../../components/log-files-viewer-separate-tabs/log-files-viewer-separate-tabs.module';\r\n\r\n@NgModule({\r\n  declarations: [ProcessingComponent],\r\n  exports: [ProcessingComponent],\r\n  imports: [\r\n    NgSelectModule,\r\n    TabsModule.forRoot(),\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    LogFilesViewerSeparateTabsModule,\r\n    ButtonNativeSystemDialogModule,\r\n    LicenseModule,\r\n  ],\r\n})\r\nexport class ProcessingModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ProcessingComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "ButtonNativeSystemDialogModule"
            },
            {
              "name": "LicenseModule"
            },
            {
              "name": "LogFilesViewerSeparateTabsModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ProcessingComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SharedModule",
      "id": "module-SharedModule-74b73fddb87f130eaa1b8c6fd8770dda5d4a1edde3bcfa012442f8e00176bd5afc67c403712abdccfd4195de406064890663336425e20f3a6e5d9453eee4f684",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/shared.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ShellService } from '../providers/shell.service';\r\nimport { ToastrMessagesService } from '../providers/toastr-messages.service';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { ElectronService } from '../core/services';\r\nimport { ConfirmService } from '../components/dialog-confirm/confirm.service';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { ConfirmDialogComponent } from '../components/dialog-confirm/confirm-dialog.component';\r\nimport { InfoService } from '../components/dialog-info/info.service';\r\nimport { InfoDialogComponent } from '../components/dialog-info/info-dialog.component';\r\nimport { AskForFeatureService } from '../components/ask-for-feature/ask-for-feature.service';\r\nimport { AskForFeatureDialogComponent } from '../components/ask-for-feature/ask-for-feature-dialog.component';\r\nimport { ButtonVariablesComponent } from '../components/button-variables/button-variables.component';\r\nimport { ButtonWellKnownEmailProvidersComponent } from '../components/button-well-known/button-well-known.component';\r\nimport { ButtonClearLogsModule } from '../components/button-clear-logs/button-clear-logs.component.component.module';\r\nimport { ButtonHtmlPreviewComponent } from '../components/button-html-preview/button-html-preview.component';\r\nimport { LogFilesViewerAllTogetherModule } from '../components/log-files-viewer-all-together/log-files-viewer-all-together.module';\r\nimport { LogFilesViewerSeparateTabsModule } from '../components/log-files-viewer-separate-tabs/log-files-viewer-separate-tabs.module';\r\nimport { LogFileViewerModule } from '../components/log-file-viewer/log-file-viewer.module';\r\nimport { SettingsService } from '../providers/settings.service';\r\nimport { LogsServiceWebSocket } from '../providers/ws-logs.service';\r\nimport { FsService } from '../providers/fs.service';\r\nimport { StateStoreService } from '../providers/state-store.service';\r\nimport { ApiService } from '../providers/api.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    ModalModule.forRoot(),\r\n    DialogModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    TranslateModule,\r\n  ],\r\n  declarations: [\r\n    ConfirmDialogComponent,\r\n    InfoDialogComponent,\r\n    AskForFeatureDialogComponent,\r\n    ButtonVariablesComponent,\r\n    ButtonWellKnownEmailProvidersComponent,\r\n    ButtonHtmlPreviewComponent,\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    TranslateModule,\r\n    TabsModule,\r\n    DialogModule,\r\n    LogFileViewerModule,\r\n    LogFilesViewerAllTogetherModule,\r\n    LogFilesViewerSeparateTabsModule,\r\n    ButtonClearLogsModule,\r\n    ButtonVariablesComponent,\r\n    ButtonWellKnownEmailProvidersComponent,\r\n    ButtonHtmlPreviewComponent,\r\n  ],\r\n  providers: [\r\n    StateStoreService,\r\n    ElectronService,\r\n    SettingsService,\r\n    SettingsService,\r\n    FsService,\r\n    LogsServiceWebSocket,\r\n    ShellService,\r\n    ToastrMessagesService,\r\n    ConfirmService,\r\n    InfoService,\r\n    AskForFeatureService,\r\n    ApiService,\r\n  ],\r\n})\r\nexport class SharedModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "ApiService"
            },
            {
              "name": "AskForFeatureService"
            },
            {
              "name": "ConfirmService"
            },
            {
              "name": "ElectronService"
            },
            {
              "name": "FsService"
            },
            {
              "name": "InfoService"
            },
            {
              "name": "LogsServiceWebSocket"
            },
            {
              "name": "SettingsService"
            },
            {
              "name": "SettingsService"
            },
            {
              "name": "ShellService"
            },
            {
              "name": "StateStoreService"
            },
            {
              "name": "ToastrMessagesService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AskForFeatureDialogComponent"
            },
            {
              "name": "ButtonHtmlPreviewComponent"
            },
            {
              "name": "ButtonVariablesComponent"
            },
            {
              "name": "ButtonWellKnownEmailProvidersComponent"
            },
            {
              "name": "ConfirmDialogComponent"
            },
            {
              "name": "InfoDialogComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ButtonClearLogsModule"
            },
            {
              "name": "ButtonHtmlPreviewComponent"
            },
            {
              "name": "ButtonVariablesComponent"
            },
            {
              "name": "ButtonWellKnownEmailProvidersComponent"
            },
            {
              "name": "LogFileViewerModule"
            },
            {
              "name": "LogFilesViewerAllTogetherModule"
            },
            {
              "name": "LogFilesViewerSeparateTabsModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "UpdateModule",
      "id": "module-UpdateModule-9a9ab022dbe56a723e5057e959fff75510a6094435b6150bc6623888f15ca3e12dcb4d6467fba4ba4cda1e2b97e608189840139f965190ce07500cf19d646353",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/install-setup-upgrade/update/update.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ButtonNativeSystemDialogModule } from '../../../components/button-native-system-dialog/button-native-system-dialog.component.module';\r\nimport { SharedModule } from '../../../shared/shared.module';\r\n\r\nimport { UpdateComponent } from './update.component';\r\nimport { WhenUpdatingComponent } from './when-updating';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, ButtonNativeSystemDialogModule],\r\n  declarations: [UpdateComponent, WhenUpdatingComponent],\r\n  exports: [UpdateComponent],\r\n})\r\nexport class UpdateModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "UpdateComponent"
            },
            {
              "name": "WhenUpdatingComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ButtonNativeSystemDialogModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "UpdateComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "WhatsNewModule",
      "id": "module-WhatsNewModule-c6f4c18e885c8b31cc783d72267c508b197a8f7578a6353defd1dce2db8bf783179693e4c51d60c1b8979a43a793b7d1517308572f44265005115b4b02ab3166",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/areas/install-setup-upgrade/whats-new/whats-new.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { MarkdownModule } from 'ngx-markdown';\r\nimport { SharedModule } from '../../../shared/shared.module';\r\n\r\nimport { WhatsNewComponent } from './whats-new.component';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, MarkdownModule.forRoot()],\r\n  declarations: [WhatsNewComponent],\r\n  exports: [WhatsNewComponent],\r\n})\r\nexport class WhatsNewModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "WhatsNewComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "WhatsNewComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "APP_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.dev.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: false,\r\n  environment: 'DEV',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
      },
      {
        "name": "APP_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: true,\r\n  environment: 'PROD',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
      },
      {
        "name": "APP_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: false,\r\n  environment: 'DEV',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
      },
      {
        "name": "APP_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.web.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: true,\r\n  environment: 'WEB-PROD',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
      },
      {
        "name": "APP_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.web.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  production: false,\r\n  environment: 'WEB',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
      },
      {
        "name": "askForFeatureDialogTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/ask-for-feature/ask-for-feature-dialog.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<div\r\n    class=\"modal-header\"\r\n    style=\"top: 10px;\"\r\n  >\r\n    <h4 class=\"modal-title pull-left\" [innerHTML]=\"title\"></h4>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn-close close pull-right\"\r\n      aria-label=\"Close\"\r\n      (click)=\"confirm()\"\r\n    >\r\n      <span aria-hidden=\"true\" class=\"visually-hidden\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\" *ngIf=\"!settingsService.isDefaultEmailConnectionConfigured()\">\r\n    <span\r\n      [innerHTML]=\"'COMPONENTS.ASK-FOR-FEATURE-DIALOG.INNER-HTML.EMAIL-NOT-CONFIGURED-PROPERLY' | translate\"\r\n    ></span>\r\n  </div>\r\n  <div class=\"modal-body\" *ngIf=\"settingsService.isDefaultEmailConnectionConfigured()\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.TO' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          id=\"emailToAddress\"\r\n          [ngModel]=\"msgTo\"\r\n          class=\"form-control\"\r\n          readonly\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.SUBJECT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <input id=\"emailSubject\" [(ngModel)]=\"msgSubject\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.MESSAGE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <textarea\r\n          class=\"form-control\"\r\n          rows=\"20\"\r\n          id=\"htmlCodeEmailMessage\"\r\n          [(ngModel)]=\"msgMessage\"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-primary dburst-button-question-confirm\"\r\n      (click)=\"confirm('send-message')\"\r\n      [innerHTML]=\"confirmLabel\"\r\n      *ngIf=\"settingsService.isDefaultEmailConnectionConfigured()\"\r\n    ></button>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-primary dburst-button-question-confirm\"\r\n      (click)=\"confirm('configure-email-properly')\"\r\n      [innerHTML]=\"'COMPONENTS.ASK-FOR-FEATURE-DIALOG.INNER-HTML.CONFIGURE-EMAIL-PROPERLY' | translate\"\r\n      *ngIf=\"!settingsService.isDefaultEmailConnectionConfigured()\"\r\n    ></button>\r\n    <button id=\"btnClose\" class=\"btn btn-flat btn-default dburst-button-question-decline\" type=\"button\" (click)=\"confirm()\">\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </div> `"
      },
      {
        "name": "baseMeta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/_utils/setup.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  title: 'PLACEHOLDER_TITLE',\r\n  component: 'PLACEHOLDER_COMPONENT',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [\r\n        FormsModule,\r\n        BrowserAnimationsModule,\r\n        DialogModule,\r\n        PanelModule,\r\n        HttpClientModule,\r\n        ToastrModule.forRoot(),\r\n        TranslateModule.forRoot({\r\n          defaultLanguage: 'en',\r\n          loader: {\r\n            provide: TranslateLoader,\r\n            useFactory: HttpLoaderFactory,\r\n            deps: [HttpClient],\r\n          },\r\n        }),\r\n      ],\r\n      providers: [\r\n        ConfirmService,\r\n        BsModalService,\r\n        ToastrService,\r\n        ToastrMessagesService,\r\n      ],\r\n    }),\r\n  ],\r\n}"
      },
      {
        "name": "BlogPostInfo",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/models/blog-post-info.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  title: 'DocumentBurster 8.8.0 with Built-in Auto-Update',\r\n  description: 'DocumentBurster 8.8.0 with Built-in Auto-Update',\r\n  summary: 'DocumentBurster 8.8.0 with Built-in Auto-Update',\r\n  link: 'https://www.pdfburst.com/blog/documentburster-8-8-0-with-built-in-auto-update/',\r\n}"
      },
      {
        "name": "chocolateyTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/install-setup-upgrade/chocolatey/chocolatey.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "` <!--<ng-template #chocolateyTemplate> -->\r\n  <p-panel #pnlStep1ChocoInstallation>\r\n    <h4 id=\"checkPointChocolatey\">\r\n      <div *ngIf=\"!storeService.setup.chocolatey.isChocoOk\">\r\n        <u\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.STEP1' |\r\n          translate }} <em>Chocolatey</em></u\r\n        >\r\n      </div>\r\n      <div *ngIf=\"storeService.setup.chocolatey.isChocoOk\">\r\n        <s\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.STEP1' |\r\n          translate }} <em>Chocolatey</em></s\r\n        >&nbsp;&nbsp;<span class=\"label label-default\"\r\n          ><i class=\"fa fa-check-square-o\"></i\r\n          >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.INSTALLED'\r\n          | translate }}</span\r\n        >\r\n      </div>\r\n    </h4>\r\n    <div\r\n      [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.INNER-HTML.BEFORE-JAVA' | translate\"\r\n    ></div>\r\n    <br /><br />\r\n    <button\r\n      id=\"btnInstallChocolatey\"\r\n      *ngIf=\"!storeService.setup.chocolatey.isChocoOk\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary\"\r\n      (click)=\"installChocolatey()\"\r\n    >\r\n      <i class=\"fa fa-play\"></i\r\n      >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' | translate\r\n      }} <em>Chocolatey</em>\r\n    </button>\r\n  </p-panel>\r\n  <!--</ng-template> -->`"
      },
      {
        "name": "ConfigInfo",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/models/config-info.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  fileName: '',\r\n  filePath: '',\r\n  isDefaultConfigFile: true,\r\n  isSelectedConfigFile: false,\r\n  configuration: {\r\n    settings: {\r\n      version: '',\r\n      template: '',\r\n      numberofuservariables: 20,\r\n      sendfiles: {},\r\n      emailserver: {},\r\n      emailsettings: {},\r\n      uploadsettings: {},\r\n      webuploadsettings: {},\r\n      smssettings: {\r\n        twilio: {},\r\n      },\r\n      qualityassurance: {\r\n        emailserver: {},\r\n      },\r\n      attachments: {\r\n        items: { attachment: [{ path: '', order: 0 }] },\r\n        archive: {},\r\n      },\r\n      emailrfc2822validator: {},\r\n      simplejavamail: { proxy: {}, connectionpool: {}, dkim: {}, smime: {} },\r\n      locale: {},\r\n      retrypolicy: {},\r\n      bursttokendelimiters: {},\r\n      updatesettings: {},\r\n    },\r\n  },\r\n}"
      },
      {
        "name": "extraPackagesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!-- <ng-template #extraPackagesTemplate> -->\r\n\r\n  <div *ngIf=\"electronService.isChocoOk\">\r\n    <span [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INNER-HTML.ABOUT' | translate\"></span>\r\n    <div\r\n      *ngFor=\"let extraPackage of this.extraPackages\"\r\n      [ngClass]=\"{'panel panel-primary': extraPackage.status != 'not-installed', 'panel panel-default' : extraPackage.status == 'not-installed' }\"\r\n    >\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"{{extraPackage.website}}\" target=\"_blank\"\r\n            ><span>{{extraPackage.website}}</span\r\n            >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <span *ngIf=\"extraPackage.status == 'not-installed'\"\r\n              ><em>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INSTALLED.NOT' | translate }}</em></span\r\n            ><span *ngIf=\"extraPackage.status != 'not-installed'\"\r\n              ><strong><u>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INSTALLED.ALREADY' | translate }}</u></strong></span\r\n            ></a\r\n          >\r\n          \r\n        </h3>\r\n      </div>\r\n\r\n      <div id=\"package-{{extraPackage.id}}\" class=\"panel-body\">\r\n        <a href=\"{{extraPackage.website}}\" target=\"_blank\"\r\n          ><img src=\"assets/images/{{extraPackage.icon}}\" height=\"48\" />\r\n          {{extraPackage.name}}</a\r\n        >\r\n        {{extraPackage.description}}\r\n        <br/><br/>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.COMMANDS.INSTALL' | translate }}:&nbsp;<em><strong>{{extraPackage.cmdInstall}}</strong></em>\r\n        <br/>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.COMMANDS.UNINSTALL' | translate }}:&nbsp;<em><strong>{{extraPackage.cmdUnInstall}}</strong></em>\r\n        <br/>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.COMMANDS.GET-INFO' | translate }}:&nbsp;<em><strong>{{extraPackage.cmdGetInfo}}</strong></em>\r\n        <br />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!--  </ng-template>-->`"
      },
      {
        "name": "httpLoaderFactory",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/app.module.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(http: HttpClient): TranslateHttpLoader =>\r\n  new TranslateHttpLoader(http, './assets/i18n/', '.json')"
      },
      {
        "name": "javaTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/install-setup-upgrade/java/java.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!-- <ng-template #javaTemplate> -->\r\n\r\n  <div *ngIf=\"!storeService.setup.isRestartRequired\">\r\n    <strong\r\n      id=\"checkPointJavaPreRequisite\"\r\n      [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-SHORT' | translate\"\r\n    ></strong>\r\n\r\n    <br /><br /><span\r\n      [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n    ></span>\r\n\r\n    <br />\r\n    <div *ngIf=\"storeService.setup.java.isJavaOk\">\r\n      <br />\r\n      <span class=\"label label-success\"\r\n        ><i class=\"fa fa-check-square-o\"></i>&nbsp;<strong\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.GREAT' | translate }},\r\n          <em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FOUND' | translate }}\r\n          <em>ReportBurster</em></strong\r\n        ></span\r\n      >\r\n    </div>\r\n\r\n    <div *ngIf=\"!storeService.setup.java.isJavaOk\">\r\n      <span class=\" label label-warning\"\r\n        ><strong\r\n          ><em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}\r\n        </strong></span\r\n      >\r\n      &nbsp;\r\n      <span class=\"label label-primary\"\r\n        ><strong\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.BELOW-INSTRUCTIONS' |\r\n          translate }} <em>Java</em></strong\r\n        ></span\r\n      >\r\n\r\n      <br /><br />\r\n\r\n      <dburst-chocolatey></dburst-chocolatey>\r\n      <br />\r\n\r\n      <span class=\"label label-success\" *ngIf=\"storeService.setup.chocolatey.isChocoOk\"\r\n        ><i class=\"fa fa-check-square-o\"></i>&nbsp;<strong\r\n          ><em>Chocolatey</em>\r\n        {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FOUND-READY' |\r\n          translate }}\r\n          <em>Java</em></strong\r\n        ></span\r\n      >\r\n      <span class=\"label label-warning\" *ngIf=\"!storeService.setup.chocolatey.isChocoOk\"\r\n        ><strong\r\n          ><em>Chocolatey</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}, {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.YOU-NEED-INSTALL' |\r\n          translate }}\r\n          <em>Chocolatey</em></strong\r\n        ></span\r\n      >\r\n\r\n      <br /><br />\r\n\r\n      <p-panel #pnlStep2JavaInstallation>\r\n        <h4 id=\"checkPointInstallJava\">\r\n          <u\r\n            >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.STEP2' | translate\r\n            }} <em>Java</em></u\r\n          >\r\n        </h4>\r\n\r\n        <span\r\n          [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n        ></span>\r\n\r\n        <br /><br />\r\n\r\n        <button\r\n          id=\"btnInstallJava\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          [disabled]=\"!storeService.setup.chocolatey.isChocoOk\"\r\n          (click)=\"installJava()\"\r\n        >\r\n          <i class=\"fa fa-play\"></i\r\n          >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' |\r\n          translate }} <em>Java</em>\r\n        </button>\r\n        <span *ngIf=\"!storeService.setup.chocolatey.isChocoOk\"\r\n          >&nbsp;&nbsp;<strong\r\n            ><em\r\n              >( {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FIRST' |\r\n              translate }} )</em\r\n            ></strong\r\n          ></span\r\n        >\r\n      </p-panel>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"storeService.setup.isRestartRequired\">\r\n    <p-panel #pnlRestartDocumentBurster>\r\n      <h4 id=\"checkPointRestartDocumentBurster\">\r\n        <u\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTARTING' |\r\n          translate }}\r\n          <em>ReportBurster</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTARTING-REQUIRED' |\r\n          translate }}\r\n        </u>\r\n      </h4>\r\n\r\n      <br />\r\n\r\n      <button\r\n        id=\"btnRestartDocumentBurster\"\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"restartApp()\"\r\n      >\r\n        <i class=\"fa fa-play\"></i\r\n        >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTART' |\r\n        translate }} <em>ReportBurster</em>\r\n      </button>\r\n    </p-panel>\r\n  </div>\r\n\r\n  <!--  </ng-template>-->`"
      },
      {
        "name": "leftMenuTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/_left-menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!-- Sidebar Menu -->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">\r\n    {{ 'AREAS.CONFIGURATION.LEFT-MENU.TOP-TITLE' | translate }}\r\n    (<strong>{{ settingsService.currentConfigurationTemplateName }}</strong>)\r\n  </li>\r\n\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuGeneralSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'generalSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-pencil-square-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.GENERAL' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportgenerationmailmerge\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuReportingSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'reportingSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-file-text-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.REPORTING' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuEnableDisableDistribution\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'enableDisableDistributionMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-check-square-o\"></i>\r\n      <span>{{\r\n        'AREAS.CONFIGURATION.LEFT-MENU.ENABLE-DISABLE-DELIVERY' | translate\r\n        }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuEmailSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'emailSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-envelope-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.EMAIL' | translate }}</span>\r\n      <span class=\"pull-right-container\">\r\n        <i class=\"fa fa-angle-left pull-right\"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\">\r\n      <li routerLinkActive=\"active\">\r\n        <a href=\"#\" [routerLink]=\"[\r\n            '/configuration',\r\n            'cloudEmailProvidersMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{\r\n            'AREAS.CONFIGURATION.LEFT-MENU.CLOUD-EMAIL-PROVIDERS' | translate\r\n            }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuUploadSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'uploadSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-upload\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.UPLOAD' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuDocuments2WebSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'documentBursterWebSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-credit-card\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.DOCUMENTS2WEB' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuSMSSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'smsSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-commenting-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.SMS' | translate }}</span>\r\n      <span class=\"pull-right-container\">\r\n        <i class=\"fa fa-angle-left pull-right\"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\">\r\n      <li routerLinkActive=\"active\">\r\n        <a id=\"leftMenuTwilioSettings\" href=\"#\" [routerLink]=\"[\r\n            '/configuration',\r\n            'smsSettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.TWILIO' | translate }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuQualitySettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'qualitySettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-flag-checkered\"></i>\r\n      <span>{{\r\n        'AREAS.CONFIGURATION.LEFT-MENU.QUALITY-ASSURANCE' | translate\r\n        }}</span>\r\n      <span class=\"pull-right-container \">\r\n        <i class=\"fa fa-angle-left pull-right \"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\" routerLinkActive=\"active\">\r\n      <li>\r\n        <a id=\"leftMenuTestEmailServerSettings\" [routerLink]=\"[\r\n            '/configuration',\r\n            'qualitySettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.TEST-EMAIL-SERVER' | translate }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n\r\n  <li class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuAdvancedSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'advancedSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-list-ul\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.ADVANCED' | translate }}</span>\r\n      <span class=\"pull-right-container\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n        <i class=\"fa fa-angle-left pull-right \"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <li routerLinkActive=\"active\">\r\n        <a id=\"leftMenuErrorHandlingSettings\" href=\"#\" [routerLink]=\"[\r\n            '/configuration',\r\n            'errorHandlingSettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{\r\n            'AREAS.CONFIGURATION.LEFT-MENU.ERROR-HANDLING' | translate\r\n            }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n`"
      },
      {
        "name": "leftMenuTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration-templates/templates/_left-menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!-- Sidebar Menu -->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">\r\n    {{ 'AREAS.CONFIGURATION-TEMPLATES.LEFT-MENU.CONFIGURATION-TEMPLATES' | translate }}\r\n  </li>\r\n\r\n  <li class=\"active\"><a href=\"#\" [routerLink]=\"['/configuration-templates']\"><i class=\"fa fa-files-o\"></i> <span>\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.LEFT-MENU.CONFIGURATION-TEMPLATES' | translate }}\r\n      </span></a></li>\r\n</ul>`"
      },
      {
        "name": "leftMenuTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_ext-connections/templates/_left-menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!-- Sidebar Menu -->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">\r\n    {{ 'AREAS.EXTERNAL-CONNECTIONS.LEFT-MENU.EXTERNAL-CONNECTIONS' | translate }}\r\n  </li>\r\n\r\n  <li class=\"active\"><a href=\"#\" [routerLink]=\"['/ext-connections']\"><i class=\"fa fa-files-o\"></i> <span>\r\n        {{ 'AREAS.EXTERNAL-CONNECTIONS.LEFT-MENU.EXTERNAL-CONNECTIONS' | translate }}\r\n      </span></a></li>\r\n</ul>`"
      },
      {
        "name": "leftMenuTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/_left-menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!-- Sidebar Menu-->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">{{ 'AREAS.HELP.LEFT-MENU.TOP-TITLE' | translate }}</li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpSupport' href=\"#\" [routerLink]=\"['/help','supportMenuSelected']\">\r\n      <i class=\"fa fa-hand-o-right\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.SUPPORT' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpServices' href=\"#\" [routerLink]=\"['/help','servicesMenuSelected']\">\r\n      <i class=\"fa fa-paper-plane-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.SERVICES' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpDocumentation' href=\"#\" [routerLink]=\"['/help','docsMenuSelected']\">\r\n      <i class=\"fa fa-question-circle-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.DOCUMENTATION' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpExamples' href=\"#\" [routerLink]=\"['/help','useCasesMenuSelected']\">\r\n      <i class=\"fa fa-star-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.EXAMPLES' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpFreeForSchools' href=\"#\" [routerLink]=\"['/help','freeForSchoolsMenuSelected']\">\r\n      <i class=\"fa fa-graduation-cap\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.FREE' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpCustomerReviews' href=\"#\" [routerLink]=\"['/help','reviewsMenuSelected']\">\r\n      <i class=\"fa fa-address-card-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.REVIEWS' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpBlog' href=\"#\" [routerLink]=\"['/help','blogMenuSelected']\">\r\n      <i class=\"fa fa-rss\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.BLOG' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpInstallSetup' href=\"#\" [routerLink]=\"['/help','installSetupMenuSelected']\">\r\n      <i class=\"fa fa-cogs\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.INSTALL-SETUP' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpLicense' href=\"#\" [routerLink]=\"['/help','licenseMenuSelected']\">\r\n      <i class=\"fa fa-key\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.LICENSE' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpAbout' href=\"#\" [routerLink]=\"['/help','aboutMenuSelected']\">\r\n      <i class=\"fa fa-info\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.ABOUT' | translate }}</span>\r\n    </a>\r\n  </li>\r\n</ul>\r\n`"
      },
      {
        "name": "leftMenuTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/_left-menu.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!-- Sidebar Menu-->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">{{\r\n    'AREAS.PROCESSING.LEFT-MENU.ACTIONS' | translate }}</li>\r\n\r\n  <li routerLinkActive=\"active\">\r\n    <a href=\"#\" [routerLink]=\"['/processing','burstMenuSelected']\">\r\n      <i class=\"fa fa-play\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.BURST' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuMergeBurst\" href=\"#\" [routerLink]=\"['/processing','mergeBurstMenuSelected']\">\r\n      <i class=\"fa fa-plus-square-o\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.MERGE-BURST' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuQualityAssurance\" href=\"#\" [routerLink]=\"['/processingQa','qualityMenuSelected']\">\r\n      <i class=\"fa fa-flag-checkered\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.QUALITY-ASSURANCE' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a href=\"#\" [routerLink]=\"['/processing','logsMenuSelected']\">\r\n      <i class=\"fa fa-file-text-o\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.LOGGING-TRACING' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuSamples\" href=\"#\" [routerLink]=\"['/processing','samplesMenuSelected']\">\r\n      <i class=\"fa fa-bell-o\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.SAMPLES' | translate }}</span>\r\n    </a>\r\n  </li>\r\n</ul>\r\n`"
      },
      {
        "name": "modalAttachmentTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/modal-attachment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<p-dialog id=\"modalSelectAttachment\"\r\n  header=\"{{ 'AREAS.CONFIGURATION.MODAL-ATTACHMENT.SELECT-ATTACHMENT' | translate }}\"\r\n  [(visible)]=\"isModalAttachmentVisible\"\r\n  [modal]=\"true\"\r\n>\r\n  <div class=\"modal-body\" id=\"modal-body\" style=\"height: 250px\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-1\">\r\n        {{ 'AREAS.CONFIGURATION.MODAL-ATTACHMENT.PATH' | translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"attachmentPath\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"modalAttachmentInfo.attachmentFilePath\"\r\n          size=\"52\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables\r\n          id=\"btnAttachmentPathVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('attachmentPath',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-native-system-dialog\r\n          dialogType=\"file\"\r\n          (pathsSelected)=\"onSelectAttachmentFilePath($event)\"\r\n        >\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button\r\n      id=\"btnOKConfirmation\"\r\n      class=\"btn btn-primary dburst-button-question-confirm-attachment\"\r\n      type=\"button\"\r\n      (click)=\"onOKAttachmentModal()\"\r\n      [disabled]=\"!modalAttachmentInfo.attachmentFilePath\"\r\n    >\r\n      {{ 'BUTTONS.OK' | translate }}\r\n    </button>\r\n    <button\r\n      class=\"btn btn-flat btn-default\"\r\n      type=\"button\"\r\n      (click)=\"onCancelAttachmentModal()\"\r\n    >\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog>\r\n`"
      },
      {
        "name": "modalConfigurationTemplateTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration-templates/templates/modal-conf-template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<p-dialog\r\n  [header]=\"modalConfigurationTemplateInfo.modalTitle\"\r\n  [(visible)]=\"isModalConfigurationTemplateVisible\"\r\n  [modal]=\"true\"\r\n  width=\"800px\"\r\n  height=\"200px\"\r\n  class=\"modal-dialog-center\"\r\n>\r\n  <div style=\"margin: 35px;\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.NAME' | translate\r\n        }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"templateName\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.templateName\"\r\n          (ngModelChange)=\"updateModelAndForm()\"\r\n          placeholder=\"e.g. Payslips, Invoices, Statements, etc.\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAPABILITIES' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportDistribution\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.capReportDistribution\"\r\n        />\r\n        <label\r\n          for=\"btnCapReportDistribution\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-DISTRIBUTION'\r\n          | translate}}\r\n        </label>\r\n        &nbsp;&nbsp;\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportGenerationMailMerge\"\r\n          *ngIf =\"modalConfigurationTemplateInfo.fileInfo.type == 'config-reports'\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.capReportGenerationMailMerge\"\r\n        />\r\n        <label *ngIf =\"modalConfigurationTemplateInfo.fileInfo.type == 'config-reports'\" for=\"btnCapReportGenerationMailMerge\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-GENERATION'\r\n          | translate}}\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.NOTES' | translate\r\n        }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <p-editor\r\n          [style]=\"{'height':'200px', 'width':'500px'}\"\r\n          id=\"notes\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.notes\"\r\n        >\r\n          <ng-template pTemplate=\"header\">\r\n            <span class=\"ql-formats\">\r\n              <button type=\"button\" class=\"ql-bold\" aria-label=\"Bold\"></button>\r\n              <button\r\n                type=\"button\"\r\n                class=\"ql-italic\"\r\n                aria-label=\"Italic\"\r\n              ></button>\r\n              <button\r\n                type=\"button\"\r\n                class=\"ql-underline\"\r\n                aria-label=\"Underline\"\r\n              ></button>\r\n            </span>\r\n            <span class=\"ql-formats\">\r\n              <button\r\n                class=\"ql-list\"\r\n                value=\"ordered\"\r\n                aria-label=\"Ordered List\"\r\n                type=\"button\"\r\n              ></button>\r\n              <button\r\n                class=\"ql-list\"\r\n                value=\"bullet\"\r\n                aria-label=\"Unordered List\"\r\n                type=\"button\"\r\n              ></button>\r\n            </span>\r\n          </ng-template>\r\n        </p-editor>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.VISIBILITY' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <select\r\n          id=\"visibility\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.visibility\"\r\n        >\r\n          <option value=\"hidden\">\r\n            {{\r\n            'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.VISIBILITY-HIDDEN'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"visible\">\r\n            {{\r\n            'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.VISIBILITY-VISIBLE'\r\n            | translate }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div\r\n      class=\"row\"\r\n      *ngIf=\"!this.modalConfigurationTemplateInfo.fileInfo\r\n  .capReportGenerationMailMerge\"\r\n    >\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.HOW-TO-USE' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"templateHowTo\"\r\n          class=\"form-control\"\r\n          *ngIf=\"!modalConfigurationTemplateInfo.fileInfo.isFallback\"\r\n          [ngModel]=\"modalConfigurationTemplateInfo.templateHowTo\"\r\n          readonly\r\n        />\r\n        <em\r\n          id=\"templateHowToSnipped\"\r\n          style=\"font-size: 9px\"\r\n          *ngIf=\"!modalConfigurationTemplateInfo.fileInfo.isFallback\"\r\n        >\r\n          <strong\r\n            >{{\r\n            'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.ABOVE-SNIPPED' |\r\n            translate }}</strong\r\n          >\r\n        </em>\r\n        <span\r\n          id=\"fallbackTemplateSpan\"\r\n          style=\"font-size: 9px\"\r\n          *ngIf=\"modalConfigurationTemplateInfo.fileInfo.isFallback\"\r\n          [innerHTML]=\"'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.INNER-HTML.DEFAULT-CONFIGURATION' | translate\"\r\n        >\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <span>\r\n      <span\r\n        id=\"alreadyExistsWarning\"\r\n        style=\"font-size: 9px\"\r\n        class=\"label label-warning\"\r\n        *ngIf=\"modalConfigurationTemplateInfo.templateFilePathExists == 'file'\"\r\n        >{{\r\n        'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.FILE-ALREADY-EXISTS'\r\n        | translate }}</span\r\n      >&nbsp;\r\n    </span>\r\n    <button\r\n      id=\"btnOKConfirmation\"\r\n      class=\"btn btn-primary dburst-button-question-confirm\"\r\n      type=\"button\"\r\n      (click)=\"onModalOK()\"\r\n      [disabled]=\"\r\n        !modalConfigurationTemplateInfo.fileInfo.templateName ||\r\n        (modalConfigurationTemplateInfo.crudMode == 'create' &&\r\n        (modalConfigurationTemplateInfo.templateFilePathExists == 'file'))\r\n      \"\r\n    >\r\n      {{ 'BUTTONS.OK' | translate }}\r\n    </button>\r\n\r\n    <button\r\n      id=\"btnClose\"\r\n      class=\"btn btn-flat btn-default dburst-button-question-decline\"\r\n      type=\"button\"\r\n      (click)=\"onModalClose()\"\r\n    >\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog> `"
      },
      {
        "name": "modalExtConnectionsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_ext-connections/templates/modal-ext-connection.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<p-dialog\r\n  id=\"modalExtConnection\"\r\n  [header]=\"modalConnectionInfo.modalTitle\"\r\n  [(visible)]=\"isModalExtConnectionVisible\"\r\n  [modal]=\"true\"\r\n  width=\"700\"\r\n  [style]=\"{ top: '3vw', left: '4vw' }\"\r\n  [autoZIndex]=\"false\"\r\n>\r\n  <div style=\"margin: 5px;\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.CONNECTION-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          id=\"connectionName\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.name\"\r\n          (ngModelChange)=\"updateModelAndForm()\"\r\n          class=\"form-control\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromName\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.name\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromName',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromEmailAddress\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.fromaddress\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromEmailAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromEmailAddress',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.HOST' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"emailServerHost\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.host\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnEmailServerHostVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailServerHost',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.USER-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"userName\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.userid\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnUserNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('userName',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PASSWORD' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPassword\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.userpassword\"\r\n          type=\"password\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPasswordVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPassword',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PORT' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPort\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.port\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPortVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPort',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSSL\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.usessl\"\r\n        />\r\n        <label for=\"btnSSL\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SSL-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnTLS\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.usetls\"\r\n        />\r\n        <label for=\"btnTLS\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TLS-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TEST-CONNECTION' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-7\">\r\n        <button\r\n          id=\"btnSendTestEmail\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary btn-block\"\r\n          (click)=\"doTestSMTPConnection()\"\r\n        >\r\n          <i class=\"fa fa-paper-plane\"></i>&nbsp;&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SEND-TEST-EMAIL' |\r\n          translate }}\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row \">\r\n      <div class=\"col-xs-2 \">\r\n        <a href=\"https://products.office.com/en-us/exchange \" target=\"_blank \">\r\n          <i\r\n            class=\"ms-Icon ms-Icon--ExchangeLogo\"\r\n            style=\"font-size:30px;color:orange \"\r\n          ></i>\r\n          <br />Microsoft Exchange\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"col-xs-7 \">\r\n        <span\r\n          [innerHTML]=\"\r\n    'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.INNER-HTML.DB-ALL-CLOUD-PROVIDERS' | translate\"\r\n        ></span>\r\n        <br />\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://www.office.com\" target=\"_blank \">\r\n            <i\r\n              class=\"ms-Icon ms-Icon--OfficeLogo\"\r\n              style=\"font-size:24px;\r\n      color:red \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Office 365</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://gsuite.google.com \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-google \"\r\n              style=\"font-size:32px; color:gray\r\n      \"\r\n            ></i>\r\n            <p style=\"margin-top:3px \">Google Apps</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://aws.amazon.com/ses/ \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-amazon \"\r\n              style=\"font-size:32px; color:gold\r\n      \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Amazon AWS</p>\r\n          </a>\r\n        </div>\r\n        <dburst-button-well-known-email-providers\r\n          (sendSelectedProvider)=\"updateSMTPFormControlsWithSelectedProviderSettings($event)\"\r\n        >\r\n        </dburst-button-well-known-email-providers>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <span>\r\n      <span\r\n        id=\"alreadyExistsWarning\"\r\n        style=\"font-size: 9px\"\r\n        class=\"label label-warning\"\r\n        *ngIf=\"modalConnectionInfo.connectionFilePathExists == 'file'\"\r\n        >{{\r\n        'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.FILE-ALREADY-EXISTS'\r\n        | translate }}</span\r\n      >\r\n      &nbsp;\r\n    </span>\r\n\r\n    <button\r\n      id=\"btnOKConfirmationConnectionModal\"\r\n      class=\"btn btn-primary\"\r\n      type=\"button\"\r\n      (click)=\"onModalOK()\"\r\n      [disabled]=\"!modalConnectionInfo.email.documentburster.connection.name || modalConnectionInfo.connectionFilePathExists == 'file'\"\r\n    >\r\n      {{ 'BUTTONS.SAVE' | translate }}\r\n    </button>\r\n\r\n    <button\r\n      id=\"btnCloseConnectionModal\"\r\n      class=\"btn btn-flat btn-default dburst-button-question-decline\"\r\n      type=\"button\"\r\n      (click)=\"onModalClose()\"\r\n    >\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog> `"
      },
      {
        "name": "modalHtmlPreviewTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/button-html-preview/modal-html-preview.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<p-dialog header=\"{{\r\n  'COMPONENTS.BUTTON-HTML-PREVIEW.HTML-EMAIL-PREVIEW' | translate }}\" [(visible)]=\"isModalHtmlPreviewVisible\"\r\n  [baseZIndex]=\"1000\" [modal]=\"true\">\r\n\r\n  <div style=\"width:700px;height:575px; overflow-y: auto; overflow-x: auto; \">\r\n    <iframe id=\"previewIframe\" srcdoc=\"{{ htmlCode }}\" frameborder=\"0\"></iframe>\r\n  </div>\r\n\r\n  <p-footer>\r\n\r\n    <button id=\"btnClose\" class=\"btn btn-primary\" type=\"button\" (click)=\"isModalHtmlPreviewVisible = false\">{{\r\n      'BUTTONS.CLOSE' | translate }}</button>\r\n\r\n  </p-footer>\r\n\r\n</p-dialog>\r\n`"
      },
      {
        "name": "modalSamplesLearnMoreTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/modal-samples-learn-more.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<p-dialog [header]=\"modalSampleInfo.title\" [(visible)]=\"isModalSamplesLearnMoreVisible\" [modal]=\"true\" width=\"800\"\r\n  height=\"200\" class=\"modal-dialog-center\">\r\n  <div style=\"margin: 25px;\">\r\n  \r\n  <div class=\"row\">\r\n    \r\n  <div class=\"col-xs-2\">\r\n    <strong>{{\r\n      'AREAS.TOP-MENU-HEADER.DOCUMENTATION' | translate\r\n    }}</strong> \r\n  </div>\r\n\r\n  <div class=\"col-xs-10\">\r\n      <a href=\"{{modalSampleInfo.documentation}}\" target=\"_blank\">{{modalSampleInfo.documentation}}</a>    \r\n  </div>\r\n \r\n </div>\r\n  <br/>  \r\n  <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n      {{\r\n        'SAMPLES.MODAL.FEATURES' | translate\r\n      }}\r\n      </div>\r\n      \r\n      <div class=\"col-xs-10\">\r\n        \r\n      <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportSplitting\"\r\n          [ngModel]=\"true\" onclick=\"return false;\"\r\n          />\r\n        <label \r\n          for=\"btnCapReportSplitting\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-SPLITTING' | translate}}\r\n        </label>\r\n        &nbsp;&nbsp;\r\n\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportDistribution\"\r\n          [ngModel]=\"modalSampleInfo.capReportDistribution\" onclick=\"return false;\"\r\n          />\r\n        <label \r\n          for=\"btnCapReportDistribution\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-DISTRIBUTION' | translate}}\r\n        </label>\r\n        &nbsp;&nbsp;\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportGenerationMailMerge\"\r\n          [ngModel]=\"modalSampleInfo.capReportGenerationMailMerge\" onclick=\"return false;\"\r\n          />\r\n        <label \r\n          for=\"btnCapReportGenerationMailMerge\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-GENERATION' | translate}}\r\n        </label>\r\n              \r\n      </div>\r\n    \r\n    </div>\r\n    <p></p>\r\n    \r\n    <div class=\"row\">\r\n    <div class=\"col-xs-2\">\r\n    {{\r\n      'SAMPLES.MODAL.INPUT' | translate\r\n    }}\r\n    </div>\r\n\r\n    <div class=\"col-xs-10\">\r\n\r\n        <span [innerHTML]=\"modalSampleInfo.inputDetails\"></span>\r\n            \r\n    </div>\r\n  </div>\r\n  \r\n  <br/>\r\n  <br/>\r\n\r\n  <div class=\"row\">\r\n  <div class=\"col-xs-2\">\r\n  {{\r\n    'SAMPLES.MODAL.EXPECTED-OUTPUT' | translate\r\n  }}\r\n  </div>\r\n\r\n  <div class=\"col-xs-10\" [innerHTML]=\"modalSampleInfo.outputDetails\">\r\n  </div>\r\n</div>\r\n\r\n<br/>\r\n<br/>\r\n\r\n  <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'SAMPLES.MODAL.NOTES' | translate\r\n      }}\r\n      </div>\r\n      \r\n      <div id=\"div{{modalSampleInfo.id}}\" class=\"col-xs-10\" [innerHTML] = \"modalSampleInfo.notes\">\r\n\r\n          \r\n      </div>    \r\n  </div>\r\n    \r\n  <p></p>\r\n  \r\n  <div class=\"row\" *ngIf=\"!modalSampleInfo.capReportGenerationMailMerge\">\r\n    \r\n    <div class=\"col-xs-2\">\r\n    {{\r\n      'SAMPLES.MODAL.CONFIGURATION' | translate\r\n    }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input type=\"text\" id=\"templateHowTo\" class=\"form-control\"\r\n          [ngModel]=\"modalSampleInfo.configurationFilePath\" readonly />\r\n        \r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n    \r\n    <div class=\"col-xs-2\">\r\n      \r\n    </div>\r\n  \r\n    <div class=\"col-xs-10\">\r\n      <button type=\"button\" id=\"btnViewConfigurationFile{{modalSampleInfo.id}}\" class=\"btn btn-xs btn-default\" (click)=\"doSampleViewConfigurationFile(modalSampleInfo.configurationFilePath, modalSampleInfo.configurationFileName)\">&nbsp;&nbsp;&nbsp;&nbsp;View Configuration File&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>\r\n    </div>\r\n   \r\n   </div>\r\n   \r\n    </div> \r\n\r\n    \r\n    <p></p>\r\n    \r\n  <p-footer>\r\n    <button id=\"btnCloseSamplesLearnMoreModal\" class=\"btn btn-flat btn-default\" type=\"button\" (click)=\"doCloseSamplesLearnMoreModal()\">\r\n      {{ 'BUTTONS.CLOSE' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog>\r\n`"
      },
      {
        "name": "modalVariablesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/button-variables/modal-variables.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<p-dialog id=\"modalSelectVariable\" header=\"{{\r\n  'COMPONENTS.BUTTON-VARIABLES.SELECT-VARIABLE' | translate }}\" [(visible)]=\"isModalVariablesVisible\" class=\"modal-dialog-center\"\r\n  [baseZIndex]=\"1000\" [modal]=\"true\">\r\n\r\n  <div style=\"max-height: 549px; overflow: auto; cursor: pointer\">\r\n\r\n    <table class=\"table table-condensed table-hover table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>{{\r\n              'COMPONENTS.BUTTON-VARIABLES.NAME' | translate }}</th>\r\n          <th>{{\r\n              'COMPONENTS.BUTTON-VARIABLES.TYPE' | translate }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let variable of variables\" (dblclick)=\"onModalOK()\" (click)=\"onVariableClick(variable)\"\r\n          [ngClass]=\"{ 'info': variable.active }\">\r\n          <td id='{{variable.name}}'>{{variable.name}}</td>\r\n          <td>{{variable.type}}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div class=\"checkbox\">\r\n    <label id='btnShowMoreVariables'>\r\n      &nbsp;&nbsp;\r\n      <input type=\"checkbox\" [(ngModel)]=\"showMoreCheckBoxValue\" (ngModelChange)='onShowMore()'>Show\r\n      More\r\n    </label>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <button id=\"btnOKConfirmation\" class=\"btn btn-primary dburst-button-question-confirm\" type=\"button\" (click)=\"onModalOK()\"\r\n      [disabled]=\"!getSelectedVariable()\">{{\r\n      'BUTTONS.OK' | translate }}</button>\r\n\r\n    <button id=\"btnClose\" class=\"btn\" type=\"button\" (click)=\"onModalClose()\">{{\r\n      'BUTTONS.CANCEL' | translate }}</button>\r\n\r\n  </p-footer>\r\n\r\n</p-dialog>\r\n`"
      },
      {
        "name": "modalWellKnownTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/components/button-well-known/modal-well-known.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<p-dialog id=\"modalWellKnownEmailProviders\" header=\"{{\r\n  'COMPONENTS.BUTTON-WELL-KNOWN.WELL-KNOWN-PROVIDERS' | translate }}\" [(visible)]=\"isModalWellKnownVisible\"\r\n  [baseZIndex]=\"1000\" [modal]=\"true\">\r\n\r\n  <div style=\"max-height: 450px; width: 375px; overflow: auto; cursor: pointer\">\r\n    <table class=\"table table-condensed table-hover table-bordered\">\r\n      <tbody>\r\n        <tr *ngFor=\"let provider of providers\" (dblclick)=\"onModalOK()\" (click)=\"onProviderClick(provider)\"\r\n          [ngClass]=\"{ 'info': provider.active }\">\r\n          <td id='{{provider.name}}'>{{provider.name}}\r\n            <span *ngIf=\"provider.active\">\r\n              <br>{{provider.settings | json}}</span>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div class=\"checkbox\">\r\n    <label id='btnShowMoreProviders'>\r\n      &nbsp;&nbsp;\r\n      <input type=\"checkbox\" [(ngModel)]=\"showMoreCheckBoxValue\" (ngModelChange)='onShowMore()'>Show\r\n      More\r\n    </label>\r\n  </div>\r\n\r\n\r\n  <p-footer>\r\n\r\n    <button id=\"btnOKConfirmation\" class=\"btn btn-primary\" type=\"button\" (click)=\"onModalOK()\"\r\n      [disabled]=\"!getSelectedProvider()\">{{\r\n      'COMPONENTS.BUTTON-WELL-KNOWN.LOAD-SMTP-SETTINGS' | translate }}</button>\r\n\r\n    <button id=\"btnClose\" class=\"btn btn-flat btn-default\" type=\"button\" (click)=\"onModalClose()\">{{\r\n      'BUTTONS.CANCEL' | translate }}</button>\r\n\r\n  </p-footer>\r\n\r\n</p-dialog>\r\n`"
      },
      {
        "name": "newEmailServer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/providers/settings.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  host: 'Email Server Host',\r\n  port: '25',\r\n  userid: 'From Email User ID',\r\n  userpassword: 'From Email Password',\r\n  usessl: false,\r\n  usetls: false,\r\n  fromaddress: 'from@emailaddress.com',\r\n  name: 'From Name',\r\n}"
      },
      {
        "name": "resumeJobsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/resume-jobs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #resumeJobs>\r\n  <div\r\n    class=\"row\"\r\n    *ngFor=\"let jobDetails of executionStatsService.jobStats.jobsToResume\"\r\n  >\r\n    <div clas=\"col-xs-12\">\r\n      <strong style=\"text-decoration: underline\"\r\n        >{{ 'AREAS.PROCESSING.RESUME-JOBS.RESUME' | translate }}\r\n        <span\r\n          *ngIf=\"jobDetails.testAll === 'true' || jobDetails.numberOfRandomTestTokens > -1 || jobDetails.listOfTestTokens\"\r\n          >{{ 'AREAS.PROCESSING.LEFT-MENU.QUALITY-ASSURANCE' | translate\r\n          }}</span\r\n        >\r\n        {{ 'AREAS.PROCESSING.RESUME-JOBS.JOB' | translate }}</strong\r\n      >\r\n      <span *ngIf=\"jobDetails.testAll === 'true'\">\r\n        <em> - {{ 'AREAS.PROCESSING.RESUME-JOBS.TEST-ALL' | translate }}</em>\r\n      </span>\r\n\r\n      <span *ngIf=\"jobDetails.numberOfRandomTestTokens > -1\">\r\n        <em>\r\n          - {{ 'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST' | translate }}\r\n          {{jobDetails.numberOfRandomTestTokens}} {{\r\n          'AREAS.PROCESSING.RESUME-JOBS.TEST-RANDOM' | translate }}</em\r\n        >\r\n      </span>\r\n\r\n      <span *ngIf=\"jobDetails.listOfTestTokens\">\r\n        <em>\r\n          - {{ 'AREAS.PROCESSING.RESUME-JOBS.TEST-LIST' | translate }}\r\n          {{jobDetails.listOfTestTokens}}\r\n        </em>\r\n      </span>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <span>{{jobDetails.filePath}}</span> ({{jobDetails.jobDate}})\r\n\r\n      <br />\r\n      <br />\r\n      <span style=\"text-decoration: underline\"\r\n        >{{ jobDetails.numberOfRemainingTokens }} {{\r\n        'AREAS.PROCESSING.RESUME-JOBS.DOCS-REMAINING' | translate }}</span\r\n      >\r\n      ({{jobDetails.tokensCount - jobDetails.numberOfRemainingTokens}} {{\r\n      'AREAS.PROCESSING.RESUME-JOBS.OUT-OF' | translate }}\r\n      {{jobDetails.tokensCount}} {{ 'AREAS.PROCESSING.RESUME-JOBS.DOCS-DONE' |\r\n      translate }})\r\n      <br />\r\n      <br />\r\n\r\n      <button\r\n        id=\"btnResume\"\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"doResumeJob(jobDetails.jobFilePath)\"\r\n      >\r\n        <i class=\"fa fa-play\"></i>&nbsp;Resume\r\n        <span\r\n          *ngIf=\"jobDetails.testAll ==='true' || jobDetails.numberOfRandomTestTokens > -1 || jobDetails.listOfTestTokens\"\r\n          >{{ 'AREAS.PROCESSING.LEFT-MENU.QUALITY-ASSURANCE' | translate\r\n          }}</span\r\n        >\r\n        {{ 'AREAS.PROCESSING.RESUME-JOBS.JOB' | translate }}</button\r\n      >&nbsp;&nbsp;\r\n      <button\r\n        id=\"btnClear\"\r\n        type=\"button\"\r\n        class=\"btn\"\r\n        (click)=\"clearResumeJob(jobDetails.jobFilePath)\"\r\n      >\r\n        <i class=\"fa fa-file-o\"></i>&nbsp;{{\r\n        'AREAS.PROCESSING.RESUME-JOBS.CLEAR-JOB' | translate }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <br />\r\n</ng-template>\r\n`"
      },
      {
        "name": "systemDiagnosticsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/install-setup-upgrade/system-diagnostics/system-diagnostics.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<!--<ng-template #systemDiagnosticsTemplate> -->\r\n<strong id='checkPointHelpJavaPreRequisite'\r\n  >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.DIAGNOSTICS.STATUS' | translate\r\n  }}</strong\r\n>\r\n<br /><br />\r\n\r\n<div class=\"row\" *ngIf=\"!storeService.setup.java.isJavaOk\">\r\n  <div class=\"col-xs-2\">\r\n    <span class=\"label label-warning\"\r\n      ><strong\r\n        ><em>Java</em> {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND'\r\n        | translate }}</strong\r\n      ></span\r\n    >\r\n  </div>\r\n\r\n  <div class=\"col-xs-10\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"restartApp()\">\r\n      <i class=\"fa fa-play\"></i\r\n      >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTART' | translate\r\n      }} <em>ReportBurster</em>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<span class=\"label label-success\" *ngIf=\"storeService.setup.java.isJavaOk\"\r\n  ><i class=\"fa fa-check-square-o\"></i>&nbsp;<strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.GREAT' | translate }},\r\n    <em>Java</em>\r\n    {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FOUND' | translate }}\r\n    <em>ReportBurster</em></strong\r\n  ></span\r\n>\r\n\r\n<br /><br />\r\n<strong>Environment Variables</strong>\r\n<br /><br />\r\n<ol>\r\n<li><strong>%JAVA_HOME%</strong><p><code>{{storeService.setup.env.JAVA_HOME | async}}</code></p></li>\r\n<li><strong>%JRE_HOME%</strong><p><code>{{storeService.setup.env.JRE_HOME | async}}</code></p></li>\r\n<li><strong>%PATH%</strong><p><code>{{storeService.setup.env.PATH | async}}</code></p></li>\r\n</ol>\r\n\r\n<!--</ng-template> -->\r\n`"
      },
      {
        "name": "SystemInfo",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/models/system-info.model.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  operatingSystem: 'Windows',\r\n  isServerVersion: false,\r\n  product: 'DocumentBurster',\r\n  version: '9.1',\r\n}"
      },
      {
        "name": "tabAboutTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-about.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabAboutTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong>{{\r\n      'AREAS.HELP.TAB-ABOUT.VERSION' | translate }}</strong>\r\n    <br>\r\n    <br>\r\n    <span class=\"label label-default\">\r\n      <em>{{settingsService.product}}</em>&nbsp;{{settingsService.version}}\r\n    </span>\r\n\r\n    <hr>\r\n    <div [innerHTML]=\"'AREAS.HELP.TAB-ABOUT.INNER-HTML.LICENSE-2-OPTIONS' | translate\"></div>\r\n\r\n    <br>\r\n    <br>\r\n    <ol>\r\n      <li>{{\r\n        'AREAS.HELP.TAB-ABOUT.PURCHASE-COMMERCIAL-LICENSE' | translate }}&nbsp;\r\n        <a href=\"https://www.pdfburst.com/store\" target=\"_blank\">\r\n          <button class=\"btn btn-primary btn-xs\" type=\"button\">{{\r\n            'AREAS.HELP.TAB-ABOUT.BUY-NOW' | translate }}</button>\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"https://www.pdfburst.com/services/free-for-schools/\" target=\"_blank\">\r\n          <button class=\"btn btn-xs\" type=\"button\"><span\r\n              [innerHTML]=\"'AREAS.HELP.TAB-ABOUT.INNER-HTML.GET-FREE-SCHOOLS' | translate\"></span></button>\r\n        </a> (registered schools only)\r\n      </li>\r\n    </ol>\r\n\r\n    <hr>\r\n\r\n    <strong id='checkPointHelpAbout'>{{\r\n      'AREAS.HELP.TAB-ABOUT.COPYRIGHT' | translate }}</strong>\r\n    <br>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/contact.html\" target=\"_blank\">&#9400; {{\r\n      'AREAS.HELP.TAB-ABOUT.COPYRIGHT-YEARS' | translate }}</a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabAdvancedErrorHandlingTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-advanced-error-handling.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabAdvancedErrorHandlingTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong style=\"text-decoration: underline;\"> {{\r\n      'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.IF-ANY-RECIPIENT-FAILS' | translate }}</strong>\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-12\">\r\n\r\n        <div class=\"radio\">\r\n          <label>\r\n            <input type=\"radio\" id=\"stopImmediatelyOnError\" name=\"failJob\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.failjobifanydistributionfails\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' [value]=\"true\" />{{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.STOP-ALL-DOCUMENT' | translate }}</label>\r\n        </div>\r\n\r\n        <div class=\"radio\">\r\n          <label>\r\n            <input type=\"radio\" id=\"continueOnError\" name=\"failJob\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.failjobifanydistributionfails\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' [value]=\"false\" />{{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.CONTINUE-DOCUMENT-DELIVERY' | translate }}</label>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <input type=\"checkbox\" id=\"btnEnableRetryPolicy\"\r\n      [(ngModel)]=\"xmlSettings?.documentburster.settings.enableretrypolicy\"\r\n      (ngModelChange)='settingsChangedEventHandler($event)' />\r\n    <label for=\"btnEnableRetryPolicy\" class=\"checkboxlabel\">\r\n\r\n      <strong style=\"text-decoration: underline;\"> {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.ENABLE-RETRY-POLICY' | translate }}</strong> ({{\r\n      'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.WHEN-RECIPIENT-FAILS' | translate }})\r\n    </label>\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\">\r\n        {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DELAY' | translate }}\r\n        <span id='disabled1' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">{{'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE'\r\n          | translate }}</span>\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"retryPolicyDelay\" [(ngModel)]=\"xmlSettings?.documentburster.settings.retrypolicy.delay\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.enableretrypolicy\" />\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SECONDS' | translate }}</em>\r\n        <span id='disabled2' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\"> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}\r\n        </span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.MAX-DELAY' | translate }}\r\n        <span id='disabled3' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"retryPolicyMaxDelay\" [(ngModel)]=\"xmlSettings?.documentburster.settings.retrypolicy.maxdelay\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.enableretrypolicy\" />\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SECONDS' | translate }}</em>\r\n        <span id='disabled4' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\"> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.MAX-NUMBER-RETRIES' | translate }}\r\n        <span id='disabled5' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"retryPolicyMaxRetries\" [(ngModel)]=\"xmlSettings?.documentburster.settings.retrypolicy.maxretries\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.enableretrypolicy\" />\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">\r\n\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n        <span id='disabled6'>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <em [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.INNER-HTML.SETS-DELAY' | translate\">\r\n    </em>.\r\n    <br>\r\n    <br>\r\n    <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.INNER-HTML.RETRY-POLICY' | translate\"></span>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabAdvancedTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-advanced.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabAdvancedTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <div class=\"col-xs-4\">\r\n        <br>\r\n        {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.DELAY-EACH-BY' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"delayEachDistributionBy\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.delayeachdistributionby\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n        <em> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SECONDS' | translate }}</em>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\"> {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.NUMBER-USER-VARIABLES' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"numberOfUserVariables\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.numberofuservariables\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.START-DELIMITER-TOKEN' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersStart\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.start\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.END-DELIMITER-TOKEN' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersEnd\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.end\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnReuseToken\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.reusetokenswhennotfound\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" />\r\n        <label for=\"btnReuseToken\" class=\"checkboxlabel\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.REUSE-LAST-TOKEN' | translate }}</label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnHTMLEmailEditCode\" [(ngModel)]=\"xmlSettings?.documentburster?.settings.htmlemaileditcode\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" />\r\n        <label for=\"btnHTMLEmailEditCode\" class=\"checkboxlabel\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.EDIT-EMAIL-MESSAGE' | translate }}</label>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnSplit2ndTime\"\r\n        [(ngModel)]=\"xmlSettings?.documentburster?.settings.split2ndtime\"\r\n        (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      <label for=\"btnSplit2ndTime\" class=\"checkboxlabel\">\r\n        <strong> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SPLIT-2ND-TIME' | translate }}</strong>\r\n      </label>\r\n        </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.START-DELIMITER-TOKEN-2ND-SPLIT' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersStart2nd\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.start2nd\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" \r\n          [disabled]=\"!xmlSettings?.documentburster?.settings?.split2ndtime\"/>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.END-DELIMITER-TOKEN-2ND-SPLIT' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersEnd2nd\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.end2nd\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" \r\n          [disabled]=\"!xmlSettings?.documentburster?.settings?.split2ndtime\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnEnableIncubatingFeatures\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.enableincubatingfeatures\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event); refreshTabs()\" />\r\n        <label for=\"btnEnableIncubatingFeatures\" class=\"checkboxlabel\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.ENABLE-INCUBATING-FEATURES' | translate }}</label>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabAttachmentsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-attachments.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabAttachmentsTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"panel panel-default\">\r\n\r\n      <div class=\"panel-body\">\r\n\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-10\" style=\"cursor: pointer; height:200px; overflow:auto;\">\r\n\r\n            <table id=\"attachmentsTable\" class=\"table table-responsive table-hover table-bordered\" cellspacing=\"0\">\r\n\r\n              <thead>\r\n                <tr>\r\n                  <th>{{\r\n                    'AREAS.CONFIGURATION.TAB-ATTACHMENT.ATTACHMENTS' | translate }}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let attachment of getSortedAttachments()\" [ngClass]=\"{ 'info': attachment.selected }\"\r\n                  (click)=\"onAttachmentSelected(attachment)\">\r\n                  <td style=\"width: 700px\">{{attachment.path}}</td>\r\n                </tr>\r\n                <tr *ngIf=\"xmlSettings?.documentburster.settings.attachments.items.attachmentItems.length ===0\">\r\n                  <td style=\"width: 700px\">\r\n                    <em id=\"noAttachments\">{{\r\n                      'AREAS.CONFIGURATION.TAB-ATTACHMENT.NO-ATTACHMENTS' | translate }}</em>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n\r\n            </table>\r\n\r\n          </div>\r\n\r\n          <div class=\"col-xs-2\">\r\n\r\n            <button id='btnNewAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onNewEditAttachment('new')\">\r\n              <span class=\"glyphicon\r\n                  glyphicon-plus\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.ADD' | translate }}</button>\r\n\r\n            <button id='btnDeleteAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onDeleteSelectedAttachment()\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-minus\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.DELETE' | translate }}</button>\r\n\r\n            <button id='btnEditAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onNewEditAttachment('edit')\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-edit\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.EDIT' | translate }}</button>\r\n\r\n            <button id='btnUpAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedAttachmentUp()\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-arrow-up\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.UP' | translate }}</button>\r\n\r\n            <button id='btnDownAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedAttachmentDown()\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-arrow-down\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.DOWN' | translate }}</button>\r\n\r\n            <button id='btnClearAttachments' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onClearAttachments()\">\r\n              <i class=\"fa fa-eraser\"></i>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.CLEAR' | translate }}</button>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <div class=\"panel panel-default\">\r\n\r\n      <div class=\"panel-heading\">\r\n        <i class=\"fa fa-file-archive-o fa-2x\"></i>&nbsp;&nbsp;{{\r\n        'AREAS.CONFIGURATION.TAB-ATTACHMENT.ARCHIVE-ATTACHMENTS' | translate }}</div>\r\n\r\n      <div class=\"panel-body\">\r\n\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-2\">\r\n\r\n          </div>\r\n\r\n          <div class=\"col-xs-7\">\r\n            <input type=\"checkbox\" id=\"btnArchiveAttachmentsTogether\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.attachments.archive.archiveattachments\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' />\r\n            <label for=\"btnArchiveAttachmentsTogether\" class=\"checkboxlabel\">&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.ARCHIVE-ALL-ATTACHMENTS' | translate }}</label>\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-2\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-ATTACHMENT.FILE-NAME' | translate }}\r\n          </div>\r\n\r\n          <div class=\"col-xs-7\">\r\n            <input id=\"archiveFileName\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.attachments.archive.archivefilename\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n            <dburst-button-variables id=\"btnArchiveFileNameVariables\"\r\n              (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('archiveFileName',$event)\">\r\n            </dburst-button-variables>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabBlogTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-blog.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabBlogTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <div id=\"blogRss\"></div>\r\n\r\n  </div>\r\n</ng-template>`"
      },
      {
        "name": "tabBurstTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-burst.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabBurstTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        PDF / Excel {{ 'AREAS.PROCESSING.TAB-BURST.FILE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"burstFile\"\r\n          [(ngModel)]=\"processingService.procBurstInfo.isSample ? processingService.procBurstInfo.prefilledInputFilePath : processingService.procBurstInfo.inputFileName\"\r\n          class=\"form-control\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <label for=\"burstFileUploadInput\" class=\"btn btn-default btn-block\"><i class=\"fa fa-folder-open-o' }}\"></i>&nbsp;Select File</label>\r\n        <input style=\"display: none;\" type=\"file\" id=\"burstFileUploadInput\" (change)=\"onBurstFileSelected($event)\" accept=\".pdf\" #burstFileUploadInput/>\r\n      <!--  \r\n      <dburst-button-native-system-dialog\r\n          value=\"{{\r\n          'COMPONENTS.BUTTON-NATIVE-SYSTEM-DIALOG.SELECT-FILE' | translate }}\"\r\n          dialogType=\"file\"\r\n          (pathsSelected)=\"onBurstFileSelected($event)\"\r\n        ></dburst-button-native-system-dialog>\r\n        -->\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-1\" style=\"margin-right: 20px\">\r\n        <button\r\n          id=\"btnBurst\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          (click)=\"doBurst()\"\r\n          [disabled]=\"(!processingService.procBurstInfo.prefilledInputFilePath && !processingService.procBurstInfo.inputFileName) || executionStatsService.jobStats.numberOfActiveJobs > 0\"  >\r\n          <i class=\"fa fa-play\"></i>&nbsp;Burst\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\" style=\"margin-left: -20px\">\r\n        <dburst-button-native-system-dialog style=\"display: none;\"\r\n          value=\"{{\r\n          'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n          dialogType=\"file\"\r\n        >\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"!shellService.isJavaOk\">\r\n      <br /><br />\r\n      <span class=\"label label-warning\"\r\n        ><strong\r\n          ><em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}\r\n        </strong></span\r\n      >\r\n      <br /><br />\r\n\r\n      <strong\r\n        id=\"checkPointJavaPreRequisite\"\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-SHORT' | translate\"\r\n      ></strong>\r\n\r\n      <br /><br /><span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n      ></span>\r\n\r\n      <br /><br />\r\n\r\n      <a href=\"#\" [routerLink]=\"['/help', 'installSetupMenuSelected']\"\r\n        ><button type=\"button\" class=\"btn btn-primary\">\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' | translate }}\r\n          <em>Java</em>\r\n        </button></a\r\n      >\r\n    </div>\r\n\r\n    <div\r\n      class=\"row\"\r\n      *ngIf=\"(processingService.procBurstInfo.prefilledInputFilePath || processingService.procBurstInfo.inputFile) && !executionStatsService.logStats.foundDirtyLogFiles && executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length === 0\"\r\n    >\r\n      <div class=\"col-xs-1\">\r\n        <i class=\"fa fa-flag-checkered fa-2x\"></i>\r\n      </div>\r\n\r\n      <div class=\"col-xs-11\">\r\n        <a id=\"qaReminderLink\" href=\"#qaReminder\" data-toggle=\"collapse\"\r\n          >{{ 'AREAS.PROCESSING.TAB-BURST.DID-YOU-RUN-QA' | translate }}\r\n          <em>{{processingService.procBurstInfo.isSample ? processingService.procBurstInfo.prefilledInputFilePath : processingService.procBurstInfo.inputFileName}}</em>?</a\r\n        >\r\n        <div id=\"qaReminder\" class=\"collapse\">\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.BEFORE-EMAILING' | translate }}\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected', processingService.procBurstInfo.prefilledInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath]\"\r\n            >Quality Assurance</a\r\n          >\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.FOR-THE-FILE' | translate }}\r\n          <em>{{processingService.procBurstInfo.isSample ? processingService.procBurstInfo.prefilledInputFilePath : processingService.procBurstInfo.inputFileName}}</em>&nbsp;&nbsp;\r\n          <button\r\n            id=\"goToQa\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-sm\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected', processingService.procBurstInfo.prefilledInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath]\"\r\n          >\r\n            {{ 'AREAS.PROCESSING.TAB-BURST.RUN-QA' | translate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      *ngIf=\"executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length > 0\"\r\n      class=\"row\"\r\n    >\r\n      <div class=\"col-xs-12\">\r\n        <ng-container [ngTemplateOutlet]=\"resumeJobs\"> </ng-container>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <dburst-log-files-viewer-separate-tabs></dburst-log-files-viewer-separate-tabs>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabComparisonTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-comparison.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabComparisonTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong>\r\n      <a href=\"https://www.reportburster.com/features.html\" target=\"_blank\">\r\n        <em>ReportBurster</em> {{\r\n        'AREAS.HELP.TAB-COMPARISON.FEATURES' | translate }}</a>\r\n    </strong>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <ol [innerHTML]=\"'AREAS.HELP.TAB-COMPARISON.INNER-HTML.DB-FEATURES' | translate\">\r\n\r\n    </ol>\r\n\r\n    <br>\r\n\r\n    <strong>\r\n      <a id='checkPointHelpComparison' href=\"https://www.reportburster.com/features.html\" target=\"_blank\">\r\n        <em>DocumentBurster Server</em> {{\r\n        'AREAS.HELP.TAB-COMPARISON.FEATURES' | translate }}</a>\r\n    </strong>\r\n\r\n    <br>\r\n    <br>\r\n    <div innerHTML=\"'AREAS.HELP.TAB-COMPARISON.INNER-HTML.DB-SERVER-FEATURES1' | translate\"></div>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <ol [innerHTML]=\"'AREAS.HELP.TAB-COMPARISON.INNER-HTML.DB-SERVER-FEATURES2' | translate\">\r\n\r\n    </ol>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/features.html\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">{{\r\n        'AREAS.HELP.TAB-COMPARISON.VIEW-ALL-FEATURES' | translate }}</button>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabConfigurationTemplatesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration-templates/templates/tab-conf-templates.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabConfTemplates>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-xs-10\"\r\n        style=\"cursor: pointer; height: 500px; overflow: auto\"\r\n      >\r\n        <table id=\"confTemplatesTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.CAPABILITIES' |\r\n                translate }}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.HOW-TO-USE'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                Actions&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr\r\n              id=\"{{configurationFile.folderName}}_{{configurationFile.fileName}}\"\r\n              *ngFor=\"let configurationFile of this.settingsService.getConfigurations()\"\r\n              (click)=\"onConfTemplateClick(configurationFile)\"\r\n              [ngClass]=\"{ 'info': configurationFile.activeClicked}\"\r\n            >\r\n              <td>\r\n                {{configurationFile.templateName}}\r\n                <span *ngIf=\"configurationFile.isFallback\">\r\n                  <strong> (fallback)</strong>\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span class=\"label label-default\" *ngIf=\"!configurationFile.capReportGenerationMailMerge\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>Splitting</em>                \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportGenerationMailMerge\">\r\n                   <i class=\"fa fa-file-text-o\">&nbsp;</i> \r\n                   <em>Generation / Mail Merge</em>\r\n                </span>&nbsp;\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportDistribution\">\r\n                  <i class=\"fa fa-envelope-o\">&nbsp;</i>\r\n                 <em>Distribution</em> \r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span *ngIf=\"!configurationFile.isFallback && !configurationFile.capReportGenerationMailMerge\"\r\n                  >&lt;config&gt;{{configurationFile.relativeFilePath}}&lt;/config&gt;</span\r\n                >\r\n                <span\r\n                  *ngIf=\"configurationFile.isFallback\"\r\n                  [innerHTML]=\"'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.INNER-HTML.DEFAULT-CONFIGURATION' | translate\"\r\n                >\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <div id=\"btnActions_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" class=\"btn-group dropup\"> \r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'visible'\" class=\"btn btn-xs btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Visible&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'hidden'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Hidden&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                <ul class=\"dropdown-menu dropdown-menu-right\" style=\"z-index:1;position: relative;\">\r\n                  <li id=\"btnActionRestore_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" (click)=\"restoreDefaultConfigurationValues()\">Restore Default Configuration Values</li>\r\n                  <li role=\"separator\" class=\"divider\"></li>\r\n                  <li id=\"btnActionHideShow_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" *ngIf=\"configurationFile.visibility == 'visible'\" (click)=\"toggleVisibility()\">Hide <em>{{configurationFile.templateName}}</em></li>\r\n                  <li id=\"btnActionHideShow_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" *ngIf=\"configurationFile.visibility == 'hidden'\" (click)=\"toggleVisibility()\">Show <em>{{configurationFile.templateName}}</em></li>\r\n                 </ul>\r\n                  </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <button\r\n          id=\"btnNew\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create')\"\r\n          style=\"margin-bottom: 5px\"\r\n        >\r\n          <i class=\"fa fa-plus\"></i> {{ 'BUTTONS.NEW' | translate }}\r\n        </button>\r\n        <p></p>\r\n        <button\r\n          id=\"btnEdit\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('update')\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConfiguration()}\"\r\n          style=\"margin-bottom: 5px\"\r\n        >\r\n          <i class=\"fa fa-pencil-square-o\"></i> {{ 'BUTTONS.EDIT' | translate }}\r\n        </button>\r\n        <p></p>\r\n        <button\r\n          id=\"btnDuplicate\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create', true)\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConfiguration()}\"\r\n          style=\"margin-bottom: 5px\"\r\n\r\n        >\r\n          <i class=\"fa fa-clone\"></i> {{ 'BUTTONS.DUPLICATE' | translate }}\r\n        </button>\r\n        <button\r\n          id=\"btnDelete\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"onDeleteSelectedTemplate()\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConfiguration() || getSelectedConfiguration().isFallback}\"\r\n        >\r\n          <i class=\"fa fa-minus\"></i> {{ 'BUTTONS.DELETE' | translate }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabConfTemplatesSamples",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration-templates/templates/tab-conf-templates-samples.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabConfTemplatesSamples>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-xs-12\"\r\n        style=\"cursor: pointer; height: 500px; overflow: auto\"\r\n      >\r\n        <table id=\"confTemplatesSamplesTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.CAPABILITIES' |\r\n                translate }}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.HOW-TO-USE'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                Actions&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr\r\n              id=\"{{configurationFile.fileName}}\"\r\n              *ngFor=\"let configurationFile of settingsService.getSampleConfigurations()\"\r\n              (click)=\"onConfTemplateClick(configurationFile)\"\r\n              [ngClass]=\"{ 'info': configurationFile.activeClicked}\"\r\n            >\r\n              <td>\r\n                {{configurationFile.templateName}}\r\n                <span *ngIf=\"configurationFile.isFallback\">\r\n                  <strong> (default)</strong>\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span class=\"label label-default\" *ngIf=\"!configurationFile.capReportGenerationMailMerge\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>Splitting</em>                \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportGenerationMailMerge\">\r\n                   <i class=\"fa fa-file-text-o\">&nbsp;</i> \r\n                   <em>Generation / Mail Merge</em>\r\n                </span>&nbsp;\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportDistribution\">\r\n                  <i class=\"fa fa-envelope-o\">&nbsp;</i>\r\n                 <em>Distribution</em> \r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span *ngIf=\"!configurationFile.isFallback && !configurationFile.capReportGenerationMailMerge\"\r\n                  >&lt;config&gt;{{configurationFile.relativeFilePath}}&lt;/config&gt;</span\r\n                >\r\n                <span\r\n                  *ngIf=\"configurationFile.isFallback\"\r\n                  [innerHTML]=\"'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.INNER-HTML.DEFAULT-CONFIGURATION' | translate\"\r\n                >\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <div class=\"btn-group dropup\"> \r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'visible'\" class=\"btn btn-xs btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Visible&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'hidden'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Hidden&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                  <li *ngIf=\"configurationFile.visibility == 'visible'\" (click)=\"toggleVisibility()\">Hide <em>{{configurationFile.templateName}}</em></li>\r\n                  <li *ngIf=\"configurationFile.visibility == 'hidden'\" (click)=\"toggleVisibility()\">Show <em>{{configurationFile.templateName}}</em></li>\r\n                 </ul>\r\n                  </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabDocumentationTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-documentation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabDocumentationTemplate>\r\n  <div class=\"well\">\r\n    <br />\r\n\r\n    <ol>\r\n      <li>\r\n        <a href=\"https://www.reportburster.com/docs/html/quickstart/index.html\" target=\"_blank\">QuickStart -\r\n          <em>ReportBurster</em> in 5 Minutes</a> will help you to quickly get started with report bursting\r\n      </li>\r\n      <br>\r\n      <li>\r\n        <a href=\"https://www.reportburster.com/docs/html/userguide/index.html\" target=\"_blank\">\r\n          <em>ReportBurster</em> User Guide</a> explains with more details what &amp; how can be achieved with\r\n        <em>ReportBurster</em></li>\r\n      <br>\r\n      <li>\r\n        <a id='checkPointHelpDocumentation' href=\"https://www.reportburster.com/docs/html/advanced/index.html\" target=\"_blank\">\r\n          <em>ReportBurster</em> - Advanced Report Delivery Scenarios</a> explains how\r\n        <em>ReportBurster</em> scripting can be used to achieve more complex report delivery scenarios</li>\r\n    </ol>\r\n  </div>\r\n</ng-template>`"
      },
      {
        "name": "tabEmailAddressValidationTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-email-address-validation.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabEmailAddressValidationTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <a href=\"http://www.ietf.org/rfc/rfc2822.txt\" target=\"_blank\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.RFC2822-COMPLIANT' | translate }}</a> {{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.RFC2822-ACHIEVED' | translate }}\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowQuotedIdentifiers\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowquotedidentifiers\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowQuotedIdentifiers\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_QUOTED_IDENTIFIERS' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_QUOTED_IDENTIFIERS' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowParensInLocalPart\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowparensinlocalpart\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowParensInLocalPart\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_PARENS_IN_LOCALPART' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_PARENS_IN_LOCALPART' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowDomainLiterals\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowdomainliterals\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowDomainLiterals\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_DOMAIN_LITERALS' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_DOMAIN_LITERALS' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowDotInaText\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowdotinatext\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowDotInaText\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_DOT_IN_A_TEXT' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_DOT_IN_A_TEXT' | translate\"></span>\r\n       </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowSquareBracketsInaText\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowsquarebracketsinatext\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowSquareBracketsInaText\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_SQUARE_BRACKETS_IN_A_TEXT' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_SQUARE_BRACKETS_IN_A_TEXT' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <hr/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <strong>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.SKIP_EMAIL_VALIDATION' | translate }}</strong>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <textarea class=\"form-control\" rows=\"14\" id=\"txtSkipValidationFor\"\r\n        [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.skipvalidationfor\"\r\n        (ngModelChange)='settingsChangedEventHandler($event)'></textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</ng-template>`"
      },
      {
        "name": "tabEmailCloudProvidersTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-email-cloud-providers.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabEmailCloudProvidersTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <h5>\r\n      <u><em>ReportBurster</em> can be used with all the major cloud email providers.</u>\r\n    </h5>\r\n\r\n    <br>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://www.office.com\" target=\"_blank\">Office 365</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://www.office.com\" target=\"_blank\"><img src=\"assets/images/office365_32.png\"></a> Welcome to <a\r\n          href=\"https://www.office.com\" target=\"_blank\">Office</a>. Your place to create, communicate, collaborate, and\r\n        get great work done.\r\n        <br>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://gsuite.google.com\" target=\"_blank\">G Suite / Google Apps</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://gsuite.google.com\" target=\"_blank\"><img src=\"assets/images/gapps_32.png\"></a> Do your best\r\n        work with\r\n        <a href=\"https://gsuite.google.com\" target=\"_blank\">Google's suite</a> of intelligent apps (formerly <a href=\"https://gsuite.google.com\"\r\n          target=\"_blank\">Google Apps</a>). Get business email, video conferencing, online storage and file sharing.\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://aws.amazon.com/ses/\" target=\"_blank\">Amazon Simple Email Service (Amazon SES)</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <span style=\"margin-right:2px\"><a href=\"https://aws.amazon.com/ses/\" target=\"_blank\"><i class=\"fa fa-amazon\"\r\n              style=\"font-size:32px; color:gold\"></i></a></span>\r\n        <a href=\"https://aws.amazon.com/ses/\" target=\"_blank\">Amazon Simple Email Service (Amazon SES)</a> evolved from\r\n        the\r\n        email platform that Amazon.com created to communicate with its own customers. In order to serve its\r\n        ever-growing global\r\n        customer base, Amazon.com needed to build an email platform that was flexible, scalable, reliable, and\r\n        cost-effective.\r\n        Amazon SES is the result of years of Amazon's own research, development, and iteration in the areas of sending\r\n        and\r\n        receiving email.\r\n        <br><br> Amazon SES eliminates the complexity and expense of building an in-house email solution. There is no\r\n        need\r\n        to set up your own servers, maintain your network infrastructure, or warm up your sending IP addresses.\r\n        <br><br> You can use the Amazon SES API to integrate the functionality of Amazon SES directly into applications\r\n        you\r\n        develop. Or you can use the Amazon SES SMTP interface to send email through the third-party applications you\r\n        already\r\n        use, such as email clients, ticketing systems, and autoresponders.\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://www.mailgun.com\" target=\"_blank\">Mailgun</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://www.mailgun.com\" target=\"_blank\"><img src=\"assets/images/mailgun_32.png\"> Send, receive and\r\n          track email effortlessly. 10,000 emails free every month.</a>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://sendgrid.com\" target=\"_blank\">SendGrid</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://sendgrid.com\" target=\"_blank\"><img src=\"assets/images/sendgrid_32.png\"></a> Email Delivery\r\n        Service\r\n        trusted by over 55,000 paying customers like Spotify, Uber, and Airbnb trust <a href=\"https://sendgrid.com\"\r\n          target=\"_blank\">SendGrid</a> to send more than 30 billion emails every month.\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://www.sparkpost.com\" target=\"_blank\">SparkPost</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://www.sparkpost.com\" target=\"_blank\"><img src=\"assets/images/sparkpost.png\"></a> The World’s\r\n        Fastest-Growing\r\n        Email Delivery Service. When your enterprise counts on email, <a href=\"https://www.sparkpost.com\" target=\"_blank\">SparkPost</a>\r\n        got you covered.\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"http://mandrill.com\" target=\"_blank\">Mandrill</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"http://mandrill.com\" target=\"_blank\"><img src=\"assets/images/mandrill_32.png\"> Mandrill</a> sends 20\r\n        billion\r\n        emails every month for more than 10 million users.\r\n      </div>\r\n    </div>\r\n\r\n    <img src=\"assets/images/transactional-email-services.png\">\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabEmailConnectionSettingsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-email-connection-settings.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template\r\n  #tabEmailConnectionSettingsTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.CONNECTION' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnUseExistingEmailConnection\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n          (change)=\"onUseExistingEmailConnectionClick($event)\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnUseExistingEmailConnection\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.USE-EXISTING-CONNECTION'\r\n          | translate }}</label\r\n        >\r\n        <div\r\n          *ngIf=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n          class=\"btn-group pull-right\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            id=\"btnSelectedEmailConnection\"\r\n            class=\"btn btn-sm\"\r\n            [ngClass]=\"xmlSettings?.documentburster.settings.emailserver.useconn ? 'btn-primary' : 'btn-default'\"\r\n          >\r\n            {{selectedEmailConnectionFile?.connectionName}}\r\n            <span\r\n              id=\"selectedEmailConnectionDefault\"\r\n              *ngIf=\"selectedEmailConnectionFile?.defaultConnection\"\r\n              >(default)</span\r\n            >\r\n          </button>\r\n          <button\r\n            id=\"btnSelectAnotherEmailConnection\"\r\n            type=\"button\"\r\n            class=\"btn btn-sm btn-default dropdown-toggle\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            <span class=\"caret\"></span>\r\n            <span class=\"sr-only\">Toggle Dropdown</span>\r\n          </button>\r\n          <ul class=\"dropdown-menu\">\r\n            <li *ngFor=\"let connectionFile of settingsService.connectionFiles\">\r\n              <a\r\n                id=\"{{connectionFile.connectionCode}}\"\r\n                href=\"javascript:;\"\r\n                (click)=\"onUsedExistingEmailConnectionChanged(connectionFile.connectionCode,connectionFile.connectionName)\"\r\n                >{{connectionFile.connectionName}}\r\n                <span *ngIf=\"connectionFile.defaultConnection\"\r\n                  >(default)</span\r\n                ></a\r\n              >\r\n            </li>\r\n            <li role=\"separator\" class=\"divider\"></li>\r\n            <li>\r\n              <a\r\n                id=\"manageEmailConnections\"\r\n                href=\"#\"\r\n                [routerLink]=\"[\r\n    '/ext-connections',\r\n    'emailSettingsMenuSelected',\r\n    settingsService.currentConfigurationTemplatePath,\r\n    settingsService.currentConfigurationTemplateName\r\n  ]\"\r\n                >{{\r\n                'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.MANAGE-EMAIL-CONNECTIONS'\r\n                | translate }}</a\r\n              >\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.name\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromName',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromEmailAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.fromaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromEmailAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromEmailAddress',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.HOST' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"emailServerHost\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.host\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnEmailServerHostVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailServerHost',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.USER-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"userName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.userid\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnUserNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('userName',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PASSWORD' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPassword\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.userpassword\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          type=\"password\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPasswordVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPassword',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PORT' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPort\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.port\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPortVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPort',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSSL\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.usessl\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n        <label for=\"btnSSL\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SSL-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnTLS\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.usetls\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n        <label for=\"btnTLS\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TLS-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TEST-CONNECTION' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-7\">\r\n        <button\r\n          id=\"btnSendTestEmail\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary btn-block\"\r\n          (click)=\"doTestSMTPConnection()\"\r\n        >\r\n          <i class=\"fa fa-paper-plane\"></i>&nbsp;&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SEND-TEST-EMAIL' |\r\n          translate }}\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row \">\r\n      <div class=\"col-xs-2 \">\r\n        <a href=\"https://products.office.com/en-us/exchange \" target=\"_blank \">\r\n          <i\r\n            class=\"ms-Icon ms-Icon--ExchangeLogo\"\r\n            style=\"font-size:30px;color:orange \"\r\n          ></i>\r\n          <br />Microsoft Exchange\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"col-xs-7 \">\r\n        <span\r\n          [innerHTML]=\"\r\n        'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.INNER-HTML.DB-ALL-CLOUD-PROVIDERS' | translate\"\r\n        ></span>\r\n        <br />\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://www.office.com\" target=\"_blank \">\r\n            <i\r\n              class=\"ms-Icon ms-Icon--OfficeLogo\"\r\n              style=\"font-size:24px;\r\n          color:red \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Office 365</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://gsuite.google.com \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-google \"\r\n              style=\"font-size:32px; color:gray\r\n          \"\r\n            ></i>\r\n            <p style=\"margin-top:3px \">Google Apps</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://aws.amazon.com/ses/ \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-amazon \"\r\n              style=\"font-size:32px; color:gold\r\n          \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Amazon AWS</p>\r\n          </a>\r\n        </div>\r\n        <dburst-button-well-known-email-providers\r\n          *ngIf=\"!xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n          (sendSelectedProvider)=\"updateSMTPFormControlsWithSelectedProviderSettings($event)\"\r\n        >\r\n        </dburst-button-well-known-email-providers>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
      },
      {
        "name": "tabEmailMessageTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-email-message.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabEmailMessageTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">{{\r\n        'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.TO' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"emailToAddress\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.to\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnEmailToAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailToAddress',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p>\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-xs-1\">{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.CC' | translate }}</div>\r\n        <div class=\"col-xs-8\">\r\n          <input id=\"emailCcAddress\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.cc\"\r\n            (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n        </div>\r\n\r\n        <div class=\"col-xs-3\">\r\n          <dburst-button-variables id=\"btnEmailCcAddressVariables\"\r\n            (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailCcAddress',$event)\">\r\n          </dburst-button-variables>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <p>\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-1\">{{\r\n            'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.BCC' | translate }}</div>\r\n          <div class=\"col-xs-8\">\r\n            <input id=\"emailBccAddress\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.bcc\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n            <dburst-button-variables id=\"btnEmailBccAddressVariables\"\r\n              (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailBccAddress',$event)\">\r\n            </dburst-button-variables>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <p>\r\n          <div class=\"row\">\r\n\r\n            <div class=\"col-xs-1\">{{\r\n              'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.SUBJECT' | translate }}</div>\r\n            <div class=\"col-xs-8\">\r\n              <input id=\"emailSubject\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.subject\"\r\n                (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n            </div>\r\n\r\n            <div class=\"col-xs-3\">\r\n              <dburst-button-variables id=\"btnEmailSubjectVariables\"\r\n                (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailSubject',$event)\">\r\n              </dburst-button-variables>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <p></p>\r\n\r\n          <div class=\"row\">\r\n\r\n            <div class=\"col-xs-1\">{{\r\n                'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.MESSAGE' | translate }}</div>\r\n            <div class=\"col-xs-8\">\r\n\r\n              <p-editor [style]=\"{'height':'250px'}\"\r\n                id=\"wysiwygEmailMessage\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && \r\n                !xmlSettings?.documentburster.settings.htmlemaileditcode\"\r\n                [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.html\"\r\n                (onTextChange)=\"settingsChangedQuillEventHandler($event)\"\r\n                (onSelectionChange)=\"onEditorSelectionChanged($event)\"\r\n                (onInit)=\"onEditorCreated($event)\">\r\n                <ng-template pTemplate=\"header\">\r\n                  <span class=\"ql-formats\">\r\n                    <button type=\"button\" class=\"ql-bold\" aria-label=\"Bold\"></button>\r\n                    <button type=\"button\" class=\"ql-italic\" aria-label=\"Italic\"></button>\r\n                    <button type=\"button\" class=\"ql-underline\" aria-label=\"Underline\"></button>\r\n                  </span>\r\n                  <span class=\"ql-formats\">\r\n                    <button class=\"ql-list\" value=\"ordered\" aria-label=\"Ordered List\" type=\"button\"></button>\r\n                    <button class=\"ql-list\" value=\"bullet\" aria-label=\"Unordered List\" type=\"button\"></button>\r\n                  </span>\r\n                </ng-template>\r\n              </p-editor>\r\n\r\n              <textarea class=\"form-control\" rows=\"14\" id=\"htmlCodeEmailMessage\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings?.documentburster.settings.htmlemaileditcode\"\r\n                [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.html\"\r\n                (ngModelChange)='settingsChangedEventHandler($event)'></textarea>\r\n\r\n              <textarea class=\"form-control\" rows=\"14\" id=\"textEmailMessage\"\r\n                *ngIf=\"!xmlSettings?.documentburster.settings.htmlemail\"\r\n                [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.text\"\r\n                (ngModelChange)='settingsChangedEventHandler($event)'></textarea>\r\n\r\n            </div>\r\n\r\n            <div class=\"col-xs-3\">\r\n\r\n              <dburst-button-variables id=\"btnWysiwygEmailMessageVariables\"\r\n                (sendSelectedVariable)=\"updateQuillFormControlWithSelectedVariable($event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && !xmlSettings?.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-variables>\r\n              <dburst-button-variables id=\"btnHtmlCodeEmailMessageVariables\"\r\n                (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('htmlCodeEmailMessage',$event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings?.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-variables>\r\n              <dburst-button-variables id=\"btnTextEmailMessageVariables\"\r\n                (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('textEmailMessage',$event)\"\r\n                *ngIf=\"!xmlSettings?.documentburster.settings.htmlemail\">\r\n              </dburst-button-variables>\r\n\r\n              <dburst-button-html-preview [htmlCode]=\"xmlSettings?.documentburster.settings.emailsettings.html\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings?.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-html-preview>\r\n\r\n              <dburst-button-native-system-dialog value=\"{{\r\n                  'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.LOAD-TEMPLATE' | translate }}\" dialogType=\"file\"\r\n                (pathsSelected)=\"onLoadHTMLTemplateClick($event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-native-system-dialog>\r\n\r\n              <dburst-button-native-system-dialog value=\"{{\r\n                  'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.SAVE-TEMPLATE' | translate }}\" dialogType=\"file\"\r\n                saveDialog=\"true\" (pathsSelected)=\"onSaveHTMLTemplateClick($event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-native-system-dialog>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n  </div>\r\n\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabEmailTuningTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-email-tuning.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabEmailTuningTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSJMActive\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSJMActive\" class=\"checkboxlabel\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.SJM-ACTIVE' |\r\n          translate }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.REPLY-TO-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"replyToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.replytoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.REPLY-TO-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"replyToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.replytoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.BOUNCE-TO-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"bounceToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.bouncetoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.BOUNCE-TO-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"bounceToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.bouncetoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.READ-RECEIPT-ADDRESS'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"receiptToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.receipttoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.READ-RECEIPT-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"receiptToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.receipttoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.DELIVERY-RECEIPT-ADDRESS'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"dispositionNotificationToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.dispositionnotificationtoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.DELIVERY-RECEIPT-NAME'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"dispositionNotificationToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.dispositionnotificationtoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.CUSTOM-EMAIL-HEADERS'\r\n        | translate }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <textarea\r\n          class=\"form-control\"\r\n          rows=\"5\"\r\n          id=\"textCustomEmailHeaders\"\r\n          placeholder=\"header1, value1&#x0a;header2, value2\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.customemailheaders\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.CUSTOM-SESSION-PROPERTIES'\r\n        | translate }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <textarea\r\n          class=\"form-control\"\r\n          rows=\"5\"\r\n          id=\"textCustomSessionProperties\"\r\n          placeholder=\"property1, value1&#x0a;property2, value2\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.customsessionproperties\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnJavaxMailDebug\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.javaxmaildebug\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n          <label for=\"btnJavaxMailDebug\" class=\"checkboxlabel\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.DEBUG-EMAIL' |\r\n            translate }}\r\n          </label>\r\n        </div>\r\n      </div>\r\n    \r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnTransportModeLoggingOnly\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.transportmodeloggingonly\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n          <label for=\"btnTransportModeLoggingOnly\" class=\"checkboxlabel\"\r\n            >{{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.TRANSPORT-MODE-LOGGING'\r\n            | translate }}\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"xmlSettings?.documentburster.settings.enableincubatingfeatures\">\r\n    \r\n      <hr />\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-HOST' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyHost\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.host\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-PORT' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyPort\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.port\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-USER-NAME' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyUserName\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.username\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-PASSWORD' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyPassword\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.password\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-BRIDGE-PORT' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-8\">\r\n          <input\r\n            id=\"proxySocks5BridgePort\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.socks5bridgeport\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabEnableDisableDeliveryTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-enable-disable-delivery.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabEnableDisableDeliveryTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsEmail\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.email\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsEmail\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SEND-BY-EMAIL' |\r\n          translate }}</label\r\n        >\r\n        <span\r\n          id=\"btnEmailConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.email\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n            '/configuration',\r\n            'emailSettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.EMAIL-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsUpload\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.upload\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsUpload\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.UPLOAD-DOCUMENTS' |\r\n          translate }}</label\r\n        >\r\n\r\n        <span\r\n          id=\"btnUploadConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.upload\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n          '/configuration',\r\n          'ftpSettingsMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.UPLOAD-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsWeb\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.web\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsWeb\" class=\"checkboxlabel\"\r\n          >&nbsp;<span\r\n            [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SEND-TO-WEB' | translate\"\r\n          ></span\r\n        ></label>\r\n\r\n        <span\r\n          id=\"btnWebConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.web\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n          '/configuration',\r\n          'documentBursterWebSettingsMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.WEB-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsSMS\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.sms\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsSMS\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SEND-SMS-MESSAGES' |\r\n          translate }}</label\r\n        >\r\n        <span\r\n          id=\"btnSMSConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.sms\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n          '/configuration',\r\n          'smsSettingsMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SMS-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnDeleteDocuments\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.deletefiles\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnDeleteDocuments\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.DELETE-DOCUMENTS-AFTER-DELIVERY'\r\n          | translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnQuarantineDocuments\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.quarantinefiles\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnQuarantineDocuments\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.QUARANTINE-DOCUMENTS-WHICH-FAIL'\r\n          | translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabExamplesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-examples.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabExamplesTemplate>\r\n  <div class=\"well\">\r\n    <h3 id=\"checkPointHelpExamples\"><em>ReportBurster</em> Examples</h3>\r\n\r\n    <br />People are using <em>ReportBurster</em> for the following situations\r\n\r\n    <br />\r\n    <br />1.\r\n\r\n    <em>ReportBurster</em> as a general\r\n    <a\r\n      title=\"Examples of how people are using DocumentBurster report distribution software\"\r\n      href=\"https://www.pdfburst.com/blog/report-distribution-software/\"\r\n      >Report Distribution Software</a\r\n    >&nbsp;&nbsp;\r\n    <a\r\n      href=\"https://www.pdfburst.com/blog/report-distribution-software/\"\r\n      target=\"_blank\"\r\n    >\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n        View Examples\r\n      </button>\r\n    </a>\r\n\r\n    <br />\r\n    <br />\r\n    2.\r\n\r\n    <a\r\n      title=\"Examples of how people are using DocumentBurster to burst and distribute Crystal Reports documents\"\r\n      href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\"\r\n      >Burst and Distribute Crystal Reports Documents</a\r\n    >\r\n    using <em>ReportBurster</em>&nbsp;&nbsp;\r\n    <a\r\n      href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\"\r\n      target=\"_blank\"\r\n    >\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n        View Examples\r\n      </button>\r\n    </a>\r\n\r\n    <br />\r\n    <br />3.\r\n\r\n    <a\r\n      title=\"Examples of how people are using DocumentBurster for emailing payslips to employees\"\r\n      href=\"https://www.pdfburst.com/blog/email-payslips/\"\r\n      >Email Payslips to Employees</a\r\n    >\r\n    using <em>ReportBurster</em>&nbsp;&nbsp;\r\n    <a href=\"https://www.pdfburst.com/blog/email-payslips/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n        View Examples\r\n      </button>\r\n    </a>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabExternalConnectionsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_ext-connections/templates/tab-ext-connection.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabExternalConnectionsTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-xs-10\"\r\n        style=\"cursor: pointer; height: 500px; overflow: auto\"\r\n      >\r\n        <table id=\"extConnectionsTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.TYPE'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.USED-BY'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                Actions&nbsp;&nbsp;\r\n              </th>\r\n        \r\n              </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr\r\n          id=\"{{connectionFile.fileName}}\"\r\n          *ngFor=\"let connectionFile of settingsService.connectionFiles\"\r\n          (click)=\"onItemClick(connectionFile)\"\r\n          [ngClass]=\"{ 'info': connectionFile.activeClicked}\"\r\n        >\r\n          <td>\r\n            {{connectionFile.connectionName}}\r\n          </td>\r\n          <td>\r\n            {{connectionFile.connectionType}}\r\n          </td>\r\n          \r\n        <td>\r\n        {{connectionFile.usedBy}}\r\n         </td>\r\n         \r\n          <td>\r\n \r\n          <div class=\"btn-group dropup\"> \r\n              \r\n            <button type=\"button\" id=\"btnDefault_{{connectionFile.fileName}}\" *ngIf=\"connectionFile.defaultConnection\" class=\"btn btn-xs btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Default&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n            <button type=\"button\" id=\"btnActions_{{connectionFile.fileName}}\" *ngIf=\"!connectionFile.defaultConnection\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Actions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n              \r\n            <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                  <li id=\"btnSendTestEmail_{{connectionFile.fileName}}\" (click)=\"doTestSMTPConnection()\">Send Test Email</li>\r\n                  <li id=\"btnSeparator_{{connectionFile.fileName}}\" role=\"separator\" class=\"divider\" *ngIf=\"!connectionFile.defaultConnection\"></li>\r\n                  <li id=\"btnToggleDefault_{{connectionFile.fileName}}\" *ngIf=\"!connectionFile.defaultConnection\" (click)=\"toggleDefault()\">Make <strong>Default</strong></li>\r\n            </ul>\r\n                \r\n          </div>\r\n              \r\n        \r\n        </td>\r\n        \r\n          </tr>\r\n\r\n          \r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <button\r\n          id=\"btnNew\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create')\"\r\n          style=\"margin-bottom: 5px\"\r\n        >\r\n          <i class=\"fa fa-plus\"></i> {{ 'BUTTONS.NEW' | translate }}\r\n        </button>\r\n        <p></p>\r\n        <button\r\n          id=\"btnEdit\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('update')\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConnection()}\"\r\n          style=\"margin-bottom: 5px\"\r\n\r\n        >\r\n          <i class=\"fa fa-pencil-square-o\"></i> {{ 'BUTTONS.EDIT' | translate }}\r\n        </button>\r\n        \r\n        <button\r\n          id=\"btnDuplicate\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create', true)\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConnection()}\"\r\n          style=\"margin-bottom: 5px\"\r\n\r\n        >\r\n          <i class=\"fa fa-clone\"></i> {{ 'BUTTONS.DUPLICATE' | translate }}\r\n        </button>\r\n        \r\n        <button\r\n          id=\"btnDelete\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"onDeleteSelectedConnection()\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConnection() || getSelectedConnection().defaultConnection || getSelectedConnection().usedBy}\"\r\n          style=\"margin-bottom: 100px\"\r\n          >\r\n          <i class=\"fa fa-minus\"></i> {{ 'BUTTONS.DELETE' | translate }}\r\n        </button>\r\n\r\n        <p>\r\n        \r\n        <button\r\n          id=\"btnGoBack\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-primary col-xs-12\"\r\n          (click)=\"goBack()\"\r\n          *ngIf=\"goBackLocation\"\r\n        >\r\n        {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.GO-BACK' |\r\n          translate }} <br> \r\n          {{this.configurationFileName}} <i class=\"fa fa-long-arrow-right\"></i><br>\r\n        {{ 'AREAS.CONFIGURATION.LEFT-MENU.EMAIL' | translate }} <i class=\"fa fa-long-arrow-right\"></i><br>\r\n          {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.CONNECTION' |\r\n          translate }}<br>{{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.SETTINGS' |\r\n          translate }}<br> \r\n        </button>\r\n\r\n        <p>\r\n   \r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabExtraPackagesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-extra-packages.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabExtraPackagesTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <dburst-extra-packages></dburst-extra-packages>\r\n    \r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabFreeTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-free.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabFreeTemplate>\r\n  <div class=\"well\">\r\n    <span [innerHTML]=\"\r\n      'AREAS.HELP.TAB-FREE.INNER-HTML.DO-YOU-WORK' | translate\r\n  \"></span>\r\n\r\n\r\n    <h3>{{\r\n      'AREAS.HELP.TAB-FREE.HOW-TO-APPLY' | translate }}</h3>\r\n\r\n    <a href=\"https://www.reportburster.com/services/free-for-schools/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">Get\r\n        <em>ReportBurster</em> {{\r\n        'AREAS.HELP.TAB-FREE.FREE-FOR-SCHOOLS' | translate }}</button>\r\n    </a>\r\n\r\n    <br>\r\n    <br>\r\n    <span [innerHTML]=\"\r\n    'AREAS.HELP.TAB-FREE.INNER-HTML.IN-ORDER-APPLY' | translate\"></span>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <iframe style=\"border: none; overflow: hidden;\"\r\n      src=\"https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2FDocumentBurster%2F&amp;tabs&amp;width=500&amp;height=214&amp;small_header=false&amp;adapt_container_width=false&amp;hide_cover=false&amp;show_facepile=true&amp;appId=250210611829648\"\r\n      width=\"600\" height=\"200\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-scripts allow-same-origin\"></iframe>\r\n\r\n    <hr>\r\n\r\n    <h3 id='checkPointHelpFreeForSchools' style=\"text-decoration: underline;\">How Schools Use\r\n      <em>ReportBurster</em> Software</h3>\r\n    <em>\"At the university we provide reading lists for each course of study. These reading list are provided by the\r\n      course tutors\r\n      and annually we like to feed back to the tutors borrowing figures for the items on the reading lists. We are\r\n      using Crystal\r\n      Reports against an Access database to produce a single PDF per Faculty. DocumentBurster is ideal for splitting\r\n      the large\r\n      Faculty report into individual reports per course tutor and auto-emailing the tutor their own reading lists for\r\n      evaluation.</em>\r\n    <br>\r\n    <br>\r\n    <em>DocumentBurster saves the library staff considerable time and effort whilst proving valuable feedback to\r\n      tutors.\"</em>\r\n    <br>\r\n    <br>\r\n    <strong>Helen Cooper, Library Application Support Analyst</strong>\r\n    <br>\r\n    <a href=\"https://www.strath.ac.uk/\" target=\"_blank\">University of Strathclyde, Glasgow, United Kingdom</a>\r\n    <br>\r\n    <hr>\r\n    <h3 style=\"text-decoration: underline;\">More\r\n      <em>ReportBurster</em> School Examples</h3>\r\n    <br>1.\r\n    <em>ReportBurster</em> as a general\r\n    <a title=\"Examples of how people are using DocumentBurster report distribution software\"\r\n      href=\"https://www.pdfburst.com/blog/report-distribution-software/\">Report\r\n      Distribution Software</a>\r\n    <a href=\"https://www.pdfburst.com/blog/report-distribution-software/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">View Examples</button>\r\n    </a>\r\n\r\n    <br>\r\n    <br> 2.\r\n    <a title=\"Examples of how people are using DocumentBurster to burst and distribute Crystal Reports documents\"\r\n      href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\">Burst\r\n      and Distribute Crystal Reports Documents</a> using\r\n    <em>ReportBurster</em>\r\n    <a href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">View Examples</button>\r\n    </a>\r\n    <br>\r\n    <br> 3.\r\n    <a title=\"Examples of how people are using DocumentBurster for emailing payslips to employees\"\r\n      href=\"https://www.pdfburst.com/blog/email-payslips/\">Email\r\n      Payslips to Employees</a> using\r\n    <em>ReportBurster</em>\r\n    <a href=\"https://www.pdfburst.com/blog/email-payslips/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">View Examples</button>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabGeneralSettingsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-general-settings.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabGeneralSettingsTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.BURST-FILE-NAME' | translate }}</div>\r\n      <div class=\"col-xs-6\">\r\n        <input id=\"burstFileName\" class=\"form-control\" [(ngModel)]=\"xmlSettings?.documentburster?.settings.burstfilename\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables id=\"btnBurstFileNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('burstFileName',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.OUTPUT-FOLDER' | translate }}</div>\r\n      <div class=\"col-xs-6\">\r\n        <input id=\"outputFolder\" class=\"form-control\" [(ngModel)]=\"xmlSettings?.documentburster?.settings.outputfolder\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-native-system-dialog dialogType=\"folder\" (pathsSelected)=\"onSelectOutputFolderPath($event)\">\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables id=\"btnOutputFolderVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('outputFolder',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.QUARANTINE-FOLDER' | translate }}</div>\r\n      <div class=\"col-xs-6\">\r\n        <input id=\"quarantineFolder\" class=\"form-control\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster?.settings.quarantinefolder\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-native-system-dialog dialogType=\"folder\" (pathsSelected)=\"onSelectQuarantineFolderPath($event)\">\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables id=\"btnQuarantineFolderVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('quarantineFolder',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-12\">\r\n        <a href=\"https://msdn.microsoft.com/en-us/library/aa365247#naming_conventions\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.INVALID-CHARS-IN-PATHS' | translate }} <span\r\n            class=\"label label-default\">\\\r\n            / : * ? \" &lt; &gt; |</span>\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n\r\n      <div class=\"col-xs-12\">\r\n        <a id=\"btnEnableDisableDistribution\" href=\"#\" [routerLink]=\"[\r\n          '/configuration',\r\n          'enableDisableDistributionMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\">\r\n          <button class=\"btn btn-primary\" type=\"button\"> {{\r\n            'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.NEXT-ENABLE-DISABLE' | translate }}</button>\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabJavaTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-java.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabJavaTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <dburst-java></dburst-java>\r\n\r\n  </div>\r\n</ng-template>`"
      },
      {
        "name": "tabLicenseTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-license.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabLicenseTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration-templates/templates/tab-license.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabLicenseTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_ext-connections/templates/tab-license.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabLicenseTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-license.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabLicenseTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-license.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`\r\n<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabLogsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-logs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`\r\n<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabLogsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_ext-connections/templates/tab-logs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`\r\n<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabLogsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-logs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>`"
      },
      {
        "name": "tabLogsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-logs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`\r\n<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabMergeBurstTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-merge-burst.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabMergeBurstTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-body\">\r\n        <div class=\"row\">\r\n          <div\r\n            class=\"col-xs-10\"\r\n            style=\"cursor: pointer; height: 200px; overflow: auto\"\r\n          >\r\n            <table\r\n              id=\"filesTable\"\r\n              class=\"table table-responsive table-hover table-bordered\"\r\n              cellspacing=\"0\"\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th class=\"col-xs-3\">\r\n                    {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.NAME' | translate }}\r\n                  </th>\r\n                  <th class=\"col-xs-9\">\r\n                    {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.PATH' | translate }}\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr\r\n                  *ngFor=\"let file of processingService.procMergeBurstInfo.inputFiles\"\r\n                  [ngClass]=\"{ 'info': file.selected\r\n                  } \"\r\n                  (click)=\"onFileSelected(file)\"\r\n                >\r\n                  <td>{{file.name}}</td>\r\n                  <td>{{file.path}}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div class=\"col-xs-2\">\r\n          <label for=\"mergeFilesUploadInput\" class=\"btn btn-default btn-block\"><i class=\"fa fa-folder-open-o' }}\"></i>&nbsp;Add</label>\r\n          <input id=\"mergeFilesUploadInput\" type=\"file\" multiple (change)=\"onFilesAdded($event)\" #mergeFilesUploadInput style=\"display: none;\" />           \r\n          <!--  \r\n          <dburst-button-native-system-dialog\r\n              btnId=\"mergeFilesUploadInput\"\r\n              value=\"&nbsp;&nbsp;&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.ADD' | translate }}\"\r\n              dialogType=\"files\"\r\n              (pathsSelected)=\"onFilesAdded($event)\"\r\n            ></dburst-button-native-system-dialog>\r\n            -->\r\n            \r\n            <button\r\n              id=\"btnDeletePdfFile\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedFileDelete()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.selectedFile\"\r\n              style=\"margin-top: 5px\"\r\n            >\r\n              <span class=\"glyphicon glyphicon-minus\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.DELETE' | translate }}\r\n            </button>\r\n\r\n            <button\r\n              id=\"btnUpPdfFile\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedFileUp()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.selectedFile\"\r\n            >\r\n              <span class=\"glyphicon glyphicon-arrow-up\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.UP' | translate }}\r\n            </button>\r\n\r\n            <button\r\n              id=\"btnDownPdfFile\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedFileDown()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.selectedFile\"\r\n            >\r\n              <span class=\"glyphicon glyphicon-arrow-down\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.DOWN' | translate }}\r\n            </button>\r\n\r\n            <button\r\n              id=\"btnClearPdfFiles\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onClearFiles()\"\r\n              [disabled]=\"processingService.procMergeBurstInfo.inputFiles.length === 0\"\r\n            >\r\n              <i class=\"fa fa-eraser\"></i>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.CLEAR' | translate }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\">\r\n            {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.MERGED-FILE-NAME' | translate\r\n            }}\r\n          </div>\r\n          <div class=\"col-xs-9\">\r\n            <input\r\n              id=\"mergedFileName\"\r\n              [(ngModel)]=\"processingService.procMergeBurstInfo.mergedFileName\"\r\n              (change)=\"saveMergedFileSetting();\"\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-9\">\r\n            <span\r\n              id=\"mergedFileNameRequired\"\r\n              class=\"label label-default\"\r\n              *ngIf=\"!processingService.procMergeBurstInfo.mergedFileName\"\r\n              >{{ 'AREAS.PROCESSING.TAB-MERGE-BURST.MERGED-FILE-NAME-REQUIRED' |\r\n              translate }}</span\r\n            >\r\n            <span\r\n              id=\"mergedFileNamePdfExtensionRequired\"\r\n              class=\"label label-default\"\r\n              *ngIf=\"processingService.procMergeBurstInfo.mergedFileName && !processingService.procMergeBurstInfo.mergedFileName.endsWith('.pdf')\"\r\n              >{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.MERGED-FILE-NAME-PDF-EXTENSION'\r\n              | translate }}</span\r\n            >\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-3\">\r\n            <div class=\"checkbox\">\r\n              <label id=\"btnBurstMergedFile\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  [(ngModel)]=\"processingService.procMergeBurstInfo.shouldBurstResultedMergedFile\"\r\n                />\r\n                {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.BURST-MERGED-FILE' |\r\n                translate }}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-1\" style=\"margin-right: 20px\">\r\n            <button\r\n              id=\"btnRun\"\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              (click)=\"doMergeBurst()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.mergedFileName || !processingService.procMergeBurstInfo.mergedFileName.endsWith('.pdf') || processingService.procMergeBurstInfo.inputFiles.length<=1 || executionStatsService.jobStats.numberOfActiveJobs > 0\"\r\n            >\r\n              <i class=\"fa fa-play\"></i>&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.RUN' | translate }}\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n            <dburst-button-clear-logs></dburst-button-clear-logs>\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\" style=\"margin-left: -20px\">\r\n            <dburst-button-native-system-dialog style=\"display: none;\"\r\n              value=\"{{\r\n              'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n              dialogType=\"file\"\r\n            >\r\n            </dburst-button-native-system-dialog>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-9\">\r\n            <span\r\n              id=\"twoOrMoreRequired\"\r\n              class=\"label label-default\"\r\n              *ngIf=\"processingService.procMergeBurstInfo.inputFiles.length<=1\"\r\n              >{{ 'AREAS.PROCESSING.TAB-MERGE-BURST.SELECT-2-OR-MORE' |\r\n              translate }}</span\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabQATemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-qa.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabQATemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.FROM-NAME' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaFromName\" [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.name\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnQaFromNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('qaFromName',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.FROM-ADDRESS' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaFromEmailAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.fromaddress\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnQaFromEmailAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('qaFromEmailAddress',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.HOST' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaEmailServerHost\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.host\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.USER-NAME' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaUserName\" [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.userid\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.PASSWORD' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaPassword\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.userpassword\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' type=\"password\" class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.PORT' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaPort\" [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.port\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input type=\"checkbox\" id=\"btnQASSL\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.usessl\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' ng-true-value=\"'true'\" ng-false-value=\"'false'\" />\r\n        <label for=\"btnQASSL\" class=\"checkboxlabel\">&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-QA.SSL-ENABLED' | translate }}</label>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input type=\"checkbox\" id=\"btnQATLS\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.usetls\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' ng-true-value=\"'true'\" ng-false-value=\"'false'\" />\r\n        <label for=\"btnQATLS\" class=\"checkboxlabel\">&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-QA.TLS-ENABLED' | translate }}</label>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabQualityAssuranceTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-quality-assurance.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabQualityAssuranceTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        PDF / Excel\r\n        {{ 'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.FILE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"qaBurstFile\" [(ngModel)]=\"processingService.procBurstInfo.isSample ? processingService.procQualityAssuranceInfo.prefilledInputFilePath : processingService.procQualityAssuranceInfo.inputFileName\" class=\"form-control\" required />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n      <label for=\"qaFileUploadInput\" class=\"btn btn-default btn-block\"><i class=\"fa fa-folder-open-o' }}\"></i>&nbsp;Select</label>\r\n      <input type=\"file\" id=\"qaFileUploadInput\" (change)=\"onQAFileSelected($event)\" accept=\".pdf\" #qaFileUploadInput style=\"display: none;\"/>\r\n      \r\n      <!--  \r\n      <dburst-button-native-system-dialog value=\"{{\r\n            'COMPONENTS.BUTTON-NATIVE-SYSTEM-DIALOG.SELECT' | translate\r\n          }}\" dialogType=\"file\" (pathsSelected)=\"onQAFileSelected($event)\"></dburst-button-native-system-dialog>-->\r\n      \r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"radio\">\r\n      <label>\r\n        <input type=\"radio\" name=\"optradio\" checked=\"checked\" [(ngModel)]=\"processingService.procQualityAssuranceInfo.mode\" value=\"ta\" />{{\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-ALL-TOKENS' | translate\r\n        }}</label>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"radio\">\r\n      <label>\r\n        <input id=\"testTokensRandom\" type=\"radio\" name=\"optradio\" [(ngModel)]=\"processingService.procQualityAssuranceInfo.mode\" value=\"tr\"\r\n          (focus)=\"onDifferentQualityAssuranceModeFocus('tr')\" />{{ 'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST' | translate }}\r\n        {{ processingService.procQualityAssuranceInfo.numberOfRandomTokens }}\r\n        {{\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.RANDOM-BURST-TOKENS'\r\n            | translate\r\n        }}</label>\r\n      <input id=\"numberOfRandomTokens\" class=\"form-control\" placeholder=\"2\"\r\n        [(ngModel)]=\"processingService.procQualityAssuranceInfo.numberOfRandomTokens\"\r\n        (focus)=\"onDifferentQualityAssuranceModeFocus('numberOfRandomTokens')\" />\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"radio\">\r\n      <label>\r\n        <input id=\"testTokensList\" type=\"radio\" name=\"optradio\" [(ngModel)]=\"processingService.procQualityAssuranceInfo.mode\" value=\"tl\"\r\n          (focus)=\"onDifferentQualityAssuranceModeFocus('tl')\" />{{\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-FOLLOWING' | translate\r\n        }}</label>\r\n      <input id=\"listOfTokens\" class=\"form-control\"\r\n        placeholder=\"clyde.grew@northridgehealth.org,alfreda.waldback@northridgehealth.org\"\r\n        [(ngModel)]=\"processingService.procQualityAssuranceInfo.listOfTokens\"\r\n        (focus)=\"onDifferentQualityAssuranceModeFocus('listOfTokens')\" />\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-1\" style=\"margin-right: 40px\">\r\n        <button id=\"btnRunTest\" type=\"button\" class=\"btn btn-primary\" (click)=\"doRunTest()\" [disabled]=\"\r\n            runTestShouldBeDisabled() ||\r\n            executionStatsService.jobStats.numberOfActiveJobs > 0\r\n          \">\r\n          <i class=\"fa fa-thumbs-o-up\"></i>&nbsp;{{\r\n            'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.RUN-TEST' | translate\r\n          }}\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-native-system-dialog style=\"display: none;\" value=\"{{ 'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n          dialogType=\"file\">\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-6\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus === 'started'\"\r\n        style=\"margin-right: 40px\">\r\n        <a href=\"{{ xmlSettings.documentburster.settings.qualityassurance.emailserver.weburl }}\" target=\"_blank\">\r\n          <button class=\"btn\" type=\"button\">\r\n            <span style=\"color:dodgerblue\">\r\n              <i class=\"fa fa-paper-plane\"></i> </span>&nbsp;&nbsp;&nbsp;<span [innerHTML]=\"\r\n                'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.VIEW-TESTED-EMAILS'\r\n                  | translate\r\n              \"></span>\r\n          </button>\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\" col-xs-6\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus !== 'started'\"\r\n        style=\"margin-right: 40px\">\r\n        <button class=\"btn\" type=\"button\" [disabled]=\"true\">\r\n          <span style=\"color:gray\"> <i class=\"fa fa-paper-plane\"></i> </span>&nbsp;&nbsp;&nbsp;<span [innerHTML]=\"\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.INNER-HTML.VIEW-EMAILS'\r\n                | translate\r\n            \"></span>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-5\" *ngIf=\"\r\n          processingService.procQualityAssuranceInfo.testEmailServerStatus === 'starting' ||\r\n          processingService.procQualityAssuranceInfo.testEmailServerStatus === 'stopping'\r\n        \">\r\n        <button type=\"button\" class=\"btn btn-block\" [disabled]=\"true\">\r\n          <i class=\"fa fa-spinner fa-pulse\"></i>&nbsp;&nbsp;&nbsp;\r\n          <strong *ngIf=\"\r\n              processingService.procQualityAssuranceInfo.testEmailServerStatus === 'starting'\r\n            \" [innerHTML]=\"\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.STARTING' | translate\r\n            \"></strong>\r\n          <strong *ngIf=\"\r\n              processingService.procQualityAssuranceInfo.testEmailServerStatus === 'stopping'\r\n            \" [innerHTML]=\"\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.STOPPING' | translate\r\n            \"></strong>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\" col-xs-5\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus === 'stopped'\">\r\n        <button id=\"startTestEmailServer\" type=\"button\" class=\"btn btn-block\"\r\n          (click)=\"doStartStopTestEmailServer('start')\" [disabled]=\"processingService.procQualityAssuranceInfo.mode === 'ta'\">\r\n          <span style=\"color:gray\"> <i class=\"fa fa-circle\"></i> </span>&nbsp;&nbsp;&nbsp;\r\n          <strong>Start\r\n            <em>{{\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-EMAIL-SERVER'\r\n                | translate\r\n            }}</em>\r\n          </strong>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-5\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus === 'started'\">\r\n        <button id=\"stopTestEmailServer\" type=\"button\" class=\"btn btn-block\"\r\n          (click)=\"doStartStopTestEmailServer('shut')\">\r\n          <span style=\"color:dodgerblue\"> <i class=\"fa fa-circle\"></i> </span>&nbsp;&nbsp;&nbsp;\r\n          <strong>Stop\r\n            <em>{{\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-EMAIL-SERVER'\r\n                | translate\r\n            }}</em>\r\n          </strong>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\" [innerHTML]=\"\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.INNER-HTML.TEST-SERVER-CATCH'\r\n            | translate\r\n        \"></div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabReportGenerationMailMergeTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-reporting-mailmerge-classicreports.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template\r\n  #tabReportGenerationMailMergeTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\" style=\"margin-bottom: 3px\">\r\n      <div class=\"col-xs-1\">\r\n        {{\r\n        'AREAS.PROCESSING.TAB-REPORTING-MAILMERGE-CLASSICREPORTS.CHOOSE-REPORT'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-4\">\r\n        <ng-select\r\n          id=\"selectMailMergeClassicReport\"\r\n          [(ngModel)]=\"selectedMailMergeClassicReport\"\r\n          [groupBy]=\"groupByMailMergeHelper\"\r\n          appendTo=\"body\"\r\n        >\r\n          <ng-option\r\n            *ngFor=\"let report of this.settingsService.getMailMergeConfigurations('visible')\"\r\n            [value]=\"report\"\r\n            >{{report.templateName}}\r\n            <span *ngIf=\"report.type=='config-samples'\">(sample)</span\r\n            ><span id=\"{{report.folderName}}_{{report.dsInputType}}\" *ngIf=\"report.dsInputType=='ds.csvfile'\"\r\n              >(input CSV)</span\r\n            ></ng-option\r\n          >\r\n        </ng-select>\r\n      </div>\r\n      <div class=\"col-xs-4\" *ngIf=\"selectedMailMergeClassicReport\">\r\n        <input\r\n          id=\"mailMergeClassicReportInputFilePath\"\r\n          [(ngModel)]=\"processingService.procBurstInfo.mailMergeClassicReportInputFilePath\"\r\n          class=\"form-control\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div id=\"browseMailMergeClassicReportInputFile\" class=\"col-xs-3\" *ngIf=\"selectedMailMergeClassicReport\">\r\n        <dburst-button-native-system-dialog\r\n          value=\"{{\r\n          'COMPONENTS.BUTTON-NATIVE-SYSTEM-DIALOG.SELECT-FILE' | translate }}\"\r\n          dialogType=\"file\"\r\n          (pathsSelected)=\"onMailMergeClassicReportFileSelected($event)\"\r\n        ></dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-1\"></div>\r\n\r\n      <div class=\"col-xs-1\">\r\n        <button\r\n          id=\"btnGenerateReports\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          (click)=\"doGenerateReports()\"\r\n          [disabled]=\"!processingService.procBurstInfo.mailMergeClassicReportInputFilePath || executionStatsService.jobStats.numberOfActiveJobs > 0\"\r\n        >\r\n          <i class=\"fa fa-play\"></i>&nbsp;Burst\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n      <div class=\"col-xs-4\">\r\n        <dburst-button-native-system-dialog\r\n          value=\"{{\r\n          'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n          dialogType=\"file\"\r\n        >\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"!shellService.isJavaOk\">\r\n      <br /><br />\r\n      <span class=\"label label-warning\"\r\n        ><strong\r\n          ><em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}\r\n        </strong></span\r\n      >\r\n      <br /><br />\r\n\r\n      <strong\r\n        id=\"checkPointJavaPreRequisite\"\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-SHORT' | translate\"\r\n      ></strong>\r\n\r\n      <br /><br /><span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n      ></span>\r\n\r\n      <br /><br />\r\n\r\n      <a href=\"#\" [routerLink]=\"['/help', 'installSetupMenuSelected']\"\r\n        ><button type=\"button\" class=\"btn btn-primary\">\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' | translate }}\r\n          <em>Java</em>\r\n        </button></a\r\n      >\r\n    </div>\r\n    <div\r\n      class=\"row\"\r\n      *ngIf=\"processingService.procBurstInfo.mailMergeClassicReportInputFilePath && !executionStatsService.logStats.foundDirtyLogFiles && executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length === 0\"\r\n    >\r\n      <div class=\"col-xs-1\">\r\n        <i class=\"fa fa-flag-checkered fa-2x\"></i>\r\n      </div>\r\n\r\n      <div class=\"col-xs-11\">\r\n        <a\r\n          id=\"qaReminderLinkGenerateReports\"\r\n          href=\"#qaReminder\"\r\n          data-toggle=\"collapse\"\r\n          >{{ 'AREAS.PROCESSING.TAB-BURST.DID-YOU-RUN-QA' | translate }}\r\n          <em>{{processingService.procBurstInfo.mailMergeClassicReportInputFilePath}}</em>?</a\r\n        >\r\n        <div id=\"qaReminder\" class=\"collapse\">\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.BEFORE-EMAILING' | translate }}\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected',processingService.procBurstInfo.mailMergeClassicReportInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath, 'csv-generate-reports']\"\r\n            >Quality Assurance</a\r\n          >\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.FOR-THE-FILE' | translate }}\r\n          <em>{{processingService.procBurstInfo.mailMergeClassicReportInputFilePath}}</em>&nbsp;&nbsp;\r\n          <button\r\n            id=\"goToQa\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-sm\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected',processingService.procBurstInfo.mailMergeClassicReportInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath, 'csv-generate-reports']\"\r\n          >\r\n            {{ 'AREAS.PROCESSING.TAB-BURST.RUN-QA' | translate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      *ngIf=\"executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length > 0\"\r\n      class=\"row\"\r\n    >\r\n      <div class=\"col-xs-12\">\r\n        <ng-container [ngTemplateOutlet]=\"resumeJobs\"> </ng-container>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <dburst-log-files-viewer-separate-tabs></dburst-log-files-viewer-separate-tabs>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
      },
      {
        "name": "tabReportingDataSourceDataTablesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-reporting-datasource-datatables.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template\r\n  #tabReportingDataSourceDataTablesTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-6\">\r\n        <select\r\n          id=\"dsTypes\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.type\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          (change)=\"onAskForFeatureModalShow($event)\"\r\n        >\r\n          <option value=\"ds.csvfile\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-CSV' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"ds.tsvfile\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-TSV' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"ds.fixedwidthfile\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-FIXED-WIDTH'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.excelfile\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-EXCEL'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.gsheet\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-CLOUD-GSHEET'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.o365sheet\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-CLOUD-O365SHEET'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.database\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-DATABASE'\r\n            | translate }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div\r\n      *ngIf=\"askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.datasource.type)\"\r\n    >\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-SEPARATOR-CHAR'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"separatorChar\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.separatorchar\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER' |\r\n          translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-9\">\r\n          <select\r\n            id=\"selectHeader\"\r\n            class=\"form-control\"\r\n            (change)=\"onSelectCsvHeader()\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.header\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          >\r\n            <option id=\"optionNoHeader\" value=\"noheader\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER-NO-HEADER'\r\n              | translate }}\r\n            </option>\r\n            <option id=\"optionFirstLine\" value=\"firstline\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER-FIRST-LINE'\r\n              | translate }}\r\n            </option>\r\n            <option id=\"optionFirstLine\" value=\"multiline\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER-MULTI-LINE'\r\n              | translate }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <p></p>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.SKIP-LINES' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"skipLines\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.skiplines\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            [disabled]=\"xmlReporting?.documentburster.report.datasource.csvoptions.header != 'multiline'\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n\r\n      <div class=\"row\"\r\n      >\r\n        <div class=\"col-xs-12\">\r\n          <label id=\"lblShowMoreCsvOptions\" for=\"btnShowMoreCsvOptions\" class=\"checkboxlabel\" style=\"cursor: pointer;\"\r\n            ><span><strong><u *ngIf=\"!xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">Show More CSV Options</u><u *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\"><em>Show Less CSV Options</em></u></strong></span></label\r\n          >\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnShowMoreCsvOptions\"\r\n            style=\"visibility: hidden;\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n          \r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-QUOTATION-CHAR'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"quotationChar\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.quotationchar\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-ESCAPE-CHAR'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"escapeChar\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.escapechar\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-STRICT-QUOTATIONS'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnStrictQuotations\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.strictquotations\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-IGNORE-QUOTATIONS'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnIgnoreQuotations\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.ignorequotations\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-IGNORE-LEADING-WHITESPACE'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnIgnoreLeadingWhitespace\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.ignoreleadingwhitespace\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!--\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-6\">\r\n          <select\r\n            id=\"selectIdColumn\"\r\n            class=\"form-control\"\r\n            (change)=\"onSelectIdColumn()\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.idcolumn\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          >\r\n            <option value=\"notused\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-NOT-USED'\r\n              | translate }}\r\n            </option>\r\n            <option value=\"firstcolumn\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-FIRST-COLUMN'\r\n              | translate }}\r\n            </option>\r\n            <option value=\"lastcolumn\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-LAST-COLUMN'\r\n              | translate }}\r\n            </option>\r\n            <option value=\"letmespecify\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-LET-ME-SPECIFY'\r\n              | translate }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n\r\n        <div\r\n          class=\"col-xs-3\"\r\n          *ngIf=\"xmlReporting?.documentburster.report.datasource.csvoptions.idcolumn=='letmespecify'\"\r\n        >\r\n          <input\r\n            id=\"idColumnIndex\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.idcolumnindex\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n      -->\r\n    </div>\r\n    <div\r\n      *ngIf=\"!askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.datasource.type)\"\r\n    >\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\"></div>\r\n        <div class=\"col-xs-5\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-block\"\r\n            (click)=\"onAskForFeatureModalShow(xmlReporting?.documentburster.report.datasource.type)\"\r\n          >\r\n            Request <span class=\"badge\">New</span> Feature\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
      },
      {
        "name": "tabReportingTemplateOutputTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-reporting-template-output.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template\r\n  #tabReportingTemplateOutputTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.OUTPUT-TYPE' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <select\r\n          id=\"reportOutputType\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"xmlReporting?.documentburster.report.template.outputtype\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          (change)=\"onReportOutputTypeChanged()\"\r\n        >\r\n          <option value=\"output.none\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-NONE' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.docx\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-DOCX' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.pdf\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-PDF' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.xlsx\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-XLSX' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.html\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-HTML' |\r\n            translate }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div\r\n      *ngIf=\"askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.template.outputtype)\"\r\n    >\r\n      <div\r\n        class=\"row\"\r\n        id=\"reportTemplate\"\r\n        *ngIf=\"xmlReporting?.documentburster.report.template.outputtype != 'output.none'\"\r\n      >\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TEMPLATE-FILE' |\r\n          translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-10\">\r\n          <ng-select\r\n            id=\"selectTemplateFile\"\r\n            [(ngModel)]=\"selectedReportTemplateFile\"\r\n            (change)=\"onSelectTemplateFileChanged($event)\"\r\n            appendTo=\"body\"\r\n          >\r\n            <ng-option\r\n              *ngFor=\"let reportTemplate of this.settingsService.getReportTemplates(xmlReporting?.documentburster.report.template.outputtype, {samples: false})\"\r\n              [value]=\"reportTemplate\"\r\n              >\r\n              <span id=\"{{reportTemplate.fileName}}\">\r\n              {{reportTemplate.fileName}}\r\n              <span *ngIf=\"reportTemplate.type.includes('-sample')\"\r\n                >(sample)</span>\r\n              </span>  \r\n              </ng-option\r\n            >\r\n          </ng-select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      *ngIf=\"!askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.template.outputtype)\"\r\n    >\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\"></div>\r\n        <div class=\"col-xs-5\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-block\"\r\n            (click)=\"onAskForFeatureModalShow(xmlReporting?.documentburster.report.template.outputtype)\"\r\n          >\r\n            Request <span class=\"badge\">New</span> Feature\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
      },
      {
        "name": "tabReviewsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-reviews.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabReviewsTemplate>\r\n  <div class=\"well\">\r\n\r\n    <em>\"DocumentBurster has saved 2+ hours a day of manual report running and emailing. The task takes minutes to\r\n      complete from\r\n      start to finish for 40-80 purchase orders per day. With the added variables we can email, cc and add different\r\n      subject\r\n      text/ paragraph in email body.</em>\r\n    <br>\r\n    <br>\r\n    <em>On first use by user it was reported it took sub 16 seconds to burst and email.\"</em>\r\n    <br>\r\n    <br>\r\n    <strong id='checkPointHelpCustomerReviews'>Michael B., Finance Systems Team</strong>\r\n    <br>\r\n    <a href=\"http://www.english-heritage.org.uk\" target=\"_blank\">English Heritage, United Kingdom</a>\r\n    <br>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/testimonials.html\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">View More Customer Reviews</button>\r\n    </a>\r\n    <br>\r\n    <br>\r\n    <br>We helped\r\n    <a href=\"https://www.reportburster.com/clients.html\" target=\"_blank\">\r\n      <em>Yale University, US Chamber of Commerce, GlaxoSmithKline, English Heritage, Oxford University</em>\r\n    </a> and many other companies to automatically distribute their invoices, statements or payslips to thousands of\r\n    employees,\r\n    customers and partners.\r\n    <br>\r\n    <br>We can help your company do the same.\r\n    <br>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/clients.html\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">Who is using\r\n        <em>ReportBurster</em>\r\n      </button>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabSamplesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-samples.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabSamplesTemplate>\r\n  <div class=\"well\">\r\n    \r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-12\"\r\n        style=\"cursor: pointer; height: 530px; overflow: auto\"\r\n      >\r\n\r\n        <table id=\"samplesTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n        \r\n          <thead>\r\n            \r\n            <tr>\r\n              <th style=\"width:11%\">\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th style=\"width:12%\">\r\n                What It Does\r\n              </th>\r\n              <th style=\"width:24%\">\r\n                Input\r\n              </th>\r\n              <th>\r\n                Expected Output\r\n              </th>\r\n              <th style=\"width:3%\">\r\n                 Actions\r\n              </th>\r\n         \r\n            </tr>  \r\n      \r\n          </thead>\r\n          <tbody>\r\n            <tr\r\n              id=\"tr{{sample.id}}\"\r\n              *ngFor=\"let sample of samplesService.samples\"\r\n              (click)=\"onSampleClick(sample)\"\r\n              [ngClass]=\"{ 'info': sample.activeClicked}\"\r\n            >\r\n            <td id=\"td{{sample.id}}\">{{sample.name}}<br><button id=\"btnSamplesLearnMode{{sample.id}}\" type=\"button\" class=\"btn btn-xs btn-primary\" (click)=\"doShowSamplesLearnMoreModal(sample)\">Learn More</button>\r\n            </td>\r\n            <td>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'merge'\">\r\n                  <i class=\"fa fa-plus-square-o\">&nbsp;</i>\r\n                  <em>1. Merge</em>                \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'split'\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>1. Split </em>\r\n                  <i class=\"fa fa-files-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'mail-merge-emails'\">\r\n                  <i class=\"fa fa-list-ol\">&nbsp;</i>\r\n                  <em>1. Mail Merge </em>\r\n                  <i class=\"fa fa-envelope-open-o\">&nbsp;</i>\r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'mail-merge-documents'\">\r\n                  <i class=\"fa fa-list-ol\">&nbsp;</i>\r\n                  <em>1. Mail Merge </em>\r\n                  <i class=\"fa fa-file-word-o\">&nbsp;</i>\r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'split' && sample.step2 == 'split'\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>2. Split once more </em>                \r\n                  <i class=\"fa fa-files-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 != 'split' && sample.step2 == 'split'\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>2. Split </em>                \r\n                  <i class=\"fa fa-files-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'generate'\">\r\n                   <i class=\"fa fa-list-ol\">&nbsp;</i> \r\n                   <em>1. Generate </em>\r\n                   <i class=\"fa fa-file-word-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step2 == 'email'\">\r\n                  <i class=\"fa fa-envelope-open-o\">&nbsp;</i>\r\n                 <em>2. Email</em> \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step3 == 'email'\">\r\n                  <i class=\"fa fa-envelope-open-o\">&nbsp;</i>\r\n                 <em>3. Email</em> \r\n                </span>\r\n            </td>\r\n            <td [innerHTML]=\"samplesService.getInputHtml(sample.id)\"></td>\r\n            <td [innerHTML]=\"samplesService.getOutputHtml(sample.id)\"></td>\r\n            <td>\r\n            \r\n              <button type=\"button\" id=\"btnSampleTryIt{{sample.id}}\" class=\"btn btn-xs btn-primary\" (click)=\"doSampleTryIt(sample)\">&nbsp;&nbsp;&nbsp;&nbsp;Try it&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>\r\n              <br><br>\r\n              <!--\r\n              <div class=\"btn-group dropup\"> \r\n                  <button type=\"button\" *ngIf=\"sample.visibility == 'visible'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Visible&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                  <button type=\"button\" *ngIf=\"sample.visibility == 'hidden'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;<em>Hidden</em>&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                  <li *ngIf=\"sample.visibility == 'visible'\" (click)=\"doToggleSampleVisibility('hidden')\">Hide <em>{{sample.name}}</em></li>\r\n                  <li *ngIf=\"sample.visibility == 'hidden'\" (click)=\"doToggleSampleVisibility('visible')\">Show <em>{{sample.name}}</em></li>\r\n                 </ul>\r\n                  </div>\r\n                -->\r\n            </td>\r\n            \r\n            </tr>\r\n          <tbody>\r\n          \r\n        </table>\r\n      \r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p><br></p><p></p>\r\n    <!-- \r\n    <div class=\"row\">\r\n    \r\n      <div class=\"col-xs-3\">\r\n      <button\r\n      id=\"btnHideAllSamples\"\r\n      type=\"button\"\r\n      class=\"btn btn-default\"\r\n      (click)=\"doHideAllSamples()\"\r\n      [disabled]=\"samplesService.countVisibleSamples <= 0\"\r\n        \r\n      >\r\n      <i class=\"fa fa-eye-slash\"></i>&nbsp;Hide All Samples\r\n    </button>\r\n    \r\n      </div>\r\n    \r\n      </div>\r\n      -->\r\n     \r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabServicesTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-services.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabServicesTemplate>\r\n  <div class=\"well\">\r\n    <span [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-SERVICES' | translate\"></span>\r\n    <br>\r\n    <br>\r\n    <ol>\r\n      <li [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-SERVICE1' | translate\"></li>\r\n      <br>\r\n      <li [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-SERVICE2' | translate\"></li>\r\n    </ol>\r\n    <br>\r\n    <strong>{{'AREAS.HELP.TAB-SERVICES.SKRF-MANAGED-SERVICES' | translate }}</strong>\r\n    <br>\r\n    <br>\r\n    <ol>\r\n      <li>\r\n        {{'AREAS.HELP.TAB-SERVICES.SKRF-MANAGED-SERVICE1' | translate }}\r\n      </li>\r\n      <br>\r\n      <li>\r\n        {{'AREAS.HELP.TAB-SERVICES.SKRF-MANAGED-SERVICE2' | translate }}\r\n      </li>\r\n      <br>\r\n      <li [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-MANAGED-SERVICE3' | translate\"></li>\r\n    </ol>\r\n    <br>\r\n    <strong>{{'AREAS.HELP.TAB-SERVICES.REQUEST-QUOTE' | translate }}</strong>\r\n    <br>\r\n    <a href=\"mailto:sales@reportburster.com\" target=\"_blank\">\r\n      <h3 id='checkPointHelpServices'>sales@reportburster.com</h3>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>`"
      },
      {
        "name": "tabSMSMessageTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-sms-message.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabSMSMessageTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.FROM-NUMBER' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromTelephoneNumber\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.fromtelephonenumber\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromTelephoneNumberVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromTelephoneNumber',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.TO-NUMBER' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"toTelephoneNumber\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.totelephonenumber\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnToTelephoneNumberVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('toTelephoneNumber',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.TEXT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <textarea\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.text\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          rows=\"5\"\r\n          id=\"smsText\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmsTextVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smsText',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabSMSTwilioTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-sms-twilio.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabSMSTwilioTemplate>\r\n\r\n  <p-dialog header=\"{{'AREAS.CONFIGURATION.TAB-SMS-TWILIO.SEND-TEST-SMS-MESSAGE' | translate}}\"\r\n    [(visible)]=\"isModalSMSVisible\" [baseZIndex]=\"1000\" [modal]=\"true\">\r\n    <p-header>\r\n    </p-header>\r\n\r\n    <div class=\"modal-body\" id=\"modal-body\" style=\"margin: 10px;\">\r\n\r\n      <div class=\"row\">\r\n\r\n\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.FROM-NUMBER' | translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-8\">\r\n          <input type=\"text\" id=\"fromNumber\" class=\"form-control\" (ngModel)=\"modalSMSInfo.fromNumber\" size=\"25\"\r\n            autofocus>\r\n        </div>\r\n\r\n      </div>\r\n      <br>\r\n\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.TO-NUMBER' | translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-8\">\r\n          <input type=\"text\" id=\"toNumber\" class=\"form-control\" (ngModel)=\"modalSMSInfo.toNumber\" size=\"25\">\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n    <p-footer>\r\n\r\n      <button id='btnOKConfirmation' class=\"btn btn-primary\" type=\"button\" (click)=\"onSendTestSMS()\"\r\n        [disabled]=\"!modalSMSInfo.fromNumber || !modalSMSInfo.toNumber\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-TWILIO.SEND-TEST-SMS' | translate }}</button>\r\n      <button class=\"btn btn-flat btn-default dburst-button-question-decline\" type=\"button\"\r\n        (click)=\"onCloseSMSModal()\">{{ 'BUTTONS.CANCEL' | translate }}</button>\r\n\r\n    </p-footer>\r\n\r\n  </p-dialog>\r\n\r\n\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">\r\n        <a href=\"https://support.twilio.com/hc/en-us/articles/223136027-Auth-Tokens-and-how-to-change-them\"\r\n          target=\"_blank\">Twilio\r\n          Help</a>\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <a href=\"https://support.twilio.com/hc/en-us/articles/223136027-Auth-Tokens-and-how-to-change-them\"\r\n          target=\"_blank\">What\r\n          is the Auth Token?</a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-SMS-TWILIO.ACCOUNT-SID' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"accountSid\" [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.twilio.accountsid\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnAccountSidVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('accountSid',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-SMS-TWILIO.AUTH-TOKEN' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"authToken\" [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.twilio.authtoken\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnAuthTokenVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('authToken',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-SMS-TWILIO.TEST-CONNECTION' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <button id=\"btnSendTestSMS\" type=\"button\" class=\"btn btn-primary btn-block\" (click)=\"onShowSendTestSMSModal()\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.smssettings.twilio.authtoken || !xmlSettings?.documentburster.settings.smssettings.twilio.accountsid\">\r\n          <i class=\"fa fa-paper-plane\"></i>&nbsp;&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-SMS-TWILIO.SEND-TEST-SMS' | translate }}</button>\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/_tabs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<tabset>\r\n\r\n  <tab *ngFor=\"let tab of visibleTabs\" [id]=\"tab.id\">\r\n    <ng-template tabHeading><span [innerHTML]=\"tab.heading | translate\"></span></ng-template>\r\n    <ng-container [ngTemplateOutlet]=\"this[tab.ngTemplateOutlet]\">\r\n    </ng-container>\r\n\r\n  </tab>\r\n\r\n</tabset>`"
      },
      {
        "name": "tabsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration-templates/templates/_tabs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<tabset>\r\n  <tab\r\n    heading=\"{{ 'AREAS.CONFIGURATION-TEMPLATES.TABS.CONFIGURATION-TEMPLATES' | translate }}\"\r\n  >\r\n    <ng-container *ngTemplateOutlet=\"tabConfTemplates\"> </ng-container>\r\n  </tab>\r\n\r\n  <tab *ngIf=\"false\" heading=\"Samples\">\r\n    <ng-container *ngTemplateOutlet=\"tabConfTemplatesSamples\"> </ng-container>\r\n  </tab>\r\n\r\n  <tab heading=\"{{ 'SHARED-TABS.LICENSE' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabLicenseTemplate\"> </ng-container>\r\n  </tab>\r\n</tabset>`"
      },
      {
        "name": "tabsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_ext-connections/templates/_tabs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<tabset>\r\n  <tab heading=\"{{ 'AREAS.EXTERNAL-CONNECTIONS.TABS.EXT-CONNECTIONS' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabExternalConnectionsTemplate\">\r\n    </ng-container>\r\n  </tab>\r\n  \r\n  <tab heading=\"{{ 'SHARED-TABS.LOGGING-TRACING' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabLogsTemplate\">\r\n    </ng-container>\r\n\r\n  </tab>\r\n\r\n  <tab heading=\"{{ 'SHARED-TABS.LICENSE' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabLicenseTemplate\">\r\n    </ng-container>\r\n\r\n  </tab>\r\n</tabset>`"
      },
      {
        "name": "tabsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/_tabs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<tabset>\r\n  <tab\r\n    *ngFor=\"let tab of visibleTabs\"\r\n    [id]=\"tab.id\"\r\n    [heading]=\"tab.heading | translate\"\r\n  >\r\n    <ng-container [ngTemplateOutlet]=\"this[tab.ngTemplateOutlet]\">\r\n    </ng-container>\r\n  </tab> </tabset\r\n>`"
      },
      {
        "name": "tabsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/_tabs.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`\r\n<tabset>\r\n\r\n  <tab *ngFor=\"let tab of visibleTabs\" [id]=\"tab.id\" [heading]=\"tab.heading | translate\">\r\n\r\n    <ng-container [ngTemplateOutlet]=\"this[tab.ngTemplateOutlet]\">\r\n    </ng-container>\r\n  </tab>\r\n\r\n</tabset>\r\n`"
      },
      {
        "name": "tabSupportTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-support.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabSupportTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong><em>ReportBurster</em> {{'AREAS.HELP.TAB-SUPPORT.DB-SUPPORT' | translate }}</strong>\r\n    <br>\r\n    <a href=\"mailto:support@reportburster.com\" target=\"_blank\">\r\n      <h3>support@reportburster.com</h3>\r\n    </a>\r\n\r\n    <br>\r\n    <strong style=\"text-decoration: underline;\">\r\n      {{'AREAS.HELP.TAB-SUPPORT.SEND-LOG-FILES-SHORT' | translate }}\r\n    </strong>\r\n\r\n    <br>\r\n    <br><span [innerHTML]=\"'AREAS.HELP.TAB-SUPPORT.INNER-HTML.SEND-LOG-FILES-LONG' | translate\"></span>\r\n    <br>\r\n    <br>\r\n    <dburst-button-native-system-dialog value=\"{{\r\n      'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.VIEW-LOG-FILES' | translate }}\" dialogType=\"file\">\r\n    </dburst-button-native-system-dialog>\r\n    <br>\r\n    <h3>{{'AREAS.HELP.TAB-SUPPORT.HOW-IT-WORKS' | translate }}</h3>\r\n    <br>\r\n    <em>\"I also had a great help from the Support Team of DocumentBurster, who stayed with me the entire installation\r\n      and\r\n      Test\r\n      process.\"\r\n    </em>\r\n    <br>\r\n    <br>\r\n    <strong>Marylou G. - Chief Financial Officer</strong>\r\n    <br>\r\n    <a id='checkPointHelpSupport' href=\"http://parktrent.com.au\" target=\"_blank\">ParkTrent Properties Group,\r\n      Australia</a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabSystemDiagnosticsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-system-diagnostics.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template\r\n  #tabSystemDiagnosticsTemplate\r\n>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll\">\r\n    <dburst-system-diagnostics></dburst-system-diagnostics>\r\n  </div> </ng-template\r\n>`"
      },
      {
        "name": "tabTerminalTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-terminal.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabTerminalTemplate>\r\n\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n    <dburst-terminal></dburst-terminal>\r\n    <div id='bashServiceLog' class=\"panel-body\"\r\n      style=\"color:grey; height:370px; overflow-y: scroll; overflow-x: auto; -webkit-user-select: all; user-select: all;\">\r\n      <dburst-log-file-viewer logFileName='bash.service.log'></dburst-log-file-viewer>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</ng-template>`"
      },
      {
        "name": "tabUpdateTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_help/templates/tab-update.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabUpdateTemplate>\r\n  <dburst-update></dburst-update>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabUploadCloudTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-upload-cloud.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabUploadCloudTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"cloudUploadCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.cloudcommand\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnCloudUploadVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('cloudUploadCommand',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        <em\r\n          >{{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.SYNOPSIS' | translate }}</em\r\n        >\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em\r\n          >[{{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.OPTIONS' | translate\r\n          }}][URL...]</em\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.HINT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.FULL_CURL_POWER' | translate }}\r\n        -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <img src=\"assets/images/remote-backup-services.png\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabUploadFileShareTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-upload-file-share.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabUploadFileShareTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"fileShareCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.filesharecommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnFileShareVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fileShareCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.SYNOPSIS' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ file://hostname/path/to/the%20folder</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.FULL-CURL-POWER' | translate }}Full cURL power is available here -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.INNER-HTML.USE-CASES'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabUploadFTPSTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-upload-ftps.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabUploadFTPSTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"ftpsCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.ftpscommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnFtpsVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('ftpsCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.SYNOPSIS' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-ssl -T $extracted_file_path$ -u user:password ftp://ftp.example.com/reports/</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabUploadFTPTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-upload-ftp.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabUploadFTPTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"ftpCommand\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster.settings.uploadsettings.ftpcommand\r\n          \" (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnFtpVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('ftpCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.SYNOPSIS' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.OPTIONS' | translate\r\n          }}][URL...]</em>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.EXAMPLE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--ftp-create-dirs -T $extracted_file_path$ -u user:password\r\n          ftp://ftp.example.com/reports/</em>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.HINT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabUploadHTTPTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-upload-http.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabUploadHTTPTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"httpCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.httpcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnHttpVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('httpCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.SYNOPSIS' | translate }}</em>\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ http://www.example.com/ </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabUploadSFTPTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-upload-sftp.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabUploadSFTPTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"sftpCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.sftpcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnSftpVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('sftpCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.SYNOPSIS' | translate }}</em>\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ -u user:password sftp://ftp.example.com/reports/</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabWebUploadDocumentBursterWebTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-web-upload-documentburster-web.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWebUploadDocumentBursterWebTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://portal.reportburster.com\" target=\"_blank\">\r\n          <i class=\"fa fa-cc-visa fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-15px;top:-10px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.ACCEPT-FASTER-SAFER' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"documentBursterWebCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.documentbursterwebcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnDocumentBursterWebVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('documentBursterWebCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">\r\n          <span>https://portal.reportburster.com/use-cases/ </span>\r\n        </a>\r\n        <br>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer Payment\r\n          Portal</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster = Invoices2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster = Bills2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster = Payslips2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster = Contracts2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People</a>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-3\">\r\n        <a href=\"https://portal.reportburster.com\" target=\"_blank\">\r\n          <button class=\"btn btn-primary\" type=\"button\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.LIVE-DEMO'\r\n            | translate }}</button>\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabWebUploadDrupalTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-web-upload-drupal.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWebUploadDrupalTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://www.drupal.org\" target=\"_blank\">\r\n          <i class=\"fa fa-drupal fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.INNER-HTML.USE-DOCUMENTBURSTER-DRUPAL' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"drupalCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.drupalcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnDrupalVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('drupalCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--user \"documentburster:password\" -X POST --data \"code=1234 &customer=Northridge Pharmaceuticals\r\n          &product=Nebulizer\r\n          Machine&amount=200.00 &date=December 28th, 2015&status=Unpaid\"\r\n          https://portal.reportburster.com/wp-json/pods/invoices\r\n        </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/\r\n        </a>\r\n        <p></p>\r\n        <p></p> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster =\r\n          Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabWebUploadJoomlaTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-web-upload-joomla.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWebUploadJoomlaTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://www.joomla.org\" target=\"_blank\">\r\n          <i class=\"fa fa-joomla fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.INNER-HTML.USE-DOCUMENTBURSTER-JOOMLA' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"joomlaCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.joomlacommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnJoomlaVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('joomlaCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--user \"documentburster:password\" -X POST --data \"code=1234 &customer=Northridge Pharmaceuticals\r\n          &product=Nebulizer\r\n          Machine&amount=200.00 &date=December 28th, 2015&status=Unpaid\"\r\n          https://portal.reportburster.com/wp-json/pods/invoices\r\n        </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/\r\n        </a>\r\n        <p></p>\r\n        <p></p>\r\n        &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster =\r\n          Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabWebUploadOtherWebPlatformsTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-web-upload-other-web-platforms.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWebUploadOtherWebPlatformsTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://en.wikipedia.org/wiki/Content_management_system\" target=\"_blank\">\r\n          <i class=\"fa fa-skyatlas fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-10px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.INNER-HTML.USE-DOCUMENTBURSTER-OTHER' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"otherWebPlatformsCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.otherwebcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnOtherWebPlatformsVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('otherWebPlatformsCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ http://www.example.com/ </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        Publish, archive or file reports to web platforms like\r\n        <em>IBM WebSphere Portal</em>,\r\n        <em>Oracle Portal</em>,\r\n        <em>SAP NetWeaver</em>,\r\n        <em>Tibco PortalBuilder</em>,\r\n        <em>Samsung ACUBE Portal</em> or to any of the major open source portal applications such as\r\n        <em>Liferay Portal</em>,\r\n        <em>Hippo portal</em>,\r\n        <em>JBoss Enterprise Portal</em>,\r\n        <em>eXo</em>,\r\n        <em>Apache Portal</em>, etc.\r\n        <br>\r\n        <br> Publish, archive or file reports to document management systems such as\r\n        <em>EMC Documentum</em>,\r\n        <em>OpenText ECM</em>,\r\n        <em>Alfresco</em>, etc.\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabWebUploadSharePointTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-web-upload-sharepoint.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWebUploadSharePointTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"http://www.sharepoint.com\" target=\"_blank\">\r\n          <i class=\"fa fa-windows fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5\r\n          [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.INNER-HTML.USE-DOCUMENTBURSTER-SHAREPOINT' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\"> {{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"sharePointCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.mssharepointcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnSharePointVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('sharePointCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--ntlm -T $extracted_file_path$ -u user:password https://sharepointserver.com/reports/ </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/ </a>\r\n        <p></p>\r\n        <p></p>\r\n        &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster = Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People</a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabWebUploadWordPressTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration/templates/tab-web-upload-wordpress.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWebUploadWordPressTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://wordpress.com/\" target=\"_blank\">\r\n          <i class=\"fa fa-wordpress fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5\r\n          [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.INNER-HTML.USE-DOCUMENTBURSTER-WORDPRESS' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"wordPressCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.wordpresscommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnWordPressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('wordPressCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--user \"documentburster:password\" -X POST --data \"code=1234 &customer=Northridge Pharmaceuticals\r\n          &product=Nebulizer\r\n          Machine&amount=200.00 &date=December 28th, 2015&status=Unpaid\"\r\n          https://portal.reportburster.com/wp-json/pods/invoices\r\n        </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/\r\n        </a>\r\n        <p></p>\r\n        <p></p>\r\n        &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster =\r\n          Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People </a>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
      },
      {
        "name": "tabWhatsNewTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_configuration-templates/templates/tab-whats-new.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWhatsNewTemplate>\r\n  <dburst-whats-new></dburst-whats-new>\r\n</ng-template>`"
      },
      {
        "name": "tabWhatsNewTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_ext-connections/templates/tab-whats-new.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWhatsNewTemplate>\r\n  <dburst-whats-new></dburst-whats-new>\r\n</ng-template>`"
      },
      {
        "name": "tabWhatsNewTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/_processing/templates/tab-whats-new.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<ng-template #tabWhatsNewTemplate>\r\n  <dburst-whats-new></dburst-whats-new>\r\n</ng-template>`"
      },
      {
        "name": "terminalTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/install-setup-upgrade/terminal/terminal.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`\r\n<!-- <ng-template #terminalTemplate> -->\r\n<p-sidebar\r\n  [(visible)]=\"availableCommandsVisible\"\r\n  position=\"right\"\r\n  [closeOnEscape]\r\n  [style]=\"{width:'30em'}\"\r\n>\r\n  <br /><br /><br /><br /><br />\r\n  <strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.MAIN-COMMANDS' |\r\n    translate }}</strong\r\n  >\r\n  <br /><br />\r\n  <ol>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.FIND-JAVA-VERSION' | translate\"\r\n      ></span\r\n      >: <code>java --version</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.FIND-CHOCOLATEY-VERSION' | translate\"\r\n      ></span\r\n      >: <code>choco --version</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.INSTALL-CHOCOLATEY' | translate\"\r\n      ></span\r\n      >: <code>install chocolatey</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.UNINSTALL-CHOCOLATEY' | translate\"\r\n      ></span\r\n      >: <code>uninstall chocolatey</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.INSTALL-JAVA' | translate\"\r\n      ></span\r\n      >: <code>choco install openjdk --yes</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.UNINSTALL-JAVA' | translate\"\r\n      ></span\r\n      >: <code>choco uninstall openjdk --yes</code>\r\n    </li>\r\n  </ol>\r\n  <br />\r\n  <strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.OTHER-COMMANDS' |\r\n    translate }}</strong\r\n  >\r\n  <br /><br />\r\n  <ol>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.INSTALL-JAVA8' | translate\"\r\n      ></span\r\n      >: <code>choco install jre8 -PackageParameters \"/exclude:64\" --yes</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.UNINSTALL-JAVA8' | translate\"\r\n      ></span\r\n      >: <code>choco uninstall jre8 --yes</code>\r\n    </li>\r\n  </ol>\r\n</p-sidebar>\r\n\r\n<p-panel #pnlTerminal header=\"{{headerLevel}}\" (keydown)=\"honourReadOnly()\">\r\n  <p-terminal id=\"p-terminal\" prompt=\"documentburster> \"></p-terminal>\r\n</p-panel>\r\n\r\n<button\r\n  id=\"btnToggleReadOnly\"\r\n  type=\"button\"\r\n  [ngClass]=\"{'btn': true, 'btn-md': true, 'btn-primary': !readOnly,'btn-default': readOnly}\"\r\n  (click)=\"toggleReadOnly()\"\r\n>\r\n  <i class=\"fa fa-keyboard-o\"></i>&nbsp;<em\r\n    ><span *ngIf=\"readOnly\"\r\n      >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.LET-ME' | translate\r\n      }}</span\r\n    >\r\n    <span *ngIf=\"!readOnly\"\r\n      >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.IM-DONE' | translate\r\n      }}</span\r\n    ></em\r\n  >\r\n</button>\r\n\r\n<span *ngIf=\"readOnly\"\r\n  >&nbsp;&nbsp;(<strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.I-KNOW' | translate\r\n    }}</strong\r\n  >)</span\r\n>\r\n<button\r\n  type=\"button\"\r\n  class=\"btn btn-link\"\r\n  *ngIf=\"!readOnly\"\r\n  (click)=\"availableCommandsVisible = true\"\r\n>\r\n  {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.VIEW-AVAILABLE-COMMANDS' |\r\n  translate }}\r\n</button>\r\n\r\n<!--  </ng-template>-->\r\n`"
      },
      {
        "name": "updateTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/install-setup-upgrade/update/update.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<div *ngIf=\"succint\">\r\n    <!--\r\n  <div id=\"updateNowSuccint\" *ngIf=\"licenseService?.isNewerVersionAvailable\">\r\n    <u\r\n      ><em>{{ settingsService?.product }}</em\r\n      >&nbsp;{{ licenseService?.latestVersion }}</u\r\n    >\r\n    {{\r\n      \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.IS-AVAILABLE\"\r\n        | translate\r\n    }}!&nbsp;\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-primary btn-xs\"\r\n      (click)=\"handleUpdateNow()\"\r\n      [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n    >\r\n      {{\r\n        \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.UPDATE-NOW\"\r\n          | translate\r\n      }}</button\r\n    >&nbsp;<span\r\n      *ngIf=\"executionStatsService?.logStats.updateErrMessage\"\r\n      class=\"label label-danger\"\r\n      >{{ \"AREAS.STATUS-BAR.UPDATE-DOWNLOAD-ERROR\" | translate }}</span\r\n    >\r\n  </div>-->\r\n  </div>\r\n  <div *ngIf=\"!succint\">\r\n    <div *ngIf=\"!licenseService?.isNewerVersionAvailable\">\r\n      <h4>\r\n        <span class=\"label label-default\"\r\n          >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.NOTHING-UPDATE\"\r\n          | translate }}</span\r\n        >\r\n        ({{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.LATEST-VERSION\" |\r\n        translate }})\r\n      </h4>\r\n    </div>\r\n    <!--\r\n    <div *ngIf=\"licenseService?.isNewerVersionAvailable\">\r\n      <br />\r\n      <strong\r\n        >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.UPDATED-VERSION\"\r\n        | translate }}\r\n        <em>{{ settingsService?.product }}</em>\r\n        {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.IS-AVAILABLE\" |\r\n        translate }}.</strong\r\n      >\r\n      <br />\r\n      <br />\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.YOU-CAN\" | translate\r\n      }}\r\n      <u\r\n        ><em>{{ settingsService?.product }}</em>&nbsp;{{\r\n        licenseService?.latestVersion }}</u\r\n      >\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.AUTOMATICALLY\" |\r\n      translate }}.\r\n      <br />\r\n      <br />\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"handleUpdateNow()\"\r\n        [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n      >\r\n        {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.UPDATE-NOW\" |\r\n        translate }}</button\r\n      >&nbsp;<span\r\n        *ngIf=\"executionStatsService?.logStats.updateErrMessage\"\r\n        class=\"label label-danger\"\r\n        >{{ \"AREAS.STATUS-BAR.UPDATE-DOWNLOAD-ERROR\" | translate }}</span\r\n      >\r\n      <br />\r\n      <br />\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WAIT1\" | translate\r\n      }}\r\n      <em>{{ settingsService?.product }}</em>\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WAIT2\" | translate\r\n      }},\r\n      <em>{{ settingsService?.product }}</em>\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WAIT3\" | translate\r\n      }}.\r\n      <br /><br />\r\n      <dburst-when-updating></dburst-when-updating>\r\n    </div> -->\r\n    <div class=\"row\" *ngIf=\"!licenseService?.isNewerVersionAvailable\">\r\n      <hr />\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnLetMeUpdateManually\"\r\n          [(ngModel)]=\"letMeUpdateManually\"\r\n        />\r\n        <label for=\"btnLetMeUpdateManually\" class=\"checkboxlabel\"\r\n          >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.LET-ME1\" |\r\n          translate }}\r\n          <em>{{ settingsService?.product }}</em>\r\n          {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.LET-ME2\" |\r\n          translate }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div *ngIf=\"letMeUpdateManually\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"oldDbInstallationFolder\"\r\n            [(ngModel)]=\"letMeUpdateSourceDirectoryPath\"\r\n            class=\"form-control\"\r\n            autofocus\r\n            required\r\n          /><em\r\n            >(*) {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.SELECT\" |\r\n            translate }} DocumentBurster.exe</em\r\n          >\r\n        </div>\r\n\r\n        <div class=\"col-xs-3\">\r\n          <dburst-button-native-system-dialog\r\n            value=\"Select\"\r\n            dialogType=\"folder\"\r\n            (pathsSelected)=\"onExistingInstallationFolderSelected($event)\"\r\n          ></dburst-button-native-system-dialog>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div class=\"row\" *ngIf=\"letMeUpdateSourceDirectoryPath\">\r\n        <div\r\n          class=\"col-xs-12\"\r\n          *ngIf=\"updateInfo?.errorMsg\"\r\n          style=\"overflow-x: scroll\"\r\n        >\r\n          <span id=\"errorMsg\" class=\"label label-warning\" style=\"word-wrap: break-word\"\r\n            >{{ updateInfo?.errorMsg }}</span\r\n          >\r\n        </div>\r\n        <div\r\n          class=\"col-xs-9\"\r\n          *ngIf=\"!updateInfo?.errorMsg\"\r\n          style=\"height: 350px; overflow-y: scroll; overflow-x: auto\"\r\n        >\r\n          <dburst-when-updating [updateInfo]=\"updateInfo\"></dburst-when-updating\r\n          ><br />\r\n          <strong\r\n            >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING1\" |\r\n            translate }} {{ updateInfo?.updateSourceDirectoryPath }}\r\n            <span *ngIf=\"updateInfo?.updateSourceVersion\"\r\n              >(v{{ updateInfo?.updateSourceVersion }})</span\r\n            >\r\n            {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING2\" |\r\n            translate }} {{ homeDirectoryPath }} (v{{ settingsService?.version\r\n            }})</strong\r\n          >\r\n          <br /><br />\r\n          <strong\r\n            >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING3\" |\r\n            translate }}</strong\r\n          ><br /><br />\r\n          <ol>\r\n            <li *ngFor=\"let configFile of updateInfo?.migrateConfigFiles\">\r\n              {{ configFile[0] }} - {{ configFile[1] }}\r\n            </li>\r\n          </ol>\r\n          <br />\r\n          <strong *ngIf=\"updateInfo?.migrateScriptFiles.length == 0\"\r\n            ><u\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING4\"\r\n              | translate }}</u\r\n            ></strong\r\n          >\r\n          <div *ngIf=\"updateInfo?.migrateScriptFiles.length > 0\">\r\n            <strong\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING5\"\r\n              | translate }}</strong\r\n            ><br /><br />\r\n            <ol>\r\n              <li *ngFor=\"let scriptFile of updateInfo?.migrateScriptFiles\">\r\n                {{ scriptFile[0] }} - {{ scriptFile[1] }}\r\n              </li>\r\n            </ol>\r\n          </div>\r\n          <br />\r\n          <strong *ngIf=\"updateInfo?.templatesFolders.length == 0\"\r\n            ><u\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING6\"\r\n              | translate }}</u\r\n            ></strong\r\n          >\r\n          <div *ngIf=\"updateInfo?.templatesFolders.length > 0\">\r\n            <strong\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING7\"\r\n              | translate }}</strong\r\n            ><br /><br />\r\n            <ol>\r\n              <li *ngFor=\"let templatesFolder of updateInfo?.templatesFolders\">\r\n                {{ templatesFolder[0] }} - {{ templatesFolder[1] }}\r\n              </li>\r\n            </ol>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xs-9\" *ngIf=\"!updateInfo?.errorMsg && !letMeUpdateSourceDirectoryPath.includes('playwright/')\">\r\n          <br />\r\n          <button\r\n            id=\"btnMigrate\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"handleMigrateCopyAboveFiles()\"\r\n            [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n          >\r\n            <i class=\"fa fa-arrow-up\"></i>&nbsp;{{\r\n            \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING13\" |\r\n            translate }}\r\n          </button>\r\n        </div>\r\n        <div class=\"col-xs-9\" *ngIf=\"letMeUpdateSourceDirectoryPath.includes('playwright/')\">\r\n        <br />\r\n        <button\r\n          id=\"btnE2EFillInfo\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          (click)=\"onExistingInstallationFolderSelected('playwright/')\"\r\n        >\r\n          <i class=\"fa fa-arrow-up\"></i>&nbsp;Fill Info\r\n        </button>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  </div> `"
      },
      {
        "name": "whenUpdatingTemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/areas/install-setup-upgrade/update/when-updating.template.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "`<div class=\"row\">\r\n  <div class=\"col-xs-9\">\r\n    <h5>\r\n      <strong\r\n        >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WHEN-UPDATING\" |\r\n        translate }}</strong\r\n      >\r\n    </h5>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyLicensingInformation\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copylicensinginformation\"\r\n    />\r\n    <label for=\"btnCopyLicensingInformation\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING8\" |\r\n      translate }}<span\r\n        *ngIf=\"ctx != 'updatenow' && updateInfo.updateOptions.copylicensinginformation\"\r\n        >&nbsp;(<strong\r\n          >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.SURE\" |\r\n          translate }}</strong\r\n        >)</span\r\n      >\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyOutputFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copyoutputfiles\"\r\n    />\r\n    <label for=\"btnCopyOutputFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING9\" |\r\n      translate }}\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyLogFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copylogfiles\"\r\n    />\r\n    <label for=\"btnCopyLogFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING10\" |\r\n      translate }}\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyQuarantineFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copyquarantinefiles\"\r\n    />\r\n    <label for=\"btnCopyQuarantineFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING11\" |\r\n      translate }}\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyBackupFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copybackupfiles\"\r\n    />\r\n    <label for=\"btnCopyBackupFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING12\" |\r\n      translate }}\r\n    </label>\r\n  </div>\r\n</div>\r\n`"
      }
    ],
    "functions": [
      {
        "name": "HttpLoaderFactory",
        "file": "src/stories/_utils/setup.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [
      {
        "name": "BlogPost",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/app/areas/install-setup-upgrade/whats-new/whats-new.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      },
      {
        "name": "EmailProviderSettings",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/app/components/button-well-known/button-well-known.component.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "kind": 187
      }
    ],
    "enumerations": [
      {
        "name": "RequestMethod",
        "childs": [
          {
            "name": "get",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "GET"
          },
          {
            "name": "head",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "HEAD"
          },
          {
            "name": "post",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "POST"
          },
          {
            "name": "put",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "PUT"
          },
          {
            "name": "delete",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "DELETE"
          },
          {
            "name": "options",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "OPTIONS"
          },
          {
            "name": "patch",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "PATCH"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/providers/api.service.ts"
      }
    ],
    "groupedVariables": {
      "src/environments/environment.dev.ts": [
        {
          "name": "APP_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.dev.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: false,\r\n  environment: 'DEV',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "APP_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: true,\r\n  environment: 'PROD',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "APP_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: false,\r\n  environment: 'DEV',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
        }
      ],
      "src/environments/environment.web.prod.ts": [
        {
          "name": "APP_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.web.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: true,\r\n  environment: 'WEB-PROD',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
        }
      ],
      "src/environments/environment.web.ts": [
        {
          "name": "APP_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.web.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  production: false,\r\n  environment: 'WEB',\r\n  folders: {\r\n    config: 'config',\r\n    logs: 'logs',\r\n    quarantine: 'quarantine',\r\n    temp: 'temp',\r\n    PORTABLE_EXECUTABLE_DIR: './testground/e2e',\r\n  },\r\n  backend: {\r\n    base_url: 'http://localhost',\r\n    port: '9090',\r\n  },\r\n  SHOULD_SEND_STATS: false,\r\n}"
        }
      ],
      "src/app/components/ask-for-feature/ask-for-feature-dialog.template.ts": [
        {
          "name": "askForFeatureDialogTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/ask-for-feature/ask-for-feature-dialog.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<div\r\n    class=\"modal-header\"\r\n    style=\"top: 10px;\"\r\n  >\r\n    <h4 class=\"modal-title pull-left\" [innerHTML]=\"title\"></h4>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn-close close pull-right\"\r\n      aria-label=\"Close\"\r\n      (click)=\"confirm()\"\r\n    >\r\n      <span aria-hidden=\"true\" class=\"visually-hidden\">&times;</span>\r\n    </button>\r\n  </div>\r\n  <div class=\"modal-body\" *ngIf=\"!settingsService.isDefaultEmailConnectionConfigured()\">\r\n    <span\r\n      [innerHTML]=\"'COMPONENTS.ASK-FOR-FEATURE-DIALOG.INNER-HTML.EMAIL-NOT-CONFIGURED-PROPERLY' | translate\"\r\n    ></span>\r\n  </div>\r\n  <div class=\"modal-body\" *ngIf=\"settingsService.isDefaultEmailConnectionConfigured()\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.TO' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          id=\"emailToAddress\"\r\n          [ngModel]=\"msgTo\"\r\n          class=\"form-control\"\r\n          readonly\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.SUBJECT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <input id=\"emailSubject\" [(ngModel)]=\"msgSubject\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.MESSAGE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <textarea\r\n          class=\"form-control\"\r\n          rows=\"20\"\r\n          id=\"htmlCodeEmailMessage\"\r\n          [(ngModel)]=\"msgMessage\"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-primary dburst-button-question-confirm\"\r\n      (click)=\"confirm('send-message')\"\r\n      [innerHTML]=\"confirmLabel\"\r\n      *ngIf=\"settingsService.isDefaultEmailConnectionConfigured()\"\r\n    ></button>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-primary dburst-button-question-confirm\"\r\n      (click)=\"confirm('configure-email-properly')\"\r\n      [innerHTML]=\"'COMPONENTS.ASK-FOR-FEATURE-DIALOG.INNER-HTML.CONFIGURE-EMAIL-PROPERLY' | translate\"\r\n      *ngIf=\"!settingsService.isDefaultEmailConnectionConfigured()\"\r\n    ></button>\r\n    <button id=\"btnClose\" class=\"btn btn-flat btn-default dburst-button-question-decline\" type=\"button\" (click)=\"confirm()\">\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </div> `"
        }
      ],
      "src/stories/_utils/setup.ts": [
        {
          "name": "baseMeta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/_utils/setup.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  title: 'PLACEHOLDER_TITLE',\r\n  component: 'PLACEHOLDER_COMPONENT',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [\r\n        FormsModule,\r\n        BrowserAnimationsModule,\r\n        DialogModule,\r\n        PanelModule,\r\n        HttpClientModule,\r\n        ToastrModule.forRoot(),\r\n        TranslateModule.forRoot({\r\n          defaultLanguage: 'en',\r\n          loader: {\r\n            provide: TranslateLoader,\r\n            useFactory: HttpLoaderFactory,\r\n            deps: [HttpClient],\r\n          },\r\n        }),\r\n      ],\r\n      providers: [\r\n        ConfirmService,\r\n        BsModalService,\r\n        ToastrService,\r\n        ToastrMessagesService,\r\n      ],\r\n    }),\r\n  ],\r\n}"
        }
      ],
      "src/app/models/blog-post-info.model.ts": [
        {
          "name": "BlogPostInfo",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/models/blog-post-info.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  title: 'DocumentBurster 8.8.0 with Built-in Auto-Update',\r\n  description: 'DocumentBurster 8.8.0 with Built-in Auto-Update',\r\n  summary: 'DocumentBurster 8.8.0 with Built-in Auto-Update',\r\n  link: 'https://www.pdfburst.com/blog/documentburster-8-8-0-with-built-in-auto-update/',\r\n}"
        }
      ],
      "src/app/areas/install-setup-upgrade/chocolatey/chocolatey.template.ts": [
        {
          "name": "chocolateyTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/install-setup-upgrade/chocolatey/chocolatey.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "` <!--<ng-template #chocolateyTemplate> -->\r\n  <p-panel #pnlStep1ChocoInstallation>\r\n    <h4 id=\"checkPointChocolatey\">\r\n      <div *ngIf=\"!storeService.setup.chocolatey.isChocoOk\">\r\n        <u\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.STEP1' |\r\n          translate }} <em>Chocolatey</em></u\r\n        >\r\n      </div>\r\n      <div *ngIf=\"storeService.setup.chocolatey.isChocoOk\">\r\n        <s\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.STEP1' |\r\n          translate }} <em>Chocolatey</em></s\r\n        >&nbsp;&nbsp;<span class=\"label label-default\"\r\n          ><i class=\"fa fa-check-square-o\"></i\r\n          >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.INSTALLED'\r\n          | translate }}</span\r\n        >\r\n      </div>\r\n    </h4>\r\n    <div\r\n      [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.CHOCOLATEY.INNER-HTML.BEFORE-JAVA' | translate\"\r\n    ></div>\r\n    <br /><br />\r\n    <button\r\n      id=\"btnInstallChocolatey\"\r\n      *ngIf=\"!storeService.setup.chocolatey.isChocoOk\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary\"\r\n      (click)=\"installChocolatey()\"\r\n    >\r\n      <i class=\"fa fa-play\"></i\r\n      >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' | translate\r\n      }} <em>Chocolatey</em>\r\n    </button>\r\n  </p-panel>\r\n  <!--</ng-template> -->`"
        }
      ],
      "src/app/models/config-info.model.ts": [
        {
          "name": "ConfigInfo",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/models/config-info.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  fileName: '',\r\n  filePath: '',\r\n  isDefaultConfigFile: true,\r\n  isSelectedConfigFile: false,\r\n  configuration: {\r\n    settings: {\r\n      version: '',\r\n      template: '',\r\n      numberofuservariables: 20,\r\n      sendfiles: {},\r\n      emailserver: {},\r\n      emailsettings: {},\r\n      uploadsettings: {},\r\n      webuploadsettings: {},\r\n      smssettings: {\r\n        twilio: {},\r\n      },\r\n      qualityassurance: {\r\n        emailserver: {},\r\n      },\r\n      attachments: {\r\n        items: { attachment: [{ path: '', order: 0 }] },\r\n        archive: {},\r\n      },\r\n      emailrfc2822validator: {},\r\n      simplejavamail: { proxy: {}, connectionpool: {}, dkim: {}, smime: {} },\r\n      locale: {},\r\n      retrypolicy: {},\r\n      bursttokendelimiters: {},\r\n      updatesettings: {},\r\n    },\r\n  },\r\n}"
        }
      ],
      "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.template.ts": [
        {
          "name": "extraPackagesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!-- <ng-template #extraPackagesTemplate> -->\r\n\r\n  <div *ngIf=\"electronService.isChocoOk\">\r\n    <span [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INNER-HTML.ABOUT' | translate\"></span>\r\n    <div\r\n      *ngFor=\"let extraPackage of this.extraPackages\"\r\n      [ngClass]=\"{'panel panel-primary': extraPackage.status != 'not-installed', 'panel panel-default' : extraPackage.status == 'not-installed' }\"\r\n    >\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"{{extraPackage.website}}\" target=\"_blank\"\r\n            ><span>{{extraPackage.website}}</span\r\n            >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <span *ngIf=\"extraPackage.status == 'not-installed'\"\r\n              ><em>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INSTALLED.NOT' | translate }}</em></span\r\n            ><span *ngIf=\"extraPackage.status != 'not-installed'\"\r\n              ><strong><u>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.INSTALLED.ALREADY' | translate }}</u></strong></span\r\n            ></a\r\n          >\r\n          \r\n        </h3>\r\n      </div>\r\n\r\n      <div id=\"package-{{extraPackage.id}}\" class=\"panel-body\">\r\n        <a href=\"{{extraPackage.website}}\" target=\"_blank\"\r\n          ><img src=\"assets/images/{{extraPackage.icon}}\" height=\"48\" />\r\n          {{extraPackage.name}}</a\r\n        >\r\n        {{extraPackage.description}}\r\n        <br/><br/>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.COMMANDS.INSTALL' | translate }}:&nbsp;<em><strong>{{extraPackage.cmdInstall}}</strong></em>\r\n        <br/>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.COMMANDS.UNINSTALL' | translate }}:&nbsp;<em><strong>{{extraPackage.cmdUnInstall}}</strong></em>\r\n        <br/>{{ 'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.EXTRA-PACKAGES.COMMANDS.GET-INFO' | translate }}:&nbsp;<em><strong>{{extraPackage.cmdGetInfo}}</strong></em>\r\n        <br />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!--  </ng-template>-->`"
        }
      ],
      "src/app/app.module.ts": [
        {
          "name": "httpLoaderFactory",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/app.module.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(http: HttpClient): TranslateHttpLoader =>\r\n  new TranslateHttpLoader(http, './assets/i18n/', '.json')"
        }
      ],
      "src/app/areas/install-setup-upgrade/java/java.template.ts": [
        {
          "name": "javaTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/install-setup-upgrade/java/java.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!-- <ng-template #javaTemplate> -->\r\n\r\n  <div *ngIf=\"!storeService.setup.isRestartRequired\">\r\n    <strong\r\n      id=\"checkPointJavaPreRequisite\"\r\n      [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-SHORT' | translate\"\r\n    ></strong>\r\n\r\n    <br /><br /><span\r\n      [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n    ></span>\r\n\r\n    <br />\r\n    <div *ngIf=\"storeService.setup.java.isJavaOk\">\r\n      <br />\r\n      <span class=\"label label-success\"\r\n        ><i class=\"fa fa-check-square-o\"></i>&nbsp;<strong\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.GREAT' | translate }},\r\n          <em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FOUND' | translate }}\r\n          <em>ReportBurster</em></strong\r\n        ></span\r\n      >\r\n    </div>\r\n\r\n    <div *ngIf=\"!storeService.setup.java.isJavaOk\">\r\n      <span class=\" label label-warning\"\r\n        ><strong\r\n          ><em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}\r\n        </strong></span\r\n      >\r\n      &nbsp;\r\n      <span class=\"label label-primary\"\r\n        ><strong\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.BELOW-INSTRUCTIONS' |\r\n          translate }} <em>Java</em></strong\r\n        ></span\r\n      >\r\n\r\n      <br /><br />\r\n\r\n      <dburst-chocolatey></dburst-chocolatey>\r\n      <br />\r\n\r\n      <span class=\"label label-success\" *ngIf=\"storeService.setup.chocolatey.isChocoOk\"\r\n        ><i class=\"fa fa-check-square-o\"></i>&nbsp;<strong\r\n          ><em>Chocolatey</em>\r\n        {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FOUND-READY' |\r\n          translate }}\r\n          <em>Java</em></strong\r\n        ></span\r\n      >\r\n      <span class=\"label label-warning\" *ngIf=\"!storeService.setup.chocolatey.isChocoOk\"\r\n        ><strong\r\n          ><em>Chocolatey</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}, {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.YOU-NEED-INSTALL' |\r\n          translate }}\r\n          <em>Chocolatey</em></strong\r\n        ></span\r\n      >\r\n\r\n      <br /><br />\r\n\r\n      <p-panel #pnlStep2JavaInstallation>\r\n        <h4 id=\"checkPointInstallJava\">\r\n          <u\r\n            >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.STEP2' | translate\r\n            }} <em>Java</em></u\r\n          >\r\n        </h4>\r\n\r\n        <span\r\n          [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n        ></span>\r\n\r\n        <br /><br />\r\n\r\n        <button\r\n          id=\"btnInstallJava\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          [disabled]=\"!storeService.setup.chocolatey.isChocoOk\"\r\n          (click)=\"installJava()\"\r\n        >\r\n          <i class=\"fa fa-play\"></i\r\n          >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' |\r\n          translate }} <em>Java</em>\r\n        </button>\r\n        <span *ngIf=\"!storeService.setup.chocolatey.isChocoOk\"\r\n          >&nbsp;&nbsp;<strong\r\n            ><em\r\n              >( {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FIRST' |\r\n              translate }} )</em\r\n            ></strong\r\n          ></span\r\n        >\r\n      </p-panel>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"storeService.setup.isRestartRequired\">\r\n    <p-panel #pnlRestartDocumentBurster>\r\n      <h4 id=\"checkPointRestartDocumentBurster\">\r\n        <u\r\n          >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTARTING' |\r\n          translate }}\r\n          <em>ReportBurster</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTARTING-REQUIRED' |\r\n          translate }}\r\n        </u>\r\n      </h4>\r\n\r\n      <br />\r\n\r\n      <button\r\n        id=\"btnRestartDocumentBurster\"\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"restartApp()\"\r\n      >\r\n        <i class=\"fa fa-play\"></i\r\n        >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTART' |\r\n        translate }} <em>ReportBurster</em>\r\n      </button>\r\n    </p-panel>\r\n  </div>\r\n\r\n  <!--  </ng-template>-->`"
        }
      ],
      "src/app/areas/_configuration/templates/_left-menu.ts": [
        {
          "name": "leftMenuTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/_left-menu.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!-- Sidebar Menu -->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">\r\n    {{ 'AREAS.CONFIGURATION.LEFT-MENU.TOP-TITLE' | translate }}\r\n    (<strong>{{ settingsService.currentConfigurationTemplateName }}</strong>)\r\n  </li>\r\n\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuGeneralSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'generalSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-pencil-square-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.GENERAL' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportgenerationmailmerge\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuReportingSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'reportingSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-file-text-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.REPORTING' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuEnableDisableDistribution\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'enableDisableDistributionMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-check-square-o\"></i>\r\n      <span>{{\r\n        'AREAS.CONFIGURATION.LEFT-MENU.ENABLE-DISABLE-DELIVERY' | translate\r\n        }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuEmailSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'emailSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-envelope-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.EMAIL' | translate }}</span>\r\n      <span class=\"pull-right-container\">\r\n        <i class=\"fa fa-angle-left pull-right\"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\">\r\n      <li routerLinkActive=\"active\">\r\n        <a href=\"#\" [routerLink]=\"[\r\n            '/configuration',\r\n            'cloudEmailProvidersMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{\r\n            'AREAS.CONFIGURATION.LEFT-MENU.CLOUD-EMAIL-PROVIDERS' | translate\r\n            }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuUploadSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'uploadSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-upload\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.UPLOAD' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuDocuments2WebSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'documentBursterWebSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-credit-card\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.DOCUMENTS2WEB' | translate }}</span>\r\n    </a>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuSMSSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'smsSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-commenting-o\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.SMS' | translate }}</span>\r\n      <span class=\"pull-right-container\">\r\n        <i class=\"fa fa-angle-left pull-right\"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\">\r\n      <li routerLinkActive=\"active\">\r\n        <a id=\"leftMenuTwilioSettings\" href=\"#\" [routerLink]=\"[\r\n            '/configuration',\r\n            'smsSettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.TWILIO' | translate }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n\r\n  <li *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\" class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuQualitySettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'qualitySettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-flag-checkered\"></i>\r\n      <span>{{\r\n        'AREAS.CONFIGURATION.LEFT-MENU.QUALITY-ASSURANCE' | translate\r\n        }}</span>\r\n      <span class=\"pull-right-container \">\r\n        <i class=\"fa fa-angle-left pull-right \"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\" routerLinkActive=\"active\">\r\n      <li>\r\n        <a id=\"leftMenuTestEmailServerSettings\" [routerLink]=\"[\r\n            '/configuration',\r\n            'qualitySettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.TEST-EMAIL-SERVER' | translate }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n\r\n  <li class=\"treeview\" routerLinkActive=\"active\">\r\n    <a id=\"leftMenuAdvancedSettings\" href=\"#\" [routerLink]=\"[\r\n        '/configuration',\r\n        'advancedSettingsMenuSelected',\r\n        settingsService.currentConfigurationTemplatePath,\r\n        settingsService.currentConfigurationTemplateName\r\n      ]\">\r\n      <i class=\"fa fa-list-ul\"></i>\r\n      <span>{{ 'AREAS.CONFIGURATION.LEFT-MENU.ADVANCED' | translate }}</span>\r\n      <span class=\"pull-right-container\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n        <i class=\"fa fa-angle-left pull-right \"></i>\r\n      </span>\r\n    </a>\r\n    <ul class=\"treeview-menu\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <li routerLinkActive=\"active\">\r\n        <a id=\"leftMenuErrorHandlingSettings\" href=\"#\" [routerLink]=\"[\r\n            '/configuration',\r\n            'errorHandlingSettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\">\r\n          <span>{{\r\n            'AREAS.CONFIGURATION.LEFT-MENU.ERROR-HANDLING' | translate\r\n            }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n`"
        }
      ],
      "src/app/areas/_configuration-templates/templates/_left-menu.ts": [
        {
          "name": "leftMenuTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration-templates/templates/_left-menu.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!-- Sidebar Menu -->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">\r\n    {{ 'AREAS.CONFIGURATION-TEMPLATES.LEFT-MENU.CONFIGURATION-TEMPLATES' | translate }}\r\n  </li>\r\n\r\n  <li class=\"active\"><a href=\"#\" [routerLink]=\"['/configuration-templates']\"><i class=\"fa fa-files-o\"></i> <span>\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.LEFT-MENU.CONFIGURATION-TEMPLATES' | translate }}\r\n      </span></a></li>\r\n</ul>`"
        }
      ],
      "src/app/areas/_ext-connections/templates/_left-menu.ts": [
        {
          "name": "leftMenuTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_ext-connections/templates/_left-menu.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!-- Sidebar Menu -->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">\r\n    {{ 'AREAS.EXTERNAL-CONNECTIONS.LEFT-MENU.EXTERNAL-CONNECTIONS' | translate }}\r\n  </li>\r\n\r\n  <li class=\"active\"><a href=\"#\" [routerLink]=\"['/ext-connections']\"><i class=\"fa fa-files-o\"></i> <span>\r\n        {{ 'AREAS.EXTERNAL-CONNECTIONS.LEFT-MENU.EXTERNAL-CONNECTIONS' | translate }}\r\n      </span></a></li>\r\n</ul>`"
        }
      ],
      "src/app/areas/_help/templates/_left-menu.ts": [
        {
          "name": "leftMenuTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/_left-menu.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!-- Sidebar Menu-->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">{{ 'AREAS.HELP.LEFT-MENU.TOP-TITLE' | translate }}</li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpSupport' href=\"#\" [routerLink]=\"['/help','supportMenuSelected']\">\r\n      <i class=\"fa fa-hand-o-right\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.SUPPORT' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpServices' href=\"#\" [routerLink]=\"['/help','servicesMenuSelected']\">\r\n      <i class=\"fa fa-paper-plane-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.SERVICES' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpDocumentation' href=\"#\" [routerLink]=\"['/help','docsMenuSelected']\">\r\n      <i class=\"fa fa-question-circle-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.DOCUMENTATION' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpExamples' href=\"#\" [routerLink]=\"['/help','useCasesMenuSelected']\">\r\n      <i class=\"fa fa-star-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.EXAMPLES' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpFreeForSchools' href=\"#\" [routerLink]=\"['/help','freeForSchoolsMenuSelected']\">\r\n      <i class=\"fa fa-graduation-cap\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.FREE' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpCustomerReviews' href=\"#\" [routerLink]=\"['/help','reviewsMenuSelected']\">\r\n      <i class=\"fa fa-address-card-o\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.REVIEWS' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpBlog' href=\"#\" [routerLink]=\"['/help','blogMenuSelected']\">\r\n      <i class=\"fa fa-rss\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.BLOG' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpInstallSetup' href=\"#\" [routerLink]=\"['/help','installSetupMenuSelected']\">\r\n      <i class=\"fa fa-cogs\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.INSTALL-SETUP' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpLicense' href=\"#\" [routerLink]=\"['/help','licenseMenuSelected']\">\r\n      <i class=\"fa fa-key\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.LICENSE' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id='leftMenuHelpAbout' href=\"#\" [routerLink]=\"['/help','aboutMenuSelected']\">\r\n      <i class=\"fa fa-info\"></i>\r\n      <span>{{\r\n        'AREAS.HELP.LEFT-MENU.ABOUT' | translate }}</span>\r\n    </a>\r\n  </li>\r\n</ul>\r\n`"
        }
      ],
      "src/app/areas/_processing/templates/_left-menu.ts": [
        {
          "name": "leftMenuTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/_left-menu.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!-- Sidebar Menu-->\r\n<ul class=\"sidebar-menu\" data-widget=\"tree\">\r\n  <li class=\"header\">{{\r\n    'AREAS.PROCESSING.LEFT-MENU.ACTIONS' | translate }}</li>\r\n\r\n  <li routerLinkActive=\"active\">\r\n    <a href=\"#\" [routerLink]=\"['/processing','burstMenuSelected']\">\r\n      <i class=\"fa fa-play\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.BURST' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuMergeBurst\" href=\"#\" [routerLink]=\"['/processing','mergeBurstMenuSelected']\">\r\n      <i class=\"fa fa-plus-square-o\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.MERGE-BURST' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuQualityAssurance\" href=\"#\" [routerLink]=\"['/processingQa','qualityMenuSelected']\">\r\n      <i class=\"fa fa-flag-checkered\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.QUALITY-ASSURANCE' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a href=\"#\" [routerLink]=\"['/processing','logsMenuSelected']\">\r\n      <i class=\"fa fa-file-text-o\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.LOGGING-TRACING' | translate }}</span>\r\n    </a>\r\n  </li>\r\n  <li routerLinkActive=\"active\">\r\n    <a id=\"leftMenuSamples\" href=\"#\" [routerLink]=\"['/processing','samplesMenuSelected']\">\r\n      <i class=\"fa fa-bell-o\"></i>\r\n      <span>{{\r\n        'AREAS.PROCESSING.LEFT-MENU.SAMPLES' | translate }}</span>\r\n    </a>\r\n  </li>\r\n</ul>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/modal-attachment.ts": [
        {
          "name": "modalAttachmentTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/modal-attachment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<p-dialog id=\"modalSelectAttachment\"\r\n  header=\"{{ 'AREAS.CONFIGURATION.MODAL-ATTACHMENT.SELECT-ATTACHMENT' | translate }}\"\r\n  [(visible)]=\"isModalAttachmentVisible\"\r\n  [modal]=\"true\"\r\n>\r\n  <div class=\"modal-body\" id=\"modal-body\" style=\"height: 250px\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-1\">\r\n        {{ 'AREAS.CONFIGURATION.MODAL-ATTACHMENT.PATH' | translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"attachmentPath\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"modalAttachmentInfo.attachmentFilePath\"\r\n          size=\"52\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables\r\n          id=\"btnAttachmentPathVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('attachmentPath',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-native-system-dialog\r\n          dialogType=\"file\"\r\n          (pathsSelected)=\"onSelectAttachmentFilePath($event)\"\r\n        >\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button\r\n      id=\"btnOKConfirmation\"\r\n      class=\"btn btn-primary dburst-button-question-confirm-attachment\"\r\n      type=\"button\"\r\n      (click)=\"onOKAttachmentModal()\"\r\n      [disabled]=\"!modalAttachmentInfo.attachmentFilePath\"\r\n    >\r\n      {{ 'BUTTONS.OK' | translate }}\r\n    </button>\r\n    <button\r\n      class=\"btn btn-flat btn-default\"\r\n      type=\"button\"\r\n      (click)=\"onCancelAttachmentModal()\"\r\n    >\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog>\r\n`"
        }
      ],
      "src/app/areas/_configuration-templates/templates/modal-conf-template.ts": [
        {
          "name": "modalConfigurationTemplateTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration-templates/templates/modal-conf-template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<p-dialog\r\n  [header]=\"modalConfigurationTemplateInfo.modalTitle\"\r\n  [(visible)]=\"isModalConfigurationTemplateVisible\"\r\n  [modal]=\"true\"\r\n  width=\"800px\"\r\n  height=\"200px\"\r\n  class=\"modal-dialog-center\"\r\n>\r\n  <div style=\"margin: 35px;\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.NAME' | translate\r\n        }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"templateName\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.templateName\"\r\n          (ngModelChange)=\"updateModelAndForm()\"\r\n          placeholder=\"e.g. Payslips, Invoices, Statements, etc.\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAPABILITIES' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportDistribution\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.capReportDistribution\"\r\n        />\r\n        <label\r\n          for=\"btnCapReportDistribution\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-DISTRIBUTION'\r\n          | translate}}\r\n        </label>\r\n        &nbsp;&nbsp;\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportGenerationMailMerge\"\r\n          *ngIf =\"modalConfigurationTemplateInfo.fileInfo.type == 'config-reports'\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.capReportGenerationMailMerge\"\r\n        />\r\n        <label *ngIf =\"modalConfigurationTemplateInfo.fileInfo.type == 'config-reports'\" for=\"btnCapReportGenerationMailMerge\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-GENERATION'\r\n          | translate}}\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.NOTES' | translate\r\n        }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <p-editor\r\n          [style]=\"{'height':'200px', 'width':'500px'}\"\r\n          id=\"notes\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.notes\"\r\n        >\r\n          <ng-template pTemplate=\"header\">\r\n            <span class=\"ql-formats\">\r\n              <button type=\"button\" class=\"ql-bold\" aria-label=\"Bold\"></button>\r\n              <button\r\n                type=\"button\"\r\n                class=\"ql-italic\"\r\n                aria-label=\"Italic\"\r\n              ></button>\r\n              <button\r\n                type=\"button\"\r\n                class=\"ql-underline\"\r\n                aria-label=\"Underline\"\r\n              ></button>\r\n            </span>\r\n            <span class=\"ql-formats\">\r\n              <button\r\n                class=\"ql-list\"\r\n                value=\"ordered\"\r\n                aria-label=\"Ordered List\"\r\n                type=\"button\"\r\n              ></button>\r\n              <button\r\n                class=\"ql-list\"\r\n                value=\"bullet\"\r\n                aria-label=\"Unordered List\"\r\n                type=\"button\"\r\n              ></button>\r\n            </span>\r\n          </ng-template>\r\n        </p-editor>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.VISIBILITY' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <select\r\n          id=\"visibility\"\r\n          [(ngModel)]=\"modalConfigurationTemplateInfo.fileInfo.visibility\"\r\n        >\r\n          <option value=\"hidden\">\r\n            {{\r\n            'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.VISIBILITY-HIDDEN'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"visible\">\r\n            {{\r\n            'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.VISIBILITY-VISIBLE'\r\n            | translate }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div\r\n      class=\"row\"\r\n      *ngIf=\"!this.modalConfigurationTemplateInfo.fileInfo\r\n  .capReportGenerationMailMerge\"\r\n    >\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.HOW-TO-USE' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"templateHowTo\"\r\n          class=\"form-control\"\r\n          *ngIf=\"!modalConfigurationTemplateInfo.fileInfo.isFallback\"\r\n          [ngModel]=\"modalConfigurationTemplateInfo.templateHowTo\"\r\n          readonly\r\n        />\r\n        <em\r\n          id=\"templateHowToSnipped\"\r\n          style=\"font-size: 9px\"\r\n          *ngIf=\"!modalConfigurationTemplateInfo.fileInfo.isFallback\"\r\n        >\r\n          <strong\r\n            >{{\r\n            'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.ABOVE-SNIPPED' |\r\n            translate }}</strong\r\n          >\r\n        </em>\r\n        <span\r\n          id=\"fallbackTemplateSpan\"\r\n          style=\"font-size: 9px\"\r\n          *ngIf=\"modalConfigurationTemplateInfo.fileInfo.isFallback\"\r\n          [innerHTML]=\"'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.INNER-HTML.DEFAULT-CONFIGURATION' | translate\"\r\n        >\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <span>\r\n      <span\r\n        id=\"alreadyExistsWarning\"\r\n        style=\"font-size: 9px\"\r\n        class=\"label label-warning\"\r\n        *ngIf=\"modalConfigurationTemplateInfo.templateFilePathExists == 'file'\"\r\n        >{{\r\n        'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.FILE-ALREADY-EXISTS'\r\n        | translate }}</span\r\n      >&nbsp;\r\n    </span>\r\n    <button\r\n      id=\"btnOKConfirmation\"\r\n      class=\"btn btn-primary dburst-button-question-confirm\"\r\n      type=\"button\"\r\n      (click)=\"onModalOK()\"\r\n      [disabled]=\"\r\n        !modalConfigurationTemplateInfo.fileInfo.templateName ||\r\n        (modalConfigurationTemplateInfo.crudMode == 'create' &&\r\n        (modalConfigurationTemplateInfo.templateFilePathExists == 'file'))\r\n      \"\r\n    >\r\n      {{ 'BUTTONS.OK' | translate }}\r\n    </button>\r\n\r\n    <button\r\n      id=\"btnClose\"\r\n      class=\"btn btn-flat btn-default dburst-button-question-decline\"\r\n      type=\"button\"\r\n      (click)=\"onModalClose()\"\r\n    >\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog> `"
        }
      ],
      "src/app/areas/_ext-connections/templates/modal-ext-connection.ts": [
        {
          "name": "modalExtConnectionsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_ext-connections/templates/modal-ext-connection.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<p-dialog\r\n  id=\"modalExtConnection\"\r\n  [header]=\"modalConnectionInfo.modalTitle\"\r\n  [(visible)]=\"isModalExtConnectionVisible\"\r\n  [modal]=\"true\"\r\n  width=\"700\"\r\n  [style]=\"{ top: '3vw', left: '4vw' }\"\r\n  [autoZIndex]=\"false\"\r\n>\r\n  <div style=\"margin: 5px;\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.CONNECTION-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <input\r\n          id=\"connectionName\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.name\"\r\n          (ngModelChange)=\"updateModelAndForm()\"\r\n          class=\"form-control\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromName\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.name\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromName',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromEmailAddress\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.fromaddress\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromEmailAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromEmailAddress',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.HOST' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"emailServerHost\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.host\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnEmailServerHostVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailServerHost',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.USER-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"userName\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.userid\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnUserNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('userName',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PASSWORD' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPassword\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.userpassword\"\r\n          type=\"password\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPasswordVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPassword',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PORT' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPort\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.port\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPortVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPort',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSSL\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.usessl\"\r\n        />\r\n        <label for=\"btnSSL\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SSL-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnTLS\"\r\n          [(ngModel)]=\"modalConnectionInfo.email.documentburster.connection.emailserver.usetls\"\r\n        />\r\n        <label for=\"btnTLS\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TLS-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TEST-CONNECTION' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-7\">\r\n        <button\r\n          id=\"btnSendTestEmail\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary btn-block\"\r\n          (click)=\"doTestSMTPConnection()\"\r\n        >\r\n          <i class=\"fa fa-paper-plane\"></i>&nbsp;&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SEND-TEST-EMAIL' |\r\n          translate }}\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row \">\r\n      <div class=\"col-xs-2 \">\r\n        <a href=\"https://products.office.com/en-us/exchange \" target=\"_blank \">\r\n          <i\r\n            class=\"ms-Icon ms-Icon--ExchangeLogo\"\r\n            style=\"font-size:30px;color:orange \"\r\n          ></i>\r\n          <br />Microsoft Exchange\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"col-xs-7 \">\r\n        <span\r\n          [innerHTML]=\"\r\n    'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.INNER-HTML.DB-ALL-CLOUD-PROVIDERS' | translate\"\r\n        ></span>\r\n        <br />\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://www.office.com\" target=\"_blank \">\r\n            <i\r\n              class=\"ms-Icon ms-Icon--OfficeLogo\"\r\n              style=\"font-size:24px;\r\n      color:red \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Office 365</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://gsuite.google.com \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-google \"\r\n              style=\"font-size:32px; color:gray\r\n      \"\r\n            ></i>\r\n            <p style=\"margin-top:3px \">Google Apps</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://aws.amazon.com/ses/ \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-amazon \"\r\n              style=\"font-size:32px; color:gold\r\n      \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Amazon AWS</p>\r\n          </a>\r\n        </div>\r\n        <dburst-button-well-known-email-providers\r\n          (sendSelectedProvider)=\"updateSMTPFormControlsWithSelectedProviderSettings($event)\"\r\n        >\r\n        </dburst-button-well-known-email-providers>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <span>\r\n      <span\r\n        id=\"alreadyExistsWarning\"\r\n        style=\"font-size: 9px\"\r\n        class=\"label label-warning\"\r\n        *ngIf=\"modalConnectionInfo.connectionFilePathExists == 'file'\"\r\n        >{{\r\n        'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.FILE-ALREADY-EXISTS'\r\n        | translate }}</span\r\n      >\r\n      &nbsp;\r\n    </span>\r\n\r\n    <button\r\n      id=\"btnOKConfirmationConnectionModal\"\r\n      class=\"btn btn-primary\"\r\n      type=\"button\"\r\n      (click)=\"onModalOK()\"\r\n      [disabled]=\"!modalConnectionInfo.email.documentburster.connection.name || modalConnectionInfo.connectionFilePathExists == 'file'\"\r\n    >\r\n      {{ 'BUTTONS.SAVE' | translate }}\r\n    </button>\r\n\r\n    <button\r\n      id=\"btnCloseConnectionModal\"\r\n      class=\"btn btn-flat btn-default dburst-button-question-decline\"\r\n      type=\"button\"\r\n      (click)=\"onModalClose()\"\r\n    >\r\n      {{ 'BUTTONS.CANCEL' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog> `"
        }
      ],
      "src/app/components/button-html-preview/modal-html-preview.template.ts": [
        {
          "name": "modalHtmlPreviewTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/button-html-preview/modal-html-preview.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<p-dialog header=\"{{\r\n  'COMPONENTS.BUTTON-HTML-PREVIEW.HTML-EMAIL-PREVIEW' | translate }}\" [(visible)]=\"isModalHtmlPreviewVisible\"\r\n  [baseZIndex]=\"1000\" [modal]=\"true\">\r\n\r\n  <div style=\"width:700px;height:575px; overflow-y: auto; overflow-x: auto; \">\r\n    <iframe id=\"previewIframe\" srcdoc=\"{{ htmlCode }}\" frameborder=\"0\"></iframe>\r\n  </div>\r\n\r\n  <p-footer>\r\n\r\n    <button id=\"btnClose\" class=\"btn btn-primary\" type=\"button\" (click)=\"isModalHtmlPreviewVisible = false\">{{\r\n      'BUTTONS.CLOSE' | translate }}</button>\r\n\r\n  </p-footer>\r\n\r\n</p-dialog>\r\n`"
        }
      ],
      "src/app/areas/_processing/templates/modal-samples-learn-more.ts": [
        {
          "name": "modalSamplesLearnMoreTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/modal-samples-learn-more.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<p-dialog [header]=\"modalSampleInfo.title\" [(visible)]=\"isModalSamplesLearnMoreVisible\" [modal]=\"true\" width=\"800\"\r\n  height=\"200\" class=\"modal-dialog-center\">\r\n  <div style=\"margin: 25px;\">\r\n  \r\n  <div class=\"row\">\r\n    \r\n  <div class=\"col-xs-2\">\r\n    <strong>{{\r\n      'AREAS.TOP-MENU-HEADER.DOCUMENTATION' | translate\r\n    }}</strong> \r\n  </div>\r\n\r\n  <div class=\"col-xs-10\">\r\n      <a href=\"{{modalSampleInfo.documentation}}\" target=\"_blank\">{{modalSampleInfo.documentation}}</a>    \r\n  </div>\r\n \r\n </div>\r\n  <br/>  \r\n  <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n      {{\r\n        'SAMPLES.MODAL.FEATURES' | translate\r\n      }}\r\n      </div>\r\n      \r\n      <div class=\"col-xs-10\">\r\n        \r\n      <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportSplitting\"\r\n          [ngModel]=\"true\" onclick=\"return false;\"\r\n          />\r\n        <label \r\n          for=\"btnCapReportSplitting\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-SPLITTING' | translate}}\r\n        </label>\r\n        &nbsp;&nbsp;\r\n\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportDistribution\"\r\n          [ngModel]=\"modalSampleInfo.capReportDistribution\" onclick=\"return false;\"\r\n          />\r\n        <label \r\n          for=\"btnCapReportDistribution\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-DISTRIBUTION' | translate}}\r\n        </label>\r\n        &nbsp;&nbsp;\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnCapReportGenerationMailMerge\"\r\n          [ngModel]=\"modalSampleInfo.capReportGenerationMailMerge\" onclick=\"return false;\"\r\n          />\r\n        <label \r\n          for=\"btnCapReportGenerationMailMerge\" class=\"checkboxlabel\">\r\n          &nbsp;{{'AREAS.CONFIGURATION-TEMPLATES.MODAL-CONF-TEMPLATE.CAP-REPORT-GENERATION' | translate}}\r\n        </label>\r\n              \r\n      </div>\r\n    \r\n    </div>\r\n    <p></p>\r\n    \r\n    <div class=\"row\">\r\n    <div class=\"col-xs-2\">\r\n    {{\r\n      'SAMPLES.MODAL.INPUT' | translate\r\n    }}\r\n    </div>\r\n\r\n    <div class=\"col-xs-10\">\r\n\r\n        <span [innerHTML]=\"modalSampleInfo.inputDetails\"></span>\r\n            \r\n    </div>\r\n  </div>\r\n  \r\n  <br/>\r\n  <br/>\r\n\r\n  <div class=\"row\">\r\n  <div class=\"col-xs-2\">\r\n  {{\r\n    'SAMPLES.MODAL.EXPECTED-OUTPUT' | translate\r\n  }}\r\n  </div>\r\n\r\n  <div class=\"col-xs-10\" [innerHTML]=\"modalSampleInfo.outputDetails\">\r\n  </div>\r\n</div>\r\n\r\n<br/>\r\n<br/>\r\n\r\n  <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'SAMPLES.MODAL.NOTES' | translate\r\n      }}\r\n      </div>\r\n      \r\n      <div id=\"div{{modalSampleInfo.id}}\" class=\"col-xs-10\" [innerHTML] = \"modalSampleInfo.notes\">\r\n\r\n          \r\n      </div>    \r\n  </div>\r\n    \r\n  <p></p>\r\n  \r\n  <div class=\"row\" *ngIf=\"!modalSampleInfo.capReportGenerationMailMerge\">\r\n    \r\n    <div class=\"col-xs-2\">\r\n    {{\r\n      'SAMPLES.MODAL.CONFIGURATION' | translate\r\n    }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-10\">\r\n        <input type=\"text\" id=\"templateHowTo\" class=\"form-control\"\r\n          [ngModel]=\"modalSampleInfo.configurationFilePath\" readonly />\r\n        \r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n    \r\n    <div class=\"col-xs-2\">\r\n      \r\n    </div>\r\n  \r\n    <div class=\"col-xs-10\">\r\n      <button type=\"button\" id=\"btnViewConfigurationFile{{modalSampleInfo.id}}\" class=\"btn btn-xs btn-default\" (click)=\"doSampleViewConfigurationFile(modalSampleInfo.configurationFilePath, modalSampleInfo.configurationFileName)\">&nbsp;&nbsp;&nbsp;&nbsp;View Configuration File&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>\r\n    </div>\r\n   \r\n   </div>\r\n   \r\n    </div> \r\n\r\n    \r\n    <p></p>\r\n    \r\n  <p-footer>\r\n    <button id=\"btnCloseSamplesLearnMoreModal\" class=\"btn btn-flat btn-default\" type=\"button\" (click)=\"doCloseSamplesLearnMoreModal()\">\r\n      {{ 'BUTTONS.CLOSE' | translate }}\r\n    </button>\r\n  </p-footer>\r\n</p-dialog>\r\n`"
        }
      ],
      "src/app/components/button-variables/modal-variables.template.ts": [
        {
          "name": "modalVariablesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/button-variables/modal-variables.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<p-dialog id=\"modalSelectVariable\" header=\"{{\r\n  'COMPONENTS.BUTTON-VARIABLES.SELECT-VARIABLE' | translate }}\" [(visible)]=\"isModalVariablesVisible\" class=\"modal-dialog-center\"\r\n  [baseZIndex]=\"1000\" [modal]=\"true\">\r\n\r\n  <div style=\"max-height: 549px; overflow: auto; cursor: pointer\">\r\n\r\n    <table class=\"table table-condensed table-hover table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>{{\r\n              'COMPONENTS.BUTTON-VARIABLES.NAME' | translate }}</th>\r\n          <th>{{\r\n              'COMPONENTS.BUTTON-VARIABLES.TYPE' | translate }}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let variable of variables\" (dblclick)=\"onModalOK()\" (click)=\"onVariableClick(variable)\"\r\n          [ngClass]=\"{ 'info': variable.active }\">\r\n          <td id='{{variable.name}}'>{{variable.name}}</td>\r\n          <td>{{variable.type}}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div class=\"checkbox\">\r\n    <label id='btnShowMoreVariables'>\r\n      &nbsp;&nbsp;\r\n      <input type=\"checkbox\" [(ngModel)]=\"showMoreCheckBoxValue\" (ngModelChange)='onShowMore()'>Show\r\n      More\r\n    </label>\r\n  </div>\r\n\r\n  <p-footer>\r\n    <button id=\"btnOKConfirmation\" class=\"btn btn-primary dburst-button-question-confirm\" type=\"button\" (click)=\"onModalOK()\"\r\n      [disabled]=\"!getSelectedVariable()\">{{\r\n      'BUTTONS.OK' | translate }}</button>\r\n\r\n    <button id=\"btnClose\" class=\"btn\" type=\"button\" (click)=\"onModalClose()\">{{\r\n      'BUTTONS.CANCEL' | translate }}</button>\r\n\r\n  </p-footer>\r\n\r\n</p-dialog>\r\n`"
        }
      ],
      "src/app/components/button-well-known/modal-well-known.template.ts": [
        {
          "name": "modalWellKnownTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/components/button-well-known/modal-well-known.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<p-dialog id=\"modalWellKnownEmailProviders\" header=\"{{\r\n  'COMPONENTS.BUTTON-WELL-KNOWN.WELL-KNOWN-PROVIDERS' | translate }}\" [(visible)]=\"isModalWellKnownVisible\"\r\n  [baseZIndex]=\"1000\" [modal]=\"true\">\r\n\r\n  <div style=\"max-height: 450px; width: 375px; overflow: auto; cursor: pointer\">\r\n    <table class=\"table table-condensed table-hover table-bordered\">\r\n      <tbody>\r\n        <tr *ngFor=\"let provider of providers\" (dblclick)=\"onModalOK()\" (click)=\"onProviderClick(provider)\"\r\n          [ngClass]=\"{ 'info': provider.active }\">\r\n          <td id='{{provider.name}}'>{{provider.name}}\r\n            <span *ngIf=\"provider.active\">\r\n              <br>{{provider.settings | json}}</span>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div class=\"checkbox\">\r\n    <label id='btnShowMoreProviders'>\r\n      &nbsp;&nbsp;\r\n      <input type=\"checkbox\" [(ngModel)]=\"showMoreCheckBoxValue\" (ngModelChange)='onShowMore()'>Show\r\n      More\r\n    </label>\r\n  </div>\r\n\r\n\r\n  <p-footer>\r\n\r\n    <button id=\"btnOKConfirmation\" class=\"btn btn-primary\" type=\"button\" (click)=\"onModalOK()\"\r\n      [disabled]=\"!getSelectedProvider()\">{{\r\n      'COMPONENTS.BUTTON-WELL-KNOWN.LOAD-SMTP-SETTINGS' | translate }}</button>\r\n\r\n    <button id=\"btnClose\" class=\"btn btn-flat btn-default\" type=\"button\" (click)=\"onModalClose()\">{{\r\n      'BUTTONS.CANCEL' | translate }}</button>\r\n\r\n  </p-footer>\r\n\r\n</p-dialog>\r\n`"
        }
      ],
      "src/app/providers/settings.service.ts": [
        {
          "name": "newEmailServer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/providers/settings.service.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  host: 'Email Server Host',\r\n  port: '25',\r\n  userid: 'From Email User ID',\r\n  userpassword: 'From Email Password',\r\n  usessl: false,\r\n  usetls: false,\r\n  fromaddress: 'from@emailaddress.com',\r\n  name: 'From Name',\r\n}"
        }
      ],
      "src/app/areas/_processing/templates/resume-jobs.ts": [
        {
          "name": "resumeJobsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/resume-jobs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #resumeJobs>\r\n  <div\r\n    class=\"row\"\r\n    *ngFor=\"let jobDetails of executionStatsService.jobStats.jobsToResume\"\r\n  >\r\n    <div clas=\"col-xs-12\">\r\n      <strong style=\"text-decoration: underline\"\r\n        >{{ 'AREAS.PROCESSING.RESUME-JOBS.RESUME' | translate }}\r\n        <span\r\n          *ngIf=\"jobDetails.testAll === 'true' || jobDetails.numberOfRandomTestTokens > -1 || jobDetails.listOfTestTokens\"\r\n          >{{ 'AREAS.PROCESSING.LEFT-MENU.QUALITY-ASSURANCE' | translate\r\n          }}</span\r\n        >\r\n        {{ 'AREAS.PROCESSING.RESUME-JOBS.JOB' | translate }}</strong\r\n      >\r\n      <span *ngIf=\"jobDetails.testAll === 'true'\">\r\n        <em> - {{ 'AREAS.PROCESSING.RESUME-JOBS.TEST-ALL' | translate }}</em>\r\n      </span>\r\n\r\n      <span *ngIf=\"jobDetails.numberOfRandomTestTokens > -1\">\r\n        <em>\r\n          - {{ 'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST' | translate }}\r\n          {{jobDetails.numberOfRandomTestTokens}} {{\r\n          'AREAS.PROCESSING.RESUME-JOBS.TEST-RANDOM' | translate }}</em\r\n        >\r\n      </span>\r\n\r\n      <span *ngIf=\"jobDetails.listOfTestTokens\">\r\n        <em>\r\n          - {{ 'AREAS.PROCESSING.RESUME-JOBS.TEST-LIST' | translate }}\r\n          {{jobDetails.listOfTestTokens}}\r\n        </em>\r\n      </span>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <span>{{jobDetails.filePath}}</span> ({{jobDetails.jobDate}})\r\n\r\n      <br />\r\n      <br />\r\n      <span style=\"text-decoration: underline\"\r\n        >{{ jobDetails.numberOfRemainingTokens }} {{\r\n        'AREAS.PROCESSING.RESUME-JOBS.DOCS-REMAINING' | translate }}</span\r\n      >\r\n      ({{jobDetails.tokensCount - jobDetails.numberOfRemainingTokens}} {{\r\n      'AREAS.PROCESSING.RESUME-JOBS.OUT-OF' | translate }}\r\n      {{jobDetails.tokensCount}} {{ 'AREAS.PROCESSING.RESUME-JOBS.DOCS-DONE' |\r\n      translate }})\r\n      <br />\r\n      <br />\r\n\r\n      <button\r\n        id=\"btnResume\"\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"doResumeJob(jobDetails.jobFilePath)\"\r\n      >\r\n        <i class=\"fa fa-play\"></i>&nbsp;Resume\r\n        <span\r\n          *ngIf=\"jobDetails.testAll ==='true' || jobDetails.numberOfRandomTestTokens > -1 || jobDetails.listOfTestTokens\"\r\n          >{{ 'AREAS.PROCESSING.LEFT-MENU.QUALITY-ASSURANCE' | translate\r\n          }}</span\r\n        >\r\n        {{ 'AREAS.PROCESSING.RESUME-JOBS.JOB' | translate }}</button\r\n      >&nbsp;&nbsp;\r\n      <button\r\n        id=\"btnClear\"\r\n        type=\"button\"\r\n        class=\"btn\"\r\n        (click)=\"clearResumeJob(jobDetails.jobFilePath)\"\r\n      >\r\n        <i class=\"fa fa-file-o\"></i>&nbsp;{{\r\n        'AREAS.PROCESSING.RESUME-JOBS.CLEAR-JOB' | translate }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <br />\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/install-setup-upgrade/system-diagnostics/system-diagnostics.template.ts": [
        {
          "name": "systemDiagnosticsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/install-setup-upgrade/system-diagnostics/system-diagnostics.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<!--<ng-template #systemDiagnosticsTemplate> -->\r\n<strong id='checkPointHelpJavaPreRequisite'\r\n  >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.DIAGNOSTICS.STATUS' | translate\r\n  }}</strong\r\n>\r\n<br /><br />\r\n\r\n<div class=\"row\" *ngIf=\"!storeService.setup.java.isJavaOk\">\r\n  <div class=\"col-xs-2\">\r\n    <span class=\"label label-warning\"\r\n      ><strong\r\n        ><em>Java</em> {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND'\r\n        | translate }}</strong\r\n      ></span\r\n    >\r\n  </div>\r\n\r\n  <div class=\"col-xs-10\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"restartApp()\">\r\n      <i class=\"fa fa-play\"></i\r\n      >&nbsp;{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.RESTART' | translate\r\n      }} <em>ReportBurster</em>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<span class=\"label label-success\" *ngIf=\"storeService.setup.java.isJavaOk\"\r\n  ><i class=\"fa fa-check-square-o\"></i>&nbsp;<strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.GREAT' | translate }},\r\n    <em>Java</em>\r\n    {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.FOUND' | translate }}\r\n    <em>ReportBurster</em></strong\r\n  ></span\r\n>\r\n\r\n<br /><br />\r\n<strong>Environment Variables</strong>\r\n<br /><br />\r\n<ol>\r\n<li><strong>%JAVA_HOME%</strong><p><code>{{storeService.setup.env.JAVA_HOME | async}}</code></p></li>\r\n<li><strong>%JRE_HOME%</strong><p><code>{{storeService.setup.env.JRE_HOME | async}}</code></p></li>\r\n<li><strong>%PATH%</strong><p><code>{{storeService.setup.env.PATH | async}}</code></p></li>\r\n</ol>\r\n\r\n<!--</ng-template> -->\r\n`"
        }
      ],
      "src/app/models/system-info.model.ts": [
        {
          "name": "SystemInfo",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/models/system-info.model.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  operatingSystem: 'Windows',\r\n  isServerVersion: false,\r\n  product: 'DocumentBurster',\r\n  version: '9.1',\r\n}"
        }
      ],
      "src/app/areas/_help/templates/tab-about.ts": [
        {
          "name": "tabAboutTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-about.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabAboutTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong>{{\r\n      'AREAS.HELP.TAB-ABOUT.VERSION' | translate }}</strong>\r\n    <br>\r\n    <br>\r\n    <span class=\"label label-default\">\r\n      <em>{{settingsService.product}}</em>&nbsp;{{settingsService.version}}\r\n    </span>\r\n\r\n    <hr>\r\n    <div [innerHTML]=\"'AREAS.HELP.TAB-ABOUT.INNER-HTML.LICENSE-2-OPTIONS' | translate\"></div>\r\n\r\n    <br>\r\n    <br>\r\n    <ol>\r\n      <li>{{\r\n        'AREAS.HELP.TAB-ABOUT.PURCHASE-COMMERCIAL-LICENSE' | translate }}&nbsp;\r\n        <a href=\"https://www.pdfburst.com/store\" target=\"_blank\">\r\n          <button class=\"btn btn-primary btn-xs\" type=\"button\">{{\r\n            'AREAS.HELP.TAB-ABOUT.BUY-NOW' | translate }}</button>\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"https://www.pdfburst.com/services/free-for-schools/\" target=\"_blank\">\r\n          <button class=\"btn btn-xs\" type=\"button\"><span\r\n              [innerHTML]=\"'AREAS.HELP.TAB-ABOUT.INNER-HTML.GET-FREE-SCHOOLS' | translate\"></span></button>\r\n        </a> (registered schools only)\r\n      </li>\r\n    </ol>\r\n\r\n    <hr>\r\n\r\n    <strong id='checkPointHelpAbout'>{{\r\n      'AREAS.HELP.TAB-ABOUT.COPYRIGHT' | translate }}</strong>\r\n    <br>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/contact.html\" target=\"_blank\">&#9400; {{\r\n      'AREAS.HELP.TAB-ABOUT.COPYRIGHT-YEARS' | translate }}</a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-advanced-error-handling.ts": [
        {
          "name": "tabAdvancedErrorHandlingTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-advanced-error-handling.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabAdvancedErrorHandlingTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong style=\"text-decoration: underline;\"> {{\r\n      'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.IF-ANY-RECIPIENT-FAILS' | translate }}</strong>\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-12\">\r\n\r\n        <div class=\"radio\">\r\n          <label>\r\n            <input type=\"radio\" id=\"stopImmediatelyOnError\" name=\"failJob\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.failjobifanydistributionfails\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' [value]=\"true\" />{{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.STOP-ALL-DOCUMENT' | translate }}</label>\r\n        </div>\r\n\r\n        <div class=\"radio\">\r\n          <label>\r\n            <input type=\"radio\" id=\"continueOnError\" name=\"failJob\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.failjobifanydistributionfails\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' [value]=\"false\" />{{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.CONTINUE-DOCUMENT-DELIVERY' | translate }}</label>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <input type=\"checkbox\" id=\"btnEnableRetryPolicy\"\r\n      [(ngModel)]=\"xmlSettings?.documentburster.settings.enableretrypolicy\"\r\n      (ngModelChange)='settingsChangedEventHandler($event)' />\r\n    <label for=\"btnEnableRetryPolicy\" class=\"checkboxlabel\">\r\n\r\n      <strong style=\"text-decoration: underline;\"> {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.ENABLE-RETRY-POLICY' | translate }}</strong> ({{\r\n      'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.WHEN-RECIPIENT-FAILS' | translate }})\r\n    </label>\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\">\r\n        {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DELAY' | translate }}\r\n        <span id='disabled1' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">{{'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE'\r\n          | translate }}</span>\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"retryPolicyDelay\" [(ngModel)]=\"xmlSettings?.documentburster.settings.retrypolicy.delay\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.enableretrypolicy\" />\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SECONDS' | translate }}</em>\r\n        <span id='disabled2' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\"> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}\r\n        </span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.MAX-DELAY' | translate }}\r\n        <span id='disabled3' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"retryPolicyMaxDelay\" [(ngModel)]=\"xmlSettings?.documentburster.settings.retrypolicy.maxdelay\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.enableretrypolicy\" />\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SECONDS' | translate }}</em>\r\n        <span id='disabled4' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\"> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.MAX-NUMBER-RETRIES' | translate }}\r\n        <span id='disabled5' *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"retryPolicyMaxRetries\" [(ngModel)]=\"xmlSettings?.documentburster.settings.retrypolicy.maxretries\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.enableretrypolicy\" />\r\n      </div>\r\n\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"!xmlSettings?.documentburster.settings.enableretrypolicy\">\r\n\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n        <span id='disabled6'>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.DISABLED-CLICK-ENABLE' | translate }}</span>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <em [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.INNER-HTML.SETS-DELAY' | translate\">\r\n    </em>.\r\n    <br>\r\n    <br>\r\n    <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-ERROR-HANDLING.INNER-HTML.RETRY-POLICY' | translate\"></span>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-advanced.ts": [
        {
          "name": "tabAdvancedTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-advanced.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabAdvancedTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <div class=\"col-xs-4\">\r\n        <br>\r\n        {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.DELAY-EACH-BY' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"delayEachDistributionBy\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.delayeachdistributionby\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <div class=\"col-xs-4\"></div>\r\n      <div class=\"col-xs-8\">\r\n        <em> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SECONDS' | translate }}</em>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\"> {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.NUMBER-USER-VARIABLES' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"numberOfUserVariables\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.numberofuservariables\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.START-DELIMITER-TOKEN' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersStart\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.start\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.END-DELIMITER-TOKEN' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersEnd\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.end\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnReuseToken\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.reusetokenswhennotfound\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" />\r\n        <label for=\"btnReuseToken\" class=\"checkboxlabel\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.REUSE-LAST-TOKEN' | translate }}</label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnHTMLEmailEditCode\" [(ngModel)]=\"xmlSettings?.documentburster?.settings.htmlemaileditcode\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" />\r\n        <label for=\"btnHTMLEmailEditCode\" class=\"checkboxlabel\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.EDIT-EMAIL-MESSAGE' | translate }}</label>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnSplit2ndTime\"\r\n        [(ngModel)]=\"xmlSettings?.documentburster?.settings.split2ndtime\"\r\n        (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      <label for=\"btnSplit2ndTime\" class=\"checkboxlabel\">\r\n        <strong> {{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.SPLIT-2ND-TIME' | translate }}</strong>\r\n      </label>\r\n        </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.START-DELIMITER-TOKEN-2ND-SPLIT' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersStart2nd\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.start2nd\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" \r\n          [disabled]=\"!xmlSettings?.documentburster?.settings?.split2ndtime\"/>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">{{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED.END-DELIMITER-TOKEN-2ND-SPLIT' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"burstTokenDelimitersEnd2nd\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.bursttokendelimiters.end2nd\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" \r\n          [disabled]=\"!xmlSettings?.documentburster?.settings?.split2ndtime\"/>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnEnableIncubatingFeatures\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster?.settings.enableincubatingfeatures\r\n          \"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event); refreshTabs()\" />\r\n        <label for=\"btnEnableIncubatingFeatures\" class=\"checkboxlabel\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED.ENABLE-INCUBATING-FEATURES' | translate }}</label>\r\n      </div>\r\n    </div>\r\n\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-attachments.ts": [
        {
          "name": "tabAttachmentsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-attachments.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabAttachmentsTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"panel panel-default\">\r\n\r\n      <div class=\"panel-body\">\r\n\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-10\" style=\"cursor: pointer; height:200px; overflow:auto;\">\r\n\r\n            <table id=\"attachmentsTable\" class=\"table table-responsive table-hover table-bordered\" cellspacing=\"0\">\r\n\r\n              <thead>\r\n                <tr>\r\n                  <th>{{\r\n                    'AREAS.CONFIGURATION.TAB-ATTACHMENT.ATTACHMENTS' | translate }}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let attachment of getSortedAttachments()\" [ngClass]=\"{ 'info': attachment.selected }\"\r\n                  (click)=\"onAttachmentSelected(attachment)\">\r\n                  <td style=\"width: 700px\">{{attachment.path}}</td>\r\n                </tr>\r\n                <tr *ngIf=\"xmlSettings?.documentburster.settings.attachments.items.attachmentItems.length ===0\">\r\n                  <td style=\"width: 700px\">\r\n                    <em id=\"noAttachments\">{{\r\n                      'AREAS.CONFIGURATION.TAB-ATTACHMENT.NO-ATTACHMENTS' | translate }}</em>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n\r\n            </table>\r\n\r\n          </div>\r\n\r\n          <div class=\"col-xs-2\">\r\n\r\n            <button id='btnNewAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onNewEditAttachment('new')\">\r\n              <span class=\"glyphicon\r\n                  glyphicon-plus\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.ADD' | translate }}</button>\r\n\r\n            <button id='btnDeleteAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onDeleteSelectedAttachment()\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-minus\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.DELETE' | translate }}</button>\r\n\r\n            <button id='btnEditAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onNewEditAttachment('edit')\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-edit\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.EDIT' | translate }}</button>\r\n\r\n            <button id='btnUpAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedAttachmentUp()\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-arrow-up\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.UP' | translate }}</button>\r\n\r\n            <button id='btnDownAttachment' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedAttachmentDown()\" [disabled]=\"!selectedAttachment\">\r\n              <span class=\"glyphicon glyphicon-arrow-down\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.DOWN' | translate }}</button>\r\n\r\n            <button id='btnClearAttachments' type=\"button\" class=\"btn btn-default btn-block\"\r\n              (click)=\"onClearAttachments()\">\r\n              <i class=\"fa fa-eraser\"></i>&nbsp;&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.CLEAR' | translate }}</button>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <div class=\"panel panel-default\">\r\n\r\n      <div class=\"panel-heading\">\r\n        <i class=\"fa fa-file-archive-o fa-2x\"></i>&nbsp;&nbsp;{{\r\n        'AREAS.CONFIGURATION.TAB-ATTACHMENT.ARCHIVE-ATTACHMENTS' | translate }}</div>\r\n\r\n      <div class=\"panel-body\">\r\n\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-2\">\r\n\r\n          </div>\r\n\r\n          <div class=\"col-xs-7\">\r\n            <input type=\"checkbox\" id=\"btnArchiveAttachmentsTogether\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.attachments.archive.archiveattachments\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' />\r\n            <label for=\"btnArchiveAttachmentsTogether\" class=\"checkboxlabel\">&nbsp;{{\r\n              'AREAS.CONFIGURATION.TAB-ATTACHMENT.ARCHIVE-ALL-ATTACHMENTS' | translate }}</label>\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-2\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-ATTACHMENT.FILE-NAME' | translate }}\r\n          </div>\r\n\r\n          <div class=\"col-xs-7\">\r\n            <input id=\"archiveFileName\"\r\n              [(ngModel)]=\"xmlSettings?.documentburster.settings.attachments.archive.archivefilename\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n            <dburst-button-variables id=\"btnArchiveFileNameVariables\"\r\n              (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('archiveFileName',$event)\">\r\n            </dburst-button-variables>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-blog.ts": [
        {
          "name": "tabBlogTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-blog.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabBlogTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <div id=\"blogRss\"></div>\r\n\r\n  </div>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_processing/templates/tab-burst.ts": [
        {
          "name": "tabBurstTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-burst.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabBurstTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        PDF / Excel {{ 'AREAS.PROCESSING.TAB-BURST.FILE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"burstFile\"\r\n          [(ngModel)]=\"processingService.procBurstInfo.isSample ? processingService.procBurstInfo.prefilledInputFilePath : processingService.procBurstInfo.inputFileName\"\r\n          class=\"form-control\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <label for=\"burstFileUploadInput\" class=\"btn btn-default btn-block\"><i class=\"fa fa-folder-open-o' }}\"></i>&nbsp;Select File</label>\r\n        <input style=\"display: none;\" type=\"file\" id=\"burstFileUploadInput\" (change)=\"onBurstFileSelected($event)\" accept=\".pdf\" #burstFileUploadInput/>\r\n      <!--  \r\n      <dburst-button-native-system-dialog\r\n          value=\"{{\r\n          'COMPONENTS.BUTTON-NATIVE-SYSTEM-DIALOG.SELECT-FILE' | translate }}\"\r\n          dialogType=\"file\"\r\n          (pathsSelected)=\"onBurstFileSelected($event)\"\r\n        ></dburst-button-native-system-dialog>\r\n        -->\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-1\" style=\"margin-right: 20px\">\r\n        <button\r\n          id=\"btnBurst\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          (click)=\"doBurst()\"\r\n          [disabled]=\"(!processingService.procBurstInfo.prefilledInputFilePath && !processingService.procBurstInfo.inputFileName) || executionStatsService.jobStats.numberOfActiveJobs > 0\"  >\r\n          <i class=\"fa fa-play\"></i>&nbsp;Burst\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\" style=\"margin-left: -20px\">\r\n        <dburst-button-native-system-dialog style=\"display: none;\"\r\n          value=\"{{\r\n          'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n          dialogType=\"file\"\r\n        >\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"!shellService.isJavaOk\">\r\n      <br /><br />\r\n      <span class=\"label label-warning\"\r\n        ><strong\r\n          ><em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}\r\n        </strong></span\r\n      >\r\n      <br /><br />\r\n\r\n      <strong\r\n        id=\"checkPointJavaPreRequisite\"\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-SHORT' | translate\"\r\n      ></strong>\r\n\r\n      <br /><br /><span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n      ></span>\r\n\r\n      <br /><br />\r\n\r\n      <a href=\"#\" [routerLink]=\"['/help', 'installSetupMenuSelected']\"\r\n        ><button type=\"button\" class=\"btn btn-primary\">\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' | translate }}\r\n          <em>Java</em>\r\n        </button></a\r\n      >\r\n    </div>\r\n\r\n    <div\r\n      class=\"row\"\r\n      *ngIf=\"(processingService.procBurstInfo.prefilledInputFilePath || processingService.procBurstInfo.inputFile) && !executionStatsService.logStats.foundDirtyLogFiles && executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length === 0\"\r\n    >\r\n      <div class=\"col-xs-1\">\r\n        <i class=\"fa fa-flag-checkered fa-2x\"></i>\r\n      </div>\r\n\r\n      <div class=\"col-xs-11\">\r\n        <a id=\"qaReminderLink\" href=\"#qaReminder\" data-toggle=\"collapse\"\r\n          >{{ 'AREAS.PROCESSING.TAB-BURST.DID-YOU-RUN-QA' | translate }}\r\n          <em>{{processingService.procBurstInfo.isSample ? processingService.procBurstInfo.prefilledInputFilePath : processingService.procBurstInfo.inputFileName}}</em>?</a\r\n        >\r\n        <div id=\"qaReminder\" class=\"collapse\">\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.BEFORE-EMAILING' | translate }}\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected', processingService.procBurstInfo.prefilledInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath]\"\r\n            >Quality Assurance</a\r\n          >\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.FOR-THE-FILE' | translate }}\r\n          <em>{{processingService.procBurstInfo.isSample ? processingService.procBurstInfo.prefilledInputFilePath : processingService.procBurstInfo.inputFileName}}</em>&nbsp;&nbsp;\r\n          <button\r\n            id=\"goToQa\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-sm\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected', processingService.procBurstInfo.prefilledInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath]\"\r\n          >\r\n            {{ 'AREAS.PROCESSING.TAB-BURST.RUN-QA' | translate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      *ngIf=\"executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length > 0\"\r\n      class=\"row\"\r\n    >\r\n      <div class=\"col-xs-12\">\r\n        <ng-container [ngTemplateOutlet]=\"resumeJobs\"> </ng-container>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <dburst-log-files-viewer-separate-tabs></dburst-log-files-viewer-separate-tabs>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-comparison.ts": [
        {
          "name": "tabComparisonTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-comparison.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabComparisonTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong>\r\n      <a href=\"https://www.reportburster.com/features.html\" target=\"_blank\">\r\n        <em>ReportBurster</em> {{\r\n        'AREAS.HELP.TAB-COMPARISON.FEATURES' | translate }}</a>\r\n    </strong>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <ol [innerHTML]=\"'AREAS.HELP.TAB-COMPARISON.INNER-HTML.DB-FEATURES' | translate\">\r\n\r\n    </ol>\r\n\r\n    <br>\r\n\r\n    <strong>\r\n      <a id='checkPointHelpComparison' href=\"https://www.reportburster.com/features.html\" target=\"_blank\">\r\n        <em>DocumentBurster Server</em> {{\r\n        'AREAS.HELP.TAB-COMPARISON.FEATURES' | translate }}</a>\r\n    </strong>\r\n\r\n    <br>\r\n    <br>\r\n    <div innerHTML=\"'AREAS.HELP.TAB-COMPARISON.INNER-HTML.DB-SERVER-FEATURES1' | translate\"></div>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <ol [innerHTML]=\"'AREAS.HELP.TAB-COMPARISON.INNER-HTML.DB-SERVER-FEATURES2' | translate\">\r\n\r\n    </ol>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/features.html\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">{{\r\n        'AREAS.HELP.TAB-COMPARISON.VIEW-ALL-FEATURES' | translate }}</button>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration-templates/templates/tab-conf-templates.ts": [
        {
          "name": "tabConfigurationTemplatesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration-templates/templates/tab-conf-templates.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabConfTemplates>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-xs-10\"\r\n        style=\"cursor: pointer; height: 500px; overflow: auto\"\r\n      >\r\n        <table id=\"confTemplatesTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.CAPABILITIES' |\r\n                translate }}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.HOW-TO-USE'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                Actions&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr\r\n              id=\"{{configurationFile.folderName}}_{{configurationFile.fileName}}\"\r\n              *ngFor=\"let configurationFile of this.settingsService.getConfigurations()\"\r\n              (click)=\"onConfTemplateClick(configurationFile)\"\r\n              [ngClass]=\"{ 'info': configurationFile.activeClicked}\"\r\n            >\r\n              <td>\r\n                {{configurationFile.templateName}}\r\n                <span *ngIf=\"configurationFile.isFallback\">\r\n                  <strong> (fallback)</strong>\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span class=\"label label-default\" *ngIf=\"!configurationFile.capReportGenerationMailMerge\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>Splitting</em>                \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportGenerationMailMerge\">\r\n                   <i class=\"fa fa-file-text-o\">&nbsp;</i> \r\n                   <em>Generation / Mail Merge</em>\r\n                </span>&nbsp;\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportDistribution\">\r\n                  <i class=\"fa fa-envelope-o\">&nbsp;</i>\r\n                 <em>Distribution</em> \r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span *ngIf=\"!configurationFile.isFallback && !configurationFile.capReportGenerationMailMerge\"\r\n                  >&lt;config&gt;{{configurationFile.relativeFilePath}}&lt;/config&gt;</span\r\n                >\r\n                <span\r\n                  *ngIf=\"configurationFile.isFallback\"\r\n                  [innerHTML]=\"'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.INNER-HTML.DEFAULT-CONFIGURATION' | translate\"\r\n                >\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <div id=\"btnActions_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" class=\"btn-group dropup\"> \r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'visible'\" class=\"btn btn-xs btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Visible&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'hidden'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Hidden&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                <ul class=\"dropdown-menu dropdown-menu-right\" style=\"z-index:1;position: relative;\">\r\n                  <li id=\"btnActionRestore_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" (click)=\"restoreDefaultConfigurationValues()\">Restore Default Configuration Values</li>\r\n                  <li role=\"separator\" class=\"divider\"></li>\r\n                  <li id=\"btnActionHideShow_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" *ngIf=\"configurationFile.visibility == 'visible'\" (click)=\"toggleVisibility()\">Hide <em>{{configurationFile.templateName}}</em></li>\r\n                  <li id=\"btnActionHideShow_{{configurationFile.folderName}}_{{configurationFile.fileName}}\" *ngIf=\"configurationFile.visibility == 'hidden'\" (click)=\"toggleVisibility()\">Show <em>{{configurationFile.templateName}}</em></li>\r\n                 </ul>\r\n                  </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <button\r\n          id=\"btnNew\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create')\"\r\n          style=\"margin-bottom: 5px\"\r\n        >\r\n          <i class=\"fa fa-plus\"></i> {{ 'BUTTONS.NEW' | translate }}\r\n        </button>\r\n        <p></p>\r\n        <button\r\n          id=\"btnEdit\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('update')\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConfiguration()}\"\r\n          style=\"margin-bottom: 5px\"\r\n        >\r\n          <i class=\"fa fa-pencil-square-o\"></i> {{ 'BUTTONS.EDIT' | translate }}\r\n        </button>\r\n        <p></p>\r\n        <button\r\n          id=\"btnDuplicate\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create', true)\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConfiguration()}\"\r\n          style=\"margin-bottom: 5px\"\r\n\r\n        >\r\n          <i class=\"fa fa-clone\"></i> {{ 'BUTTONS.DUPLICATE' | translate }}\r\n        </button>\r\n        <button\r\n          id=\"btnDelete\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"onDeleteSelectedTemplate()\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConfiguration() || getSelectedConfiguration().isFallback}\"\r\n        >\r\n          <i class=\"fa fa-minus\"></i> {{ 'BUTTONS.DELETE' | translate }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration-templates/templates/tab-conf-templates-samples.ts": [
        {
          "name": "tabConfTemplatesSamples",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration-templates/templates/tab-conf-templates-samples.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabConfTemplatesSamples>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-xs-12\"\r\n        style=\"cursor: pointer; height: 500px; overflow: auto\"\r\n      >\r\n        <table id=\"confTemplatesSamplesTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.CAPABILITIES' |\r\n                translate }}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.HOW-TO-USE'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                Actions&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr\r\n              id=\"{{configurationFile.fileName}}\"\r\n              *ngFor=\"let configurationFile of settingsService.getSampleConfigurations()\"\r\n              (click)=\"onConfTemplateClick(configurationFile)\"\r\n              [ngClass]=\"{ 'info': configurationFile.activeClicked}\"\r\n            >\r\n              <td>\r\n                {{configurationFile.templateName}}\r\n                <span *ngIf=\"configurationFile.isFallback\">\r\n                  <strong> (default)</strong>\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span class=\"label label-default\" *ngIf=\"!configurationFile.capReportGenerationMailMerge\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>Splitting</em>                \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportGenerationMailMerge\">\r\n                   <i class=\"fa fa-file-text-o\">&nbsp;</i> \r\n                   <em>Generation / Mail Merge</em>\r\n                </span>&nbsp;\r\n                <span class=\"label label-default\" *ngIf=\"configurationFile.capReportDistribution\">\r\n                  <i class=\"fa fa-envelope-o\">&nbsp;</i>\r\n                 <em>Distribution</em> \r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span *ngIf=\"!configurationFile.isFallback && !configurationFile.capReportGenerationMailMerge\"\r\n                  >&lt;config&gt;{{configurationFile.relativeFilePath}}&lt;/config&gt;</span\r\n                >\r\n                <span\r\n                  *ngIf=\"configurationFile.isFallback\"\r\n                  [innerHTML]=\"'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.INNER-HTML.DEFAULT-CONFIGURATION' | translate\"\r\n                >\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <div class=\"btn-group dropup\"> \r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'visible'\" class=\"btn btn-xs btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Visible&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                  <button type=\"button\" *ngIf=\"configurationFile.visibility == 'hidden'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Hidden&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                  <li *ngIf=\"configurationFile.visibility == 'visible'\" (click)=\"toggleVisibility()\">Hide <em>{{configurationFile.templateName}}</em></li>\r\n                  <li *ngIf=\"configurationFile.visibility == 'hidden'\" (click)=\"toggleVisibility()\">Show <em>{{configurationFile.templateName}}</em></li>\r\n                 </ul>\r\n                  </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-documentation.ts": [
        {
          "name": "tabDocumentationTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-documentation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabDocumentationTemplate>\r\n  <div class=\"well\">\r\n    <br />\r\n\r\n    <ol>\r\n      <li>\r\n        <a href=\"https://www.reportburster.com/docs/html/quickstart/index.html\" target=\"_blank\">QuickStart -\r\n          <em>ReportBurster</em> in 5 Minutes</a> will help you to quickly get started with report bursting\r\n      </li>\r\n      <br>\r\n      <li>\r\n        <a href=\"https://www.reportburster.com/docs/html/userguide/index.html\" target=\"_blank\">\r\n          <em>ReportBurster</em> User Guide</a> explains with more details what &amp; how can be achieved with\r\n        <em>ReportBurster</em></li>\r\n      <br>\r\n      <li>\r\n        <a id='checkPointHelpDocumentation' href=\"https://www.reportburster.com/docs/html/advanced/index.html\" target=\"_blank\">\r\n          <em>ReportBurster</em> - Advanced Report Delivery Scenarios</a> explains how\r\n        <em>ReportBurster</em> scripting can be used to achieve more complex report delivery scenarios</li>\r\n    </ol>\r\n  </div>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-email-address-validation.ts": [
        {
          "name": "tabEmailAddressValidationTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-email-address-validation.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabEmailAddressValidationTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <a href=\"http://www.ietf.org/rfc/rfc2822.txt\" target=\"_blank\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.RFC2822-COMPLIANT' | translate }}</a> {{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.RFC2822-ACHIEVED' | translate }}\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowQuotedIdentifiers\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowquotedidentifiers\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowQuotedIdentifiers\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_QUOTED_IDENTIFIERS' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_QUOTED_IDENTIFIERS' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowParensInLocalPart\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowparensinlocalpart\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowParensInLocalPart\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_PARENS_IN_LOCALPART' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_PARENS_IN_LOCALPART' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowDomainLiterals\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowdomainliterals\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowDomainLiterals\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_DOMAIN_LITERALS' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_DOMAIN_LITERALS' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowDotInaText\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowdotinatext\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowDotInaText\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_DOT_IN_A_TEXT' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_DOT_IN_A_TEXT' | translate\"></span>\r\n       </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input type=\"checkbox\" id=\"btnAllowSquareBracketsInaText\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.allowsquarebracketsinatext\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n        <label for=\"btnAllowSquareBracketsInaText\" class=\"checkboxlabel\" style=\"text-decoration: underline;\">{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.ALLOW_SQUARE_BRACKETS_IN_A_TEXT' | translate }}</label> - <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.INNER-HTML.ALLOW_SQUARE_BRACKETS_IN_A_TEXT' | translate\"></span>\r\n      </div>\r\n    </div>\r\n    <hr/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <strong>{{\r\n          'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-VALIDATION.SKIP_EMAIL_VALIDATION' | translate }}</strong>\r\n      </div>\r\n    </div>\r\n    <br/>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <textarea class=\"form-control\" rows=\"14\" id=\"txtSkipValidationFor\"\r\n        [(ngModel)]=\"xmlSettings?.documentburster.settings.emailrfc2822validator.skipvalidationfor\"\r\n        (ngModelChange)='settingsChangedEventHandler($event)'></textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-email-cloud-providers.ts": [
        {
          "name": "tabEmailCloudProvidersTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-email-cloud-providers.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabEmailCloudProvidersTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <h5>\r\n      <u><em>ReportBurster</em> can be used with all the major cloud email providers.</u>\r\n    </h5>\r\n\r\n    <br>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://www.office.com\" target=\"_blank\">Office 365</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://www.office.com\" target=\"_blank\"><img src=\"assets/images/office365_32.png\"></a> Welcome to <a\r\n          href=\"https://www.office.com\" target=\"_blank\">Office</a>. Your place to create, communicate, collaborate, and\r\n        get great work done.\r\n        <br>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://gsuite.google.com\" target=\"_blank\">G Suite / Google Apps</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://gsuite.google.com\" target=\"_blank\"><img src=\"assets/images/gapps_32.png\"></a> Do your best\r\n        work with\r\n        <a href=\"https://gsuite.google.com\" target=\"_blank\">Google's suite</a> of intelligent apps (formerly <a href=\"https://gsuite.google.com\"\r\n          target=\"_blank\">Google Apps</a>). Get business email, video conferencing, online storage and file sharing.\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://aws.amazon.com/ses/\" target=\"_blank\">Amazon Simple Email Service (Amazon SES)</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <span style=\"margin-right:2px\"><a href=\"https://aws.amazon.com/ses/\" target=\"_blank\"><i class=\"fa fa-amazon\"\r\n              style=\"font-size:32px; color:gold\"></i></a></span>\r\n        <a href=\"https://aws.amazon.com/ses/\" target=\"_blank\">Amazon Simple Email Service (Amazon SES)</a> evolved from\r\n        the\r\n        email platform that Amazon.com created to communicate with its own customers. In order to serve its\r\n        ever-growing global\r\n        customer base, Amazon.com needed to build an email platform that was flexible, scalable, reliable, and\r\n        cost-effective.\r\n        Amazon SES is the result of years of Amazon's own research, development, and iteration in the areas of sending\r\n        and\r\n        receiving email.\r\n        <br><br> Amazon SES eliminates the complexity and expense of building an in-house email solution. There is no\r\n        need\r\n        to set up your own servers, maintain your network infrastructure, or warm up your sending IP addresses.\r\n        <br><br> You can use the Amazon SES API to integrate the functionality of Amazon SES directly into applications\r\n        you\r\n        develop. Or you can use the Amazon SES SMTP interface to send email through the third-party applications you\r\n        already\r\n        use, such as email clients, ticketing systems, and autoresponders.\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://www.mailgun.com\" target=\"_blank\">Mailgun</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://www.mailgun.com\" target=\"_blank\"><img src=\"assets/images/mailgun_32.png\"> Send, receive and\r\n          track email effortlessly. 10,000 emails free every month.</a>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://sendgrid.com\" target=\"_blank\">SendGrid</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://sendgrid.com\" target=\"_blank\"><img src=\"assets/images/sendgrid_32.png\"></a> Email Delivery\r\n        Service\r\n        trusted by over 55,000 paying customers like Spotify, Uber, and Airbnb trust <a href=\"https://sendgrid.com\"\r\n          target=\"_blank\">SendGrid</a> to send more than 30 billion emails every month.\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"https://www.sparkpost.com\" target=\"_blank\">SparkPost</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"https://www.sparkpost.com\" target=\"_blank\"><img src=\"assets/images/sparkpost.png\"></a> The World’s\r\n        Fastest-Growing\r\n        Email Delivery Service. When your enterprise counts on email, <a href=\"https://www.sparkpost.com\" target=\"_blank\">SparkPost</a>\r\n        got you covered.\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"panel panel-primary\">\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">\r\n          <a href=\"http://mandrill.com\" target=\"_blank\">Mandrill</a></h3>\r\n      </div>\r\n      <div class=\"panel-body\">\r\n        <a href=\"http://mandrill.com\" target=\"_blank\"><img src=\"assets/images/mandrill_32.png\"> Mandrill</a> sends 20\r\n        billion\r\n        emails every month for more than 10 million users.\r\n      </div>\r\n    </div>\r\n\r\n    <img src=\"assets/images/transactional-email-services.png\">\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-email-connection-settings.ts": [
        {
          "name": "tabEmailConnectionSettingsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-email-connection-settings.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template\r\n  #tabEmailConnectionSettingsTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.CONNECTION' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnUseExistingEmailConnection\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n          (change)=\"onUseExistingEmailConnectionClick($event)\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnUseExistingEmailConnection\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.USE-EXISTING-CONNECTION'\r\n          | translate }}</label\r\n        >\r\n        <div\r\n          *ngIf=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n          class=\"btn-group pull-right\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            id=\"btnSelectedEmailConnection\"\r\n            class=\"btn btn-sm\"\r\n            [ngClass]=\"xmlSettings?.documentburster.settings.emailserver.useconn ? 'btn-primary' : 'btn-default'\"\r\n          >\r\n            {{selectedEmailConnectionFile?.connectionName}}\r\n            <span\r\n              id=\"selectedEmailConnectionDefault\"\r\n              *ngIf=\"selectedEmailConnectionFile?.defaultConnection\"\r\n              >(default)</span\r\n            >\r\n          </button>\r\n          <button\r\n            id=\"btnSelectAnotherEmailConnection\"\r\n            type=\"button\"\r\n            class=\"btn btn-sm btn-default dropdown-toggle\"\r\n            data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            <span class=\"caret\"></span>\r\n            <span class=\"sr-only\">Toggle Dropdown</span>\r\n          </button>\r\n          <ul class=\"dropdown-menu\">\r\n            <li *ngFor=\"let connectionFile of settingsService.connectionFiles\">\r\n              <a\r\n                id=\"{{connectionFile.connectionCode}}\"\r\n                href=\"javascript:;\"\r\n                (click)=\"onUsedExistingEmailConnectionChanged(connectionFile.connectionCode,connectionFile.connectionName)\"\r\n                >{{connectionFile.connectionName}}\r\n                <span *ngIf=\"connectionFile.defaultConnection\"\r\n                  >(default)</span\r\n                ></a\r\n              >\r\n            </li>\r\n            <li role=\"separator\" class=\"divider\"></li>\r\n            <li>\r\n              <a\r\n                id=\"manageEmailConnections\"\r\n                href=\"#\"\r\n                [routerLink]=\"[\r\n    '/ext-connections',\r\n    'emailSettingsMenuSelected',\r\n    settingsService.currentConfigurationTemplatePath,\r\n    settingsService.currentConfigurationTemplateName\r\n  ]\"\r\n                >{{\r\n                'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.MANAGE-EMAIL-CONNECTIONS'\r\n                | translate }}</a\r\n              >\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.name\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromName',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.FROM-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromEmailAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.fromaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromEmailAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromEmailAddress',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.HOST' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"emailServerHost\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.host\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnEmailServerHostVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailServerHost',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.USER-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"userName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.userid\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnUserNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('userName',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PASSWORD' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPassword\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.userpassword\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          type=\"password\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPasswordVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPassword',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.PORT' | translate\r\n        }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"smtpPort\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.port\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmtpPortVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smtpPort',$event)\"\r\n          [shouldBeDisabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSSL\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.usessl\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n        <label for=\"btnSSL\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SSL-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnTLS\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.emailserver.usetls\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n        />\r\n        <label for=\"btnTLS\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TLS-ENABLED' |\r\n          translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.TEST-CONNECTION' |\r\n        translate }}\r\n      </div>\r\n\r\n      <div class=\"col-xs-7\">\r\n        <button\r\n          id=\"btnSendTestEmail\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary btn-block\"\r\n          (click)=\"doTestSMTPConnection()\"\r\n        >\r\n          <i class=\"fa fa-paper-plane\"></i>&nbsp;&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.SEND-TEST-EMAIL' |\r\n          translate }}\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row \">\r\n      <div class=\"col-xs-2 \">\r\n        <a href=\"https://products.office.com/en-us/exchange \" target=\"_blank \">\r\n          <i\r\n            class=\"ms-Icon ms-Icon--ExchangeLogo\"\r\n            style=\"font-size:30px;color:orange \"\r\n          ></i>\r\n          <br />Microsoft Exchange\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"col-xs-7 \">\r\n        <span\r\n          [innerHTML]=\"\r\n        'AREAS.CONFIGURATION.TAB-EMAIL-CONNECTION-SETTINGS.INNER-HTML.DB-ALL-CLOUD-PROVIDERS' | translate\"\r\n        ></span>\r\n        <br />\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://www.office.com\" target=\"_blank \">\r\n            <i\r\n              class=\"ms-Icon ms-Icon--OfficeLogo\"\r\n              style=\"font-size:24px;\r\n          color:red \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Office 365</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://gsuite.google.com \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-google \"\r\n              style=\"font-size:32px; color:gray\r\n          \"\r\n            ></i>\r\n            <p style=\"margin-top:3px \">Google Apps</p>\r\n          </a>\r\n        </div>\r\n        <div class=\"col-xs-4 \">\r\n          <a href=\"https://aws.amazon.com/ses/ \" target=\"_blank \">\r\n            <i\r\n              class=\"fa fa-amazon \"\r\n              style=\"font-size:32px; color:gold\r\n          \"\r\n            ></i>\r\n            <p style=\"margin-top:2px \">Amazon AWS</p>\r\n          </a>\r\n        </div>\r\n        <dburst-button-well-known-email-providers\r\n          *ngIf=\"!xmlSettings?.documentburster.settings.emailserver.useconn\"\r\n          (sendSelectedProvider)=\"updateSMTPFormControlsWithSelectedProviderSettings($event)\"\r\n        >\r\n        </dburst-button-well-known-email-providers>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
        }
      ],
      "src/app/areas/_configuration/templates/tab-email-message.ts": [
        {
          "name": "tabEmailMessageTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-email-message.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabEmailMessageTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">{{\r\n        'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.TO' | translate }}</div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"emailToAddress\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.to\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnEmailToAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailToAddress',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p>\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-xs-1\">{{\r\n          'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.CC' | translate }}</div>\r\n        <div class=\"col-xs-8\">\r\n          <input id=\"emailCcAddress\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.cc\"\r\n            (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n        </div>\r\n\r\n        <div class=\"col-xs-3\">\r\n          <dburst-button-variables id=\"btnEmailCcAddressVariables\"\r\n            (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailCcAddress',$event)\">\r\n          </dburst-button-variables>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <p>\r\n        <div class=\"row\">\r\n\r\n          <div class=\"col-xs-1\">{{\r\n            'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.BCC' | translate }}</div>\r\n          <div class=\"col-xs-8\">\r\n            <input id=\"emailBccAddress\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.bcc\"\r\n              (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n            <dburst-button-variables id=\"btnEmailBccAddressVariables\"\r\n              (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailBccAddress',$event)\">\r\n            </dburst-button-variables>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <p>\r\n          <div class=\"row\">\r\n\r\n            <div class=\"col-xs-1\">{{\r\n              'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.SUBJECT' | translate }}</div>\r\n            <div class=\"col-xs-8\">\r\n              <input id=\"emailSubject\" [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.subject\"\r\n                (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n            </div>\r\n\r\n            <div class=\"col-xs-3\">\r\n              <dburst-button-variables id=\"btnEmailSubjectVariables\"\r\n                (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('emailSubject',$event)\">\r\n              </dburst-button-variables>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <p></p>\r\n\r\n          <div class=\"row\">\r\n\r\n            <div class=\"col-xs-1\">{{\r\n                'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.MESSAGE' | translate }}</div>\r\n            <div class=\"col-xs-8\">\r\n\r\n              <p-editor [style]=\"{'height':'250px'}\"\r\n                id=\"wysiwygEmailMessage\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && \r\n                !xmlSettings?.documentburster.settings.htmlemaileditcode\"\r\n                [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.html\"\r\n                (onTextChange)=\"settingsChangedQuillEventHandler($event)\"\r\n                (onSelectionChange)=\"onEditorSelectionChanged($event)\"\r\n                (onInit)=\"onEditorCreated($event)\">\r\n                <ng-template pTemplate=\"header\">\r\n                  <span class=\"ql-formats\">\r\n                    <button type=\"button\" class=\"ql-bold\" aria-label=\"Bold\"></button>\r\n                    <button type=\"button\" class=\"ql-italic\" aria-label=\"Italic\"></button>\r\n                    <button type=\"button\" class=\"ql-underline\" aria-label=\"Underline\"></button>\r\n                  </span>\r\n                  <span class=\"ql-formats\">\r\n                    <button class=\"ql-list\" value=\"ordered\" aria-label=\"Ordered List\" type=\"button\"></button>\r\n                    <button class=\"ql-list\" value=\"bullet\" aria-label=\"Unordered List\" type=\"button\"></button>\r\n                  </span>\r\n                </ng-template>\r\n              </p-editor>\r\n\r\n              <textarea class=\"form-control\" rows=\"14\" id=\"htmlCodeEmailMessage\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings?.documentburster.settings.htmlemaileditcode\"\r\n                [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.html\"\r\n                (ngModelChange)='settingsChangedEventHandler($event)'></textarea>\r\n\r\n              <textarea class=\"form-control\" rows=\"14\" id=\"textEmailMessage\"\r\n                *ngIf=\"!xmlSettings?.documentburster.settings.htmlemail\"\r\n                [(ngModel)]=\"xmlSettings?.documentburster.settings.emailsettings.text\"\r\n                (ngModelChange)='settingsChangedEventHandler($event)'></textarea>\r\n\r\n            </div>\r\n\r\n            <div class=\"col-xs-3\">\r\n\r\n              <dburst-button-variables id=\"btnWysiwygEmailMessageVariables\"\r\n                (sendSelectedVariable)=\"updateQuillFormControlWithSelectedVariable($event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && !xmlSettings?.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-variables>\r\n              <dburst-button-variables id=\"btnHtmlCodeEmailMessageVariables\"\r\n                (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('htmlCodeEmailMessage',$event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings?.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-variables>\r\n              <dburst-button-variables id=\"btnTextEmailMessageVariables\"\r\n                (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('textEmailMessage',$event)\"\r\n                *ngIf=\"!xmlSettings?.documentburster.settings.htmlemail\">\r\n              </dburst-button-variables>\r\n\r\n              <dburst-button-html-preview [htmlCode]=\"xmlSettings?.documentburster.settings.emailsettings.html\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings?.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-html-preview>\r\n\r\n              <dburst-button-native-system-dialog value=\"{{\r\n                  'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.LOAD-TEMPLATE' | translate }}\" dialogType=\"file\"\r\n                (pathsSelected)=\"onLoadHTMLTemplateClick($event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-native-system-dialog>\r\n\r\n              <dburst-button-native-system-dialog value=\"{{\r\n                  'AREAS.CONFIGURATION.TAB-EMAIL-MESSAGE.SAVE-TEMPLATE' | translate }}\" dialogType=\"file\"\r\n                saveDialog=\"true\" (pathsSelected)=\"onSaveHTMLTemplateClick($event)\"\r\n                *ngIf=\"xmlSettings?.documentburster.settings.htmlemail && xmlSettings.documentburster.settings.htmlemaileditcode\">\r\n              </dburst-button-native-system-dialog>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n  </div>\r\n\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-email-tuning.ts": [
        {
          "name": "tabEmailTuningTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-email-tuning.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabEmailTuningTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSJMActive\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSJMActive\" class=\"checkboxlabel\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.SJM-ACTIVE' |\r\n          translate }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.REPLY-TO-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"replyToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.replytoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.REPLY-TO-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"replyToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.replytoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.BOUNCE-TO-ADDRESS' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"bounceToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.bouncetoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.BOUNCE-TO-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"bounceToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.bouncetoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.READ-RECEIPT-ADDRESS'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"receiptToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.receipttoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.READ-RECEIPT-NAME' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"receiptToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.receipttoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-4\">\r\n        {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.DELIVERY-RECEIPT-ADDRESS'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"dispositionNotificationToAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.dispositionnotificationtoaddress\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.DELIVERY-RECEIPT-NAME'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <input\r\n          id=\"dispositionNotificationToName\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.dispositionnotificationtoname\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.CUSTOM-EMAIL-HEADERS'\r\n        | translate }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <textarea\r\n          class=\"form-control\"\r\n          rows=\"5\"\r\n          id=\"textCustomEmailHeaders\"\r\n          placeholder=\"header1, value1&#x0a;header2, value2\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.customemailheaders\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        {{\r\n        'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.CUSTOM-SESSION-PROPERTIES'\r\n        | translate }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <textarea\r\n          class=\"form-control\"\r\n          rows=\"5\"\r\n          id=\"textCustomSessionProperties\"\r\n          placeholder=\"property1, value1&#x0a;property2, value2\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.customsessionproperties\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnJavaxMailDebug\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.javaxmaildebug\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n          <label for=\"btnJavaxMailDebug\" class=\"checkboxlabel\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.DEBUG-EMAIL' |\r\n            translate }}\r\n          </label>\r\n        </div>\r\n      </div>\r\n    \r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnTransportModeLoggingOnly\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.transportmodeloggingonly\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n          <label for=\"btnTransportModeLoggingOnly\" class=\"checkboxlabel\"\r\n            >{{\r\n            'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.TRANSPORT-MODE-LOGGING'\r\n            | translate }}\r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"xmlSettings?.documentburster.settings.enableincubatingfeatures\">\r\n    \r\n      <hr />\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-HOST' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyHost\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.host\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-PORT' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyPort\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.port\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-USER-NAME' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyUserName\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.username\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-PASSWORD' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-3\">\r\n          <input\r\n            id=\"proxyPassword\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.password\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-ADVANCED-EMAIL-TUNING.PROXY-BRIDGE-PORT' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-8\">\r\n          <input\r\n            id=\"proxySocks5BridgePort\"\r\n            [(ngModel)]=\"xmlSettings?.documentburster.settings.simplejavamail.proxy.socks5bridgeport\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            class=\"form-control\"\r\n            [disabled]=\"!xmlSettings?.documentburster.settings.simplejavamail.active\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-enable-disable-delivery.ts": [
        {
          "name": "tabEnableDisableDeliveryTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-enable-disable-delivery.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabEnableDisableDeliveryTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsEmail\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.email\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsEmail\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SEND-BY-EMAIL' |\r\n          translate }}</label\r\n        >\r\n        <span\r\n          id=\"btnEmailConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.email\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n            '/configuration',\r\n            'emailSettingsMenuSelected',\r\n            settingsService.currentConfigurationTemplatePath,\r\n            settingsService.currentConfigurationTemplateName\r\n          ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.EMAIL-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsUpload\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.upload\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsUpload\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.UPLOAD-DOCUMENTS' |\r\n          translate }}</label\r\n        >\r\n\r\n        <span\r\n          id=\"btnUploadConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.upload\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n          '/configuration',\r\n          'ftpSettingsMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.UPLOAD-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsWeb\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.web\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsWeb\" class=\"checkboxlabel\"\r\n          >&nbsp;<span\r\n            [innerHTML]=\"'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SEND-TO-WEB' | translate\"\r\n          ></span\r\n        ></label>\r\n\r\n        <span\r\n          id=\"btnWebConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.web\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n          '/configuration',\r\n          'documentBursterWebSettingsMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.WEB-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnSendDocumentsSMS\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.sendfiles.sms\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnSendDocumentsSMS\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SEND-SMS-MESSAGES' |\r\n          translate }}</label\r\n        >\r\n        <span\r\n          id=\"btnSMSConfiguration\"\r\n          *ngIf=\"xmlSettings?.documentburster.settings.sendfiles.sms\"\r\n        >\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"[\r\n          '/configuration',\r\n          'smsSettingsMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\"\r\n            >&nbsp;\r\n            <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.SMS-CONFIGURATION'\r\n              | translate }}\r\n            </button>\r\n          </a>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnDeleteDocuments\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.deletefiles\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnDeleteDocuments\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.DELETE-DOCUMENTS-AFTER-DELIVERY'\r\n          | translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnQuarantineDocuments\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.quarantinefiles\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n        />\r\n        <label for=\"btnQuarantineDocuments\" class=\"checkboxlabel\"\r\n          >&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-ENABLE-DISABLE-DELIVERY.QUARANTINE-DOCUMENTS-WHICH-FAIL'\r\n          | translate }}</label\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-examples.ts": [
        {
          "name": "tabExamplesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-examples.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabExamplesTemplate>\r\n  <div class=\"well\">\r\n    <h3 id=\"checkPointHelpExamples\"><em>ReportBurster</em> Examples</h3>\r\n\r\n    <br />People are using <em>ReportBurster</em> for the following situations\r\n\r\n    <br />\r\n    <br />1.\r\n\r\n    <em>ReportBurster</em> as a general\r\n    <a\r\n      title=\"Examples of how people are using DocumentBurster report distribution software\"\r\n      href=\"https://www.pdfburst.com/blog/report-distribution-software/\"\r\n      >Report Distribution Software</a\r\n    >&nbsp;&nbsp;\r\n    <a\r\n      href=\"https://www.pdfburst.com/blog/report-distribution-software/\"\r\n      target=\"_blank\"\r\n    >\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n        View Examples\r\n      </button>\r\n    </a>\r\n\r\n    <br />\r\n    <br />\r\n    2.\r\n\r\n    <a\r\n      title=\"Examples of how people are using DocumentBurster to burst and distribute Crystal Reports documents\"\r\n      href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\"\r\n      >Burst and Distribute Crystal Reports Documents</a\r\n    >\r\n    using <em>ReportBurster</em>&nbsp;&nbsp;\r\n    <a\r\n      href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\"\r\n      target=\"_blank\"\r\n    >\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n        View Examples\r\n      </button>\r\n    </a>\r\n\r\n    <br />\r\n    <br />3.\r\n\r\n    <a\r\n      title=\"Examples of how people are using DocumentBurster for emailing payslips to employees\"\r\n      href=\"https://www.pdfburst.com/blog/email-payslips/\"\r\n      >Email Payslips to Employees</a\r\n    >\r\n    using <em>ReportBurster</em>&nbsp;&nbsp;\r\n    <a href=\"https://www.pdfburst.com/blog/email-payslips/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">\r\n        View Examples\r\n      </button>\r\n    </a>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_ext-connections/templates/tab-ext-connection.ts": [
        {
          "name": "tabExternalConnectionsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_ext-connections/templates/tab-ext-connection.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabExternalConnectionsTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div\r\n        class=\"col-xs-10\"\r\n        style=\"cursor: pointer; height: 500px; overflow: auto\"\r\n      >\r\n        <table id=\"extConnectionsTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.TYPE'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.USED-BY'\r\n                | translate }}\r\n              </th>\r\n              <th>\r\n                Actions&nbsp;&nbsp;\r\n              </th>\r\n        \r\n              </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr\r\n          id=\"{{connectionFile.fileName}}\"\r\n          *ngFor=\"let connectionFile of settingsService.connectionFiles\"\r\n          (click)=\"onItemClick(connectionFile)\"\r\n          [ngClass]=\"{ 'info': connectionFile.activeClicked}\"\r\n        >\r\n          <td>\r\n            {{connectionFile.connectionName}}\r\n          </td>\r\n          <td>\r\n            {{connectionFile.connectionType}}\r\n          </td>\r\n          \r\n        <td>\r\n        {{connectionFile.usedBy}}\r\n         </td>\r\n         \r\n          <td>\r\n \r\n          <div class=\"btn-group dropup\"> \r\n              \r\n            <button type=\"button\" id=\"btnDefault_{{connectionFile.fileName}}\" *ngIf=\"connectionFile.defaultConnection\" class=\"btn btn-xs btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Default&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n            <button type=\"button\" id=\"btnActions_{{connectionFile.fileName}}\" *ngIf=\"!connectionFile.defaultConnection\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Actions&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n              \r\n            <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                  <li id=\"btnSendTestEmail_{{connectionFile.fileName}}\" (click)=\"doTestSMTPConnection()\">Send Test Email</li>\r\n                  <li id=\"btnSeparator_{{connectionFile.fileName}}\" role=\"separator\" class=\"divider\" *ngIf=\"!connectionFile.defaultConnection\"></li>\r\n                  <li id=\"btnToggleDefault_{{connectionFile.fileName}}\" *ngIf=\"!connectionFile.defaultConnection\" (click)=\"toggleDefault()\">Make <strong>Default</strong></li>\r\n            </ul>\r\n                \r\n          </div>\r\n              \r\n        \r\n        </td>\r\n        \r\n          </tr>\r\n\r\n          \r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <button\r\n          id=\"btnNew\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create')\"\r\n          style=\"margin-bottom: 5px\"\r\n        >\r\n          <i class=\"fa fa-plus\"></i> {{ 'BUTTONS.NEW' | translate }}\r\n        </button>\r\n        <p></p>\r\n        <button\r\n          id=\"btnEdit\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('update')\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConnection()}\"\r\n          style=\"margin-bottom: 5px\"\r\n\r\n        >\r\n          <i class=\"fa fa-pencil-square-o\"></i> {{ 'BUTTONS.EDIT' | translate }}\r\n        </button>\r\n        \r\n        <button\r\n          id=\"btnDuplicate\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"showCrudModal('create', true)\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConnection()}\"\r\n          style=\"margin-bottom: 5px\"\r\n\r\n        >\r\n          <i class=\"fa fa-clone\"></i> {{ 'BUTTONS.DUPLICATE' | translate }}\r\n        </button>\r\n        \r\n        <button\r\n          id=\"btnDelete\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-default col-xs-12\"\r\n          (click)=\"onDeleteSelectedConnection()\"\r\n          [ngClass]=\"{ 'disabled': !getSelectedConnection() || getSelectedConnection().defaultConnection || getSelectedConnection().usedBy}\"\r\n          style=\"margin-bottom: 100px\"\r\n          >\r\n          <i class=\"fa fa-minus\"></i> {{ 'BUTTONS.DELETE' | translate }}\r\n        </button>\r\n\r\n        <p>\r\n        \r\n        <button\r\n          id=\"btnGoBack\"\r\n          type=\"button\"\r\n          class=\"btn btn-flat btn-primary col-xs-12\"\r\n          (click)=\"goBack()\"\r\n          *ngIf=\"goBackLocation\"\r\n        >\r\n        {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.GO-BACK' |\r\n          translate }} <br> \r\n          {{this.configurationFileName}} <i class=\"fa fa-long-arrow-right\"></i><br>\r\n        {{ 'AREAS.CONFIGURATION.LEFT-MENU.EMAIL' | translate }} <i class=\"fa fa-long-arrow-right\"></i><br>\r\n          {{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.CONNECTION' |\r\n          translate }}<br>{{ 'AREAS.EXTERNAL-CONNECTIONS.TAB-EXT-CONNECTIONS.SETTINGS' |\r\n          translate }}<br> \r\n        </button>\r\n\r\n        <p>\r\n   \r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n        \r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-extra-packages.ts": [
        {
          "name": "tabExtraPackagesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-extra-packages.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabExtraPackagesTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <dburst-extra-packages></dburst-extra-packages>\r\n    \r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-free.ts": [
        {
          "name": "tabFreeTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-free.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabFreeTemplate>\r\n  <div class=\"well\">\r\n    <span [innerHTML]=\"\r\n      'AREAS.HELP.TAB-FREE.INNER-HTML.DO-YOU-WORK' | translate\r\n  \"></span>\r\n\r\n\r\n    <h3>{{\r\n      'AREAS.HELP.TAB-FREE.HOW-TO-APPLY' | translate }}</h3>\r\n\r\n    <a href=\"https://www.reportburster.com/services/free-for-schools/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">Get\r\n        <em>ReportBurster</em> {{\r\n        'AREAS.HELP.TAB-FREE.FREE-FOR-SCHOOLS' | translate }}</button>\r\n    </a>\r\n\r\n    <br>\r\n    <br>\r\n    <span [innerHTML]=\"\r\n    'AREAS.HELP.TAB-FREE.INNER-HTML.IN-ORDER-APPLY' | translate\"></span>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <iframe style=\"border: none; overflow: hidden;\"\r\n      src=\"https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2FDocumentBurster%2F&amp;tabs&amp;width=500&amp;height=214&amp;small_header=false&amp;adapt_container_width=false&amp;hide_cover=false&amp;show_facepile=true&amp;appId=250210611829648\"\r\n      width=\"600\" height=\"200\" frameborder=\"0\" scrolling=\"no\" sandbox=\"allow-scripts allow-same-origin\"></iframe>\r\n\r\n    <hr>\r\n\r\n    <h3 id='checkPointHelpFreeForSchools' style=\"text-decoration: underline;\">How Schools Use\r\n      <em>ReportBurster</em> Software</h3>\r\n    <em>\"At the university we provide reading lists for each course of study. These reading list are provided by the\r\n      course tutors\r\n      and annually we like to feed back to the tutors borrowing figures for the items on the reading lists. We are\r\n      using Crystal\r\n      Reports against an Access database to produce a single PDF per Faculty. DocumentBurster is ideal for splitting\r\n      the large\r\n      Faculty report into individual reports per course tutor and auto-emailing the tutor their own reading lists for\r\n      evaluation.</em>\r\n    <br>\r\n    <br>\r\n    <em>DocumentBurster saves the library staff considerable time and effort whilst proving valuable feedback to\r\n      tutors.\"</em>\r\n    <br>\r\n    <br>\r\n    <strong>Helen Cooper, Library Application Support Analyst</strong>\r\n    <br>\r\n    <a href=\"https://www.strath.ac.uk/\" target=\"_blank\">University of Strathclyde, Glasgow, United Kingdom</a>\r\n    <br>\r\n    <hr>\r\n    <h3 style=\"text-decoration: underline;\">More\r\n      <em>ReportBurster</em> School Examples</h3>\r\n    <br>1.\r\n    <em>ReportBurster</em> as a general\r\n    <a title=\"Examples of how people are using DocumentBurster report distribution software\"\r\n      href=\"https://www.pdfburst.com/blog/report-distribution-software/\">Report\r\n      Distribution Software</a>\r\n    <a href=\"https://www.pdfburst.com/blog/report-distribution-software/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">View Examples</button>\r\n    </a>\r\n\r\n    <br>\r\n    <br> 2.\r\n    <a title=\"Examples of how people are using DocumentBurster to burst and distribute Crystal Reports documents\"\r\n      href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\">Burst\r\n      and Distribute Crystal Reports Documents</a> using\r\n    <em>ReportBurster</em>\r\n    <a href=\"https://www.pdfburst.com/blog/crystal-reports-distribution/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">View Examples</button>\r\n    </a>\r\n    <br>\r\n    <br> 3.\r\n    <a title=\"Examples of how people are using DocumentBurster for emailing payslips to employees\"\r\n      href=\"https://www.pdfburst.com/blog/email-payslips/\">Email\r\n      Payslips to Employees</a> using\r\n    <em>ReportBurster</em>\r\n    <a href=\"https://www.pdfburst.com/blog/email-payslips/\" target=\"_blank\">\r\n      <button class=\"btn btn-primary btn-xs\" type=\"button\">View Examples</button>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-general-settings.ts": [
        {
          "name": "tabGeneralSettingsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-general-settings.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabGeneralSettingsTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.BURST-FILE-NAME' | translate }}</div>\r\n      <div class=\"col-xs-6\">\r\n        <input id=\"burstFileName\" class=\"form-control\" [(ngModel)]=\"xmlSettings?.documentburster?.settings.burstfilename\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      </div>\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables id=\"btnBurstFileNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('burstFileName',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.OUTPUT-FOLDER' | translate }}</div>\r\n      <div class=\"col-xs-6\">\r\n        <input id=\"outputFolder\" class=\"form-control\" [(ngModel)]=\"xmlSettings?.documentburster?.settings.outputfolder\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-native-system-dialog dialogType=\"folder\" (pathsSelected)=\"onSelectOutputFolderPath($event)\">\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables id=\"btnOutputFolderVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('outputFolder',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.QUARANTINE-FOLDER' | translate }}</div>\r\n      <div class=\"col-xs-6\">\r\n        <input id=\"quarantineFolder\" class=\"form-control\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster?.settings.quarantinefolder\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-native-system-dialog dialogType=\"folder\" (pathsSelected)=\"onSelectQuarantineFolderPath($event)\">\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n        <dburst-button-variables id=\"btnQuarantineFolderVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('quarantineFolder',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-12\">\r\n        <a href=\"https://msdn.microsoft.com/en-us/library/aa365247#naming_conventions\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.INVALID-CHARS-IN-PATHS' | translate }} <span\r\n            class=\"label label-default\">\\\r\n            / : * ? \" &lt; &gt; |</span>\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n    <div class=\"row\" *ngIf=\"xmlSettings?.documentburster?.settings?.capabilities?.reportdistribution\">\r\n\r\n      <div class=\"col-xs-12\">\r\n        <a id=\"btnEnableDisableDistribution\" href=\"#\" [routerLink]=\"[\r\n          '/configuration',\r\n          'enableDisableDistributionMenuSelected',\r\n          settingsService.currentConfigurationTemplatePath,\r\n          settingsService.currentConfigurationTemplateName\r\n        ]\">\r\n          <button class=\"btn btn-primary\" type=\"button\"> {{\r\n            'AREAS.CONFIGURATION.TAB-GENERAL-SETTINGS.NEXT-ENABLE-DISABLE' | translate }}</button>\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-java.ts": [
        {
          "name": "tabJavaTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-java.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabJavaTemplate>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n\r\n    <dburst-java></dburst-java>\r\n\r\n  </div>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-license.ts": [
        {
          "name": "tabLicenseTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-license.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration-templates/templates/tab-license.ts": [
        {
          "name": "tabLicenseTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration-templates/templates/tab-license.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_ext-connections/templates/tab-license.ts": [
        {
          "name": "tabLicenseTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_ext-connections/templates/tab-license.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-license.ts": [
        {
          "name": "tabLicenseTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-license.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_processing/templates/tab-license.ts": [
        {
          "name": "tabLicenseTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-license.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`\r\n<ng-template #tabLicenseTemplate>\r\n  <dburst-license></dburst-license>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-logs.ts": [
        {
          "name": "tabLogsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-logs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`\r\n<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_ext-connections/templates/tab-logs.ts": [
        {
          "name": "tabLogsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_ext-connections/templates/tab-logs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`\r\n<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-logs.ts": [
        {
          "name": "tabLogsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-logs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_processing/templates/tab-logs.ts": [
        {
          "name": "tabLogsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-logs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`\r\n<ng-template #tabLogsTemplate>\r\n  <dburst-log-files-viewer-all-together></dburst-log-files-viewer-all-together>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_processing/templates/tab-merge-burst.ts": [
        {
          "name": "tabMergeBurstTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-merge-burst.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabMergeBurstTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-body\">\r\n        <div class=\"row\">\r\n          <div\r\n            class=\"col-xs-10\"\r\n            style=\"cursor: pointer; height: 200px; overflow: auto\"\r\n          >\r\n            <table\r\n              id=\"filesTable\"\r\n              class=\"table table-responsive table-hover table-bordered\"\r\n              cellspacing=\"0\"\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th class=\"col-xs-3\">\r\n                    {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.NAME' | translate }}\r\n                  </th>\r\n                  <th class=\"col-xs-9\">\r\n                    {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.PATH' | translate }}\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr\r\n                  *ngFor=\"let file of processingService.procMergeBurstInfo.inputFiles\"\r\n                  [ngClass]=\"{ 'info': file.selected\r\n                  } \"\r\n                  (click)=\"onFileSelected(file)\"\r\n                >\r\n                  <td>{{file.name}}</td>\r\n                  <td>{{file.path}}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div class=\"col-xs-2\">\r\n          <label for=\"mergeFilesUploadInput\" class=\"btn btn-default btn-block\"><i class=\"fa fa-folder-open-o' }}\"></i>&nbsp;Add</label>\r\n          <input id=\"mergeFilesUploadInput\" type=\"file\" multiple (change)=\"onFilesAdded($event)\" #mergeFilesUploadInput style=\"display: none;\" />           \r\n          <!--  \r\n          <dburst-button-native-system-dialog\r\n              btnId=\"mergeFilesUploadInput\"\r\n              value=\"&nbsp;&nbsp;&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.ADD' | translate }}\"\r\n              dialogType=\"files\"\r\n              (pathsSelected)=\"onFilesAdded($event)\"\r\n            ></dburst-button-native-system-dialog>\r\n            -->\r\n            \r\n            <button\r\n              id=\"btnDeletePdfFile\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedFileDelete()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.selectedFile\"\r\n              style=\"margin-top: 5px\"\r\n            >\r\n              <span class=\"glyphicon glyphicon-minus\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.DELETE' | translate }}\r\n            </button>\r\n\r\n            <button\r\n              id=\"btnUpPdfFile\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedFileUp()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.selectedFile\"\r\n            >\r\n              <span class=\"glyphicon glyphicon-arrow-up\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.UP' | translate }}\r\n            </button>\r\n\r\n            <button\r\n              id=\"btnDownPdfFile\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onSelectedFileDown()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.selectedFile\"\r\n            >\r\n              <span class=\"glyphicon glyphicon-arrow-down\"></span>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.DOWN' | translate }}\r\n            </button>\r\n\r\n            <button\r\n              id=\"btnClearPdfFiles\"\r\n              type=\"button\"\r\n              class=\"btn btn-default btn-block\"\r\n              (click)=\"onClearFiles()\"\r\n              [disabled]=\"processingService.procMergeBurstInfo.inputFiles.length === 0\"\r\n            >\r\n              <i class=\"fa fa-eraser\"></i>&nbsp;&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.CLEAR' | translate }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"panel panel-default\">\r\n      <div class=\"panel-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\">\r\n            {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.MERGED-FILE-NAME' | translate\r\n            }}\r\n          </div>\r\n          <div class=\"col-xs-9\">\r\n            <input\r\n              id=\"mergedFileName\"\r\n              [(ngModel)]=\"processingService.procMergeBurstInfo.mergedFileName\"\r\n              (change)=\"saveMergedFileSetting();\"\r\n              class=\"form-control\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-9\">\r\n            <span\r\n              id=\"mergedFileNameRequired\"\r\n              class=\"label label-default\"\r\n              *ngIf=\"!processingService.procMergeBurstInfo.mergedFileName\"\r\n              >{{ 'AREAS.PROCESSING.TAB-MERGE-BURST.MERGED-FILE-NAME-REQUIRED' |\r\n              translate }}</span\r\n            >\r\n            <span\r\n              id=\"mergedFileNamePdfExtensionRequired\"\r\n              class=\"label label-default\"\r\n              *ngIf=\"processingService.procMergeBurstInfo.mergedFileName && !processingService.procMergeBurstInfo.mergedFileName.endsWith('.pdf')\"\r\n              >{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.MERGED-FILE-NAME-PDF-EXTENSION'\r\n              | translate }}</span\r\n            >\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-3\">\r\n            <div class=\"checkbox\">\r\n              <label id=\"btnBurstMergedFile\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  [(ngModel)]=\"processingService.procMergeBurstInfo.shouldBurstResultedMergedFile\"\r\n                />\r\n                {{ 'AREAS.PROCESSING.TAB-MERGE-BURST.BURST-MERGED-FILE' |\r\n                translate }}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-1\" style=\"margin-right: 20px\">\r\n            <button\r\n              id=\"btnRun\"\r\n              type=\"button\"\r\n              class=\"btn btn-primary\"\r\n              (click)=\"doMergeBurst()\"\r\n              [disabled]=\"!processingService.procMergeBurstInfo.mergedFileName || !processingService.procMergeBurstInfo.mergedFileName.endsWith('.pdf') || processingService.procMergeBurstInfo.inputFiles.length<=1 || executionStatsService.jobStats.numberOfActiveJobs > 0\"\r\n            >\r\n              <i class=\"fa fa-play\"></i>&nbsp;{{\r\n              'AREAS.PROCESSING.TAB-MERGE-BURST.RUN' | translate }}\r\n            </button>\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\">\r\n            <dburst-button-clear-logs></dburst-button-clear-logs>\r\n          </div>\r\n\r\n          <div class=\"col-xs-3\" style=\"margin-left: -20px\">\r\n            <dburst-button-native-system-dialog style=\"display: none;\"\r\n              value=\"{{\r\n              'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n              dialogType=\"file\"\r\n            >\r\n            </dburst-button-native-system-dialog>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <div class=\"col-xs-2\"></div>\r\n          <div class=\"col-xs-9\">\r\n            <span\r\n              id=\"twoOrMoreRequired\"\r\n              class=\"label label-default\"\r\n              *ngIf=\"processingService.procMergeBurstInfo.inputFiles.length<=1\"\r\n              >{{ 'AREAS.PROCESSING.TAB-MERGE-BURST.SELECT-2-OR-MORE' |\r\n              translate }}</span\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-qa.ts": [
        {
          "name": "tabQATemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-qa.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabQATemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.FROM-NAME' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaFromName\" [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.name\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnQaFromNameVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('qaFromName',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.FROM-ADDRESS' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaFromEmailAddress\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.fromaddress\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnQaFromEmailAddressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('qaFromEmailAddress',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.HOST' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaEmailServerHost\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.host\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.USER-NAME' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaUserName\" [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.userid\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.PASSWORD' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaPassword\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.userpassword\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' type=\"password\" class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-QA.PORT' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"qaPort\" [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.port\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n    </div>\r\n    <p></p>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\"></div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input type=\"checkbox\" id=\"btnQASSL\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.usessl\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' ng-true-value=\"'true'\" ng-false-value=\"'false'\" />\r\n        <label for=\"btnQASSL\" class=\"checkboxlabel\">&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-QA.SSL-ENABLED' | translate }}</label>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <input type=\"checkbox\" id=\"btnQATLS\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.qualityassurance.emailserver.usetls\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' ng-true-value=\"'true'\" ng-false-value=\"'false'\" />\r\n        <label for=\"btnQATLS\" class=\"checkboxlabel\">&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-QA.TLS-ENABLED' | translate }}</label>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_processing/templates/tab-quality-assurance.ts": [
        {
          "name": "tabQualityAssuranceTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-quality-assurance.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabQualityAssuranceTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        PDF / Excel\r\n        {{ 'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.FILE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-8\">\r\n        <input id=\"qaBurstFile\" [(ngModel)]=\"processingService.procBurstInfo.isSample ? processingService.procQualityAssuranceInfo.prefilledInputFilePath : processingService.procQualityAssuranceInfo.inputFileName\" class=\"form-control\" required />\r\n      </div>\r\n\r\n      <div class=\"col-xs-2\">\r\n      <label for=\"qaFileUploadInput\" class=\"btn btn-default btn-block\"><i class=\"fa fa-folder-open-o' }}\"></i>&nbsp;Select</label>\r\n      <input type=\"file\" id=\"qaFileUploadInput\" (change)=\"onQAFileSelected($event)\" accept=\".pdf\" #qaFileUploadInput style=\"display: none;\"/>\r\n      \r\n      <!--  \r\n      <dburst-button-native-system-dialog value=\"{{\r\n            'COMPONENTS.BUTTON-NATIVE-SYSTEM-DIALOG.SELECT' | translate\r\n          }}\" dialogType=\"file\" (pathsSelected)=\"onQAFileSelected($event)\"></dburst-button-native-system-dialog>-->\r\n      \r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"radio\">\r\n      <label>\r\n        <input type=\"radio\" name=\"optradio\" checked=\"checked\" [(ngModel)]=\"processingService.procQualityAssuranceInfo.mode\" value=\"ta\" />{{\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-ALL-TOKENS' | translate\r\n        }}</label>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"radio\">\r\n      <label>\r\n        <input id=\"testTokensRandom\" type=\"radio\" name=\"optradio\" [(ngModel)]=\"processingService.procQualityAssuranceInfo.mode\" value=\"tr\"\r\n          (focus)=\"onDifferentQualityAssuranceModeFocus('tr')\" />{{ 'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST' | translate }}\r\n        {{ processingService.procQualityAssuranceInfo.numberOfRandomTokens }}\r\n        {{\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.RANDOM-BURST-TOKENS'\r\n            | translate\r\n        }}</label>\r\n      <input id=\"numberOfRandomTokens\" class=\"form-control\" placeholder=\"2\"\r\n        [(ngModel)]=\"processingService.procQualityAssuranceInfo.numberOfRandomTokens\"\r\n        (focus)=\"onDifferentQualityAssuranceModeFocus('numberOfRandomTokens')\" />\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"radio\">\r\n      <label>\r\n        <input id=\"testTokensList\" type=\"radio\" name=\"optradio\" [(ngModel)]=\"processingService.procQualityAssuranceInfo.mode\" value=\"tl\"\r\n          (focus)=\"onDifferentQualityAssuranceModeFocus('tl')\" />{{\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-FOLLOWING' | translate\r\n        }}</label>\r\n      <input id=\"listOfTokens\" class=\"form-control\"\r\n        placeholder=\"clyde.grew@northridgehealth.org,alfreda.waldback@northridgehealth.org\"\r\n        [(ngModel)]=\"processingService.procQualityAssuranceInfo.listOfTokens\"\r\n        (focus)=\"onDifferentQualityAssuranceModeFocus('listOfTokens')\" />\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-1\" style=\"margin-right: 40px\">\r\n        <button id=\"btnRunTest\" type=\"button\" class=\"btn btn-primary\" (click)=\"doRunTest()\" [disabled]=\"\r\n            runTestShouldBeDisabled() ||\r\n            executionStatsService.jobStats.numberOfActiveJobs > 0\r\n          \">\r\n          <i class=\"fa fa-thumbs-o-up\"></i>&nbsp;{{\r\n            'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.RUN-TEST' | translate\r\n          }}\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-native-system-dialog style=\"display: none;\" value=\"{{ 'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n          dialogType=\"file\">\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-6\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus === 'started'\"\r\n        style=\"margin-right: 40px\">\r\n        <a href=\"{{ xmlSettings.documentburster.settings.qualityassurance.emailserver.weburl }}\" target=\"_blank\">\r\n          <button class=\"btn\" type=\"button\">\r\n            <span style=\"color:dodgerblue\">\r\n              <i class=\"fa fa-paper-plane\"></i> </span>&nbsp;&nbsp;&nbsp;<span [innerHTML]=\"\r\n                'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.VIEW-TESTED-EMAILS'\r\n                  | translate\r\n              \"></span>\r\n          </button>\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\" col-xs-6\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus !== 'started'\"\r\n        style=\"margin-right: 40px\">\r\n        <button class=\"btn\" type=\"button\" [disabled]=\"true\">\r\n          <span style=\"color:gray\"> <i class=\"fa fa-paper-plane\"></i> </span>&nbsp;&nbsp;&nbsp;<span [innerHTML]=\"\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.INNER-HTML.VIEW-EMAILS'\r\n                | translate\r\n            \"></span>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-5\" *ngIf=\"\r\n          processingService.procQualityAssuranceInfo.testEmailServerStatus === 'starting' ||\r\n          processingService.procQualityAssuranceInfo.testEmailServerStatus === 'stopping'\r\n        \">\r\n        <button type=\"button\" class=\"btn btn-block\" [disabled]=\"true\">\r\n          <i class=\"fa fa-spinner fa-pulse\"></i>&nbsp;&nbsp;&nbsp;\r\n          <strong *ngIf=\"\r\n              processingService.procQualityAssuranceInfo.testEmailServerStatus === 'starting'\r\n            \" [innerHTML]=\"\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.STARTING' | translate\r\n            \"></strong>\r\n          <strong *ngIf=\"\r\n              processingService.procQualityAssuranceInfo.testEmailServerStatus === 'stopping'\r\n            \" [innerHTML]=\"\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.STOPPING' | translate\r\n            \"></strong>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\" col-xs-5\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus === 'stopped'\">\r\n        <button id=\"startTestEmailServer\" type=\"button\" class=\"btn btn-block\"\r\n          (click)=\"doStartStopTestEmailServer('start')\" [disabled]=\"processingService.procQualityAssuranceInfo.mode === 'ta'\">\r\n          <span style=\"color:gray\"> <i class=\"fa fa-circle\"></i> </span>&nbsp;&nbsp;&nbsp;\r\n          <strong>Start\r\n            <em>{{\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-EMAIL-SERVER'\r\n                | translate\r\n            }}</em>\r\n          </strong>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-5\" *ngIf=\"processingService.procQualityAssuranceInfo.testEmailServerStatus === 'started'\">\r\n        <button id=\"stopTestEmailServer\" type=\"button\" class=\"btn btn-block\"\r\n          (click)=\"doStartStopTestEmailServer('shut')\">\r\n          <span style=\"color:dodgerblue\"> <i class=\"fa fa-circle\"></i> </span>&nbsp;&nbsp;&nbsp;\r\n          <strong>Stop\r\n            <em>{{\r\n              'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.TEST-EMAIL-SERVER'\r\n                | translate\r\n            }}</em>\r\n          </strong>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <hr />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\" [innerHTML]=\"\r\n          'AREAS.PROCESSING.TAB-QUALITY-ASSURANCE.INNER-HTML.TEST-SERVER-CATCH'\r\n            | translate\r\n        \"></div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_processing/templates/tab-reporting-mailmerge-classicreports.ts": [
        {
          "name": "tabReportGenerationMailMergeTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-reporting-mailmerge-classicreports.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template\r\n  #tabReportGenerationMailMergeTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\" style=\"margin-bottom: 3px\">\r\n      <div class=\"col-xs-1\">\r\n        {{\r\n        'AREAS.PROCESSING.TAB-REPORTING-MAILMERGE-CLASSICREPORTS.CHOOSE-REPORT'\r\n        | translate }}\r\n      </div>\r\n      <div class=\"col-xs-4\">\r\n        <ng-select\r\n          id=\"selectMailMergeClassicReport\"\r\n          [(ngModel)]=\"selectedMailMergeClassicReport\"\r\n          [groupBy]=\"groupByMailMergeHelper\"\r\n          appendTo=\"body\"\r\n        >\r\n          <ng-option\r\n            *ngFor=\"let report of this.settingsService.getMailMergeConfigurations('visible')\"\r\n            [value]=\"report\"\r\n            >{{report.templateName}}\r\n            <span *ngIf=\"report.type=='config-samples'\">(sample)</span\r\n            ><span id=\"{{report.folderName}}_{{report.dsInputType}}\" *ngIf=\"report.dsInputType=='ds.csvfile'\"\r\n              >(input CSV)</span\r\n            ></ng-option\r\n          >\r\n        </ng-select>\r\n      </div>\r\n      <div class=\"col-xs-4\" *ngIf=\"selectedMailMergeClassicReport\">\r\n        <input\r\n          id=\"mailMergeClassicReportInputFilePath\"\r\n          [(ngModel)]=\"processingService.procBurstInfo.mailMergeClassicReportInputFilePath\"\r\n          class=\"form-control\"\r\n          autofocus\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div id=\"browseMailMergeClassicReportInputFile\" class=\"col-xs-3\" *ngIf=\"selectedMailMergeClassicReport\">\r\n        <dburst-button-native-system-dialog\r\n          value=\"{{\r\n          'COMPONENTS.BUTTON-NATIVE-SYSTEM-DIALOG.SELECT-FILE' | translate }}\"\r\n          dialogType=\"file\"\r\n          (pathsSelected)=\"onMailMergeClassicReportFileSelected($event)\"\r\n        ></dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-1\"></div>\r\n\r\n      <div class=\"col-xs-1\">\r\n        <button\r\n          id=\"btnGenerateReports\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          (click)=\"doGenerateReports()\"\r\n          [disabled]=\"!processingService.procBurstInfo.mailMergeClassicReportInputFilePath || executionStatsService.jobStats.numberOfActiveJobs > 0\"\r\n        >\r\n          <i class=\"fa fa-play\"></i>&nbsp;Burst\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n      <div class=\"col-xs-4\">\r\n        <dburst-button-native-system-dialog\r\n          value=\"{{\r\n          'AREAS.PROCESSING.TAB-BURST.VIEW-REPORTS' | translate }}\"\r\n          dialogType=\"file\"\r\n        >\r\n        </dburst-button-native-system-dialog>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\" *ngIf=\"!shellService.isJavaOk\">\r\n      <br /><br />\r\n      <span class=\"label label-warning\"\r\n        ><strong\r\n          ><em>Java</em>\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.NOT-FOUND' | translate\r\n          }}\r\n        </strong></span\r\n      >\r\n      <br /><br />\r\n\r\n      <strong\r\n        id=\"checkPointJavaPreRequisite\"\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-SHORT' | translate\"\r\n      ></strong>\r\n\r\n      <br /><br /><span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INNER-HTML.REQUIRED-LONG' | translate\"\r\n      ></span>\r\n\r\n      <br /><br />\r\n\r\n      <a href=\"#\" [routerLink]=\"['/help', 'installSetupMenuSelected']\"\r\n        ><button type=\"button\" class=\"btn btn-primary\">\r\n          {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.JAVA.INSTALL' | translate }}\r\n          <em>Java</em>\r\n        </button></a\r\n      >\r\n    </div>\r\n    <div\r\n      class=\"row\"\r\n      *ngIf=\"processingService.procBurstInfo.mailMergeClassicReportInputFilePath && !executionStatsService.logStats.foundDirtyLogFiles && executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length === 0\"\r\n    >\r\n      <div class=\"col-xs-1\">\r\n        <i class=\"fa fa-flag-checkered fa-2x\"></i>\r\n      </div>\r\n\r\n      <div class=\"col-xs-11\">\r\n        <a\r\n          id=\"qaReminderLinkGenerateReports\"\r\n          href=\"#qaReminder\"\r\n          data-toggle=\"collapse\"\r\n          >{{ 'AREAS.PROCESSING.TAB-BURST.DID-YOU-RUN-QA' | translate }}\r\n          <em>{{processingService.procBurstInfo.mailMergeClassicReportInputFilePath}}</em>?</a\r\n        >\r\n        <div id=\"qaReminder\" class=\"collapse\">\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.BEFORE-EMAILING' | translate }}\r\n          <a\r\n            href=\"#\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected',processingService.procBurstInfo.mailMergeClassicReportInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath, 'csv-generate-reports']\"\r\n            >Quality Assurance</a\r\n          >\r\n          {{ 'AREAS.PROCESSING.TAB-BURST.FOR-THE-FILE' | translate }}\r\n          <em>{{processingService.procBurstInfo.mailMergeClassicReportInputFilePath}}</em>&nbsp;&nbsp;\r\n          <button\r\n            id=\"goToQa\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-sm\"\r\n            [routerLink]=\"['/processingQa','qualityMenuSelected',processingService.procBurstInfo.mailMergeClassicReportInputFilePath, processingService.procBurstInfo.prefilledConfigurationFilePath, 'csv-generate-reports']\"\r\n          >\r\n            {{ 'AREAS.PROCESSING.TAB-BURST.RUN-QA' | translate }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      *ngIf=\"executionStatsService.jobStats.numberOfActiveJobs === 0 && executionStatsService.jobStats.jobsToResume.length > 0\"\r\n      class=\"row\"\r\n    >\r\n      <div class=\"col-xs-12\">\r\n        <ng-container [ngTemplateOutlet]=\"resumeJobs\"> </ng-container>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <dburst-log-files-viewer-separate-tabs></dburst-log-files-viewer-separate-tabs>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
        }
      ],
      "src/app/areas/_configuration/templates/tab-reporting-datasource-datatables.ts": [
        {
          "name": "tabReportingDataSourceDataTablesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-reporting-datasource-datatables.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template\r\n  #tabReportingDataSourceDataTablesTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-6\">\r\n        <select\r\n          id=\"dsTypes\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.type\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          (change)=\"onAskForFeatureModalShow($event)\"\r\n        >\r\n          <option value=\"ds.csvfile\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-CSV' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"ds.tsvfile\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-TSV' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"ds.fixedwidthfile\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-FIXED-WIDTH'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.excelfile\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-EXCEL'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.gsheet\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-CLOUD-GSHEET'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.o365sheet\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-CLOUD-O365SHEET'\r\n            | translate }}\r\n          </option>\r\n          <option value=\"ds.database\">\r\n            {{\r\n            'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.TYPE-DATABASE'\r\n            | translate }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div\r\n      *ngIf=\"askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.datasource.type)\"\r\n    >\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-SEPARATOR-CHAR'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"separatorChar\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.separatorchar\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER' |\r\n          translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-9\">\r\n          <select\r\n            id=\"selectHeader\"\r\n            class=\"form-control\"\r\n            (change)=\"onSelectCsvHeader()\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.header\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          >\r\n            <option id=\"optionNoHeader\" value=\"noheader\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER-NO-HEADER'\r\n              | translate }}\r\n            </option>\r\n            <option id=\"optionFirstLine\" value=\"firstline\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER-FIRST-LINE'\r\n              | translate }}\r\n            </option>\r\n            <option id=\"optionFirstLine\" value=\"multiline\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.HEADER-MULTI-LINE'\r\n              | translate }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <p></p>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.SKIP-LINES' |\r\n          translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"skipLines\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.skiplines\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n            [disabled]=\"xmlReporting?.documentburster.report.datasource.csvoptions.header != 'multiline'\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n\r\n      <div class=\"row\"\r\n      >\r\n        <div class=\"col-xs-12\">\r\n          <label id=\"lblShowMoreCsvOptions\" for=\"btnShowMoreCsvOptions\" class=\"checkboxlabel\" style=\"cursor: pointer;\"\r\n            ><span><strong><u *ngIf=\"!xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">Show More CSV Options</u><u *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\"><em>Show Less CSV Options</em></u></strong></span></label\r\n          >\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnShowMoreCsvOptions\"\r\n            style=\"visibility: hidden;\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n          \r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-QUOTATION-CHAR'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"quotationChar\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.quotationchar\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-ESCAPE-CHAR'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"escapeChar\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.escapechar\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-STRICT-QUOTATIONS'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnStrictQuotations\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.strictquotations\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-IGNORE-QUOTATIONS'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnIgnoreQuotations\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.ignorequotations\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{\r\n          'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CSV-IGNORE-LEADING-WHITESPACE'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"btnIgnoreLeadingWhitespace\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.ignoreleadingwhitespace\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!--\r\n      <p></p>\r\n      <div class=\"row\" *ngIf=\"xmlReporting?.documentburster.report.datasource.showmorecsvoptions\">\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN'\r\n          | translate }}\r\n        </div>\r\n        <div class=\"col-xs-6\">\r\n          <select\r\n            id=\"selectIdColumn\"\r\n            class=\"form-control\"\r\n            (change)=\"onSelectIdColumn()\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.idcolumn\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          >\r\n            <option value=\"notused\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-NOT-USED'\r\n              | translate }}\r\n            </option>\r\n            <option value=\"firstcolumn\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-FIRST-COLUMN'\r\n              | translate }}\r\n            </option>\r\n            <option value=\"lastcolumn\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-LAST-COLUMN'\r\n              | translate }}\r\n            </option>\r\n            <option value=\"letmespecify\">\r\n              {{\r\n              'AREAS.CONFIGURATION.TAB-REPORT-DATASOURCE-DATATABLES.CODE-COLUMN-LET-ME-SPECIFY'\r\n              | translate }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n\r\n        <div\r\n          class=\"col-xs-3\"\r\n          *ngIf=\"xmlReporting?.documentburster.report.datasource.csvoptions.idcolumn=='letmespecify'\"\r\n        >\r\n          <input\r\n            id=\"idColumnIndex\"\r\n            class=\"form-control\"\r\n            [(ngModel)]=\"xmlReporting?.documentburster.report.datasource.csvoptions.idcolumnindex\"\r\n            (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n      -->\r\n    </div>\r\n    <div\r\n      *ngIf=\"!askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.datasource.type)\"\r\n    >\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\"></div>\r\n        <div class=\"col-xs-5\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-block\"\r\n            (click)=\"onAskForFeatureModalShow(xmlReporting?.documentburster.report.datasource.type)\"\r\n          >\r\n            Request <span class=\"badge\">New</span> Feature\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
        }
      ],
      "src/app/areas/_configuration/templates/tab-reporting-template-output.ts": [
        {
          "name": "tabReportingTemplateOutputTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-reporting-template-output.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template\r\n  #tabReportingTemplateOutputTemplate\r\n>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.OUTPUT-TYPE' |\r\n        translate }}\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <select\r\n          id=\"reportOutputType\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"xmlReporting?.documentburster.report.template.outputtype\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          (change)=\"onReportOutputTypeChanged()\"\r\n        >\r\n          <option value=\"output.none\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-NONE' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.docx\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-DOCX' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.pdf\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-PDF' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.xlsx\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-XLSX' |\r\n            translate }}\r\n          </option>\r\n          <option value=\"output.html\">\r\n            {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TYPE-HTML' |\r\n            translate }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n    <p></p>\r\n    <div\r\n      *ngIf=\"askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.template.outputtype)\"\r\n    >\r\n      <div\r\n        class=\"row\"\r\n        id=\"reportTemplate\"\r\n        *ngIf=\"xmlReporting?.documentburster.report.template.outputtype != 'output.none'\"\r\n      >\r\n        <div class=\"col-xs-2\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-REPORT-TEMPLATE-OUTPUT.TEMPLATE-FILE' |\r\n          translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-10\">\r\n          <ng-select\r\n            id=\"selectTemplateFile\"\r\n            [(ngModel)]=\"selectedReportTemplateFile\"\r\n            (change)=\"onSelectTemplateFileChanged($event)\"\r\n            appendTo=\"body\"\r\n          >\r\n            <ng-option\r\n              *ngFor=\"let reportTemplate of this.settingsService.getReportTemplates(xmlReporting?.documentburster.report.template.outputtype, {samples: false})\"\r\n              [value]=\"reportTemplate\"\r\n              >\r\n              <span id=\"{{reportTemplate.fileName}}\">\r\n              {{reportTemplate.fileName}}\r\n              <span *ngIf=\"reportTemplate.type.includes('-sample')\"\r\n                >(sample)</span>\r\n              </span>  \r\n              </ng-option\r\n            >\r\n          </ng-select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      *ngIf=\"!askForFeatureService.alreadyImplementedFeatures.includes(xmlReporting?.documentburster.report.template.outputtype)\"\r\n    >\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-2\"></div>\r\n        <div class=\"col-xs-5\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-primary btn-block\"\r\n            (click)=\"onAskForFeatureModalShow(xmlReporting?.documentburster.report.template.outputtype)\"\r\n          >\r\n            Request <span class=\"badge\">New</span> Feature\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template> `"
        }
      ],
      "src/app/areas/_help/templates/tab-reviews.ts": [
        {
          "name": "tabReviewsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-reviews.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabReviewsTemplate>\r\n  <div class=\"well\">\r\n\r\n    <em>\"DocumentBurster has saved 2+ hours a day of manual report running and emailing. The task takes minutes to\r\n      complete from\r\n      start to finish for 40-80 purchase orders per day. With the added variables we can email, cc and add different\r\n      subject\r\n      text/ paragraph in email body.</em>\r\n    <br>\r\n    <br>\r\n    <em>On first use by user it was reported it took sub 16 seconds to burst and email.\"</em>\r\n    <br>\r\n    <br>\r\n    <strong id='checkPointHelpCustomerReviews'>Michael B., Finance Systems Team</strong>\r\n    <br>\r\n    <a href=\"http://www.english-heritage.org.uk\" target=\"_blank\">English Heritage, United Kingdom</a>\r\n    <br>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/testimonials.html\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">View More Customer Reviews</button>\r\n    </a>\r\n    <br>\r\n    <br>\r\n    <br>We helped\r\n    <a href=\"https://www.reportburster.com/clients.html\" target=\"_blank\">\r\n      <em>Yale University, US Chamber of Commerce, GlaxoSmithKline, English Heritage, Oxford University</em>\r\n    </a> and many other companies to automatically distribute their invoices, statements or payslips to thousands of\r\n    employees,\r\n    customers and partners.\r\n    <br>\r\n    <br>We can help your company do the same.\r\n    <br>\r\n    <br>\r\n    <a href=\"https://www.reportburster.com/clients.html\" target=\"_blank\">\r\n      <button class=\"btn btn-primary\" type=\"button\">Who is using\r\n        <em>ReportBurster</em>\r\n      </button>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_processing/templates/tab-samples.ts": [
        {
          "name": "tabSamplesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-samples.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabSamplesTemplate>\r\n  <div class=\"well\">\r\n    \r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-12\"\r\n        style=\"cursor: pointer; height: 530px; overflow: auto\"\r\n      >\r\n\r\n        <table id=\"samplesTable\"\r\n          class=\"table table-responsive table-hover table-bordered\"\r\n          cellspacing=\"0\"\r\n        >\r\n        \r\n          <thead>\r\n            \r\n            <tr>\r\n              <th style=\"width:11%\">\r\n                {{ 'AREAS.CONFIGURATION-TEMPLATES.TAB-CONF-TEMPLATES.NAME' |\r\n                translate }}\r\n              </th>\r\n              <th style=\"width:12%\">\r\n                What It Does\r\n              </th>\r\n              <th style=\"width:24%\">\r\n                Input\r\n              </th>\r\n              <th>\r\n                Expected Output\r\n              </th>\r\n              <th style=\"width:3%\">\r\n                 Actions\r\n              </th>\r\n         \r\n            </tr>  \r\n      \r\n          </thead>\r\n          <tbody>\r\n            <tr\r\n              id=\"tr{{sample.id}}\"\r\n              *ngFor=\"let sample of samplesService.samples\"\r\n              (click)=\"onSampleClick(sample)\"\r\n              [ngClass]=\"{ 'info': sample.activeClicked}\"\r\n            >\r\n            <td id=\"td{{sample.id}}\">{{sample.name}}<br><button id=\"btnSamplesLearnMode{{sample.id}}\" type=\"button\" class=\"btn btn-xs btn-primary\" (click)=\"doShowSamplesLearnMoreModal(sample)\">Learn More</button>\r\n            </td>\r\n            <td>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'merge'\">\r\n                  <i class=\"fa fa-plus-square-o\">&nbsp;</i>\r\n                  <em>1. Merge</em>                \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'split'\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>1. Split </em>\r\n                  <i class=\"fa fa-files-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'mail-merge-emails'\">\r\n                  <i class=\"fa fa-list-ol\">&nbsp;</i>\r\n                  <em>1. Mail Merge </em>\r\n                  <i class=\"fa fa-envelope-open-o\">&nbsp;</i>\r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'mail-merge-documents'\">\r\n                  <i class=\"fa fa-list-ol\">&nbsp;</i>\r\n                  <em>1. Mail Merge </em>\r\n                  <i class=\"fa fa-file-word-o\">&nbsp;</i>\r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'split' && sample.step2 == 'split'\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>2. Split once more </em>                \r\n                  <i class=\"fa fa-files-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 != 'split' && sample.step2 == 'split'\">\r\n                  <i class=\"fa fa-scissors\">&nbsp;</i>\r\n                  <em>2. Split </em>                \r\n                  <i class=\"fa fa-files-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step1 == 'generate'\">\r\n                   <i class=\"fa fa-list-ol\">&nbsp;</i> \r\n                   <em>1. Generate </em>\r\n                   <i class=\"fa fa-file-word-o\">&nbsp;</i>               \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step2 == 'email'\">\r\n                  <i class=\"fa fa-envelope-open-o\">&nbsp;</i>\r\n                 <em>2. Email</em> \r\n                </span>\r\n                <span class=\"label label-default\" *ngIf=\"sample.step3 == 'email'\">\r\n                  <i class=\"fa fa-envelope-open-o\">&nbsp;</i>\r\n                 <em>3. Email</em> \r\n                </span>\r\n            </td>\r\n            <td [innerHTML]=\"samplesService.getInputHtml(sample.id)\"></td>\r\n            <td [innerHTML]=\"samplesService.getOutputHtml(sample.id)\"></td>\r\n            <td>\r\n            \r\n              <button type=\"button\" id=\"btnSampleTryIt{{sample.id}}\" class=\"btn btn-xs btn-primary\" (click)=\"doSampleTryIt(sample)\">&nbsp;&nbsp;&nbsp;&nbsp;Try it&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</button>\r\n              <br><br>\r\n              <!--\r\n              <div class=\"btn-group dropup\"> \r\n                  <button type=\"button\" *ngIf=\"sample.visibility == 'visible'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;Visible&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                  <button type=\"button\" *ngIf=\"sample.visibility == 'hidden'\" class=\"btn btn-xs btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">&nbsp;&nbsp;<em>Hidden</em>&nbsp;&nbsp;<span class=\"caret\"></span></button>\r\n                <ul class=\"dropdown-menu dropdown-menu-right\">\r\n                  <li *ngIf=\"sample.visibility == 'visible'\" (click)=\"doToggleSampleVisibility('hidden')\">Hide <em>{{sample.name}}</em></li>\r\n                  <li *ngIf=\"sample.visibility == 'hidden'\" (click)=\"doToggleSampleVisibility('visible')\">Show <em>{{sample.name}}</em></li>\r\n                 </ul>\r\n                  </div>\r\n                -->\r\n            </td>\r\n            \r\n            </tr>\r\n          <tbody>\r\n          \r\n        </table>\r\n      \r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p><br></p><p></p>\r\n    <!-- \r\n    <div class=\"row\">\r\n    \r\n      <div class=\"col-xs-3\">\r\n      <button\r\n      id=\"btnHideAllSamples\"\r\n      type=\"button\"\r\n      class=\"btn btn-default\"\r\n      (click)=\"doHideAllSamples()\"\r\n      [disabled]=\"samplesService.countVisibleSamples <= 0\"\r\n        \r\n      >\r\n      <i class=\"fa fa-eye-slash\"></i>&nbsp;Hide All Samples\r\n    </button>\r\n    \r\n      </div>\r\n    \r\n      </div>\r\n      -->\r\n     \r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-services.ts": [
        {
          "name": "tabServicesTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-services.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabServicesTemplate>\r\n  <div class=\"well\">\r\n    <span [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-SERVICES' | translate\"></span>\r\n    <br>\r\n    <br>\r\n    <ol>\r\n      <li [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-SERVICE1' | translate\"></li>\r\n      <br>\r\n      <li [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-SERVICE2' | translate\"></li>\r\n    </ol>\r\n    <br>\r\n    <strong>{{'AREAS.HELP.TAB-SERVICES.SKRF-MANAGED-SERVICES' | translate }}</strong>\r\n    <br>\r\n    <br>\r\n    <ol>\r\n      <li>\r\n        {{'AREAS.HELP.TAB-SERVICES.SKRF-MANAGED-SERVICE1' | translate }}\r\n      </li>\r\n      <br>\r\n      <li>\r\n        {{'AREAS.HELP.TAB-SERVICES.SKRF-MANAGED-SERVICE2' | translate }}\r\n      </li>\r\n      <br>\r\n      <li [innerHTML]=\"'AREAS.HELP.TAB-SERVICES.INNER-HTML.SKRF-MANAGED-SERVICE3' | translate\"></li>\r\n    </ol>\r\n    <br>\r\n    <strong>{{'AREAS.HELP.TAB-SERVICES.REQUEST-QUOTE' | translate }}</strong>\r\n    <br>\r\n    <a href=\"mailto:sales@reportburster.com\" target=\"_blank\">\r\n      <h3 id='checkPointHelpServices'>sales@reportburster.com</h3>\r\n    </a>\r\n\r\n  </div>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-sms-message.ts": [
        {
          "name": "tabSMSMessageTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-sms-message.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabSMSMessageTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.FROM-NUMBER' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"fromTelephoneNumber\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.fromtelephonenumber\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnFromTelephoneNumberVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fromTelephoneNumber',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.TO-NUMBER' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"toTelephoneNumber\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.totelephonenumber\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnToTelephoneNumberVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('toTelephoneNumber',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <p></p>\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.TEXT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <textarea\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.text\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n          rows=\"5\"\r\n          id=\"smsText\"\r\n        ></textarea>\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnSmsTextVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('smsText',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-sms-twilio.ts": [
        {
          "name": "tabSMSTwilioTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-sms-twilio.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabSMSTwilioTemplate>\r\n\r\n  <p-dialog header=\"{{'AREAS.CONFIGURATION.TAB-SMS-TWILIO.SEND-TEST-SMS-MESSAGE' | translate}}\"\r\n    [(visible)]=\"isModalSMSVisible\" [baseZIndex]=\"1000\" [modal]=\"true\">\r\n    <p-header>\r\n    </p-header>\r\n\r\n    <div class=\"modal-body\" id=\"modal-body\" style=\"margin: 10px;\">\r\n\r\n      <div class=\"row\">\r\n\r\n\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.FROM-NUMBER' | translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-8\">\r\n          <input type=\"text\" id=\"fromNumber\" class=\"form-control\" (ngModel)=\"modalSMSInfo.fromNumber\" size=\"25\"\r\n            autofocus>\r\n        </div>\r\n\r\n      </div>\r\n      <br>\r\n\r\n      <div class=\"row\">\r\n\r\n        <div class=\"col-xs-4\">\r\n          {{ 'AREAS.CONFIGURATION.TAB-SMS-MESSAGE.TO-NUMBER' | translate }}\r\n        </div>\r\n\r\n        <div class=\"col-xs-8\">\r\n          <input type=\"text\" id=\"toNumber\" class=\"form-control\" (ngModel)=\"modalSMSInfo.toNumber\" size=\"25\">\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </div>\r\n    <p-footer>\r\n\r\n      <button id='btnOKConfirmation' class=\"btn btn-primary\" type=\"button\" (click)=\"onSendTestSMS()\"\r\n        [disabled]=\"!modalSMSInfo.fromNumber || !modalSMSInfo.toNumber\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-SMS-TWILIO.SEND-TEST-SMS' | translate }}</button>\r\n      <button class=\"btn btn-flat btn-default dburst-button-question-decline\" type=\"button\"\r\n        (click)=\"onCloseSMSModal()\">{{ 'BUTTONS.CANCEL' | translate }}</button>\r\n\r\n    </p-footer>\r\n\r\n  </p-dialog>\r\n\r\n\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">\r\n        <a href=\"https://support.twilio.com/hc/en-us/articles/223136027-Auth-Tokens-and-how-to-change-them\"\r\n          target=\"_blank\">Twilio\r\n          Help</a>\r\n      </div>\r\n      <div class=\"col-xs-10\">\r\n        <a href=\"https://support.twilio.com/hc/en-us/articles/223136027-Auth-Tokens-and-how-to-change-them\"\r\n          target=\"_blank\">What\r\n          is the Auth Token?</a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-SMS-TWILIO.ACCOUNT-SID' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"accountSid\" [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.twilio.accountsid\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnAccountSidVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('accountSid',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-SMS-TWILIO.AUTH-TOKEN' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"authToken\" [(ngModel)]=\"xmlSettings?.documentburster.settings.smssettings.twilio.authtoken\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnAuthTokenVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('authToken',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-SMS-TWILIO.TEST-CONNECTION' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <button id=\"btnSendTestSMS\" type=\"button\" class=\"btn btn-primary btn-block\" (click)=\"onShowSendTestSMSModal()\"\r\n          [disabled]=\"!xmlSettings?.documentburster.settings.smssettings.twilio.authtoken || !xmlSettings?.documentburster.settings.smssettings.twilio.accountsid\">\r\n          <i class=\"fa fa-paper-plane\"></i>&nbsp;&nbsp;{{\r\n          'AREAS.CONFIGURATION.TAB-SMS-TWILIO.SEND-TEST-SMS' | translate }}</button>\r\n      </div>\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-clear-logs></dburst-button-clear-logs>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/_tabs.ts": [
        {
          "name": "tabsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/_tabs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<tabset>\r\n\r\n  <tab *ngFor=\"let tab of visibleTabs\" [id]=\"tab.id\">\r\n    <ng-template tabHeading><span [innerHTML]=\"tab.heading | translate\"></span></ng-template>\r\n    <ng-container [ngTemplateOutlet]=\"this[tab.ngTemplateOutlet]\">\r\n    </ng-container>\r\n\r\n  </tab>\r\n\r\n</tabset>`"
        }
      ],
      "src/app/areas/_configuration-templates/templates/_tabs.ts": [
        {
          "name": "tabsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration-templates/templates/_tabs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<tabset>\r\n  <tab\r\n    heading=\"{{ 'AREAS.CONFIGURATION-TEMPLATES.TABS.CONFIGURATION-TEMPLATES' | translate }}\"\r\n  >\r\n    <ng-container *ngTemplateOutlet=\"tabConfTemplates\"> </ng-container>\r\n  </tab>\r\n\r\n  <tab *ngIf=\"false\" heading=\"Samples\">\r\n    <ng-container *ngTemplateOutlet=\"tabConfTemplatesSamples\"> </ng-container>\r\n  </tab>\r\n\r\n  <tab heading=\"{{ 'SHARED-TABS.LICENSE' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabLicenseTemplate\"> </ng-container>\r\n  </tab>\r\n</tabset>`"
        }
      ],
      "src/app/areas/_ext-connections/templates/_tabs.ts": [
        {
          "name": "tabsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_ext-connections/templates/_tabs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<tabset>\r\n  <tab heading=\"{{ 'AREAS.EXTERNAL-CONNECTIONS.TABS.EXT-CONNECTIONS' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabExternalConnectionsTemplate\">\r\n    </ng-container>\r\n  </tab>\r\n  \r\n  <tab heading=\"{{ 'SHARED-TABS.LOGGING-TRACING' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabLogsTemplate\">\r\n    </ng-container>\r\n\r\n  </tab>\r\n\r\n  <tab heading=\"{{ 'SHARED-TABS.LICENSE' | translate }}\">\r\n    <ng-container *ngTemplateOutlet=\"tabLicenseTemplate\">\r\n    </ng-container>\r\n\r\n  </tab>\r\n</tabset>`"
        }
      ],
      "src/app/areas/_help/templates/_tabs.ts": [
        {
          "name": "tabsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/_tabs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<tabset>\r\n  <tab\r\n    *ngFor=\"let tab of visibleTabs\"\r\n    [id]=\"tab.id\"\r\n    [heading]=\"tab.heading | translate\"\r\n  >\r\n    <ng-container [ngTemplateOutlet]=\"this[tab.ngTemplateOutlet]\">\r\n    </ng-container>\r\n  </tab> </tabset\r\n>`"
        }
      ],
      "src/app/areas/_processing/templates/_tabs.ts": [
        {
          "name": "tabsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/_tabs.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`\r\n<tabset>\r\n\r\n  <tab *ngFor=\"let tab of visibleTabs\" [id]=\"tab.id\" [heading]=\"tab.heading | translate\">\r\n\r\n    <ng-container [ngTemplateOutlet]=\"this[tab.ngTemplateOutlet]\">\r\n    </ng-container>\r\n  </tab>\r\n\r\n</tabset>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-support.ts": [
        {
          "name": "tabSupportTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-support.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabSupportTemplate>\r\n  <div class=\"well\">\r\n\r\n    <strong><em>ReportBurster</em> {{'AREAS.HELP.TAB-SUPPORT.DB-SUPPORT' | translate }}</strong>\r\n    <br>\r\n    <a href=\"mailto:support@reportburster.com\" target=\"_blank\">\r\n      <h3>support@reportburster.com</h3>\r\n    </a>\r\n\r\n    <br>\r\n    <strong style=\"text-decoration: underline;\">\r\n      {{'AREAS.HELP.TAB-SUPPORT.SEND-LOG-FILES-SHORT' | translate }}\r\n    </strong>\r\n\r\n    <br>\r\n    <br><span [innerHTML]=\"'AREAS.HELP.TAB-SUPPORT.INNER-HTML.SEND-LOG-FILES-LONG' | translate\"></span>\r\n    <br>\r\n    <br>\r\n    <dburst-button-native-system-dialog value=\"{{\r\n      'COMPONENTS.LOG-FILES-VIEWER-ALL-TOGETHER.VIEW-LOG-FILES' | translate }}\" dialogType=\"file\">\r\n    </dburst-button-native-system-dialog>\r\n    <br>\r\n    <h3>{{'AREAS.HELP.TAB-SUPPORT.HOW-IT-WORKS' | translate }}</h3>\r\n    <br>\r\n    <em>\"I also had a great help from the Support Team of DocumentBurster, who stayed with me the entire installation\r\n      and\r\n      Test\r\n      process.\"\r\n    </em>\r\n    <br>\r\n    <br>\r\n    <strong>Marylou G. - Chief Financial Officer</strong>\r\n    <br>\r\n    <a id='checkPointHelpSupport' href=\"http://parktrent.com.au\" target=\"_blank\">ParkTrent Properties Group,\r\n      Australia</a>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_help/templates/tab-system-diagnostics.ts": [
        {
          "name": "tabSystemDiagnosticsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-system-diagnostics.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template\r\n  #tabSystemDiagnosticsTemplate\r\n>\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll\">\r\n    <dburst-system-diagnostics></dburst-system-diagnostics>\r\n  </div> </ng-template\r\n>`"
        }
      ],
      "src/app/areas/_help/templates/tab-terminal.ts": [
        {
          "name": "tabTerminalTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-terminal.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabTerminalTemplate>\r\n\r\n  <div class=\"well\" style=\"height: 600px; overflow-y: scroll;\">\r\n    <dburst-terminal></dburst-terminal>\r\n    <div id='bashServiceLog' class=\"panel-body\"\r\n      style=\"color:grey; height:370px; overflow-y: scroll; overflow-x: auto; -webkit-user-select: all; user-select: all;\">\r\n      <dburst-log-file-viewer logFileName='bash.service.log'></dburst-log-file-viewer>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_help/templates/tab-update.ts": [
        {
          "name": "tabUpdateTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_help/templates/tab-update.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabUpdateTemplate>\r\n  <dburst-update></dburst-update>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-upload-cloud.ts": [
        {
          "name": "tabUploadCloudTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-upload-cloud.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabUploadCloudTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input\r\n          id=\"cloudUploadCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.cloudcommand\"\r\n          (ngModelChange)=\"settingsChangedEventHandler($event)\"\r\n          class=\"form-control\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables\r\n          id=\"btnCloudUploadVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('cloudUploadCommand',$event)\"\r\n        >\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        <em\r\n          >{{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.SYNOPSIS' | translate }}</em\r\n        >\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em\r\n          >[{{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.OPTIONS' | translate\r\n          }}][URL...]</em\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.HINT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-CLOUD.FULL_CURL_POWER' | translate }}\r\n        -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-12\">\r\n        <img src=\"assets/images/remote-backup-services.png\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-upload-file-share.ts": [
        {
          "name": "tabUploadFileShareTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-upload-file-share.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabUploadFileShareTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"fileShareCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.filesharecommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnFileShareVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('fileShareCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.SYNOPSIS' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ file://hostname/path/to/the%20folder</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.FULL-CURL-POWER' | translate }}Full cURL power is available here -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-FILE-SHARE.INNER-HTML.USE-CASES'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-upload-ftps.ts": [
        {
          "name": "tabUploadFTPSTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-upload-ftps.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabUploadFTPSTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"ftpsCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.ftpscommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnFtpsVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('ftpsCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.SYNOPSIS' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-ssl -T $extracted_file_path$ -u user:password ftp://ftp.example.com/reports/</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-FTPS.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-upload-ftp.ts": [
        {
          "name": "tabUploadFTPTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-upload-ftp.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabUploadFTPTemplate>\r\n  <div class=\"well\">\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"ftpCommand\" [(ngModel)]=\"\r\n            xmlSettings?.documentburster.settings.uploadsettings.ftpcommand\r\n          \" (ngModelChange)=\"settingsChangedEventHandler($event)\" class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnFtpVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('ftpCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.SYNOPSIS' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.OPTIONS' | translate\r\n          }}][URL...]</em>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.EXAMPLE' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--ftp-create-dirs -T $extracted_file_path$ -u user:password\r\n          ftp://ftp.example.com/reports/</em>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-xs-2\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.HINT' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        {{ 'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-FTP.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-upload-http.ts": [
        {
          "name": "tabUploadHTTPTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-upload-http.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabUploadHTTPTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"httpCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.httpcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnHttpVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('httpCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.SYNOPSIS' | translate }}</em>\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ http://www.example.com/ </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-HTTP.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-upload-sftp.ts": [
        {
          "name": "tabUploadSFTPTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-upload-sftp.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabUploadSFTPTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"sftpCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.uploadsettings.sftpcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnSftpVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('sftpCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">\r\n        <em>{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.SYNOPSIS' | translate }}</em>\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <em>[{{\r\n          'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.OPTIONS' | translate }}][URL...]</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ -u user:password sftp://ftp.example.com/reports/</em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.HINT' | translate }}</div>\r\n      <div class=\"col-xs-7\">{{\r\n        'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.FULL-CURL-POWER' | translate }} -\r\n        <a href=\"http://curl.haxx.se/\" target=\"_blank\">http://curl.haxx.se/ </a>\r\n        <span [innerHTML]=\"'AREAS.CONFIGURATION.TAB-UPLOAD-SFTP.INNER-HTML.CURL-INTEGRATION'\r\n        | translate\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-web-upload-documentburster-web.ts": [
        {
          "name": "tabWebUploadDocumentBursterWebTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-web-upload-documentburster-web.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWebUploadDocumentBursterWebTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://portal.reportburster.com\" target=\"_blank\">\r\n          <i class=\"fa fa-cc-visa fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-15px;top:-10px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.ACCEPT-FASTER-SAFER' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"documentBursterWebCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.documentbursterwebcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnDocumentBursterWebVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('documentBursterWebCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">\r\n          <span>https://portal.reportburster.com/use-cases/ </span>\r\n        </a>\r\n        <br>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer Payment\r\n          Portal</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster = Invoices2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster = Bills2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster = Payslips2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster = Contracts2People</a>\r\n        <br>\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People</a>\r\n      </div>\r\n\r\n    </div>\r\n    <br>\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-3\">\r\n        <a href=\"https://portal.reportburster.com\" target=\"_blank\">\r\n          <button class=\"btn btn-primary\" type=\"button\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DOCUMENTBURSTER.LIVE-DEMO'\r\n            | translate }}</button>\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-web-upload-drupal.ts": [
        {
          "name": "tabWebUploadDrupalTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-web-upload-drupal.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWebUploadDrupalTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://www.drupal.org\" target=\"_blank\">\r\n          <i class=\"fa fa-drupal fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.INNER-HTML.USE-DOCUMENTBURSTER-DRUPAL' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"drupalCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.drupalcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnDrupalVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('drupalCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--user \"documentburster:password\" -X POST --data \"code=1234 &customer=Northridge Pharmaceuticals\r\n          &product=Nebulizer\r\n          Machine&amount=200.00 &date=December 28th, 2015&status=Unpaid\"\r\n          https://portal.reportburster.com/wp-json/pods/invoices\r\n        </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-DRUPAL.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/\r\n        </a>\r\n        <p></p>\r\n        <p></p> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster =\r\n          Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-web-upload-joomla.ts": [
        {
          "name": "tabWebUploadJoomlaTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-web-upload-joomla.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWebUploadJoomlaTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://www.joomla.org\" target=\"_blank\">\r\n          <i class=\"fa fa-joomla fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.INNER-HTML.USE-DOCUMENTBURSTER-JOOMLA' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"joomlaCommand\" [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.joomlacommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnJoomlaVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('joomlaCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--user \"documentburster:password\" -X POST --data \"code=1234 &customer=Northridge Pharmaceuticals\r\n          &product=Nebulizer\r\n          Machine&amount=200.00 &date=December 28th, 2015&status=Unpaid\"\r\n          https://portal.reportburster.com/wp-json/pods/invoices\r\n        </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-JOOMLA.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/\r\n        </a>\r\n        <p></p>\r\n        <p></p>\r\n        &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster =\r\n          Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People\r\n        </a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-web-upload-other-web-platforms.ts": [
        {
          "name": "tabWebUploadOtherWebPlatformsTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-web-upload-other-web-platforms.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWebUploadOtherWebPlatformsTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://en.wikipedia.org/wiki/Content_management_system\" target=\"_blank\">\r\n          <i class=\"fa fa-skyatlas fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-10px\">\r\n        <h5 [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.INNER-HTML.USE-DOCUMENTBURSTER-OTHER' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"otherWebPlatformsCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.otherwebcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnOtherWebPlatformsVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('otherWebPlatformsCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>-T $extracted_file_path$ http://www.example.com/ </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-OTHER.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        Publish, archive or file reports to web platforms like\r\n        <em>IBM WebSphere Portal</em>,\r\n        <em>Oracle Portal</em>,\r\n        <em>SAP NetWeaver</em>,\r\n        <em>Tibco PortalBuilder</em>,\r\n        <em>Samsung ACUBE Portal</em> or to any of the major open source portal applications such as\r\n        <em>Liferay Portal</em>,\r\n        <em>Hippo portal</em>,\r\n        <em>JBoss Enterprise Portal</em>,\r\n        <em>eXo</em>,\r\n        <em>Apache Portal</em>, etc.\r\n        <br>\r\n        <br> Publish, archive or file reports to document management systems such as\r\n        <em>EMC Documentum</em>,\r\n        <em>OpenText ECM</em>,\r\n        <em>Alfresco</em>, etc.\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-web-upload-sharepoint.ts": [
        {
          "name": "tabWebUploadSharePointTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-web-upload-sharepoint.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWebUploadSharePointTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"http://www.sharepoint.com\" target=\"_blank\">\r\n          <i class=\"fa fa-windows fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5\r\n          [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.INNER-HTML.USE-DOCUMENTBURSTER-SHAREPOINT' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\"> {{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.COMMAND' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"sharePointCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.mssharepointcommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnSharePointVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('sharePointCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--ntlm -T $extracted_file_path$ -u user:password https://sharepointserver.com/reports/ </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-SHAREPOINT.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/ </a>\r\n        <p></p>\r\n        <p></p>\r\n        &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster = Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People</a>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration/templates/tab-web-upload-wordpress.ts": [
        {
          "name": "tabWebUploadWordPressTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration/templates/tab-web-upload-wordpress.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWebUploadWordPressTemplate>\r\n  <div class=\"well\">\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-1\">\r\n        <a href=\"https://wordpress.com/\" target=\"_blank\">\r\n          <i class=\"fa fa-wordpress fa-2x\"></i>\r\n        </a>\r\n      </div>\r\n      <div class=\"col-xs-11\" style=\"left:-20px;top:-2px\">\r\n        <h5\r\n          [innerHTML]=\"'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.INNER-HTML.USE-DOCUMENTBURSTER-WORDPRESS' | translate\">\r\n        </h5>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <br>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.COMMAND' | translate }}\r\n      </div>\r\n      <div class=\"col-xs-7\">\r\n        <input id=\"wordPressCommand\"\r\n          [(ngModel)]=\"xmlSettings?.documentburster.settings.webuploadsettings.wordpresscommand\"\r\n          (ngModelChange)='settingsChangedEventHandler($event)' class=\"form-control\" />\r\n      </div>\r\n\r\n      <div class=\"col-xs-3\">\r\n        <dburst-button-variables id=\"btnWordPressVariables\"\r\n          (sendSelectedVariable)=\"updateFormControlWithSelectedVariable('wordPressCommand',$event)\">\r\n        </dburst-button-variables>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.EXAMPLE' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <em>--user \"documentburster:password\" -X POST --data \"code=1234 &customer=Northridge Pharmaceuticals\r\n          &product=Nebulizer\r\n          Machine&amount=200.00 &date=December 28th, 2015&status=Unpaid\"\r\n          https://portal.reportburster.com/wp-json/pods/invoices\r\n        </em>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <p></p>\r\n\r\n    <div class=\"row\">\r\n\r\n      <div class=\"col-xs-2\">{{'AREAS.CONFIGURATION.TAB-WEB-UPLOAD-WORDPRESS.EXAMPLES' | translate }}</div>\r\n      <div class=\"col-xs-7\">\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">https://portal.reportburster.com/use-cases/\r\n        </a>\r\n        <p></p>\r\n        <p></p>\r\n        &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">1. Web + DocumentBurster = Customer\r\n          Payment Portal</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">2. Web + DocumentBurster =\r\n          Invoices2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">3. Web + DocumentBurster =\r\n          Bills2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">4. Web + DocumentBurster =\r\n          PurchaseOrders2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">5. Web + DocumentBurster =\r\n          Statements2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">6. Web + DocumentBurster =\r\n          Payslips2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">7. Web + DocumentBurster =\r\n          SchoolReports2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">8. Web + DocumentBurster =\r\n          Contracts2People</a>\r\n        <br> &nbsp;&nbsp;\r\n        <a href=\"https://portal.reportburster.com/use-cases/\" target=\"_blank\">9. Web + DocumentBurster =\r\n          AnyDocument2People </a>\r\n\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</ng-template>\r\n`"
        }
      ],
      "src/app/areas/_configuration-templates/templates/tab-whats-new.ts": [
        {
          "name": "tabWhatsNewTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_configuration-templates/templates/tab-whats-new.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWhatsNewTemplate>\r\n  <dburst-whats-new></dburst-whats-new>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_ext-connections/templates/tab-whats-new.ts": [
        {
          "name": "tabWhatsNewTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_ext-connections/templates/tab-whats-new.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWhatsNewTemplate>\r\n  <dburst-whats-new></dburst-whats-new>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/_processing/templates/tab-whats-new.ts": [
        {
          "name": "tabWhatsNewTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/_processing/templates/tab-whats-new.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<ng-template #tabWhatsNewTemplate>\r\n  <dburst-whats-new></dburst-whats-new>\r\n</ng-template>`"
        }
      ],
      "src/app/areas/install-setup-upgrade/terminal/terminal.template.ts": [
        {
          "name": "terminalTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/install-setup-upgrade/terminal/terminal.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`\r\n<!-- <ng-template #terminalTemplate> -->\r\n<p-sidebar\r\n  [(visible)]=\"availableCommandsVisible\"\r\n  position=\"right\"\r\n  [closeOnEscape]\r\n  [style]=\"{width:'30em'}\"\r\n>\r\n  <br /><br /><br /><br /><br />\r\n  <strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.MAIN-COMMANDS' |\r\n    translate }}</strong\r\n  >\r\n  <br /><br />\r\n  <ol>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.FIND-JAVA-VERSION' | translate\"\r\n      ></span\r\n      >: <code>java --version</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.FIND-CHOCOLATEY-VERSION' | translate\"\r\n      ></span\r\n      >: <code>choco --version</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.INSTALL-CHOCOLATEY' | translate\"\r\n      ></span\r\n      >: <code>install chocolatey</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.UNINSTALL-CHOCOLATEY' | translate\"\r\n      ></span\r\n      >: <code>uninstall chocolatey</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.INSTALL-JAVA' | translate\"\r\n      ></span\r\n      >: <code>choco install openjdk --yes</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.UNINSTALL-JAVA' | translate\"\r\n      ></span\r\n      >: <code>choco uninstall openjdk --yes</code>\r\n    </li>\r\n  </ol>\r\n  <br />\r\n  <strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.OTHER-COMMANDS' |\r\n    translate }}</strong\r\n  >\r\n  <br /><br />\r\n  <ol>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.INSTALL-JAVA8' | translate\"\r\n      ></span\r\n      >: <code>choco install jre8 -PackageParameters \"/exclude:64\" --yes</code>\r\n    </li>\r\n    <li>\r\n      <span\r\n        [innerHTML]=\"'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.INNER-HTML.UNINSTALL-JAVA8' | translate\"\r\n      ></span\r\n      >: <code>choco uninstall jre8 --yes</code>\r\n    </li>\r\n  </ol>\r\n</p-sidebar>\r\n\r\n<p-panel #pnlTerminal header=\"{{headerLevel}}\" (keydown)=\"honourReadOnly()\">\r\n  <p-terminal id=\"p-terminal\" prompt=\"documentburster> \"></p-terminal>\r\n</p-panel>\r\n\r\n<button\r\n  id=\"btnToggleReadOnly\"\r\n  type=\"button\"\r\n  [ngClass]=\"{'btn': true, 'btn-md': true, 'btn-primary': !readOnly,'btn-default': readOnly}\"\r\n  (click)=\"toggleReadOnly()\"\r\n>\r\n  <i class=\"fa fa-keyboard-o\"></i>&nbsp;<em\r\n    ><span *ngIf=\"readOnly\"\r\n      >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.LET-ME' | translate\r\n      }}</span\r\n    >\r\n    <span *ngIf=\"!readOnly\"\r\n      >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.IM-DONE' | translate\r\n      }}</span\r\n    ></em\r\n  >\r\n</button>\r\n\r\n<span *ngIf=\"readOnly\"\r\n  >&nbsp;&nbsp;(<strong\r\n    >{{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.I-KNOW' | translate\r\n    }}</strong\r\n  >)</span\r\n>\r\n<button\r\n  type=\"button\"\r\n  class=\"btn btn-link\"\r\n  *ngIf=\"!readOnly\"\r\n  (click)=\"availableCommandsVisible = true\"\r\n>\r\n  {{'AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.TERMINAL.VIEW-AVAILABLE-COMMANDS' |\r\n  translate }}\r\n</button>\r\n\r\n<!--  </ng-template>-->\r\n`"
        }
      ],
      "src/app/areas/install-setup-upgrade/update/update.template.ts": [
        {
          "name": "updateTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/install-setup-upgrade/update/update.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<div *ngIf=\"succint\">\r\n    <!--\r\n  <div id=\"updateNowSuccint\" *ngIf=\"licenseService?.isNewerVersionAvailable\">\r\n    <u\r\n      ><em>{{ settingsService?.product }}</em\r\n      >&nbsp;{{ licenseService?.latestVersion }}</u\r\n    >\r\n    {{\r\n      \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.IS-AVAILABLE\"\r\n        | translate\r\n    }}!&nbsp;\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-primary btn-xs\"\r\n      (click)=\"handleUpdateNow()\"\r\n      [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n    >\r\n      {{\r\n        \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.UPDATE-NOW\"\r\n          | translate\r\n      }}</button\r\n    >&nbsp;<span\r\n      *ngIf=\"executionStatsService?.logStats.updateErrMessage\"\r\n      class=\"label label-danger\"\r\n      >{{ \"AREAS.STATUS-BAR.UPDATE-DOWNLOAD-ERROR\" | translate }}</span\r\n    >\r\n  </div>-->\r\n  </div>\r\n  <div *ngIf=\"!succint\">\r\n    <div *ngIf=\"!licenseService?.isNewerVersionAvailable\">\r\n      <h4>\r\n        <span class=\"label label-default\"\r\n          >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.NOTHING-UPDATE\"\r\n          | translate }}</span\r\n        >\r\n        ({{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.LATEST-VERSION\" |\r\n        translate }})\r\n      </h4>\r\n    </div>\r\n    <!--\r\n    <div *ngIf=\"licenseService?.isNewerVersionAvailable\">\r\n      <br />\r\n      <strong\r\n        >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.UPDATED-VERSION\"\r\n        | translate }}\r\n        <em>{{ settingsService?.product }}</em>\r\n        {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.IS-AVAILABLE\" |\r\n        translate }}.</strong\r\n      >\r\n      <br />\r\n      <br />\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.YOU-CAN\" | translate\r\n      }}\r\n      <u\r\n        ><em>{{ settingsService?.product }}</em>&nbsp;{{\r\n        licenseService?.latestVersion }}</u\r\n      >\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.AUTOMATICALLY\" |\r\n      translate }}.\r\n      <br />\r\n      <br />\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"handleUpdateNow()\"\r\n        [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n      >\r\n        {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.UPDATE-NOW\" |\r\n        translate }}</button\r\n      >&nbsp;<span\r\n        *ngIf=\"executionStatsService?.logStats.updateErrMessage\"\r\n        class=\"label label-danger\"\r\n        >{{ \"AREAS.STATUS-BAR.UPDATE-DOWNLOAD-ERROR\" | translate }}</span\r\n      >\r\n      <br />\r\n      <br />\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WAIT1\" | translate\r\n      }}\r\n      <em>{{ settingsService?.product }}</em>\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WAIT2\" | translate\r\n      }},\r\n      <em>{{ settingsService?.product }}</em>\r\n      {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WAIT3\" | translate\r\n      }}.\r\n      <br /><br />\r\n      <dburst-when-updating></dburst-when-updating>\r\n    </div> -->\r\n    <div class=\"row\" *ngIf=\"!licenseService?.isNewerVersionAvailable\">\r\n      <hr />\r\n      <div class=\"col-xs-12\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"btnLetMeUpdateManually\"\r\n          [(ngModel)]=\"letMeUpdateManually\"\r\n        />\r\n        <label for=\"btnLetMeUpdateManually\" class=\"checkboxlabel\"\r\n          >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.LET-ME1\" |\r\n          translate }}\r\n          <em>{{ settingsService?.product }}</em>\r\n          {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.LET-ME2\" |\r\n          translate }}\r\n        </label>\r\n      </div>\r\n    </div>\r\n    <br />\r\n    <div *ngIf=\"letMeUpdateManually\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-9\">\r\n          <input\r\n            id=\"oldDbInstallationFolder\"\r\n            [(ngModel)]=\"letMeUpdateSourceDirectoryPath\"\r\n            class=\"form-control\"\r\n            autofocus\r\n            required\r\n          /><em\r\n            >(*) {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.SELECT\" |\r\n            translate }} DocumentBurster.exe</em\r\n          >\r\n        </div>\r\n\r\n        <div class=\"col-xs-3\">\r\n          <dburst-button-native-system-dialog\r\n            value=\"Select\"\r\n            dialogType=\"folder\"\r\n            (pathsSelected)=\"onExistingInstallationFolderSelected($event)\"\r\n          ></dburst-button-native-system-dialog>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <div class=\"row\" *ngIf=\"letMeUpdateSourceDirectoryPath\">\r\n        <div\r\n          class=\"col-xs-12\"\r\n          *ngIf=\"updateInfo?.errorMsg\"\r\n          style=\"overflow-x: scroll\"\r\n        >\r\n          <span id=\"errorMsg\" class=\"label label-warning\" style=\"word-wrap: break-word\"\r\n            >{{ updateInfo?.errorMsg }}</span\r\n          >\r\n        </div>\r\n        <div\r\n          class=\"col-xs-9\"\r\n          *ngIf=\"!updateInfo?.errorMsg\"\r\n          style=\"height: 350px; overflow-y: scroll; overflow-x: auto\"\r\n        >\r\n          <dburst-when-updating [updateInfo]=\"updateInfo\"></dburst-when-updating\r\n          ><br />\r\n          <strong\r\n            >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING1\" |\r\n            translate }} {{ updateInfo?.updateSourceDirectoryPath }}\r\n            <span *ngIf=\"updateInfo?.updateSourceVersion\"\r\n              >(v{{ updateInfo?.updateSourceVersion }})</span\r\n            >\r\n            {{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING2\" |\r\n            translate }} {{ homeDirectoryPath }} (v{{ settingsService?.version\r\n            }})</strong\r\n          >\r\n          <br /><br />\r\n          <strong\r\n            >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING3\" |\r\n            translate }}</strong\r\n          ><br /><br />\r\n          <ol>\r\n            <li *ngFor=\"let configFile of updateInfo?.migrateConfigFiles\">\r\n              {{ configFile[0] }} - {{ configFile[1] }}\r\n            </li>\r\n          </ol>\r\n          <br />\r\n          <strong *ngIf=\"updateInfo?.migrateScriptFiles.length == 0\"\r\n            ><u\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING4\"\r\n              | translate }}</u\r\n            ></strong\r\n          >\r\n          <div *ngIf=\"updateInfo?.migrateScriptFiles.length > 0\">\r\n            <strong\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING5\"\r\n              | translate }}</strong\r\n            ><br /><br />\r\n            <ol>\r\n              <li *ngFor=\"let scriptFile of updateInfo?.migrateScriptFiles\">\r\n                {{ scriptFile[0] }} - {{ scriptFile[1] }}\r\n              </li>\r\n            </ol>\r\n          </div>\r\n          <br />\r\n          <strong *ngIf=\"updateInfo?.templatesFolders.length == 0\"\r\n            ><u\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING6\"\r\n              | translate }}</u\r\n            ></strong\r\n          >\r\n          <div *ngIf=\"updateInfo?.templatesFolders.length > 0\">\r\n            <strong\r\n              >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING7\"\r\n              | translate }}</strong\r\n            ><br /><br />\r\n            <ol>\r\n              <li *ngFor=\"let templatesFolder of updateInfo?.templatesFolders\">\r\n                {{ templatesFolder[0] }} - {{ templatesFolder[1] }}\r\n              </li>\r\n            </ol>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xs-9\" *ngIf=\"!updateInfo?.errorMsg && !letMeUpdateSourceDirectoryPath.includes('playwright/')\">\r\n          <br />\r\n          <button\r\n            id=\"btnMigrate\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary\"\r\n            (click)=\"handleMigrateCopyAboveFiles()\"\r\n            [disabled]=\"executionStatsService?.jobStats.numberOfActiveJobs > 0\"\r\n          >\r\n            <i class=\"fa fa-arrow-up\"></i>&nbsp;{{\r\n            \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING13\" |\r\n            translate }}\r\n          </button>\r\n        </div>\r\n        <div class=\"col-xs-9\" *ngIf=\"letMeUpdateSourceDirectoryPath.includes('playwright/')\">\r\n        <br />\r\n        <button\r\n          id=\"btnE2EFillInfo\"\r\n          type=\"button\"\r\n          class=\"btn btn-primary\"\r\n          (click)=\"onExistingInstallationFolderSelected('playwright/')\"\r\n        >\r\n          <i class=\"fa fa-arrow-up\"></i>&nbsp;Fill Info\r\n        </button>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  </div> `"
        }
      ],
      "src/app/areas/install-setup-upgrade/update/when-updating.template.ts": [
        {
          "name": "whenUpdatingTemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/areas/install-setup-upgrade/update/when-updating.template.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "`<div class=\"row\">\r\n  <div class=\"col-xs-9\">\r\n    <h5>\r\n      <strong\r\n        >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.WHEN-UPDATING\" |\r\n        translate }}</strong\r\n      >\r\n    </h5>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyLicensingInformation\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copylicensinginformation\"\r\n    />\r\n    <label for=\"btnCopyLicensingInformation\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING8\" |\r\n      translate }}<span\r\n        *ngIf=\"ctx != 'updatenow' && updateInfo.updateOptions.copylicensinginformation\"\r\n        >&nbsp;(<strong\r\n          >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.SURE\" |\r\n          translate }}</strong\r\n        >)</span\r\n      >\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyOutputFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copyoutputfiles\"\r\n    />\r\n    <label for=\"btnCopyOutputFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING9\" |\r\n      translate }}\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyLogFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copylogfiles\"\r\n    />\r\n    <label for=\"btnCopyLogFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING10\" |\r\n      translate }}\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyQuarantineFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copyquarantinefiles\"\r\n    />\r\n    <label for=\"btnCopyQuarantineFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING11\" |\r\n      translate }}\r\n    </label>\r\n    <br />\r\n    <input\r\n      type=\"checkbox\"\r\n      id=\"btnCopyBackupFiles\"\r\n      [(ngModel)]=\"updateInfo.updateOptions.copybackupfiles\"\r\n    />\r\n    <label for=\"btnCopyBackupFiles\" class=\"checkboxlabel\"\r\n      >{{ \"AREAS.INSTALL-SETUP-UPGRADE.COMPONENTS.UPDATE-NOW.FOLLOWING12\" |\r\n      translate }}\r\n    </label>\r\n  </div>\r\n</div>\r\n`"
        }
      ]
    },
    "groupedFunctions": {
      "src/stories/_utils/setup.ts": [
        {
          "name": "HttpLoaderFactory",
          "file": "src/stories/_utils/setup.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "args": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "http",
              "type": "HttpClient",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "src/app/providers/api.service.ts": [
        {
          "name": "RequestMethod",
          "childs": [
            {
              "name": "get",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "GET"
            },
            {
              "name": "head",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "HEAD"
            },
            {
              "name": "post",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "POST"
            },
            {
              "name": "put",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "PUT"
            },
            {
              "name": "delete",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "DELETE"
            },
            {
              "name": "options",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "OPTIONS"
            },
            {
              "name": "patch",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "PATCH"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/providers/api.service.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "src/app/areas/install-setup-upgrade/whats-new/whats-new.component.ts": [
        {
          "name": "BlogPost",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/app/areas/install-setup-upgrade/whats-new/whats-new.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ],
      "src/app/components/button-well-known/button-well-known.component.ts": [
        {
          "name": "EmailProviderSettings",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/app/components/button-well-known/button-well-known.component.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "kind": 187
        }
      ]
    }
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "children": [
          {
            "path": "",
            "component": "ProcessingComponent"
          },
          {
            "path": "processing/:leftMenu",
            "component": "ProcessingComponent"
          },
          {
            "path": "processingSample/:leftMenu/:prefilledInputFilePath/:prefilledConfigurationFilePath",
            "component": "ProcessingComponent"
          },
          {
            "path": "processingQa/:leftMenu",
            "component": "ProcessingComponent"
          },
          {
            "path": "processingQa/:leftMenu/:prefilledInputFilePath",
            "component": "ProcessingComponent"
          },
          {
            "path": "processingQa/:leftMenu/:prefilledInputFilePath/:prefilledConfigurationFilePath",
            "component": "ProcessingComponent"
          },
          {
            "path": "processingQa/:leftMenu/:prefilledInputFilePath/:prefilledConfigurationFilePath/:whichAction",
            "component": "ProcessingComponent"
          },
          {
            "path": "configuration/:leftMenu/:configurationFilePath/:configurationFileName/:reloadConfiguration",
            "component": "ConfigurationComponent"
          },
          {
            "path": "configuration/:leftMenu/:configurationFilePath/:configurationFileName",
            "component": "ConfigurationComponent"
          },
          {
            "path": "configuration-templates",
            "component": "ConfigurationTemplatesComponent"
          },
          {
            "path": "ext-connections/:goBackLocation/:configurationFilePath/:configurationFileName",
            "component": "ExternalConnectionsComponent"
          },
          {
            "path": "ext-connections",
            "component": "ExternalConnectionsComponent"
          },
          {
            "path": "help/:leftMenu",
            "component": "HelpComponent"
          }
        ],
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/app.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "httpLoaderFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/configuration-templates.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ConfigurationTemplatesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/templates/_left-menu.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "leftMenuTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/templates/_tabs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/templates/modal-conf-template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modalConfigurationTemplateTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/templates/tab-conf-templates-samples.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabConfTemplatesSamples",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/templates/tab-conf-templates.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabConfigurationTemplatesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/templates/tab-license.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLicenseTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration-templates/templates/tab-whats-new.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWhatsNewTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/configuration.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ConfigurationComponent",
        "coveragePercent": 0,
        "coverageCount": "0/84",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/_left-menu.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "leftMenuTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/_tabs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/modal-attachment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modalAttachmentTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-advanced-error-handling.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabAdvancedErrorHandlingTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-advanced.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabAdvancedTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-attachments.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabAttachmentsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-email-address-validation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabEmailAddressValidationTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-email-cloud-providers.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabEmailCloudProvidersTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-email-connection-settings.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabEmailConnectionSettingsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-email-message.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabEmailMessageTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-email-tuning.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabEmailTuningTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-enable-disable-delivery.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabEnableDisableDeliveryTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-general-settings.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabGeneralSettingsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-license.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLicenseTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-logs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLogsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-qa.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabQATemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-reporting-datasource-datatables.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabReportingDataSourceDataTablesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-reporting-template-output.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabReportingTemplateOutputTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-sms-message.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabSMSMessageTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-sms-twilio.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabSMSTwilioTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-upload-cloud.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabUploadCloudTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-upload-file-share.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabUploadFileShareTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-upload-ftp.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabUploadFTPTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-upload-ftps.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabUploadFTPSTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-upload-http.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabUploadHTTPTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-upload-sftp.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabUploadSFTPTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-web-upload-documentburster-web.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWebUploadDocumentBursterWebTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-web-upload-drupal.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWebUploadDrupalTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-web-upload-joomla.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWebUploadJoomlaTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-web-upload-other-web-platforms.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWebUploadOtherWebPlatformsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-web-upload-sharepoint.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWebUploadSharePointTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_configuration/templates/tab-web-upload-wordpress.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWebUploadWordPressTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/ext-connections.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExternalConnectionsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/templates/_left-menu.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "leftMenuTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/templates/_tabs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/templates/modal-ext-connection.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modalExtConnectionsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/templates/tab-ext-connection.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabExternalConnectionsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/templates/tab-license.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLicenseTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/templates/tab-logs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLogsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_ext-connections/templates/tab-whats-new.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWhatsNewTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/help.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HelpComponent",
        "coveragePercent": 0,
        "coverageCount": "0/26",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/_left-menu.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "leftMenuTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/_tabs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-about.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabAboutTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-blog.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabBlogTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-comparison.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabComparisonTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-documentation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabDocumentationTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-examples.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabExamplesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-extra-packages.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabExtraPackagesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-free.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabFreeTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-java.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabJavaTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-license.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLicenseTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-logs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLogsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-reviews.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabReviewsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-services.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabServicesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-support.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabSupportTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-system-diagnostics.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabSystemDiagnosticsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-terminal.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabTerminalTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_help/templates/tab-update.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabUpdateTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/processing.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ProcessingComponent",
        "coveragePercent": 0,
        "coverageCount": "0/59",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/_left-menu.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "leftMenuTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/_tabs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/modal-samples-learn-more.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modalSamplesLearnMoreTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/resume-jobs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "resumeJobsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-burst.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabBurstTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-license.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLicenseTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-logs.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabLogsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-merge-burst.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabMergeBurstTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-quality-assurance.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabQualityAssuranceTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-reporting-mailmerge-classicreports.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabReportGenerationMailMergeTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-samples.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabSamplesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/_processing/templates/tab-whats-new.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "tabWhatsNewTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/areas.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AreasComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/bash.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "BashService",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/chocolatey/chocolatey.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ChocolateyComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/chocolatey/chocolatey.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "chocolateyTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExtraPackagesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.component.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ExtPackage",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/extra-packages/extra-packages.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "extraPackagesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/java/java.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "JavaComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/java/java.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "javaTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/system-diagnostics/system-diagnostics.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SystemDiagnosticsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/system-diagnostics/system-diagnostics.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "systemDiagnosticsTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/terminal/terminal.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TerminalComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/terminal/terminal.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "terminalTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/update/update.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UpdateComponent",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/update/update.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "updateTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/update/when-updating.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "whenUpdatingTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/update/when-updating.ts",
        "type": "component",
        "linktype": "component",
        "name": "WhenUpdatingComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/updater.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UpdateInfo",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/updater.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Updater",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/install-setup-upgrade/whats-new/whats-new.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "WhatsNewComponent",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/status-bar/status-bar.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StatusBarComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/areas/top-menu-header/top-menu-header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TopMenuHeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/components/ask-for-feature/ask-for-feature-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AskForFeatureDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/components/ask-for-feature/ask-for-feature-dialog.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "askForFeatureDialogTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/ask-for-feature/ask-for-feature.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AskForFeatureService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/components/brand/brand.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "BrandComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-clear-logs/button-clear-logs.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonClearLogsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-html-preview/button-html-preview.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonHtmlPreviewComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-html-preview/modal-html-preview.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modalHtmlPreviewTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-native-fs-dialog/button-native-fs-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonNativeFsDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-native-system-dialog/button-native-system-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonNativeSystemDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-variables/button-variables.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonVariablesComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-variables/modal-variables.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modalVariablesTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-well-known/button-well-known.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonWellKnownEmailProvidersComponent",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/components/button-well-known/modal-well-known.template.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modalWellKnownTemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/components/dialog-confirm/confirm-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ConfirmDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/components/dialog-confirm/confirm.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ConfirmService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/components/dialog-info/info-dialog.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InfoDialogComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/components/dialog-info/info.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "InfoService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/components/license/license.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LicenseComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/components/log-file-viewer/log-file-viewer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LogFileViewerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/components/log-files-viewer-all-together/log-files-viewer-all-together.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LogFilesViewerAllTogetherComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/components/log-files-viewer-separate-tabs/log-files-viewer-separate-tabs.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LogFilesViewerSeparateTabsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/components/skins/skins.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SkinsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/core/services/electron/electron.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Dialog",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/core/services/electron/electron.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ElectronService",
        "coveragePercent": 0,
        "coverageCount": "0/39",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/constants.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Constants",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/settings.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Settings",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/utilities-electron.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UtilitiesElectron",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/utilities-nodejs.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UtilitiesNodeJs",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/utilities.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Utilities",
        "coveragePercent": 0,
        "coverageCount": "0/33",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/websocket-endpoint.ts",
        "type": "class",
        "linktype": "classe",
        "name": "SocketEndpoint",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/websocket-endpoint.ts",
        "type": "class",
        "linktype": "classe",
        "name": "SocketOptions",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/helpers/websocket-endpoint.ts",
        "type": "class",
        "linktype": "classe",
        "name": "WebSocketEndpoint",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/app/models/blog-post-info.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "BlogPostInfo",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/models/config-info.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ConfigInfo",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/models/system-info.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SystemInfo",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/models/usage-details-info.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "UsageDetailsInfo",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/api.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ApiService",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/execution-stats.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExecutionStatsService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/fs.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "FsService",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/fs.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "InspectResult",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/license.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LicenseService",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/processing.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ProcessingService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/samples.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SamplesService",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/samples.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "SampleInfo",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/settings.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SettingsService",
        "coveragePercent": 0,
        "coverageCount": "0/53",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/settings.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CfgTmplFileInfo",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/settings.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ExtConnection",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/settings.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "TmplFileInfo",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/settings.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "newEmailServer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/shell.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ShellService",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/shell.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ProcessOutputResult",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/state-store.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "StateStoreService",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/toastr-messages.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ToastrMessagesService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/unix-cli.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UnixCliService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/ws-execution-stats.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "WebSocketExecutionStatsService",
        "coveragePercent": 0,
        "coverageCount": "0/34",
        "status": "low"
      },
      {
        "filePath": "src/app/providers/ws-logs.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LogsServiceWebSocket",
        "coveragePercent": 0,
        "coverageCount": "0/35",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.dev.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APP_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APP_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APP_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.web.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APP_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.web.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APP_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/_utils/setup.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "HttpLoaderFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/_utils/setup.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "baseMeta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/user.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "User",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      }
    ]
  }
}
