import { test } from '@playwright/test';
import { electronBeforeAfterAllTest } from '../../utils/common-setup';
import * as PATHS from '../../utils/paths';
import * as jetpack from 'fs-jetpack';
import { Constants } from '../../utils/constants';
import { FluentTester } from '../../helpers/fluent-tester';

//DONE1
test.describe('', async () => {
  electronBeforeAfterAllTest(
    'should correctly display in the initial "No jobs are currently running and Great. No Errors / No Warnings." state',
    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/logs/info-with-data.log`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.LOGS_PATH}/info.log`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .waitOnProcessingToFinish(Constants.CHECK_PROCESSING_STATUS_BAR)
        .appShouldBeReadyToRunNewJobs()
        .appStatusShouldBeGreatNoErrorsNoWarnings();
    },
  );

  electronBeforeAfterAllTest(
    'should correctly display the status bar with one "job running" state',

    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/jobs/105421439.job`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.TEMP_PATH}/105421439.job`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .waitOnProcessingToStart(Constants.CHECK_PROCESSING_STATUS_BAR)
        .appShouldHaveNActiveJobs(1)
        .appStatusShouldBeGreatNoErrorsNoWarnings()
        .elementShouldContainText(
          '#workingOn',
          'Working on Payslips-Oct.pdf ...',
        );
    },
  );

  electronBeforeAfterAllTest(
    'should correctly display the status bar with multiple "jobs running" state',
    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/jobs/105421439.job`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.TEMP_PATH}/105421439.job`,
        { overwrite: true },
      );

      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/jobs/105421440.job`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.TEMP_PATH}/105421440.job`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .waitOnProcessingToStart(Constants.CHECK_PROCESSING_STATUS_BAR)
        .appStatusShouldBeGreatNoErrorsNoWarnings()
        .elementShouldContainText(
          '#workingOn',
          'Working on Payslips-Nov.pdf and Payslips-Oct.pdf ...',
        );
    },
  );

  electronBeforeAfterAllTest(
    'should correctly display the Ups ... View Error(s) state (1)',
    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/logs/errors-with-data.log`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.LOGS_PATH}/errors.log`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .waitOnProcessingToFinish(Constants.CHECK_PROCESSING_STATUS_BAR)
        .waitOnElementToBecomeVisible(
          '#btnErrors',
          Constants.DELAY_FIVE_THOUSANDS_SECONDS,
        )
        .appShouldBeReadyToRunNewJobs()
        .appStatusShouldShowErrors();
    },
  );

  electronBeforeAfterAllTest(
    'should correctly display the Ups ... View Error(s) state (2)',
    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/logs/errors-with-data.log`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.LOGS_PATH}/errors.log`,
        { overwrite: true },
      );

      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/logs/warnings-with-data.log`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.LOGS_PATH}/warnings.log`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .waitOnProcessingToFinish(Constants.CHECK_PROCESSING_STATUS_BAR)
        .appShouldBeReadyToRunNewJobs()
        .waitOnElementToBecomeVisible(
          '#btnErrors',
          Constants.DELAY_FIVE_THOUSANDS_SECONDS,
        )
        .appStatusShouldShowErrors();
    },
  );

  electronBeforeAfterAllTest(
    'should correctly display the Ups ... View Warning(s) state',
    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/logs/warnings-with-data.log`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.LOGS_PATH}/warnings.log`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .waitOnProcessingToFinish(Constants.CHECK_PROCESSING_STATUS_BAR)
        .waitOnElementToBecomeVisible(
          '#btnWarnings',
          Constants.DELAY_FIVE_THOUSANDS_SECONDS,
        )
        .appShouldBeReadyToRunNewJobs()
        .appStatusShouldShowWarnings();
    },
  );

  electronBeforeAfterAllTest(
    'should correctly display the status bar with "Executing command Cancel ..." state',
    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/jobs/105421439.job`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.TEMP_PATH}/105421439.job`,
        { overwrite: true },
      );

      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/jobs/105421439.job`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.TEMP_PATH}/105421439.job.cancel`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .appStatusShouldBeGreatNoErrorsNoWarnings()
        .elementShouldContainText(
          '#cancelJobFileExists',
          'Wait. Executing command Cancel ...',
        );
    },
  );

  electronBeforeAfterAllTest(
    'should correctly display the status bar with "Executing command Pause ..." state',
    async function ({ beforeAfterEach: firstPage }) {
      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/jobs/105421439.job`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.TEMP_PATH}/105421439.job`,
        { overwrite: true },
      );

      await jetpack.copyAsync(
        `${PATHS.E2E_RESOURCES_PATH}/jobs/105421439.job`,
        `${process.env.PORTABLE_EXECUTABLE_DIR}/${PATHS.TEMP_PATH}/105421439.job.pause`,
        { overwrite: true },
      );

      const ft = new FluentTester(firstPage);

      await ft
        .goToBurstScreen()
        .appStatusShouldBeGreatNoErrorsNoWarnings()
        .elementShouldContainText(
          '#pauseJobFileExists',
          'Wait. Executing command Pause ...',
        );
    },
  );
});
