const fs = require("fs")
const { execSync } = require("child_process")

function setProvider(provider) {
  const template = fs.readFileSync("prisma/schema.template.prisma", "utf8")
  const schema = template.replace("{{DATABASE_PROVIDER}}", provider)
  fs.writeFileSync("prisma/schema.prisma", schema)
}

function getTimestamp() {
  return new Date().toISOString().replace(/[-:]/g, "").split(".")[0]
}

function createDevMigrations() {
  console.log("\n🔵 Creating development (SQLite) migrations...")
  setProvider("sqlite")

  if (!fs.existsSync("prisma/_dev-migrations-sqlite/migration_lock.toml")) {
    console.log("⚡ No existing SQLite migrations found, creating new ones...")

    console.log("📁 Cleaning migrations directory...")
    execSync("npx shx rm -rf prisma/migrations/*", { stdio: "inherit" })

    console.log("📁 Setting up SQLite environment...")
    execSync("npx shx mkdir -p prisma/.dev-sqlite", { stdio: "inherit" })
    process.env.DATABASE_URL = "file:./.dev-sqlite/dev.db"

    console.log("⚙️ Running Prisma migrate dev...")
    execSync("npx prisma migrate dev --name init", { stdio: "inherit" })

    console.log("📁 Backing up SQLite migrations...")
    execSync("npx shx mkdir -p prisma/_dev-migrations-sqlite", {
      stdio: "inherit",
    })
    execSync(
      "npx shx cp -r prisma/migrations/* prisma/_dev-migrations-sqlite/",
      { stdio: "inherit" }
    )

    console.log("✅ Development migrations created successfully!")
  } else {
    console.log("⏩ SQLite migrations already exist, skipping creation")
  }
}

function createProdMigrations() {
  console.log("\n🔵 Creating production (MySQL) migrations...")
  setProvider("mysql")

  if (!fs.existsSync("prisma/_prod-migrations-mysql/migration_lock.toml")) {
    console.log("⚡ No existing MySQL migrations found, creating new ones...")

    console.log("📁 Cleaning migrations directory...")
    execSync("npx shx rm -rf prisma/migrations/*", { stdio: "inherit" })

    console.log("📁 Creating MySQL migrations directory...")
    const timestamp = getTimestamp()
    const migrationDir = `prisma/_prod-migrations-mysql/${timestamp}_init`
    execSync(`npx shx mkdir -p ${migrationDir}`, { stdio: "inherit" })

    console.log("⚙️ Generating MySQL migration script...")
    execSync(
      `npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > ${migrationDir}/migration.sql`,
      { stdio: "inherit" }
    )

    console.log("📝 Creating migration lock file...")
    fs.writeFileSync(
      "prisma/_prod-migrations-mysql/migration_lock.toml",
      '# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = "mysql"'
    )

    console.log("✅ Production migrations created successfully!")
  } else {
    console.log("⏩ MySQL migrations already exist, skipping creation")
  }
}

function migrateDevDatabase() {
  console.log("\n🔵 Migrating development (SQLite) database...")
  setProvider("sqlite")

  if (!fs.existsSync("prisma/migrations/migration_lock.toml")) {
    console.log("⚡ No active migrations found, copying SQLite migrations...")

    console.log("📁 Creating migrations directory...")
    execSync("npx shx mkdir -p prisma/migrations", { stdio: "inherit" })

    console.log("📁 Cleaning migrations directory...")
    execSync("npx shx rm -rf prisma/migrations/*", { stdio: "inherit" })

    console.log("📁 Setting up SQLite environment...")
    execSync("npx shx mkdir -p prisma/.dev-sqlite", { stdio: "inherit" })
    process.env.DATABASE_URL = "file:./.dev-sqlite/dev.db"

    console.log("📁 Copying SQLite migrations...")
    execSync(
      "npx shx cp -r prisma/_dev-migrations-sqlite/* prisma/migrations/",
      { stdio: "inherit" }
    )
  } else {
    console.log("✅ Active migrations found")
  }

  console.log("⚙️ Running Prisma migrate deploy...")
  execSync("npx prisma migrate deploy", { stdio: "inherit" })

  console.log("✅ Development database migration complete!")
}

function checkProdEnvironment() {
  if (!process.env.DATABASE_PROVIDER || !process.env.DATABASE_URL) {
    throw new Error(
      "Missing required environment variables: DATABASE_PROVIDER and DATABASE_URL must be set for production migrations"
    )
  }
  if (process.env.DATABASE_PROVIDER !== "mysql") {
    throw new Error(
      "DATABASE_PROVIDER must be 'mysql' for production migrations"
    )
  }
}

function migrateProdDatabase() {
  console.log("\n🔵 Migrating production (MySQL) database...")

  checkProdEnvironment()
  setProvider("mysql")

  if (!fs.existsSync("prisma/migrations/migration_lock.toml")) {
    console.log("⚡ No active migrations found, copying MySQL migrations...")

    console.log("📁 Creating migrations directory...")
    execSync("npx shx mkdir -p prisma/migrations", { stdio: "inherit" })

    console.log("📁 Cleaning migrations directory...")
    execSync("npx shx rm -rf prisma/migrations/*", { stdio: "inherit" })

    console.log("📁 Copying MySQL migrations...")
    execSync(
      "npx shx cp -r prisma/_prod-migrations-mysql/* prisma/migrations/",
      { stdio: "inherit" }
    )

    console.log("📝 Creating baseline migration...")
    execSync("npx prisma migrate resolve --applied 0_init", {
      stdio: "inherit",
    })
  } else {
    console.log("✅ Active migrations found")
  }

  console.log("⚙️ Running Prisma migrate deploy...")
  execSync("npx prisma migrate deploy", { stdio: "inherit" })

  console.log("✅ Production database migration complete!")
}

module.exports = {
  createDevMigrations,
  createProdMigrations,
  migrateDevDatabase,
  migrateProdDatabase,
}
