#+TITLE: Detailed Design Document (DDD) for ReportBurster v10.2.4
#+AUTHOR: Mario
#+DATE: 2025-01-07
#+STATUS: Draft
#+REQUIREMENTS_DOC: requirements-20250107-v10.2.4.org

* Introduction
This DDD covers the implementation details for all requirements in the linked requirements document.

* DONE Feature 1: License Screen Update
** Requirement Description
*** Summary
Update the license screen terminology from "Demo" to "Community" to better reflect the open-source nature of the software.

*** User Stories
- As a user, I want clear terminology that reflects the software's open-source status so that I understand the licensing model.

*** Acceptance Criteria
- All instances of "Demo" in the license screen are replaced with "Community".
- The updated text is properly localized for all supported languages.
- The change is reflected in both the UI and documentation.

** Implementation Prompts
*** Frontend Changes
- Locate all instances of "Demo" in the Angular frontend code.
- Replace "Demo" with "Community" in the relevant UI components.
- Ensure the changes are localized for all supported languages.

*** Backend Changes
- Update any backend references to "Demo" in the license-related code.
- Ensure the changes are consistent with the frontend updates.

*** Documentation Updates
- Update the user documentation to reflect the new terminology.
- Ensure the documentation is consistent with the UI changes.

** Files to Modify
*** Frontend
- `frontend/reporting/src/app/areas/license/license.component.html`
- `frontend/reporting/src/app/areas/license/license.component.ts`
- `frontend/reporting/src/assets/i18n/*.json` (for localization)

*** Backend
- `backend/server/src/main/java/com/flowkraft/jobson/license/LicenseService.java`
- `backend/server/src/main/resources/license-messages.properties` (if applicable)

*** Documentation
- `docs/user-guide/license.md`

** Code Snippets
*** Frontend Example (Before)
```html
<h2>Demo License</h2>
<p>This is a demo version of the software.</p>
```

*** Frontend Example (After)
```html
<h2>Community License</h2>
<p>This is the community version of the software.</p>
```

*** Localization Example (Before)
```json
{
  "license.demo": "Demo License"
}
```

*** Localization Example (After)
```json
{
  "license.community": "Community License"
}
```

** Additional Notes
- Coordinate with the localization team to ensure all language files are updated.
- Verify that the changes do not break any existing functionality.
- Update unit tests to reflect the new terminology.

** Implementation Status
- [x] Frontend changes
- [ ] Backend changes
- [ ] Documentation updates
- [x] Localization updates
- [ ] Testing and validation

** Implementation Notes
- Updated en.json localization file
- Changed "DEMO-TRIAL" translation to "Open Source / Community"
- No backend changes required
- Frontend changes completed through localization update

* Feature 2: Local Excel File Datasource Support
** Requirement Description
*** Summary
Add support for local Excel files as a new datasource type, treating them similarly to CSV files by reading all rows and columns from the main sheet.

*** User Stories
- As a user, I want to use local Excel files as a data source so that I can generate reports from my existing spreadsheets.

*** Acceptance Criteria
- Support for reading `.xlsx` files.  
- Ability to read all rows and columns from the main sheet.  
- Proper handling of Excel data types.  
- Error handling for invalid or corrupted files.  
- Consistent implementation with the existing `CsvReporter`.  

---

#### **Implementation Steps**

**Step 1: Create the ExcelReporter Class**  
1. Create a new Java class called `ExcelReporter` in the `com.sourcekraft.documentburster.engine.reporting` package.  
2. Extend `AbstractReporter` and follow the same structure as `CsvReporter`.  
3. Include:  
   - A constructor that accepts a `configFilePath` and calls the superclass constructor.  
   - A private `List<String[]> parsedLines` field to store the parsed Excel data.  
   - A method `initializeResources()` to read the Excel file.  
   - A method `parseBurstingMetaData()` to extract tokens.  
   - A method `getParsedExcelLines()` for testing purposes.  

---

**Step 2: Implement Excel File Parsing**  
1. Use Apache POI to:  
   - Open the Excel file specified in `filePath`.  
   - Read the first sheet.  
   - Parse all rows and columns into a `List<String[]>`, where each `String[]` represents a row.  
2. Handle errors such as:  
   - Invalid file paths.  
   - Unsupported file formats.  
   - Empty sheets.  
3. Ensure the method throws appropriate exceptions for error cases, following the same patterns as `CsvReporter`.  

---

**Step 3: Implement Token Extraction**  
1. Use the `parsedLines` field to extract tokens, similar to the `CsvReporter` implementation but adapted for Excel.  
2. Support the same token extraction logic (e.g., `idcolumn` configuration for selecting the token column).  
3. Handle edge cases such as:  
   - Missing or invalid token columns.  
   - Empty or malformed rows.  
4. Return a `List<String>` of tokens, consistent with `CsvReporter`.  

---

**Step 4: Add Unit Tests**  
1. Create a new test class called `ExcelReporterTest` in the `com.sourcekraft.documentburster.unit.documentation.userguide.reporting` package.  
2. Write unit tests to:  
   - Verify that `initializeResources()` correctly parses a sample Excel file.  
   - Verify that `parseBurstingMetaData()` correctly extracts tokens.  
   - Test error handling for invalid files, empty sheets, and missing token columns.  
3. Ensure the test structure and naming conventions match `CsvReporterTest`.  

---

#### **Files to Modify**
1. **New File**: `backend/reporting/src/main/java/com/sourcekraft/documentburster/engine/reporting/ExcelReporter.java`  
2. **New File**: `backend/reporting/src/test/java/com/sourcekraft/documentburster/unit/documentation/userguide/reporting/ExcelReporterTest.java`  
3. **Existing File**: Update relevant backend classes to support the new `ExcelReporter`.  

---

#### **Code Snippets**
**ExcelReporter.java (Partial Implementation)**  
```java
public class ExcelReporter extends AbstractReporter {

    private List<String[]> parsedLines;

    public ExcelReporter(String configFilePath) {
        super(configFilePath);
    }

    @Override
    protected void initializeResources() throws Exception {
        // Use Apache POI to read the Excel file
        // Store parsed data in parsedLines
    }

    @Override
    public List<String> parseBurstingMetaData() throws Exception {
        // Extract tokens from parsedLines
        // Follow the same logic as CsvReporter
    }

    public List<String[]> getParsedExcelLines() {
        return parsedLines;
    }
}
```

**ExcelReporterTest.java (Partial Implementation)**  
```java
public class ExcelReporterTest {

    @Test
    public void testInitializeResources() {
        // Verify that initializeResources() correctly parses a sample Excel file
    }

    @Test
    public void testParseBurstingMetaData() {
        // Verify that parseBurstingMetaData() correctly extracts tokens
    }
}
```

---

#### **Implementation Status**
- [ ] Step 1: Create the ExcelReporter Class  
- [ ] Step 2: Implement Excel File Parsing  
- [ ] Step 3: Implement Token Extraction  
- [ ] Step 4: Add Unit Tests  

* Feature 3: HTML and PDF Output Types
** Requirement Description
*** Summary
Implement HTML output type and PDF generation using HTML templates.

*** User Stories
- As a user, I want to generate reports in HTML format so that I can view them in web browsers.
- As a user, I want to generate PDFs from HTML templates so that I can create professional-looking documents.

*** Acceptance Criteria
- HTML output generation with proper styling.
- PDF generation from HTML templates.
- Support for custom HTML templates.
- Consistent output across different browsers and PDF viewers.

** Implementation Prompts
*** Backend Changes
- Implement HTML template rendering using a library like Thymeleaf or Freemarker.
- Add PDF generation using a library like Flying Saucer or similar.
- Ensure support for custom HTML templates.

** Files to Modify
*** Backend
- `backend/reporting/src/main/java/com/sourcekraft/documentburster/reporting/ReportGenerator.java`
- `backend/reporting/src/main/resources/templates/` (new folder for templates)

** Code Snippets
*** HTML Template Example
```html
<h1>Report Title</h1>
<p>Report content goes here.</p>
```

** Additional Notes
- Ensure the HTML templates are customizable.
- Add unit tests for the new functionality.

** Implementation Status
- [ ] Backend changes
- [ ] Testing and validation

* Feature 4: Database Connection Infrastructure
** Requirement Description
*** Summary
Implement basic infrastructure for database connections as a new datasource type.

*** User Stories
- As a user, I want to connect to databases directly so that I can generate reports from live data.

*** Acceptance Criteria
- Basic database connection framework implemented.
- Support for common database types (MySQL, PostgreSQL).
- Secure credential handling.
- Basic query execution and result handling.

** Implementation Prompts
*** Backend Changes
- Implement a database connection manager.
- Add support for MySQL and PostgreSQL.
- Ensure secure handling of database credentials.
- Implement basic query execution and result handling.

** Files to Modify
*** Backend
- `backend/common/src/main/java/com/sourcekraft/documentburster/common/utils/DatabaseManager.java` (new file)
- `backend/common/src/main/java/com/sourcekraft/documentburster/common/settings/DatasourceSettings.java`

** Code Snippets
*** Database Connection Example
```java
public class DatabaseManager {
    public Connection getConnection(String url, String username, String password) {
        // Implementation for database connection
    }
}
```

** Additional Notes
- Ensure the database connection manager is thread-safe.
- Add unit tests for the new functionality.

** Implementation Status
- [ ] Backend changes
- [ ] Testing and validation

* Review and Validation
- Share the DDD with the team for review.
- Ensure the implementation meets the acceptance criteria.
- Update the DDD with implementation status and notes during development.

* Post-Implementation
- Move the DDD to the `implemented` folder.
- Add cross-references to the DDD in the requirements document.

* Improve a Bit the Codebase & Reduce Technical Debt
** Purpose
This section outlines non-functional improvements to the codebase that will be addressed during this development cycle. These changes are not tied to specific functional requirements but aim to improve the overall quality, maintainability, and performance of the codebase.

** Guidelines
- Identify areas of the codebase that could benefit from refactoring, optimization, or cleanup.
- Focus on small, incremental improvements that can be completed within the current development cycle.
- Ensure that changes do not introduce new bugs or regressions.
- Document the rationale for each improvement and how it reduces technical debt.

** Planned Improvements for This Cycle
*** Refactor License Screen Code
- Goal: Improve readability and maintainability of the license screen code.
- Changes:
  - Extract repeated logic into reusable utility methods.
  - Improve error handling and logging.
  - Add unit tests for edge cases.

*** Optimize Excel Reader Performance
- Goal: Enhance performance and memory efficiency of the Excel file reader.
- Changes:
  - Use streaming APIs for large Excel files to reduce memory usage.
  - Add caching for frequently accessed sheets or ranges.
  - Optimize data type conversion logic.

*** Clean Up HTML/PDF Template Rendering
- Goal: Simplify and standardize the template rendering process.
- Changes:
  - Consolidate duplicate template rendering logic.
  - Add support for template inheritance to reduce redundancy.
  - Improve error messages for invalid templates.

*** Secure Database Connection Handling
- Goal: Strengthen security around database connections.
- Changes:
  - Implement connection pooling for better resource management.
  - Add encryption for database credentials in configuration files.
  - Improve logging for connection-related errors.

** Implementation Status
- [ ] License Screen Refactoring
- [ ] Excel Reader Optimization
- [ ] HTML/PDF Template Cleanup
- [ ] Database Connection Security

** Post-Implementation Review
- Verify that the improvements do not introduce new issues.
- Update documentation to reflect any changes in best practices.
- Share lessons learned with the team to inform future improvements.
