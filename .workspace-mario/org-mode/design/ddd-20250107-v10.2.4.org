#+TITLE: Detailed Design Document (DDD) for ReportBurster v10.2.4
#+AUTHOR: Mario
#+DATE: 2025-01-07
#+STATUS: Draft
#+REQUIREMENTS_DOC: requirements-20250107-v10.2.4.org

* Introduction
This DDD covers the implementation details for all requirements in the linked requirements document.

* DONE Feature 1: License Screen Update
** Requirement Description
*** Summary
Update the license screen terminology from "Demo" to "Community" to better reflect the open-source nature of the software.

*** User Stories
- As a user, I want clear terminology that reflects the software's open-source status so that I understand the licensing model.

*** Acceptance Criteria
- All instances of "Demo" in the license screen are replaced with "Community".
- The updated text is properly localized for all supported languages.
- The change is reflected in both the UI and documentation.

** Implementation Prompts
*** Frontend Changes
- Locate all instances of "Demo" in the Angular frontend code.
- Replace "Demo" with "Community" in the relevant UI components.
- Ensure the changes are localized for all supported languages.

*** Backend Changes
- Update any backend references to "Demo" in the license-related code.
- Ensure the changes are consistent with the frontend updates.

*** Documentation Updates
- Update the user documentation to reflect the new terminology.
- Ensure the documentation is consistent with the UI changes.

** Files to Modify
*** Frontend
- `frontend/reporting/src/app/areas/license/license.component.html`
- `frontend/reporting/src/app/areas/license/license.component.ts`
- `frontend/reporting/src/assets/i18n/*.json` (for localization)

*** Backend
- `backend/server/src/main/java/com/flowkraft/jobson/license/LicenseService.java`
- `backend/server/src/main/resources/license-messages.properties` (if applicable)

*** Documentation
- `docs/user-guide/license.md`

** Code Snippets
*** Frontend Example (Before)
```html
<h2>Demo License</h2>
<p>This is a demo version of the software.</p>
```

*** Frontend Example (After)
```html
<h2>Community License</h2>
<p>This is the community version of the software.</p>
```

*** Localization Example (Before)
```json
{
  "license.demo": "Demo License"
}
```

*** Localization Example (After)
```json
{
  "license.community": "Community License"
}
```

** Additional Notes
- Coordinate with the localization team to ensure all language files are updated.
- Verify that the changes do not break any existing functionality.
- Update unit tests to reflect the new terminology.

** Implementation Status
- [x] Frontend changes
- [ ] Backend changes
- [ ] Documentation updates
- [x] Localization updates
- [ ] Testing and validation

** Implementation Notes
- Updated en.json localization file
- Changed "DEMO-TRIAL" translation to "Open Source / Community"
- No backend changes required
- Frontend changes completed through localization update

* Feature 2: Local Excel File Datasource Support
** Requirement Description
*** Summary
Add support for local Excel files as a new datasource type, treating them similarly to CSV files by reading all rows and columns from the main sheet.

*** User Stories
- As a user, I want to use local Excel files as a data source so that I can generate reports from my existing spreadsheets.

*** Acceptance Criteria
- Support for reading `.xlsx` files.  
- Ability to read all rows and columns from the main sheet.  
- Proper handling of Excel data types.  
- Error handling for invalid or corrupted files.  
- Consistent implementation with the existing `CsvReporter`.  

---

#### **UI Configuration for Excel Datasource**

1. **Input Type**  
   - "Excel File (local .xlsx file)"

2. **Header Row Handling**  
   - "First Row as Headers" (default)  
   - "No Headers"

3. **Skip N# Rows**  
   - Number input (default: 0)

4. **Ignore Leading Whitespace**  
   - Checkbox (default: checked)

---

#### **Header and Skip Rows Logic**

1. **No Header**  
   - Skip N# Rows: Set to 0 and Read Only.  
   - **Example**: Data starts from Row 1.

2. **First Row as Header**  
   - Skip N# Rows: Set to 1 and Read Only.  
   - **Example**: Row 1 is the header, data starts from Row 2.

3. **Multiple Rows as Header**  
   - Skip N# Rows: Set to 2 and becomes editable.  
   - **Example**: Rows 1 and 2 are headers, data starts from Row 3 (user can adjust).

---

#### **Implementation Steps**

**Step 1: Create the ExcelReporter Class**  
1. Create a new Java class called `ExcelReporter` in the `com.sourcekraft.documentburster.engine.reporting` package.  
2. Extend `AbstractReporter` and follow the same structure as `CsvReporter`.  
3. Include:  
   - A constructor that accepts a `configFilePath` and calls the superclass constructor.  
   - A private `List<String[]> parsedLines` field to store the parsed Excel data.  
   - A method `initializeResources()` to read the Excel file.  
   - A method `parseBurstingMetaData()` to extract tokens.  
   - A method `getParsedExcelLines()` for testing purposes.  

---

**Step 2: Implement Excel File Parsing**  
1. Use Apache POI to:  
   - Open the Excel file specified in `filePath`.  
   - Read the first sheet.  
   - Parse all rows and columns into a `List<String[]>`, where each `String[]` represents a row.  
2. Handle the following configurations:  
   - **Header Row Handling**: Skip the first row if "First Row as Headers" is selected.  
   - **Skip N# Rows**: Skip the specified number of rows before processing data.  
   - **Ignore Leading Whitespace**: Trim leading whitespace from cell values if enabled.  
3. Ensure the method throws appropriate exceptions for error cases, following the same patterns as `CsvReporter`.  

---

**Step 3: Implement Token Extraction**  
1. Use the `parsedLines` field to extract tokens, similar to the `CsvReporter` implementation but adapted for Excel.  
2. Support the same token extraction logic (e.g., `idcolumn` configuration for selecting the token column).  
3. Handle edge cases such as:  
   - Missing or invalid token columns.  
   - Empty or malformed rows.  
4. Return a `List<String>` of tokens, consistent with `CsvReporter`.  

---

**Step 4: Add Unit Tests**  
1. Create a new test class called `ExcelReporterTest` in the `com.sourcekraft.documentburster.unit.documentation.userguide.reporting` package.  
2. Write unit tests to:  
   - Verify that `initializeResources()` correctly parses a sample Excel file.  
   - Verify that `parseBurstingMetaData()` correctly extracts tokens.  
   - Test error handling for invalid files, empty sheets, and missing token columns.  
3. Ensure the test structure and naming conventions match `CsvReporterTest`.  

---

#### **Files to Modify**
1. **New File**: `backend/reporting/src/main/java/com/sourcekraft/documentburster/engine/reporting/ExcelReporter.java`  
2. **New File**: `backend/reporting/src/test/java/com/sourcekraft/documentburster/unit/documentation/userguide/reporting/ExcelReporterTest.java`  
3. **Existing File**: Update relevant backend classes to support the new `ExcelReporter`.  

---

#### **Code Snippets**
**ExcelReporter.java (Partial Implementation)**  
```java
public class ExcelReporter extends AbstractReporter {

    private List<String[]> parsedLines;

    public ExcelReporter(String configFilePath) {
        super(configFilePath);
    }

    @Override
    protected void initializeResources() throws Exception {
        try (FileInputStream file = new FileInputStream(filePath);
             Workbook workbook = new XSSFWorkbook(file)) {

            Sheet sheet = workbook.getSheetAt(0); // Read the first sheet
            Iterator<Row> rowIterator = sheet.iterator();

            // Handle Skip N# Rows
            int skipRows = ctx.settings.getReportDataSource().exceloptions.skiprows;
            for (int i = 0; i < skipRows && rowIterator.hasNext(); i++) {
                rowIterator.next(); // Skip the specified number of rows
            }

            // Handle Header Row
            boolean hasHeader = ctx.settings.getReportDataSource().exceloptions.hasheader;
            if (hasHeader && rowIterator.hasNext()) {
                Row headerRow = rowIterator.next();
                // Process headers if needed
            }

            // Parse data rows
            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                Map<String, String> rowData = new HashMap<>();

                for (int i = 0; i < row.getLastCellNum(); i++) {
                    Cell cell = row.getCell(i, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                    String cellValue = getCellValueAsString(cell);

                    // Handle Ignore Leading Whitespace
                    if (ctx.settings.getReportDataSource().exceloptions.ignoreleadingwhitespace) {
                        cellValue = cellValue.trim();
                    }

                    rowData.put("col" + i, cellValue); // Use column index if no headers
                }

                parsedLines.add(rowData);
            }
        }
    }

    @Override
    public List<String> parseBurstingMetaData() throws Exception {
        // Extract tokens from parsedLines
        // Follow the same logic as CsvReporter
    }

    public List<String[]> getParsedExcelLines() {
        return parsedLines;
    }
}
```

**ExcelReporterTest.java (Partial Implementation)**  
```java
public class ExcelReporterTest {

    @Test
    public void testInitializeResources_NoHeader() {
        // Test with "No Header" configuration
        ctx.settings.getReportDataSource().exceloptions.hasheader = false;
        ctx.settings.getReportDataSource().exceloptions.skiprows = 0;

        ExcelReporter reporter = new ExcelReporter("configFilePath");
        reporter.initializeResources();

        // Verify that all rows are treated as data
        assertEquals(3, reporter.getParsedExcelLines().size());
    }

    @Test
    public void testInitializeResources_FirstRowAsHeader() {
        // Test with "First Row as Header" configuration
        ctx.settings.getReportDataSource().exceloptions.hasheader = true;
        ctx.settings.getReportDataSource().exceloptions.skiprows = 1;

        ExcelReporter reporter = new ExcelReporter("configFilePath");
        reporter.initializeResources();

        // Verify that the first row is skipped
        assertEquals(2, reporter.getParsedExcelLines().size());
    }
}
```

---

* Save/Load Excel Reporting Datasource Configurations
** Overview
This section describes the implementation steps for saving and loading Excel-related configurations from the UI 
to the XML file. The implementation involves both backend (`ReportSettings.java`) and frontend (`tab-reporting-datasource-datatables.ts`) changes.

---

#### **Implementation Prompts**

**Prompt 1: Add ExcelOptions Class to ReportSettings.java**  
"Add a new nested class `ExcelOptions` to `ReportSettings.java` to store Excel-specific configurations. The class should include:  
- `header`: String to store the header row handling option (e.g., "firstline", "noheader").  
- `skiplines`: Integer to store the number of rows to skip.  
- `ignoreleadingwhitespace`: Boolean to store whether to ignore leading whitespace.  
Follow the same structure as the existing `CSVOptions` class but adapt it for Excel."

---

**Prompt 2: Update DataSource Class in ReportSettings.java**  
"Update the `DataSource` class in `ReportSettings.java` to include a new field `exceloptions` of type `ExcelOptions`. This field will store the Excel-specific configurations. Ensure the field is initialized properly, similar to how `csvoptions` is handled."

---

**Prompt 3: Add Excel-Specific UI Bindings in tab-reporting-datasource-datatables.ts**  
"Update the Angular component `tab-reporting-datasource-datatables.ts` to bind the new Excel configurations to the `xmlReporting` object. Add UI elements for:  
- **Header Row Handling**: A dropdown to select "First Row as Headers" or "No Headers".  
Bind these UI elements to `xmlReporting?.documentburster.report.datasource.exceloptions`, similar to how CSV configurations are bound."

---

**Prompt 4: Handle Excel Configurations in the Backend**
"Update the backend logic in `ReportSettings.java` to handle the new `exceloptions` field. Ensure the configurations are properly serialized to and deserialized from the XML file, similar to how `csvoptions` is handled. Add 
validation logic to ensure the configurations are valid (e.g., `skiplines` must be a non-negative integer)."    

---

**Prompt 5: Add Unit Tests for Excel Configurations**
"Add unit tests to verify the save/load functionality for Excel configurations. Test scenarios should include:  
- Saving and loading valid configurations.
- Handling invalid configurations (e.g., negative `skiplines`).
- Ensuring the configurations are consistent with the UI.
Follow the same testing patterns as used for CSV configurations but adapt them for Excel."

---

#### **Files to Modify**
1. **Backend**: `backend/common/src/main/java/com/sourcekraft/documentburster/common/settings/model/ReportSettings.java`
2. **Frontend**: `frontend/reporting/src/app/areas/_configuration/templates/tab-reporting-datasource-datatables.ts`

---

#### **Implementation Status**
- [ ] Prompt 1: Add ExcelOptions Class  
- [ ] Prompt 2: Update DataSource Class  
- [ ] Prompt 3: Add UI Bindings  
- [ ] Prompt 4: Handle Excel Configurations in Backend  
- [ ] Prompt 5: Add Unit Tests  

* Feature 3: HTML and PDF Output Types
** Requirement Description
*** Summary
Implement HTML output type and PDF generation using HTML templates.

*** User Stories
- As a user, I want to generate reports in HTML format so that I can view them in web browsers.
- As a user, I want to generate PDFs from HTML templates so that I can create professional-looking documents.

*** Acceptance Criteria
- HTML output generation with proper styling.
- PDF generation from HTML templates.
- Support for custom HTML templates.
- Consistent output across different browsers and PDF viewers.

** Implementation Notes
- Previous attempts at PDF generation using docx4j and YARG have encountered issues
- A new approach using FlywingSauce for HTML-to-PDF conversion is recommended
- This approach should be more reliable and maintainable

---

#### **Implementation Prompt**

**Prompt: Add FlywingSauce HTML-to-PDF Conversion**  
"Add a new method `generatePDFFromHtmlTemplateUsingFlywingSauce` to `AbstractReporter.java` that:  
1. Takes HTML template path and output PDF path as parameters  
2. Uses FlywingSauce for HTML-to-PDF conversion  
3. Handles template variables and processing  
4. Includes proper error handling  
5. Maintains consistent file handling with existing methods  

The method signature should be:  
```java
public void generatePDFFromHtmlTemplateUsingFlywingSauce(String documentPath, String templatePath, 
    Map<String, Object> variablesData) throws Exception
```"

---

#### **Unit Test Requirements**

**Test Case: HTML-to-PDF Conversion with FlywingSauce**  
"Add a new unit test to `CsvReporterTest.java` that:  
1. Verifies successful PDF generation from HTML template  
2. Tests handling of template variables  
3. Validates PDF file structure and content  
4. Includes error case testing  
5. Maintains consistent testing patterns with existing tests  

The test should:  
- Use a sample HTML template  
- Verify proper variable substitution  
- Check PDF file creation and validity  
- Include assertions for error conditions"

---

** Implementation Prompts
*** Backend Changes
- Implement HTML template rendering using a library like Thymeleaf or Freemarker.
- Add PDF generation using FlywingSauce.
- Ensure support for custom HTML templates.

** Files to Modify
*** Backend
- `backend/reporting/src/main/java/com/sourcekraft/documentburster/reporting/ReportGenerator.java`
- `backend/reporting/src/main/java/com/sourcekraft/documentburster/engine/AbstractReporter.java`
- `backend/reporting/src/test/java/com/sourcekraft/documentburster/unit/documentation/userguide/reporting/CsvReporterTest.java`
- `backend/reporting/src/main/resources/templates/` (new folder for templates)

** Code Snippets
*** HTML Template Example
```html
<h1>Report Title</h1>
<p>Report content goes here.</p>
```

*** FlywingSauce PDF Generation Example
```java
public void generatePDFFromHtmlTemplateUsingFlywingSauce(String documentPath, String templatePath,
    Map<String, Object> variablesData) throws Exception {
    // Implementation using FlywingSauce
}
```

** Additional Notes
- Ensure the HTML templates are customizable.
- Add unit tests for the new functionality.
- Verify PDF generation performance with different template sizes.

** Implementation Status
- [ ] Add FlywingSauce HTML-to-PDF conversion method  
- [ ] Implement unit tests for HTML-to-PDF conversion  
- [ ] Update documentation  
- [ ] Verify integration with existing systems  
- [ ] Perform performance testing

* Feature 4: Database Connection Infrastructure
** Requirement Description
*** Summary
Implement database connection support by extending the existing external connections infrastructure to handle database connections alongside email connections.

*** User Stories
- As a user, I want to manage database connections through the same interface as email connections.
- As a user, I want to create, read, update and delete database connections.
- As a user, I want to test database connections before saving them.

*** Acceptance Criteria
- Database connection CRUD operations supported through existing UI
- Secure credential handling
- Connection testing functionality
- Support for common database types (MySQL, PostgreSQL, MSSQL)

** Implementation Prompts
*** Frontend Changes
1. Extend the Connection Type Enum
   - Add a new `ConnectionType` enum with values for both email and database connections
   - Place in shared location accessible to components and templates

2. Create Database Connection Interface
   - Define `DatabaseConnectionSettings` interface with database-specific fields
   - Look at `EmailProviderSettings` in `button-well-known.component.ts` as example

3. Modify the Connection Info Model
   - Extend `modalConnectionInfo` to support both email and database connections
   - Add new `database` field using `DatabaseConnectionSettings` interface

4. Update the Connection List UI
   - Modify `tab-ext-connection.ts` to:
     - Display connection type
     - Show appropriate icons
     - Handle both types in actions dropdown

5. Extend the CRUD Modal
   - Update `modal-ext-connection.ts` to:
     - Show type-specific form fields
     - Handle validation for both types
     - Maintain existing email functionality

6. Add Database Connection Validation
   - Implement validation for database settings
   - Look at email connection validation as example

7. Update Connection Management Methods
   - Modify `showCrudModal`, `onModalOK` etc. to handle both types
   - Maintain existing email functionality

** Files to Modify
*** Frontend
- `frontend/reporting/src/app/areas/_ext-connections/ext-connections.component.ts`
- `frontend/reporting/src/app/areas/_ext-connections/templates/tab-ext-connection.ts`
- `frontend/reporting/src/app/areas/_ext-connections/templates/modal-ext-connection.ts`

** Code Snippets
*** Database Connection Example
```typescript
enum ConnectionType {
  EMAIL = 'email',
  DATABASE = 'database'
}

interface DatabaseConnectionSettings {
  dbType: 'mysql'|'postgresql'|'mssql';
  host: string;
  port: number;
  database: string;
  username: string;
  password: string;
  ssl: boolean;
}
```

** Additional Notes
- Leverage existing email connection infrastructure
- Maintain consistent UI patterns
- Ensure secure credential handling
- Add comprehensive unit tests

** Implementation Status
- [ ] Frontend changes
- [ ] Backend integration
- [ ] Testing and validation

* Review and Validation
- Share the DDD with the team for review.
- Ensure the implementation meets the acceptance criteria.
- Update the DDD with implementation status and notes during development.

* Post-Implementation
- Move the DDD to the `implemented` folder.
- Add cross-references to the DDD in the requirements document.

* Improve a Bit the Codebase & Reduce Technical Debt
** Purpose
This section outlines non-functional improvements to the codebase that will be addressed during this development cycle. These changes are not tied to specific functional requirements but aim to improve the overall quality, maintainability, and performance of the codebase.

** Guidelines
- Identify areas of the codebase that could benefit from refactoring, optimization, or cleanup.
- Focus on small, incremental improvements that can be completed within the current development cycle.
- Ensure that changes do not introduce new bugs or regressions.
- Document the rationale for each improvement and how it reduces technical debt.

** Planned Improvements for This Cycle
*** Refactor License Screen Code
- Goal: Improve readability and maintainability of the license screen code.
- Changes:
  - Extract repeated logic into reusable utility methods.
  - Improve error handling and logging.
  - Add unit tests for edge cases.

*** Optimize Excel Reader Performance
- Goal: Enhance performance and memory efficiency of the Excel file reader.
- Changes:
  - Use streaming APIs for large Excel files to reduce memory usage.
  - Add caching for frequently accessed sheets or ranges.
  - Optimize data type conversion logic.

*** Clean Up HTML/PDF Template Rendering
- Goal: Simplify and standardize the template rendering process.
- Changes:
  - Consolidate duplicate template rendering logic.
  - Add support for template inheritance to reduce redundancy.
  - Improve error messages for invalid templates.

*** Secure Database Connection Handling
- Goal: Strengthen security around database connections.
- Changes:
  - Implement connection pooling for better resource management.
  - Add encryption for database credentials in configuration files.
  - Improve logging for connection-related errors.

** Implementation Status
- [ ] License Screen Refactoring
- [ ] Excel Reader Optimization
- [ ] HTML/PDF Template Cleanup
- [ ] Database Connection Security

** Post-Implementation Review
- Verify that the improvements do not introduce new issues.
- Update documentation to reflect any changes in best practices.
- Share lessons learned with the team to inform future improvements.
