<chapter id="chapter.scripting">
	<title>Using Scripts to Achieve More</title>
	<para>
		Scripts can help in squeezing more
		tailored functionality from
		<emphasis>
			<trademark>DocumentBurster</trademark>
			.
		</emphasis>
		For
		example, there is no GUI command to archive
		the
		output burst reports
		in
		a single compressed
		file, while with few lines of
		scripting it is easy
		to zip all the output files together.
	</para>
	<para>
		<emphasis>
			<trademark>DocumentBurster</trademark>
		</emphasis>
		supports scripts written in Groovy, a scripting
		language for
		the Java
		platform.
		<emphasis>
			<trademark>DocumentBurster</trademark>
		</emphasis>
		Groovy scripts
		can make
		use of any existing Java code and library.
	</para>
	<para>
		This chapter shows how to use the scripting
		capabilities
		of the software
		and how to customize
		<emphasis>
			<trademark>DocumentBurster</trademark>
		</emphasis>
		using some
		existing sample scripts which are provided with the package.
	</para>
	<section id="scenarios">
		<title>Scripting Scenarios</title>
		<para>
			<emphasis>
				<trademark>DocumentBurster</trademark>
			</emphasis>
			has support for injecting tailored behavior during
			the normal bursting
			lifecycle. There are a set of predefined exit points in
			which, using
			scripting, it is possible to implement custom logic. For
			example
			there
			is
			an
			<emphasis>endBursting</emphasis>
			lifecycle phase in which, with few lines
			of code, it is possible to
			zip
			together all the burst files, which otherwise would have come
			separated in the output folder.
		</para>
		<para>
			Following should give some ideas of the kind of things which are
			possible using
			<emphasis>
				<trademark>DocumentBurster</trademark>
			</emphasis>
			scripting capabilities:
		</para>
		<section>
			<title>File Related Capabilities</title>
			<para>
				<itemizedlist>
					<listitem>
						<emphasis>Copy</emphasis>
						- Copy a file or a set of files to a new file or directory.
					</listitem>
					<listitem>
						<emphasis>Delete</emphasis>
						- Deletes a single file, all files and sub-directories in a
						specified directory, or a set of files specified with an wildcard
						(*) like file pattern.
					</listitem>
					<listitem>
						<emphasis>Mkdir</emphasis>
						- Creates a directory. Non-existent parent directories are
						created,
						when necessary.
					</listitem>
					<listitem>
						<emphasis>Move</emphasis>
						- Moves a file to a new file or directory, or a set(s) of file(s)
						to a new directory.
					</listitem>
					<listitem>
						<emphasis>Archive</emphasis>
						- Zip, GZip, BZip2 or Tar the burst reports.
					</listitem>
					<listitem>
						<emphasis>Other file related capabilities</emphasis>
						- Change the permissions and/or attributes of a file or all files
						inside the specified directories,
						generate or verify a checksum for
						a file or set of files and also touch the files.
					</listitem>
				</itemizedlist>
			</para>
			<para>
				<emphasis role="bold">Sample</emphasis>
			</para>
			<para>
				For an example on how to zip or delete files, please see
				the
				existing
				<link linkend='zip.groovy'>scripts/burst/samples/zip.groovy</link>
				sample script.
			</para>
		</section>
		<section>
			<title>Execute External Programs</title>
			<para>
				While integrating
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				with existing
				software, following capability will be of interest.
				It
				is
				possible to
				call any external executable in some pre-defined
				points
				during
				the report bursting and report
				distribution flow.
			</para>
			<para>
				<emphasis>Exec</emphasis>
				- Execute a system command. When the OS attribute is specified, the
				command is only executed on one of the specified operating systems.
			</para>
			<para>
				<emphasis role="bold">Sample</emphasis>
			</para>
			<para>
				The external program to be demonstrated is
				<ulink url="http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/">Pdftk</ulink>
			</para>
			<para>
				<citetitle>pdftk</citetitle>
				or the
				<citetitle>pdf toolkit</citetitle>
				is a cross-platform tool for
				manipulating
				PDF documents.
			</para>
			<para>
				It is easy to execute
				<citetitle>pdftk</citetitle>
				from within
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				in order to achieve
				a wide range of additional powerful
				capabilities.
			</para>
			<para>
				<citetitle>pdftk</citetitle>
				is capable of splitting, merging,
				encrypting,
				decrypting,
				uncompressing, recompressing, and repairing
				PDFs.
				It can also be used
				to manipulate watermarks, metadata, and to
				fill
				PDF Forms
				with FDF
				Data
				(Forms Data Format) or XFDF Data (XML
				Form Data Format).
			</para>
			<para>
				<emphasis role="bold">
					Install Pdftk
				</emphasis>
			</para>
			<para>
				<itemizedlist>
					<listitem>
						Please download
						<citetitle>pdftk</citetitle>
						from
						this location -
						<ulink url="http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/#download" />
					</listitem>
					<listitem>
						Make sure to download the binaries which are
						specific to
						the target operating system.
					</listitem>
					<listitem>
						Copy the
						<filename>pdftk.exe</filename>
						and
						<filename>libiconv2.dll</filename>
						in the folder
						where
						<emphasis>
							<trademark>DocumentBurster</trademark>
						</emphasis>
						was installed, next
						to the
						<filename>DocumentBurster.exe</filename>
						file.
					</listitem>
				</itemizedlist>
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/documentburster-pdftk.png"
							format="PNG" />
					</imageobject>
				</mediaobject>
			</para>
			<para>
				Under
				<citetitle>Microsoft Windows,</citetitle>
				<filename>pdftk.exe</filename>
				and
				<filename>libiconv2.dll</filename>
				should be placed next to the
				<filename>DocumentBurster.exe</filename>
				file.
			</para>
			<para>
				For an example on how to execute
				<citetitle>pdftk</citetitle>
				during the
				report bursting lifecycle, please see the existing
				<link linkend='exec_pdftk_background.groovy'>scripts/burst/samples/exec_pdftk_background.groovy
				</link>
				sample script.
			</para>
		</section>
		<section>
			<title>Publish Reports to Microsoft SharePoint Portal</title>
			<para>
				Using scripting, it is possible to publish reports
				directly
				to
				enterprise portals. Think to the use case where there are few
				hundreds or thousands of customers and dealers and, with a single
				click, the relevant individual reports can be made available
				to each
				one of them on the
				portal.
			</para>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				is distributing the reports to portals using
				the WebDAV
				protocol.
				Following products, they all support WebDAV, so
				that
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				is capable to distribute reports to the
				following:
			</para>
			<itemizedlist>
				<listitem>
					<citetitle>Microsoft SharePoint</citetitle>
				</listitem>
				<listitem>
					<citetitle>IBM WebSphere Portal</citetitle>
				</listitem>
				<listitem>
					<citetitle>Oracle Portal</citetitle>
				</listitem>
				<listitem>
					<citetitle>SAP NetWeaver</citetitle>
				</listitem>
				<listitem>
					<citetitle>Tibco PortalBuilder</citetitle>
				</listitem>
				<listitem>
					<citetitle>Samsung ACUBE Portal</citetitle>
				</listitem>
				<listitem>
					<citetitle>Liferay Portal, Hippo portal, JBoss Enterprise Portal,
						eXo and Apache Portal
					</citetitle>
				</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>Distribute by SMS and Fax</title>
			<itemizedlist>
				<listitem>
					<emphasis>SMS messages</emphasis>
					can be delivered, via email, through an online SMS gateway service.
					In such a scenario
					<emphasis>
						<trademark>DocumentBurster</trademark>
					</emphasis>
					is configured to
					send an email to the SMS gateway in which the text
					of the message
					and the destination number are specified. The SMS
					gateway will
					transform the email message and
					will deliver it
					further,
					using SMS,
					to the specified number. Using scripting,
					<emphasis>
						<trademark>DocumentBurster</trademark>
					</emphasis>
					can send configured SMS
					messages
					to any gateway
					service. For a list of
					available online SMS gateways
					just
					Google for
					<emphasis>'list of SMS gateways'</emphasis>
					. The SMS which is best fitting the needs can be selected and
					<emphasis>
						<trademark>DocumentBurster</trademark>
					</emphasis>
					will distribute
					SMS messages using it.
				</listitem>
				<listitem>
					<emphasis>Fax the reports</emphasis>
					<para>
						There are various ways of sending documents by fax
						using the
						computer.
					</para>
					<para>
						The simplest way is to use an existing fax online gateway to which
						the reports are sent as an email attachment.
						The gateway
						will
						further forward the reports by fax to the specified number.
						For a
						list of available online fax
						gateways just Google
						for
						<emphasis>'list of fax gateways'</emphasis>
						.
					</para>
					<para>
						As an alternative, it is possible to send faxes by
						configuring a
						dial-up modem to
						work with specialized
						fax
						software. Microsoft Fax
						can be used as a fax software service on Windows.
						For instructions
						on enabling
						Microsoft Fax, please consult the
						appropriate
						Microsoft
						knowledgebase article from the Microsoft
						website. HylaFAX or
						AsterFax™ - Asterisk Fax
						are valid fax software solutions which can
						be used on UNIX/Linux systems.
						Using scripting, it is possible to
						integrate
						<emphasis>
							<trademark>DocumentBurster</trademark>
						</emphasis>
						with any of
						the previously
						enumerated fax
						products and this
						requires
						some customization
						effort to integrate with the specific
						fax
						vendor
						APIs.
					</para>
				</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>Print Reports</title>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can print the output burst reports directly to
				physical printers.
			</para>
			<para>
				<emphasis role="bold">Sample</emphasis>
			</para>
			<para>
				For an example on how to print the output burst reports, please see
				the
				existing
				<link linkend='print.groovy'>scripts/burst/samples/print.groovy</link>
				sample script.
			</para>
		</section>
		<section>
			<title>Mail, FTP, FTPs and SFTP</title>
			<para>
				With a little bit of scripting it is possible to send reports
				by email, upload to FTP or FTPs
				and copy files to SFTP using SSH.
			</para>
			<para>
				While sending the burst reports by email is available through
				the GUI
				interface, sometimes more flexibility can be achieved with the
				help
				of
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				scripting. One example is that using scripting
				it is possible, if
				required, to send emails
				without attachments to any
				SMS
				gateway -
				by
				default, through the GUI
				interface, all the emails
				which
				are sent
				will
				have a corresponding
				burst report attached.
			</para>
			<para>
				<emphasis role="bold">Mail Sample</emphasis>
			</para>
			<para>
				For an example on how to send an ad-hoc email during the report
				bursting flow, please see
				<link linkend='ant_mail.groovy'>scripts/burst/samples/ant_mail.groovy</link>
				sample script.
			</para>
			<para>
				<emphasis role="bold">FTP/FTPs/SFTP Samples</emphasis>
			</para>

			<para>
				For examples on how to FTP, FTPs or SFTP reports using scripting,
				please see
				<xref linkend="chapter.curl" />
				.
			</para>
		</section>
		<section>
			<title>Upload Reports to a Shared Location</title>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can upload the generated reports to
				a network
				shared location.
			</para>

			<para>
				<emphasis role="bold">Sample</emphasis>
			</para>
			<para>
				For an example on how to upload the burst reports to
				a shared
				location, please
				see
				the existing
				<link linkend='copy_shared_folder.groovy'>scripts/burst/samples/copy_shared_folder.groovy
				</link>
				sample script.
			</para>
		</section>
		<section>
			<title>Encrypt or Stamp the Output Reports</title>
			<para>
				Using scripting,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can encrypt the output
				reports. This feature is commonly used to
				prevent unauthorized
				viewing,
				printing, editing, copying text from the
				document and doing
				annotations. It is also possible to ask the user
				for a password
				in
				order to view the report.
			</para>
			<para>
				<emphasis role="bold">Sample</emphasis>
			</para>
			<para>
				For an example on how to encrypt and password protect the burst
				reports, please
				see
				the existing
				<link linkend='encrypt.groovy'>scripts/burst/samples/encrypt.groovy</link>
				sample script.
			</para>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can stamp the distributed
				reports in much the
				same way that it is
				applied a rubber
				stamp to a paper document. If
				required, it is
				possible
				to apply
				bates stamping, page numbering,
				text stamping,
				logo
				insertion
				or add headers/footers and watermarks
				to the reports.
			</para>
			<para>
				<emphasis role="bold">Sample</emphasis>
			</para>
			<para>
				For an example on how to stamp the burst reports, please
				see the
				existing
				<link linkend='overlay.groovy'>scripts/burst/samples/overlay.groovy</link>
				sample script.
			</para>

		</section>
	</section>
	<section id="lifecycle">
		<title>Introduction to the Burst Lifecycle</title>
		<para>
			During the report processing
			<emphasis>
				<trademark>DocumentBurster</trademark>
			</emphasis>
			defines a set of exit
			points
			which can be used to customize the default
			software behavior.
			The
			<emphasis>
				<trademark>DocumentBurster</trademark>
			</emphasis>
			bursting lifecycle defines the
			following sequentially ordered phases
			(exit points):
		</para>
		<itemizedlist>
			<listitem>
				<emphasis>startBursting</emphasis>
				- event triggered when the burst is starting
			</listitem>
			<listitem>
				<emphasis>startParsePage</emphasis>
				- event triggered before a page text is parsed
			</listitem>
			<listitem>
				<emphasis>endParsePage</emphasis>
				- event triggered after a page text was parsed
			</listitem>
			<listitem>
				<emphasis>startExtractDocument</emphasis>
				- event triggered before a burst report is extracted
			</listitem>
			<listitem>
				<emphasis>endExtractDocument</emphasis>
				- event triggered after a burst report was just extracted
			</listitem>
			<listitem>
				<emphasis>startDistributeDocument</emphasis>
				- event triggered before a burst report is
				distributed
			</listitem>
			<listitem>
				<emphasis>endDistributeDocument</emphasis>
				- event triggered after a burst report was
				just distributed
			</listitem>
			<listitem>
				<emphasis>quarantineDocument</emphasis>
				- event triggered whenever a report failed to be distributed
				and it
				is being quarantined
			</listitem>
			<listitem>
				<emphasis>endBursting</emphasis>
				- event triggered when the burst is finishing
			</listitem>
		</itemizedlist>
		<section>
			<title>
				Bursting Context
			</title>
			<para>
				<emphasis>Bursting context</emphasis>
				is an object which is implicitly available for scripting
				throughout
				all the
				bursting
				lifecycle
				phases. The
				<emphasis>bursting context</emphasis>
				is available
				during scripting as a
				variable named
				<emphasis>ctx.</emphasis>
			</para>
			<para>
				Following is the information which is available
				through the
				<emphasis>bursting context.</emphasis>
			</para>
			<programlisting language="Java" htmllanguage="java"><![CDATA[
public List<String> burstTokens;

public String inputDocumentFilePath;

public String configurationFilePath;

public Settings settings;
public Variables variables;
public Scripts scripts;

public int currentPageIndex;
public String currentPageText;
public String previousPageText;
   
public String token;
				
public String outputFolder;
public String backupFolder;
public String quarantineFolder;
			
public String extractFilePath;

public int numberOfPages;
				
public int numberOfExtractedFiles;
public int numberOfDistributedFiles;
public int numberOfSkippedFiles;
public int numberOfQuarantinedFiles;

public boolean skipCurrentFileDistribution = false;

public List<String> attachments = new ArrayList<String>();
public String archiveFilePath;

public Object additionalInformation;

]]></programlisting>
			<para>
				<itemizedlist>
					<listitem>
						<emphasis>
							ctx.inputDocumentFilePath
						</emphasis>
						- file path to the report which is being processed.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for all of the bursting lifecycle phases.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.configurationFilePath
						</emphasis>
						- file path to the configuration template which is being used.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for the
							<emphasis>startExtractDocument, endExtractDocument,
								startDistributeDocument, endDistributeDocument,
								quarantineDocument
							</emphasis>
							and
							<emphasis>endBursting</emphasis>
							lifecycle phases/events.
						</para>
					</listitem>

					<listitem>
						<emphasis>
							ctx.settings
						</emphasis>
						- contains the settings used to process
						the current report.
						Following settings fields might present interest while
						scripting
						<emphasis>burstFileName,
							outputFolder, backupFolder,
							quarantineFolder, sendFiles, deleteFiles,
							quarantineFiles
						</emphasis>
						-
						with the last three fields being of type boolean.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available throughout
							all the bursting lifecycle
							starting with
							the
							first
							<emphasis>startBursting</emphasis>
							phase and up to the last
							<emphasis>endBursting.</emphasis>
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.variables
						</emphasis>
						- Map&lt;String, Object&gt; which contains
						both the built-in
						and the
						user defined variables.
						<para>
							The built-in variables are
							accessible using the
							<emphasis>ctx.variables.get(variableName)</emphasis>
							syntax.
						</para>
						<para>
							For instance, the syntax
						</para>
						<para>
							<emphasis>ctx.variables.get("input_document_name")</emphasis>
						</para>
						<para>
							will return the file name of the input report.
						</para>
						<para>
							The values for the following built-in
							variables can be
							returned similarly:
						</para>
						<para>
							<emphasis>input_document_name, burst_token, burst_index,
								output_folder, extracted_file_path,
								now,
								now_default_date,
								now_short_date,
								now_medium_date, now_long_date,
								now_full_date,
								now_default_time, now_short_time, now_medium_time,
								now_long_time, now_full_time
								and now_quarter.
							</emphasis>
						</para>
						<para>
							User defined variables are populated and are available per each
							separate burst token. The syntax to access the user variables is
							<emphasis>ctx.variables.getUserVariables(ctx.token).get(variableName).
							</emphasis>
						</para>
						<para>
							For example the code,
						</para>
						<para>
							<emphasis>ctx.variables.getUserVariables("clyde.grew@northridgehealth.org").get("var0")
							</emphasis>
						</para>
						<para>
							will return the first user variable for the token
							<emphasis>clyde.grew@northridgehealth.org.</emphasis>
						</para>
						<para>
							While the code,
						</para>
						<para>
							<emphasis>ctx.variables.getUserVariables(ctx.token).get("var0")
							</emphasis>
						</para>
						<para>
							will return the first user variable for the current burst
							token.
						</para>
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Beside the
							<emphasis>burst_token, burst_index, output_folder and
								extracted_file_path
							</emphasis>
							all the
							other built-in variables are available throughout
							all the
							bursting lifecycle
							starting with the first
							<emphasis>startBursting</emphasis>
							phase up to the last
							<emphasis>endBursting.</emphasis>
							<para>
								<emphasis>burst_token, burst_index and output_folder
								</emphasis>
								are populated
								during the time the burst reports are generated and
								are available in
								<emphasis>startExtractDocument, endExtractDocument,
									startDistributeDocument, endDistributeDocument and
									quarantineDocument.
								</emphasis>
							</para>
							<para>
								<emphasis>extracted_file_path</emphasis>
								is populated
								after each report is extracted and is
								available in
								<emphasis>endExtractDocument,
									startDistributeDocument,
									endDistributeDocument and
									quarantineDocument.
								</emphasis>
							</para>
							<para>
								<emphasis>User variables</emphasis>
								are progressively populated during the time the report pages are
								being parsed and them become
								fully available for the
								<emphasis>startExtractDocument, endExtractDocument,
									startDistributeDocument, endDistributeDocument,
									quarantineDocument and endBursting
								</emphasis>
								phases.
							</para>
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.scripts
						</emphasis>
						- keeps track of the Groovy scripts to be executed for each of
						the
						bursting
						phases.
						<emphasis>
							<trademark>DocumentBurster</trademark>
						</emphasis>
						is coming with nine
						empty
						script
						templates
						found under the
						<filename>scripts/burst</filename>
						folder.
						The existing templates are suitable to be used for most of
						the scripting
						situations. For
						example, in order to put some custom
						behavior
						when the
						bursting is finished,
						than the simplest way to do
						this is to
						write the tailored logic by editing the existing
						empty
						template
						<emphasis>endBursting.groovy</emphasis>
						script.
						<para>
							However, there might be cases in which it will be a need to
							associate totally new Groovy scripts to be executed when some
							bursting
							events are
							happening.
						</para>
						<para>
							The syntax to specify a custom script is
							<emphasis>ctx.scripts.eventName = script_name.groovy</emphasis>
						</para>
						<para>
							For example
						</para>
						<para>
							<emphasis>ctx.scripts.endExtractDocument =
								my_custom_script.groovy
							</emphasis>
						</para>
						<para>
							will
							assign the
							<filename>my_custom_script.groovy</filename>
							to be executed after each report is extracted.
						</para>
						<para>
							Following are all the phases/events for which custom
							scripts can
							be
							associated:
							<itemizedlist>
								<listitem>
									<emphasis>ctx.scripts.startBursting</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.endBursting</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.startParsePage</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.endParsePage</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.startExtractDocument</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.endExtractDocument</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.startDistributeDocument</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.endDistributeDocument</emphasis>
								</listitem>
								<listitem>
									<emphasis>ctx.scripts.quarantineDistributeDocument</emphasis>
								</listitem>
							</itemizedlist>
						</para>
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available throughout all the bursting lifecycle phases/events.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.currentPageIndex, ctx.currentPageText,
							ctx.previousPageText
						</emphasis>
						- the index of the current page which is being parsed and the text
						of the current
						and of the previous pages.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for the
							<emphasis>startParsePage</emphasis>
							and
							<emphasis>endParsePage</emphasis>
							phases/events.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.token
						</emphasis>
						- the token used to extract and process the current burst report
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for the
							<emphasis>startExtractDocument,</emphasis>
							<emphasis>endExtractDocument,</emphasis>
							<emphasis>startDistributeDocument,</emphasis>
							<emphasis>endDistributeDocument</emphasis>
							and
							<emphasis>quarantineDocument</emphasis>
							phases/events.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.outputFolder, ctx.backupFolder, ctx.quarantineFolder
						</emphasis>
						- the output folder, backup folder and quarantine folder for the
						burst reports.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for the
							<emphasis>startExtractDocument,</emphasis>
							<emphasis>endExtractDocument,</emphasis>
							<emphasis>startDistributeDocument,</emphasis>
							<emphasis>endDistributeDocument,</emphasis>
							<emphasis>quarantineDocument</emphasis>
							and
							<emphasis>endBursting</emphasis>
							phases/events.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.extractFilePath
						</emphasis>
						- the path for current file which is being extracted
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for the
							<emphasis>startExtractDocument,</emphasis>
							<emphasis>endExtractDocument,</emphasis>
							<emphasis>startDistributeDocument,</emphasis>
							<emphasis>endDistributeDocument</emphasis>
							and
							<emphasis>quarantineDocument</emphasis>
							phases/events.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.numberOfPages
						</emphasis>
						- number of pages of the report
						which is being processed.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for all the bursting lifecycle phases.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.numberOfExtractedFiles
						</emphasis>
						- number of extracted documents/reports.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available during the
							<emphasis>endBursting</emphasis>
							report bursting phase.
						</para>
					</listitem>

					<listitem>
						<emphasis>
							ctx.numberOfDistributedFiles
						</emphasis>
						- number of distributed documents/reports.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available during the
							<emphasis>endBursting</emphasis>
							report bursting phase.
						</para>
					</listitem>

					<listitem>
						<emphasis>
							ctx.numberOfSkippedFiles
						</emphasis>
						- number of skipped from distribution documents/reports.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available during the
							<emphasis>endBursting</emphasis>
							report bursting phase.
						</para>
					</listitem>

					<listitem>
						<emphasis>
							ctx.numberOfQuarantinedFiles
						</emphasis>
						- number of quarantined documents/reports.
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available during the
							<emphasis>endBursting</emphasis>
							report bursting phase.
						</para>
					</listitem>

					<listitem>
						<emphasis>
							ctx.skipCurrentFileDistribution
						</emphasis>
						- should the current file be skipped from distribution? Default
						value is
						<emphasis>false.</emphasis>
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available
							during
							<emphasis>endExtractDocument</emphasis>
							report bursting phase.
						</para>
						<para>
							For an
							example
							on how to use
							<emphasis>skipCurrentFileDistribution, </emphasis>
							please see
							<link linkend='skip_current_file_distribution_if.groovy'>scripts/burst/samples/skip_current_file_distribution_if.groovy
							</link>
							sample script.
						</para>
					</listitem>

					<listitem>
						<emphasis>
							ctx.attachments
						</emphasis>
						- list with the path(s) to the attachment(s) which are about to be
						distributed
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for scripting during
							<emphasis>startDistributeDocument</emphasis>
							report bursting phase.
						</para>
					</listitem>

					<listitem>
						<emphasis>
							ctx.archiveFilePath
						</emphasis>
						- path to the archive file which is generated and is about to be
						distributed. Available if the configuration to archive the
						attachments is
						enabled
						<para>
							<emphasis>
								Lifespan
							</emphasis>
							-
							Available for scripting during
							<emphasis>startDistributeDocument, endDistributeDocument and
								quarantineDocument
							</emphasis>
							report bursting phases.
						</para>
					</listitem>
					<listitem>
						<emphasis>
							ctx.additionalInformation
						</emphasis>
						- additional information which might be required to store and use
						while
						scripting
						<emphasis>
							<trademark>DocumentBurster</trademark>
							.
						</emphasis>
					</listitem>

				</itemizedlist>
			</para>
		</section>
	</section>
	<section id="samples">
		<title>Sample Scripts</title>
		<para>
			<emphasis>
				<trademark>DocumentBurster</trademark>
			</emphasis>
			is coming with a number of sample scripts which can
			be used as a
			starting point for implementing other different
			custom requirements.
			All
			the sample scripts
			are available in
			the
			<filename>scripts/burst/samples</filename>
			folder.
		</para>
		<section id="zip.groovy">
			<title>zip.groovy</title>
			<para>
				By default
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				is not archiving the output burst
				reports. By running few lines of
				script during the
				<emphasis>endBursting</emphasis>
				phase, it is possible
				to capture and zip together all the burst files
				in a single file.
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endBursting.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/zip.groovy</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output
				files will be archived
				together in a single zip file.
			</para>
			<para>
				Similarly, if required, the output files can be archived with
				different
				formats and algorithms such as gzip, bzip or tar. For a
				complete list and
				documentation
				of the available options please
				consult
				the help page of
				<ulink url="http://ant.apache.org/manual/tasksoverview.html#archive">Ant Archive Tasks</ulink>
			</para>
			<para>
				The following code should be self explanatory. For customizing
				the
				name of the zip output file please change the value of the
				variable
				<emphasis>zipFilePath</emphasis>
				as per the needs.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/zip.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>
		<section id="encrypt.groovy">
			<title>encrypt.groovy</title>
			<para>
				By default
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				is not encrypting or password protecting
				the output burst
				reports. By
				placing few lines of
				script during the
				<emphasis>endExtractDocument</emphasis>
				phase, it is possible to encrypt and password protect
				all the output
				files.
			</para>
			<para>
				<ulink
					url="http://en.wikipedia.org/wiki/Portable_Document_Format#Security_and_signatures" />
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/encrypt.groovy</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be encrypted to have both an
				owner and an user
				password.
			</para>
			<para>
				The default user and owner passwords
				have the same value
				which is the
				value of the
				<emphasis>$burst_token$</emphasis>
				variable. For example, when bursting
				the sample report
				<filename>samples/burst.pdf</filename>
				two output files will be
				generated
				<filename>doc1.pdf</filename>
				and
				<filename>doc2.pdf</filename>
				. The password for the
				first report is
				<emphasis>doc1</emphasis>
				and for
				the second one is
				<emphasis>doc2</emphasis>
				with both passwords being generated from the
				<emphasis>$burst_token$</emphasis>
				variable.
			</para>
			<para>
				Similarly, if required, the output files can be encrypted with the
				following additional possibilities:
				<itemizedlist>
					<listitem>
						Certification file
					</listitem>
					<listitem>
						Set the assemble permission
					</listitem>
					<listitem>
						Set the extraction permission
					</listitem>
					<listitem>
						Set the fill in form permission
					</listitem>
					<listitem>
						Set the modify permission
					</listitem>
					<listitem>
						Set the modify annots permission
					</listitem>
					<listitem>
						Set the print permission
					</listitem>
					<listitem>
						Set the print degraded permission
					</listitem>
					<listitem>
						The number of bits for the encryption key
					</listitem>
				</itemizedlist>
			</para>
			<para>
				For a
				complete list and
				documentation
				of the available encrypt options
				please
				consult
				the help page of the
				<ulink url="http://pdfbox.apache.org/commandline/">PDFBox Command Line Tools</ulink>
			</para>
			<para>
				The following code should be self explanatory.
				For customizing the
				passwords, following syntax
				should be used to access the value of a
				variable -
				<emphasis>ctx.variables.getUserVariables(ctx.token).get(variableName)
				</emphasis>
				.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/encrypt.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="overlay.groovy">
			<title>overlay.groovy</title>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can stamp the output burst reports.
				The script should be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
				The script is using the
				<filename>samples/Stamp.pdf</filename>
				to overlay
				the output burst reports. It is easy to customize the
				overlay
				with a different custom stamp.
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/overlay.groovy</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be stamped with the
				<filename>samples/Stamp.pdf</filename>
				file.
			</para>
			<para>
				The following code should be self explanatory. For customizing
				the
				overlay document please replace the existing
				<filename>samples/Stamp.pdf</filename>
				with a a different file.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/overlay.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="exec_pdftk_background.groovy">
			<title>exec_pdftk_background.groovy</title>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can apply a PDF watermark to the background of the output
				burst
				reports.
				The script should be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
				The script is using the
				<filename>samples/Stamp.pdf</filename>
				to be applied as a background to the output burst reports.
				It is easy
				to customize the
				background operation with a different
				custom stamp.
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/exec_pdftk_background.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be stamped with the
				<filename>samples/Stamp.pdf</filename>
				file.
			</para>
			<para>
				The following code should be self explanatory. For customizing
				the
				background stamp please replace the existing
				<filename>samples/Stamp.pdf</filename>
				with a different custom file.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/exec_pdftk_background.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="print.groovy">
			<title>print.groovy</title>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can send the output burst reports to the printer.
				The script should
				be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/print.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be sent to the printer.
			</para>
			<para>
				Using the
				<emphasis>-silentPrint</emphasis>
				switch it
				is possible to print the PDF reports without prompting
				for a
				printer.
			</para>
			<para>
				The following code should be self explanatory.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/print.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="copy_shared_folder.groovy">
			<title>copy_shared_folder.groovy</title>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can copy each individual output burst file to a shared folder
				(as
				long as the
				shared drive is mounted).
				The script should
				be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/copy_shared_folder.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be uploaded to the shared folder.
			</para>
			<para>
				By default the script is getting the shared location path
				from the
				content of
				<emphasis>$var0$</emphasis>
				user variable (e.g //VBOXSVR/shareit).
			</para>
			<para>
				The following code should be self explanatory.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/copy_shared_folder.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="ant_ftp.groovy">
			<title>ant_ftp.groovy</title>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can copy all the output burst
				files at once to a remote FTP server
				location.The script should
				be executed
				during the
				<emphasis>endBursting</emphasis>
				report bursting lifecycle phase.
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endBursting.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/ant_ftp.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be uploaded to the FTP server location.
			</para>
			<para>
				By default the script is fetching the values of the FTP connect
				session, such as
				user, password and host from the values of
				<emphasis>$var0$, $var1$ and $var2$</emphasis>
				user report variables. If the burst reports are configured as such,
				then there is
				nothing more
				to do, and the FTP upload will work
				without
				any modification
				to the script. Otherwise,
				the FTP script
				should be
				modified as per the
				needs.
			</para>
			<para>
				The following code should be self explanatory.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/ant_ftp.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="ant_scp_sftp.groovy">
			<title>ant_scp_sftp.groovy</title>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can copy each individual output burst file
				to a remote SCP/SFTP
				server location. The script should
				be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
			</para>
			<para>
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/ant_scp_sftp.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be uploaded to the SFTP/SCP server location.
			</para>
			<para>
				By default the script is fetching the values of the SCP/SFTP connect
				session, such as
				user, password, host and path from the values of
				<emphasis>$var0$, $var1$, $var2$ and $var3$</emphasis>
				user report variables. If the burst reports are configured as such,
				then there is
				nothing more
				to do, and the SFTP/SCP upload will work
				without any modification
				to the script. Otherwise,
				the SCP/SFTP script
				should be modified as per the
				needs.
			</para>
			<para>
				The following code should be self explanatory.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/ant_scp_sftp.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="ant_vfs.groovy">
			<title>ant_vfs.groovy</title>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can distribute the output
				burst reports by
				using
				<ulink url="http://commons.apache.org/vfs/index.html">
					Commons Virtual File System.
				</ulink>
			</para>
			<para>
				By scripting Commons VFS,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can upload the reports to any of the Commons VFS supported file
				systems
				such as
				FTP, Local Files, HTTP and HTTPS, SFTP, WebDAV and
				CIFS.
			</para>

			<para>For example, following use cases are all achievable:</para>
			<itemizedlist>
				<listitem>

					Using HTTP POST,
					upload the burst reports to a cloud
					storage provider
					such as
					<ulink url="http://www.box.net/">
						Box.net
					</ulink>
					or
					<ulink url="https://www.dropbox.com/">
						Dropbox.
					</ulink>
				</listitem>
				<listitem>
					Using HTTP POST or WebDAV,
					upload the burst reports to a
					corporate portal
					such as Microsoft SharePoint, IBM WebSphere Portal,
					Oracle Portal,
					SAP NetWeaver, Tibco PortalBuilder or Samsung ACUBE
					Portal.
				</listitem>
				<listitem>
					Using CIFS,
					upload the burst reports to a
					CIFS server
					such as
					a Samba server, or a Windows share.
				</listitem>
			</itemizedlist>
			<para>
				This script is showing how to copy the burst reports using the
				<emphasis>file://</emphasis>
				protocol and, with minimum effort, it can
				be adapted for any of the
				above listed protocols.
			</para>
			<para>
				The script should
				be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/ant_vfs.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be copied to the configured folder path.
			</para>
			<para>
				By default the script is fetching the value of the destination
				folder
				from the value of
				<emphasis>$var0$</emphasis>
				user report variable. If the burst reports are configured as such,
				then there is
				nothing more
				to do, and the script will work
				without any
				other additional modification. Otherwise,
				the VFS script
				should be
				modified as per the
				needs.
			</para>

			<para>
				The following code should be self explanatory.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/ant_vfs.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="add_and_format_page_numbers.groovy">
			<title>add_and_format_page_numbers.groovy</title>
			<para>
				As the name of the file suggests, this script can be used
				to add
				page numbers to the output burst reports. The script
				is numbering
				the
				pages of the output reports consecutively.
			</para>
			<para>
				Each page of the output burst reports is stamped
				with the correct
				page number and both of the following two situations
				are supported:
				<itemizedlist>
					<listitem>
						Add new page numbers when the initial input report does
						not have the pages numbered
					</listitem>
					<listitem>
						Replace and fix the existing page numbers when
						existing
						page numbering of the input reports becomes incorrect
						after the
						report is burst
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The script should
				be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/add_and_format_page_numbers.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				pages of the output files will be properly stamped with a label
				similar with
				<emphasis>Page i of n</emphasis>
				; where
				<emphasis>i</emphasis>
				is the index of the current page and
				<emphasis>n</emphasis>
				is the total number of pages.
			</para>
			<para>
				The text, the font and the location of the page numbering label
				can
				be
				customized by doing small changes to
				the existing script. For
				example the following line of script will place the location
				of the
				numbering label at the bottom-left corner of the page.
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy"><![CDATA[over.setTextMatrix(30, 30);]]></programlisting>
			</para>
			<para>
				The location of the label can be changed by altering the
				above
				coordinates. Please check the inline code comments for further
				details.
			</para>
			<para>
				The following code should be self explanatory.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/add_and_format_page_numbers.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="merge_with_external_files.groovy">
			<title>merge_with_external_files.groovy</title>
			<para>
				This script can be used to merge each of the output
				PDF burst
				files
				which is generated by
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				with other external reports. There isn't any restriction and
				the
				external reports can be generated
				by any of the existing
				proprietary
				reporting tools like Oracle
				Hyperion or Crystal
				Reports/SAP Business
				Objects.
			</para>
			<para>
				Once the reports are merged,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				flow will continue as normal.
			</para>
			<para>
				By default the script
				is merging the
				external report first and the
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				output burst report second.
				Please see the inline script comments for
				details about how to
				change the merging order.
			</para>
			<para>
				By default, for demonstration purposes, the script is merging as
				an
				external report the hard-coded
				<filename>samples/Invoices-Dec.pdf.</filename>
				With the help of user variables it is possible to
				define a
				configurable and dynamic external report to merge with.
			</para>
			<para>
				For example, the external report to merge with
				can be
				dynamically
				defined with the help of the
				<emphasis>$var0$</emphasis>
				user variable.
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy"><![CDATA[def externalFilePath = ctx.variables.getUserVariables(ctx.token).get("var0")]]></programlisting>
			</para>
			<para>
				The script should
				be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase.
				Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/merge_with_external_files.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be formed by merging the
				<filename>samples/Invoices-Dec.pdf</filename>
				with the original
				output burst files.
			</para>

			<para>
				The following code should be self explanatory.
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/merge_with_external_files.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>
		</section>

		<section id="ant_mail.groovy">
			<title>ant_mail.groovy</title>
			<para>
				This script can be used for sending various ad-hoc
				emails during the
				report bursting flow. Based on your needs,
				the script can be executed
				in any of the existing
				report bursting lifecycle phases
				(e.g.
				<emphasis>endBursting,</emphasis>
				<emphasis>endExtractDocument</emphasis>
				etc).
			</para>
			<para>
				For example, this sample script can be used almost
				out of the box for
				sending an email notification when
				the bursting is successfully
				finished.
				To achieve this, please copy and paste the content of
				this
				sample script into the existing
				<filename>scripts/burst/endBursting.groovy</filename>
				script.
			</para>
			<para>
				How to customize the script
				<itemizedlist>
					<listitem>
						Change the first uncommented line of the script
						<emphasis>(def to = "your.address@here.com")</emphasis>
						with the email address where
						you need the email to be sent
					</listitem>
					<listitem>
						Optionally, the subject and the message of the
						notification email can be also changed
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The following code should be self explanatory
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/ant_mail.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="skip_current_file_distribution_if.groovy">
			<title>skip_current_file_distribution_if.groovy</title>
			<para>
				This sample script can be used to achieve complex
				<emphasis>conditional</emphasis>
				report
				delivery scenarios.
			</para>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				has built-in support for
				implementing conditional report delivery and
				this is described in
				<ulink
					url="https://www.pdfburst.com/docs/html/userguide/appendix.howto.html#appendix.howto.conditional">How To Implement Conditional Report Distribution?</ulink>
			</para>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
					's
				</emphasis>
				built-in support for conditional report distribution
				requires using
				a
				<emphasis>&lt;skip&gt;true&lt;/skip&gt;</emphasis>
				instruction
				(or the shorter form
				<emphasis>&lt;s&gt;true&lt;/s&gt;)</emphasis>
				for the
				reports which should not be distributed.
				Based on the
				specific
				business
				requirements, the report writer engine is expected
				to
				properly fill the
				<emphasis>skip</emphasis>
				instructions and
				this will be done by using a report formula (which
				will
				decide
				if the report should be distributed or not).
			</para>
			<para>
				<emphasis>
					<trademark>DocumentBurster</trademark>
					's
				</emphasis>
				built-in
				capabilities
				<emphasis>(skip</emphasis>
				instruction) can be used to
				achieve many conditional distribution
				scenarios
				while this sample script,
				<filename>scripts/burst/samples/skip_current_file_distribution_if.groovy,
				</filename>
				should be used
				for achieving the remaining and more complex
				situations
				which
				cannot be implemented using the simple
				<emphasis>skip</emphasis>
				instruction approach.
			</para>
			<para>
				This sample script can be used to achieve conditional report
				distribution in situations similar with the following
				<itemizedlist>
					<listitem>The condition to skip the distribution cannot be achieved
						using a report formula (e.g. skip the delivery for files which are
						bigger than 20MB)
					</listitem>
					<listitem>The condition to skip the distribution is too complex and
						it might
						be more convenient to describe this in scripting than with
						a report
						formula
					</listitem>
					<listitem>
						For whatever reason the input report cannot be modified to
						accommodate the
						<emphasis>&lt;skip&gt;true&lt;/skip&gt;</emphasis>
						instructions
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The general code structure of the script is the following
				<programlisting language="Java" htmllanguage="groovy">
					<![CDATA[
//Pre-condition helper code
						
//The condition based on which the distribution will be skipped
if (skip-condition){
							
    //Skip the delivery of the current report
    ctx.skipCurrentFileDistribution = true
						
    //Other code which might be required
							
}
					]]>
				</programlisting>
			</para>
			<para>
				<itemizedlist>
					<listitem>
						<emphasis>ctx.skipCurrentFileDistribution = true</emphasis>
						is the line of code which
						is enabling
						<emphasis>
							<trademark>DocumentBurster</trademark>
						</emphasis>
						to skip the distribution
						for the current report
					</listitem>
					<listitem>
						<emphasis>skip-condition</emphasis>
						is the condition based on which the report will be skipped for
						distribution (will be different for each business scenario)
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The sample
				<filename>scripts/burst/samples/skip_current_file_distribution_if.groovy
				</filename>
				has the
				same code structure and is skipping the distribution
				for
				reports which are bigger than the configurable
				20MB file size
				threshold.
				<programlisting language="Java" htmllanguage="groovy">
					<![CDATA[
//configurable FILE_SIZE_THRESHOLD
final def FILE_SIZE_THRESHOLD = 20
			]]>
				</programlisting>
				The script must be executed during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase. Please copy and paste the
				content of
				this sample script into the existing
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				script.
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/skip_current_file_distribution_if.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>

		</section>

		<section id="batch_pdf_print.groovy">
			<title>batch_pdf_print.groovy</title>
			<para>
				<emphasis role="bold">Silent PDF batch printing</emphasis>
			</para>
			<para>
				Using this sample script
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can silently print the output burst reports.
			</para>
			<para>
				<citetitle>Foxit Reader</citetitle>
			</para>
			<para>
				This script is using
				<citetitle>Foxit Reader</citetitle>
				in order to print the reports.
				<citetitle>Foxit Reader</citetitle>
				should be installed on your machine in order for
				this script to work
				properly.
			</para>
			<para>
				<ulink url="http://www.foxitsoftware.com/" />
			</para>
			<para>
				<citetitle>Foxit Reader</citetitle>
				- Command Line Switches
				<itemizedlist>
					<listitem>
						Print a PDF file silently to the default printer :
						<command>"Foxit Reader.exe" /p &lt;PDF Path&gt;</command>
					</listitem>
					<listitem>
						Print a PDF file silently to an alternative printer:
						<command>"Foxit Reader.exe" /t &lt;PDF Path&gt; [Printer]
						</command>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The script should
				be executed
				during the
				<emphasis>endExtractDocument</emphasis>
				report bursting lifecycle phase. Edit the script
				<filename>scripts/burst/endExtractDocument.groovy</filename>
				with
				the content found in
				<filename>scripts/burst/samples/batch_pdf_print.groovy
				</filename>
				and then burst a new report.
				Now, every time a report is burst, the
				output files will be sent to the default printer.
			</para>
			<para>
				The following code should be self explanatory.
			</para>

			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/batch_pdf_print.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>
		</section>

		<section id="fetch_distribution_details_from_database.groovy">
			<title>fetch_distribution_details_from_database.groovy</title>
			<para>
				<emphasis role="bold">Fetch Bursting and Distribution Details from
					Database
				</emphasis>
			</para>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can fetch the bursting and distribution details from an
				external
				database. Once fetched, the details are populated into the
				<emphasis>var0, var1, etc.</emphasis>
				user variables in order to be further used by
				<emphasis>
					<trademark>DocumentBurster</trademark>
					.
				</emphasis>
			</para>
			<para>
				This sample script is demonstrating how to connect to an HSQLDB
				database, however
				you can modify the connection details to point to
				an:
				<itemizedlist>
					<listitem>
						Oracle database
					</listitem>
					<listitem>
						Microsoft SQL Server, Microsoft Access or Microsoft
						FoxPro database
					</listitem>
					<listitem>
						IBM DB2 or IBM AS/400 database
					</listitem>
					<listitem>
						PostgreSQL, MySQL, SQLite, Apache Derby or
						FireBird
						database
					</listitem>
					<listitem>
						Teradata database
					</listitem>
				</itemizedlist>
			</para>
			<important>
				<para>
					In order for this script to work it is mandatory to copy the
					correct
					JDBC driver jar file (corresponding to your database) into the
					existing
					<filename class='directory'>lib/burst</filename>
					folder.
				</para>
			</important>
			<important>
				<para>
					In the following script it is required to change the SQL query
					to meet
					your
					own need.
					In order to avoid sending confidential
					information to
					the
					wrong
					employee/customer check carefully that your
					customized SQL
					query is
					correct and it is
					properly returning the
					unique
					details for
					the appropriate employee or
					customer.
				</para>
			</important>
			<para>
				The following code should be self explanatory
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/fetch_distribution_details_from_database.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>
		</section>

		<section id="fetch_distribution_details_from_csv_file.groovy">
			<title>fetch_distribution_details_from_csv_file.groovy</title>
			<para>
				<emphasis role="bold">Fetch Bursting and Distribution Details from
					an External
					(CSV) File
				</emphasis>
			</para>
			<para>
				Using this sample script,
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				can fetch the
				bursting and distribution meta-data details from an
				external (CSV) file. Once fetched, the details are populated into
				the
				<emphasis>var0, var1, etc.</emphasis>
				user variables in order to be further used by
				<emphasis>
					<trademark>DocumentBurster</trademark>
					.
				</emphasis>
				This script is reading the information
				from a CSV
				file, however
				you can
				modify the script to parse and read other plain
				text files
				which have
				a more
				custom format.
			</para>
			<para>
				Following is a sample with how this script is expecting
				the CSV
				file
			</para>
			<para>
				<emphasis role="bold">
					<filename>employee.csv</filename>
				</emphasis>
				>
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/employee-csv.png" format="PNG" />
					</imageobject>
				</mediaobject>
			</para>
			<para>
				The first column from the file is the employee identifier. The
				script is using
				this column to find the row which contains the
				details for each employee. Following
				is the code which is doing this
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy"><![CDATA[
					/*The burst token is used as a key to identify the
					details of the	appropriate employee or customer*/
					if (employeeRow[0]== token)
					{

					    ...

					}
				]]></programlisting>
			</para>
			<para>
				If you have a file with a different structure then the script
				should
				be modified accordingly.
			</para>
			<important>
				<para>
					Most probably you will modify this script
					accordingly to your
					own custom file format.
					In order to avoid sending confidential
					information to the wrong employee/
					customer check carefully that
					your customized code is correct and it is
					properly returning the
					unique details for the appropriate employee
					or customer.
				</para>
			</important>
			<para>
				The following code should be self explanatory
			</para>
			<para>
				<programlisting language="Java" htmllanguage="groovy">
					<xi:include
						href="../../../../../../burst/src/main/external-resources/template/scripts/burst/samples/fetch_distribution_details_from_csv_file.groovy"
						parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</programlisting>
			</para>
		</section>
	</section>

	<section>
		<title>Further Reading</title>
		<itemizedlist>
			<listitem>
				<ulink url="http://groovy.codehaus.org/">
					Groovy documentation
				</ulink>
				- general Groovy docs which will
				help for writing better
				<emphasis>
					<trademark>DocumentBurster</trademark>
				</emphasis>
				scripts.
			</listitem>
			<listitem>
				<ulink url="http://ant.apache.org/manual/tasksoverview.html">
					Ant documentation
				</ulink>
				- In case there is a need to
				<emphasis>copy, mkdir, move, delete</emphasis>
				files and
				folders.
				<citetitle>Ant</citetitle>
				can also be used for sending emails from within scripts
				or to FTP
				and
				SCP files using SSH.
			</listitem>
			<listitem>
				<ulink url="http://groovy.codehaus.org/Using+Ant+from+Groovy">
					AntBuilder documentation
				</ulink>
				- Using Ant from Groovy.
			</listitem>
			<listitem>
				<ulink url="http://commons.apache.org/vfs/filesystems.html">
					Commons VFS documentation
				</ulink>
				- WebDAV scripting, in case there is a need to upload
				reports to
				Microsoft SharePoint or to other portal product.
				Commons VFS can also
				be scripted to copy reports to a network shared drive
				or to upload
				the reports to FTP and SFTP servers.
			</listitem>
		</itemizedlist>
	</section>
</chapter>