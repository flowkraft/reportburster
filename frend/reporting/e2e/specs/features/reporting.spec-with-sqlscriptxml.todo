Of course. Based on your requirements, here is a pragmatic approach to add meaningful end-to-end tests for the new SQL, Script, and XML data source types.

This plan involves:

Updating the configureAndRunReportGeneration helper function to support the new data source types and their unique configurations (like parameters and the "View Data" feature).
Adding five new test cases to reporting.spec.ts that cover the core functionality for XML, SQL (with and without parameters), and Script (with and without parameters).
1. Update configureAndRunReportGeneration function
First, you need to enhance the helper function in reporting.spec.ts to handle the new data source types.

File: reporting.spec.ts



// ...existing code...
function configureAndRunReportGeneration(
  ft: FluentTester,
  params: {
    dataSourceType: 'CSV' | 'TSV' | 'Excel' | 'Fixed-Width' | 'XML' | 'SQL' | 'Script';
    dataSourceFilePath?: string; // Optional for SQL/Script
    outputType: string;
    outputExtension: string;
    templateConfig: {
      useHtmlContent: boolean;
      templatePath?: string;
      templateFileName?: string;
    };
    dataSourceConfig?: {
      fixedWidthColumnDefinitions?: string;
      xmlRepeatingNodeXPath?: string;
      sqlQuery?: string;
      groovyScript?: string;
      reportParameters?: { id: string; value: string }[];
      testViewData?: boolean;
    };
  },
): FluentTester {
  // Configure reporting settings
  ft = ft
// ...existing code...
    .click('#leftMenuReportingSettings')
    .waitOnElementToBecomeVisible('#dsTypes');

  // Set data source type based on type parameter
  switch (params.dataSourceType) {
    case 'Excel':
      ft = ft.dropDownSelectOptionHavingValue('#dsTypes', 'ds.excelfile');
      break;
    case 'TSV':
      ft = ft.dropDownSelectOptionHavingValue('#dsTypes', 'ds.tsvfile');
      break;
    case 'Fixed-Width':
// ...existing code...
          params.dataSourceConfig.fixedWidthColumnDefinitions,
        );
      }
      break;
    case 'XML':
      ft = ft.dropDownSelectOptionHavingValue('#dsTypes', 'ds.xmlfile');
      if (params.dataSourceConfig?.xmlRepeatingNodeXPath) {
        ft = ft.setValue(
          '#xmlRepeatingNodeXPath',
          params.dataSourceConfig.xmlRepeatingNodeXPath,
        );
      }
      break;
    case 'SQL':
      ft = ft.dropDownSelectOptionHavingValue('#dsTypes', 'ds.sqlquery');
      if (params.dataSourceConfig?.sqlQuery) {
        ft = ft
          .waitOnElementToBecomeVisible('#sqlQueryEditor')
          .setCodeJarContent('#sqlQueryEditor', params.dataSourceConfig.sqlQuery);
      }
      break;
    case 'Script':
      ft = ft.dropDownSelectOptionHavingValue('#dsTypes', 'ds.scriptfile');
      if (params.dataSourceConfig?.groovyScript) {
        ft = ft
          .waitOnElementToBecomeVisible('#groovyScriptEditor')
          .setCodeJarContent(
            '#groovyScriptEditor',
            params.dataSourceConfig.groovyScript,
          );
      }
      break;
    // CSV is default, no need for explicit case
  }

  // Configure output type and template
  ft = ft
// ...existing code...
    //  params.templateConfig.templateFileName,
    //);
  }

  // Run report generation
  ft = ft
    //.waitOnElementWithTextToBecomeVisible('Saved')
    .sleep(Constants.DELAY_ONE_SECOND)
    .gotoReportGenerationScreen()
    .click('#selectMailMergeClassicReport')
    .waitOnElementToBecomeVisible(
      `span.ng-option-label:has-text("Payslips (input ${params.dataSourceType})")`,
    )
    .click(
      `span.ng-option-label:has-text("Payslips (input ${params.dataSourceType})")`,
    );

  // Handle report parameters if they are provided
  if (params.dataSourceConfig?.reportParameters) {
    ft = ft.waitOnElementToBecomeVisible('#reportParamsForm');
    for (const param of params.dataSourceConfig.reportParameters) {
      ft = ft.setValue(`#${param.id}`, param.value);
    }
  }

  // Test "View Data" for SQL and Script if requested
  if (params.dataSourceConfig?.testViewData) {
    ft = ft
      .waitOnElementToBecomeVisible('#btnViewData')
      .click('#btnViewData')
      .waitOnElementToBecomeVisible('div.tabulator-row') // Wait for data to load
      .elementShouldContainText('div.tabulator-row', 'John Doe'); // Assert data
  }

  // Handle input file for file-based sources
  if (params.dataSourceFilePath) {
    ft = ft
      .waitOnElementToBecomeVisible('#browseMailMergeClassicReportInputFile')
      .setInputFiles(
        '#reportingFileUploadInput',
        slash(
          path.resolve(
            process.env.PORTABLE_EXECUTABLE_DIR + params.dataSourceFilePath,
          ),
        ),
      );
  }

  ft = ft
    .click('#btnGenerateReports')
    .clickYesDoThis()
    .waitOnProcessingToStart(Constants.CHECK_PROCESSING_JAVA)
// ...existing code...


------------------------------

2. Add New Test Cases
Now, add the following new test cases to reporting.spec.ts. These tests use the updated helper function to cover XML, SQL, and Script scenarios.

File: reporting.spec.ts

// ...existing code...
      ft = ConfTemplatesTestHelper.deleteTemplate(ft, 'payslips');

      return ft;
    },
  );

  electronBeforeAfterAllTest(
    'should correctly generate PDF from HTML template using XML as datasource (xml2pdf_from_html_template)',
    async ({ beforeAfterEach: firstPage }) => {
      test.setTimeout(Constants.DELAY_FIVE_THOUSANDS_SECONDS);
      let ft = new FluentTester(firstPage);
      ft = ConfTemplatesTestHelper.createNewTemplate(ft, 'Payslips', 'enableMailMergeCapability');

      ft = configureAndRunReportGeneration(ft, {
        dataSourceType: 'XML',
        dataSourceFilePath: '/samples/reports/payslips/Payslips.xml',
        dataSourceConfig: {
          xmlRepeatingNodeXPath: '/payslips/payslip',
        },
        outputType: 'output.pdf',
        outputExtension: 'pdf',
        templateConfig: {
          useHtmlContent: true,
          templatePath: '/samples/reports/payslips/payslips-template.html',
        },
      });

      ft = ConfTemplatesTestHelper.deleteTemplate(ft, 'payslips');
      return ft;
    },
  );

  electronBeforeAfterAllTest(
    'should correctly generate PDF from HTML template using SQL as datasource (sql2pdf_from_html_template)',
    async ({ beforeAfterEach: firstPage }) => {
      test.setTimeout(Constants.DELAY_FIVE_THOUSANDS_SECONDS);
      let ft = new FluentTester(firstPage);
      ft = ConfTemplatesTestHelper.createNewTemplate(ft, 'Payslips', 'enableMailMergeCapability');

      ft = configureAndRunReportGeneration(ft, {
        dataSourceType: 'SQL',
        dataSourceConfig: {
          sqlQuery: `SELECT 'John Doe' AS Name, '1000' AS NetPay, 'john.doe@email.com' AS Email UNION ALL SELECT 'Jane Smith' AS Name, '1200' AS NetPay, 'jane.smith@email.com' AS Email`,
          testViewData: true,
        },
        outputType: 'output.pdf',
        outputExtension: 'pdf',
        templateConfig: {
          useHtmlContent: true,
          templatePath: '/samples/reports/payslips/payslips-template.html',
        },
      });

      ft = ConfTemplatesTestHelper.deleteTemplate(ft, 'payslips');
      return ft;
    },
  );

  electronBeforeAfterAllTest(
    'should correctly generate PDF from HTML template using SQL with parameters (sql_with_params_2_pdf)',
    async ({ beforeAfterEach: firstPage }) => {
      test.setTimeout(Constants.DELAY_FIVE_THOUSANDS_SECONDS);
      let ft = new FluentTester(firstPage);
      ft = ConfTemplatesTestHelper.createNewTemplate(ft, 'Payslips', 'enableMailMergeCapability');

      ft = configureAndRunReportGeneration(ft, {
        dataSourceType: 'SQL',
        dataSourceConfig: {
          sqlQuery: `SELECT 'John Doe' AS Name, '1000' AS NetPay, 'john.doe@email.com' AS Email WHERE 'Finance' = '\${department}'`,
          reportParameters: [{ id: 'param_department', value: 'Finance' }],
          testViewData: true,
        },
        outputType: 'output.pdf',
        outputExtension: 'pdf',
        templateConfig: {
          useHtmlContent: true,
          templatePath: '/samples/reports/payslips/payslips-template.html',
        },
      });

      ft = ConfTemplatesTestHelper.deleteTemplate(ft, 'payslips');
      return ft;
    },
  );

  electronBeforeAfterAllTest(
    'should correctly generate PDF from HTML template using Script as datasource (script2pdf_from_html_template)',
    async ({ beforeAfterEach: firstPage }) => {
      test.setTimeout(Constants.DELAY_FIVE_THOUSANDS_SECONDS);
      let ft = new FluentTester(firstPage);
      ft = ConfTemplatesTestHelper.createNewTemplate(ft, 'Payslips', 'enableMailMergeCapability');

      ft = configureAndRunReportGeneration(ft, {
        dataSourceType: 'Script',
        dataSourceConfig: {
          groovyScript: `return [['Name', 'NetPay', 'Email'], ['John Doe', '1000', 'john.doe@email.com'], ['Jane Smith', '1200', 'jane.smith@email.com']]`,
          testViewData: true,
        },
        outputType: 'output.pdf',
        outputExtension: 'pdf',
        templateConfig: {
          useHtmlContent: true,
          templatePath: '/samples/reports/payslips/payslips-template.html',
        },
      });

      ft = ConfTemplatesTestHelper.deleteTemplate(ft, 'payslips');
      return ft;
    },
  );

  electronBeforeAfterAllTest(
    'should correctly generate PDF from HTML template using Script with parameters (script_with_params_2_pdf)',
    async ({ beforeAfterEach: firstPage }) => {
      test.setTimeout(Constants.DELAY_FIVE_THOUSANDS_SECONDS);
      let ft = new FluentTester(firstPage);
      ft = ConfTemplatesTestHelper.createNewTemplate(ft, 'Payslips', 'enableMailMergeCapability');

      ft = configureAndRunReportGeneration(ft, {
        dataSourceType: 'Script',
        dataSourceConfig: {
          groovyScript: `if (params.department == 'Finance') { return [['Name', 'NetPay', 'Email'], ['John Doe', '1000', 'john.doe@email.com']] } else { return [['Name', 'NetPay', 'Email']] }`,
          reportParameters: [{ id: 'param_department', value: 'Finance' }],
          testViewData: true,
        },
        outputType: 'output.pdf',
        outputExtension: 'pdf',
        templateConfig: {
          useHtmlContent: true,
          templatePath: '/samples/reports/payslips/payslips-template.html',
        },
      });

      ft = ConfTemplatesTestHelper.deleteTemplate(ft, 'payslips');
      return ft;
    },
  );

*/
});

function configureAndRunReportGeneration(
// ... (rest of the